<Type Name="IBuildEngine2" FullName="Microsoft.Build.Framework.IBuildEngine2">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e869e5cd9ef68469aa3a34aafa3cf44e76bfe609" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86350404" /></Metadata><TypeSignature Language="C#" Value="public interface IBuildEngine2 : Microsoft.Build.Framework.IBuildEngine" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBuildEngine2 implements class Microsoft.Build.Framework.IBuildEngine" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Framework.IBuildEngine2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBuildEngine2&#xA;Implements IBuildEngine" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBuildEngine2 : Microsoft::Build::Framework::IBuildEngine" />
  <TypeSignature Language="F#" Value="type IBuildEngine2 = interface&#xA;    interface IBuildEngine" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Framework</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.IBuildEngine</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Diese Schnittstelle erweitert IBuildEngine, um eine Methode bereitzustellen, die das parallele Erstellen von Projektdateien ermöglicht.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Build.Framework.IBuildEngine2> erweitert <xref:Microsoft.Build.Framework.IBuildEngine> und ermöglicht das parallele Erstellen mehrerer Projektdateien auf Systemen, die mehrere Prozessoren oder Prozessoren mit mehreren Kernen enthalten.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildProjectFile">
      <MemberSignature Language="C#" Value="public bool BuildProjectFile (string projectFileName, string[] targetNames, System.Collections.IDictionary globalProperties, System.Collections.IDictionary targetOutputs, string toolsVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BuildProjectFile(string projectFileName, string[] targetNames, class System.Collections.IDictionary globalProperties, class System.Collections.IDictionary targetOutputs, string toolsVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildProjectFile (projectFileName As String, targetNames As String(), globalProperties As IDictionary, targetOutputs As IDictionary, toolsVersion As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BuildProjectFile(System::String ^ projectFileName, cli::array &lt;System::String ^&gt; ^ targetNames, System::Collections::IDictionary ^ globalProperties, System::Collections::IDictionary ^ targetOutputs, System::String ^ toolsVersion);" />
      <MemberSignature Language="F#" Value="abstract member BuildProjectFile : string * string[] * System.Collections.IDictionary * System.Collections.IDictionary * string -&gt; bool" Usage="iBuildEngine2.BuildProjectFile (projectFileName, targetNames, globalProperties, targetOutputs, toolsVersion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileName" Type="System.String" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary" />
        <Parameter Name="targetOutputs" Type="System.Collections.IDictionary" />
        <Parameter Name="toolsVersion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="projectFileName">Das zu erstellende Projekt.</param>
        <param name="targetNames">Die Ziele im zu erstellenden Projekt (können NULL sein).</param>
        <param name="globalProperties">Eine Hash Tabelle mit zusätzlichen globalen Eigenschaften, die auf das untergeordnete Projekt angewendet werden sollen (kann NULL sein).  Der Schlüssel und der Wert müssen Zeichen folgen sein.</param>
        <param name="targetOutputs">Die Ausgaben der einzelnen angegebenen Ziele (können NULL sein).</param>
        <param name="toolsVersion">Eine von der Engine erkannte Toolsversion, die während dieses Builds verwendet wird (kann NULL sein).</param>
        <summary>Diese Methode ermöglicht es Tasks, einen Build für eine bestimmte Projektdatei zu initiieren. Wenn der Build erfolgreich ist, werden die Ausgaben (sofern vorhanden) der angegebenen Ziele zurückgegeben.</summary>
        <returns>true, wenn der Build erfolgreich war.</returns>
        <remarks>1) Es ist zulässig, NULL sowohl für " <c>targetNames</c> " als auch für " <c>TargetOutputs</c> 2" zu übergeben. wenn keine Ziele angegeben werden, werden die Standard Ziele erstellt 3) die Ziel Ausgaben werden als <c>ITaskItem</c> -Arrays zurückgegeben, die nach Zielname indiziert sind</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildProjectFilesInParallel">
      <MemberSignature Language="C#" Value="public bool BuildProjectFilesInParallel (string[] projectFileNames, string[] targetNames, System.Collections.IDictionary[] globalProperties, System.Collections.IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BuildProjectFilesInParallel(string[] projectFileNames, string[] targetNames, class System.Collections.IDictionary[] globalProperties, class System.Collections.IDictionary[] targetOutputsPerProject, string[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.IDictionary[],System.String[],System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildProjectFilesInParallel (projectFileNames As String(), targetNames As String(), globalProperties As IDictionary(), targetOutputsPerProject As IDictionary(), toolsVersion As String(), useResultsCache As Boolean, unloadProjectsOnCompletion As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BuildProjectFilesInParallel(cli::array &lt;System::String ^&gt; ^ projectFileNames, cli::array &lt;System::String ^&gt; ^ targetNames, cli::array &lt;System::Collections::IDictionary ^&gt; ^ globalProperties, cli::array &lt;System::Collections::IDictionary ^&gt; ^ targetOutputsPerProject, cli::array &lt;System::String ^&gt; ^ toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);" />
      <MemberSignature Language="F#" Value="abstract member BuildProjectFilesInParallel : string[] * string[] * System.Collections.IDictionary[] * System.Collections.IDictionary[] * string[] * bool * bool -&gt; bool" Usage="iBuildEngine2.BuildProjectFilesInParallel (projectFileNames, targetNames, globalProperties, targetOutputsPerProject, toolsVersion, useResultsCache, unloadProjectsOnCompletion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileNames" Type="System.String[]" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary[]" />
        <Parameter Name="targetOutputsPerProject" Type="System.Collections.IDictionary[]" />
        <Parameter Name="toolsVersion" Type="System.String[]" />
        <Parameter Name="useResultsCache" Type="System.Boolean" />
        <Parameter Name="unloadProjectsOnCompletion" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="projectFileNames">Das zu erstellende Projekt.</param>
        <param name="targetNames">Die Ziele im zu erstellenden Projekt (können NULL sein).</param>
        <param name="globalProperties">Ein Array von Hash Tabellen zusätzlicher globaler Eigenschaften, die auf das untergeordnete Projekt angewendet werden sollen (Array Einträge können NULL sein). Der Schlüssel und der Wert in der Hash Tabelle sollten beide Zeichen folgen sein.</param>
        <param name="targetOutputsPerProject">Die Ausgaben der einzelnen angegebenen Ziele (können NULL sein).</param>
        <param name="toolsVersion">Eine von der Engine erkannte Toolsversion, die während dieses Builds verwendet wird (kann NULL sein).</param>
        <param name="useResultsCache">True gibt an, dass der Vorgang nur ausgeführt wird, wenn der Cache das Ergebnis nicht bereits enthält. Nach dem Vorgang wird das Ergebnis im Cache gespeichert.</param>
        <param name="unloadProjectsOnCompletion">True gibt an, dass das Projekt entladen wird, sobald der Vorgang abgeschlossen ist.</param>
        <summary>Diese Methode ermöglicht es Tasks, einen Build für eine bestimmte Projektdatei zu initiieren. Wenn der Build erfolgreich ist, werden die Ausgaben (sofern vorhanden) der angegebenen Ziele zurückgegeben.</summary>
        <returns>true, wenn der Build erfolgreich war.</returns>
        <remarks>1) Es ist zulässig, NULL sowohl für " <c>targetNames</c> " als auch für " <c>TargetOutputs</c> 2" zu übergeben. wenn keine Ziele angegeben werden, werden die Standard Ziele erstellt 3) die Ziel Ausgaben werden als <c>ITaskItem</c> -Arrays zurückgegeben, die nach Zielname indiziert sind</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunningMultipleNodes">
      <MemberSignature Language="C#" Value="public bool IsRunningMultipleNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunningMultipleNodes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunningMultipleNodes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunningMultipleNodes { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunningMultipleNodes : bool" Usage="Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft ermöglicht es einer Aufgabe, abzufragen, ob das System im Einzel Prozess Modus oder im multiprozessmodus ausgeführt wird.
Der Einzel Prozess Modus (isrunningmultiplenodes = false) ist der Ort, an dem die Engine mit der Anzahl der CPUs = 1 initialisiert wird und es sich bei der Engine nicht um ein untergeordnetes Modul handelt.
Die Engine befindet sich im multiprozessmodus (isrunningmultiplenodes = true), wenn die Engine mit einer Reihe von CPUs 1 initialisiert wird &gt; oder wenn es sich um ein untergeordnetes Modul handelt.</summary>
        <value><see langword="true" />, wenn das System im Multiprozessormodus ausgeführt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Build-Engine befindet sich im Einzel Prozessor Modus ( `IsRunningMultipleNodes`  =  `false` ), wenn Sie mit der Anzahl der CPUs, die gleich 1 ist, initialisiert wird und es sich bei der Build-Engine nicht um ein untergeordnetes Modul handelt. Die Build-Engine befindet sich im multiprozessormodus ( `IsRunningMultipleNodes`  =  `true` ), wenn Sie mit einer Anzahl von CPUs größer als 1 initialisiert wird oder wenn es sich bei der Build-Engine um ein untergeordnetes Modul handelt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

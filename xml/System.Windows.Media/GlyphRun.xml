<Type Name="GlyphRun" FullName="System.Windows.Media.GlyphRun">
  <Metadata><Meta Name="ms.openlocfilehash" Value="222c6c0099faecc5ec2dff479c39db2dd6944b98" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83501869" /></Metadata><TypeSignature Language="C#" Value="public class GlyphRun : System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GlyphRun extends System.Object implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.GlyphRun" />
  <TypeSignature Language="VB.NET" Value="Public Class GlyphRun&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class GlyphRun : System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type GlyphRun = class&#xA;    interface ISupportInitialize" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type GlyphRun = class&#xA;    interface DUCE.IResource&#xA;    interface ISupportInitialize" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt eine Sequenz von Symbolen aus einer einzelnen Schriftart einer einzelnen Schriftfamilie mit einer einzelnen Größe und einem einzelnen Renderingstil dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Windows.Media.GlyphRun>-Objekt enthält Schriftart Details wie Glyphe-Indizes und einzelne Symbol Positionen. Darüber hinaus enthält das <xref:System.Windows.Media.GlyphRun>-Objekt die ursprünglichen Unicode-Code Punkte, aus denen der Testlauf generiert wurde, und Zeichen zu Glyphe-Puffer Offset-Zuordnungsinformationen sowie Zeichen-und pro-Glyphe-Flags.  
  
 Das <xref:System.Windows.Documents.Glyphs> Element stellt die Ausgabe eines <xref:System.Windows.Media.GlyphRun> in XAML dar. Die folgende Markup Syntax wird verwendet, um das <xref:System.Windows.Documents.Glyphs>-Element zu beschreiben.  
  
 [!code-xaml[GlyphsOvwSample1#1](~/samples/snippets/csharp/VS_Snippets_Wpf/GlyphsOvwSample1/CS/default.xaml#1)]   
  
 Jedes Symbol definiert Metriken, die angeben, wie Sie mit anderen <xref:System.Windows.Documents.Glyphs>ausgerichtet werden. Die folgende Abbildung definiert die verschiedenen typografischen Eigenschaften von zwei unterschiedlichen Symbolen.  
  
 ![Diagraph von Glyphe-Messungen](~/add/media/glyph-example.png "Diagramm der Symbol-Maßangaben")  
Verschiedene typografische Qualitäten von zwei verschiedenen Symbol Zeichen  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlyphRun ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GlyphRun();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Obsolete("Use the PixelsPerDip override", false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlyphRun (float pixelsPerDip);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 pixelsPerDip) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.#ctor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pixelsPerDip As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GlyphRun(float pixelsPerDip);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.GlyphRun : single -&gt; System.Windows.Media.GlyphRun" Usage="new System.Windows.Media.GlyphRun pixelsPerDip" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pixelsPerDip" Type="System.Single" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="pixelsPerDip">Der Wert für Pixel pro dichteunabhängigem Pixel, der dem Skalierungsfaktor entspricht. Wenn der DPI-Wert für einen Bildschirm z.B. 120 beträgt (oder 1,25, da 120/96 = 1,25), werden 1,25 Pixel pro dichteunabhängigem Pixel gezeichnet. DIP ist die von WPF verwendete Maßeinheit, um einen von Geräteauflösung und DPI-Werten unabhängigen Wert anzugeben.</param>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlyphRun (System.Windows.Media.GlyphTypeface glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, System.Collections.Generic.IList&lt;ushort&gt; glyphIndices, System.Windows.Point baselineOrigin, System.Collections.Generic.IList&lt;double&gt; advanceWidths, System.Collections.Generic.IList&lt;System.Windows.Point&gt; glyphOffsets, System.Collections.Generic.IList&lt;char&gt; characters, string deviceFontName, System.Collections.Generic.IList&lt;ushort&gt; clusterMap, System.Collections.Generic.IList&lt;bool&gt; caretStops, System.Windows.Markup.XmlLanguage language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.GlyphTypeface glyphTypeface, int32 bidiLevel, bool isSideways, float64 renderingEmSize, class System.Collections.Generic.IList`1&lt;unsigned int16&gt; glyphIndices, valuetype System.Windows.Point baselineOrigin, class System.Collections.Generic.IList`1&lt;float64&gt; advanceWidths, class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; glyphOffsets, class System.Collections.Generic.IList`1&lt;char&gt; characters, string deviceFontName, class System.Collections.Generic.IList`1&lt;unsigned int16&gt; clusterMap, class System.Collections.Generic.IList`1&lt;bool&gt; caretStops, class System.Windows.Markup.XmlLanguage language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.#ctor(System.Windows.Media.GlyphTypeface,System.Int32,System.Boolean,System.Double,System.Collections.Generic.IList{System.UInt16},System.Windows.Point,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Char},System.String,System.Collections.Generic.IList{System.UInt16},System.Collections.Generic.IList{System.Boolean},System.Windows.Markup.XmlLanguage)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (glyphTypeface As GlyphTypeface, bidiLevel As Integer, isSideways As Boolean, renderingEmSize As Double, glyphIndices As IList(Of UShort), baselineOrigin As Point, advanceWidths As IList(Of Double), glyphOffsets As IList(Of Point), characters As IList(Of Char), deviceFontName As String, clusterMap As IList(Of UShort), caretStops As IList(Of Boolean), language As XmlLanguage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GlyphRun(System::Windows::Media::GlyphTypeface ^ glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, System::Collections::Generic::IList&lt;System::UInt16&gt; ^ glyphIndices, System::Windows::Point baselineOrigin, System::Collections::Generic::IList&lt;double&gt; ^ advanceWidths, System::Collections::Generic::IList&lt;System::Windows::Point&gt; ^ glyphOffsets, System::Collections::Generic::IList&lt;char&gt; ^ characters, System::String ^ deviceFontName, System::Collections::Generic::IList&lt;System::UInt16&gt; ^ clusterMap, System::Collections::Generic::IList&lt;bool&gt; ^ caretStops, System::Windows::Markup::XmlLanguage ^ language);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.GlyphRun : System.Windows.Media.GlyphTypeface * int * bool * double * System.Collections.Generic.IList&lt;uint16&gt; * System.Windows.Point * System.Collections.Generic.IList&lt;double&gt; * System.Collections.Generic.IList&lt;System.Windows.Point&gt; * System.Collections.Generic.IList&lt;char&gt; * string * System.Collections.Generic.IList&lt;uint16&gt; * System.Collections.Generic.IList&lt;bool&gt; * System.Windows.Markup.XmlLanguage -&gt; System.Windows.Media.GlyphRun" Usage="new System.Windows.Media.GlyphRun (glyphTypeface, bidiLevel, isSideways, renderingEmSize, glyphIndices, baselineOrigin, advanceWidths, glyphOffsets, characters, deviceFontName, clusterMap, caretStops, language)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Obsolete("Use the PixelsPerDip override", false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="glyphTypeface" Type="System.Windows.Media.GlyphTypeface" />
        <Parameter Name="bidiLevel" Type="System.Int32" />
        <Parameter Name="isSideways" Type="System.Boolean" />
        <Parameter Name="renderingEmSize" Type="System.Double" />
        <Parameter Name="glyphIndices" Type="System.Collections.Generic.IList&lt;System.UInt16&gt;" />
        <Parameter Name="baselineOrigin" Type="System.Windows.Point" />
        <Parameter Name="advanceWidths" Type="System.Collections.Generic.IList&lt;System.Double&gt;" />
        <Parameter Name="glyphOffsets" Type="System.Collections.Generic.IList&lt;System.Windows.Point&gt;" />
        <Parameter Name="characters" Type="System.Collections.Generic.IList&lt;System.Char&gt;" />
        <Parameter Name="deviceFontName" Type="System.String" />
        <Parameter Name="clusterMap" Type="System.Collections.Generic.IList&lt;System.UInt16&gt;" />
        <Parameter Name="caretStops" Type="System.Collections.Generic.IList&lt;System.Boolean&gt;" />
        <Parameter Name="language" Type="System.Windows.Markup.XmlLanguage" />
      </Parameters>
      <Docs>
        <param name="glyphTypeface">Ein Wert vom Typ <see cref="T:System.Windows.Media.GlyphTypeface" />.</param>
        <param name="bidiLevel">Ein Wert vom Typ <see cref="T:System.Int32" />.</param>
        <param name="isSideways">Ein Wert vom Typ <see cref="T:System.Boolean" />.</param>
        <param name="renderingEmSize">Ein Wert vom Typ <see cref="T:System.Double" />.</param>
        <param name="glyphIndices">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="baselineOrigin">Ein Wert vom Typ <see cref="T:System.Windows.Point" />.</param>
        <param name="advanceWidths">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="glyphOffsets">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="characters">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="deviceFontName">Ein Wert vom Typ <see cref="T:System.String" />.</param>
        <param name="clusterMap">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="caretStops">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="language">Ein Wert vom Typ <see cref="T:System.Windows.Markup.XmlLanguage" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Media.GlyphRun" />-Klasse durch Angabe der Eigenschaften der Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GlyphRun (System.Windows.Media.GlyphTypeface glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, float pixelsPerDip, System.Collections.Generic.IList&lt;ushort&gt; glyphIndices, System.Windows.Point baselineOrigin, System.Collections.Generic.IList&lt;double&gt; advanceWidths, System.Collections.Generic.IList&lt;System.Windows.Point&gt; glyphOffsets, System.Collections.Generic.IList&lt;char&gt; characters, string deviceFontName, System.Collections.Generic.IList&lt;ushort&gt; clusterMap, System.Collections.Generic.IList&lt;bool&gt; caretStops, System.Windows.Markup.XmlLanguage language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.GlyphTypeface glyphTypeface, int32 bidiLevel, bool isSideways, float64 renderingEmSize, float32 pixelsPerDip, class System.Collections.Generic.IList`1&lt;unsigned int16&gt; glyphIndices, valuetype System.Windows.Point baselineOrigin, class System.Collections.Generic.IList`1&lt;float64&gt; advanceWidths, class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; glyphOffsets, class System.Collections.Generic.IList`1&lt;char&gt; characters, string deviceFontName, class System.Collections.Generic.IList`1&lt;unsigned int16&gt; clusterMap, class System.Collections.Generic.IList`1&lt;bool&gt; caretStops, class System.Windows.Markup.XmlLanguage language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.#ctor(System.Windows.Media.GlyphTypeface,System.Int32,System.Boolean,System.Double,System.Single,System.Collections.Generic.IList{System.UInt16},System.Windows.Point,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.IList{System.Char},System.String,System.Collections.Generic.IList{System.UInt16},System.Collections.Generic.IList{System.Boolean},System.Windows.Markup.XmlLanguage)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (glyphTypeface As GlyphTypeface, bidiLevel As Integer, isSideways As Boolean, renderingEmSize As Double, pixelsPerDip As Single, glyphIndices As IList(Of UShort), baselineOrigin As Point, advanceWidths As IList(Of Double), glyphOffsets As IList(Of Point), characters As IList(Of Char), deviceFontName As String, clusterMap As IList(Of UShort), caretStops As IList(Of Boolean), language As XmlLanguage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GlyphRun(System::Windows::Media::GlyphTypeface ^ glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, float pixelsPerDip, System::Collections::Generic::IList&lt;System::UInt16&gt; ^ glyphIndices, System::Windows::Point baselineOrigin, System::Collections::Generic::IList&lt;double&gt; ^ advanceWidths, System::Collections::Generic::IList&lt;System::Windows::Point&gt; ^ glyphOffsets, System::Collections::Generic::IList&lt;char&gt; ^ characters, System::String ^ deviceFontName, System::Collections::Generic::IList&lt;System::UInt16&gt; ^ clusterMap, System::Collections::Generic::IList&lt;bool&gt; ^ caretStops, System::Windows::Markup::XmlLanguage ^ language);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.GlyphRun : System.Windows.Media.GlyphTypeface * int * bool * double * single * System.Collections.Generic.IList&lt;uint16&gt; * System.Windows.Point * System.Collections.Generic.IList&lt;double&gt; * System.Collections.Generic.IList&lt;System.Windows.Point&gt; * System.Collections.Generic.IList&lt;char&gt; * string * System.Collections.Generic.IList&lt;uint16&gt; * System.Collections.Generic.IList&lt;bool&gt; * System.Windows.Markup.XmlLanguage -&gt; System.Windows.Media.GlyphRun" Usage="new System.Windows.Media.GlyphRun (glyphTypeface, bidiLevel, isSideways, renderingEmSize, pixelsPerDip, glyphIndices, baselineOrigin, advanceWidths, glyphOffsets, characters, deviceFontName, clusterMap, caretStops, language)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="glyphTypeface" Type="System.Windows.Media.GlyphTypeface" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="bidiLevel" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="isSideways" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="renderingEmSize" Type="System.Double" Index="3" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="pixelsPerDip" Type="System.Single" Index="4" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="glyphIndices" Type="System.Collections.Generic.IList&lt;System.UInt16&gt;" Index="5" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="baselineOrigin" Type="System.Windows.Point" Index="6" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="advanceWidths" Type="System.Collections.Generic.IList&lt;System.Double&gt;" Index="7" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="glyphOffsets" Type="System.Collections.Generic.IList&lt;System.Windows.Point&gt;" Index="8" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="characters" Type="System.Collections.Generic.IList&lt;System.Char&gt;" Index="9" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="deviceFontName" Type="System.String" Index="10" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="clusterMap" Type="System.Collections.Generic.IList&lt;System.UInt16&gt;" Index="11" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="caretStops" Type="System.Collections.Generic.IList&lt;System.Boolean&gt;" Index="12" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="language" Type="System.Windows.Markup.XmlLanguage" Index="13" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="glyphTypeface">Ein Wert vom Typ <see cref="T:System.Windows.Media.GlyphTypeface" />.</param>
        <param name="bidiLevel">Ein Wert vom Typ <see cref="T:System.Int32" />.</param>
        <param name="isSideways">Ein Wert vom Typ <see cref="T:System.Boolean" />.</param>
        <param name="renderingEmSize">Ein Wert vom Typ <see cref="T:System.Double" />.</param>
        <param name="pixelsPerDip">Ein Wert vom Typ <see cref="T:System.Double" />.</param>
        <param name="glyphIndices">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="baselineOrigin">Ein Wert vom Typ <see cref="T:System.Windows.Point" />.</param>
        <param name="advanceWidths">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="glyphOffsets">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="characters">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="deviceFontName">Ein Wert vom Typ <see cref="T:System.String" />.</param>
        <param name="clusterMap">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="caretStops">Ein Array des Typs <see cref="T:System.Collections.Generic.IList`1" />.</param>
        <param name="language">Ein Wert vom Typ <see cref="T:System.Windows.Markup.XmlLanguage" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Media.GlyphRun" />-Klasse durch Angabe der Eigenschaften der Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvanceWidths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;double&gt; AdvanceWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;float64&gt; AdvanceWidths" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.AdvanceWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property AdvanceWidths As IList(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;double&gt; ^ AdvanceWidths { System::Collections::Generic::IList&lt;double&gt; ^ get(); void set(System::Collections::Generic::IList&lt;double&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AdvanceWidths : System.Collections.Generic.IList&lt;double&gt; with get, set" Usage="System.Windows.Media.GlyphRun.AdvanceWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.DoubleIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Liste der <see cref="T:System.Double" />-Werte ab, die die Dickten entsprechend den Glyphindizes darstellen, oder legt diese fest.</summary>
        <value>Eine Liste von <see cref="T:System.Double" />-Werten, die die Dickten darstellen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes Element in der Liste der vorab breiten entspricht den von der <xref:System.Windows.Media.GlyphRun.GlyphIndices%2A>-Eigenschaft zurückgegebenen Glyphe-Werten. Der nominale Ursprung des n-ten Symbols während der Ausführung (n > 0) ist der nominale Ursprung<sup>des n-</sup> 1<sup>-</sup> ten Symbols plus der n-1<sup>th</sup> Basis Symbole haben in der Regel eine vorwärts Breite ungleich 0, wohingegen das Kombinieren von Symbolen in der Regel eine vorwärts Breite von 0 (null) aufweist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaselineOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point BaselineOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point BaselineOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.BaselineOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property BaselineOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point BaselineOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.BaselineOrigin : System.Windows.Point with get, set" Usage="System.Windows.Media.GlyphRun.BaselineOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Baselineursprung des <see cref="T:System.Windows.Media.GlyphRun" /> ab oder legt diesen fest.</summary>
        <value>Ein <see cref="T:System.Windows.Point" />-Wert, der den Urspung der Basisline darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BidiLevel">
      <MemberSignature Language="C#" Value="public int BidiLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BidiLevel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.BidiLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property BidiLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BidiLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BidiLevel : int with get, set" Usage="System.Windows.Media.GlyphRun.BidiLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die bidirektionale Schachtelungsebene des <see cref="T:System.Windows.Media.GlyphRun" /> ab oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Int32" />-Wert, der die bidirektionale Schachtelungsebene darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildGeometry">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry BuildGeometry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Geometry BuildGeometry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.BuildGeometry" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildGeometry () As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Geometry ^ BuildGeometry();" />
      <MemberSignature Language="F#" Value="member this.BuildGeometry : unit -&gt; System.Windows.Media.Geometry" Usage="glyphRun.BuildGeometry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Media.Geometry" /> für den <see cref="T:System.Windows.Media.GlyphRun" /> ab.</summary>
        <returns>Die <see cref="T:System.Windows.Media.Geometry" />, die der <see cref="T:System.Windows.Media.GlyphRun" /> entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zurückgegebene <xref:System.Windows.Media.Geometry> enthält die kombinierte Geometrie aller Symbole in der <xref:System.Windows.Media.GlyphRun>. Überlappende Kontur werden durch Ausführen einer booleschen Union-Operation zusammengeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaretStops">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;bool&gt; CaretStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;bool&gt; CaretStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.CaretStops" />
      <MemberSignature Language="VB.NET" Value="Public Property CaretStops As IList(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;bool&gt; ^ CaretStops { System::Collections::Generic::IList&lt;bool&gt; ^ get(); void set(System::Collections::Generic::IList&lt;bool&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CaretStops : System.Collections.Generic.IList&lt;bool&gt; with get, set" Usage="System.Windows.Media.GlyphRun.CaretStops" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.BoolIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Liste der <see cref="T:System.Boolean" />-Werte ab, die bestimmen, ob für jeden UTF16-Codepunkt Caretzeichenstopps im Unicode vorhanden sind, der den <see cref="T:System.Windows.Media.GlyphRun" /> darstellt, oder legt sie fest.</summary>
        <value>Eine Liste der <see cref="T:System.Boolean" />-Werte, die angeben, ob Caretzeichenstopps vorhanden sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert ist `null`, wenn ein Caretzeichen für jeden UTF16-Codepunkt in der Unicode vorhanden ist, die die <xref:System.Windows.Media.GlyphRun>darstellt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;char&gt; Characters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;char&gt; Characters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.Characters" />
      <MemberSignature Language="VB.NET" Value="Public Property Characters As IList(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;char&gt; ^ Characters { System::Collections::Generic::IList&lt;char&gt; ^ get(); void set(System::Collections::Generic::IList&lt;char&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Characters : System.Collections.Generic.IList&lt;char&gt; with get, set" Usage="System.Windows.Media.GlyphRun.Characters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.CharIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Liste der UTF-16-Codepunkte ab, die den Unicode-Inhalt von <see cref="T:System.Windows.Media.GlyphRun" /> darstellen, oder legt die Liste fest.</summary>
        <value>Eine Liste von <see cref="T:System.Char" />-Werten, die den Unicode-Inhalt darstellen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClusterMap">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;ushort&gt; ClusterMap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;unsigned int16&gt; ClusterMap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.ClusterMap" />
      <MemberSignature Language="VB.NET" Value="Public Property ClusterMap As IList(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::UInt16&gt; ^ ClusterMap { System::Collections::Generic::IList&lt;System::UInt16&gt; ^ get(); void set(System::Collections::Generic::IList&lt;System::UInt16&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClusterMap : System.Collections.Generic.IList&lt;uint16&gt; with get, set" Usage="System.Windows.Media.GlyphRun.ClusterMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.UShortIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Liste von <see cref="T:System.UInt16" />-Werten ab, die Zeichen in <see cref="T:System.Windows.Media.GlyphRun" /> zu Glyphindizes zuordnet, oder legt diese fest.</summary>
        <value>Eine Liste von <see cref="T:System.UInt16" />-Werten, die zugeordnete Glyphindizes darstellen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Liste ist ein Eintrag pro Zeichen vorhanden. Jeder Wert in der Liste gibt den Offset des ersten Symbols (dargestellt durch <xref:System.Windows.Media.GlyphRun.GlyphIndices%2A>) zum entsprechenden Zeichen an, dargestellt durch <xref:System.Windows.Media.GlyphRun.Characters%2A>.  
  
 Wenn mehrere Zeichen einem einzelnen Symbol oder einer Symbolgruppe zugeordnet sind, die nicht so aufgeschlüsselt werden kann, dass Sie genau einzelnen Zeichen zugeordnet werden kann, haben die Einträge für alle Zeichen denselben Wert: den Offset des ersten Symbols, das diese Gruppe von Zeichen darstellt.  
  
 Wenn die Liste `null` oder gleich <xref:System.String.Empty>ist, wird eine sequenzielle 1-zu-1-Zuordnung angenommen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeAlignmentBox">
      <MemberSignature Language="C#" Value="public System.Windows.Rect ComputeAlignmentBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect ComputeAlignmentBox() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.ComputeAlignmentBox" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeAlignmentBox () As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Rect ComputeAlignmentBox();" />
      <MemberSignature Language="F#" Value="member this.ComputeAlignmentBox : unit -&gt; System.Windows.Rect" Usage="glyphRun.ComputeAlignmentBox " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das Ausrichtungsfeld für den <see cref="T:System.Windows.Media.GlyphRun" /> ab.</summary>
        <returns>Ein <see cref="T:System.Windows.Rect" />, das das Ausrichtungsfeld für den <see cref="T:System.Windows.Media.GlyphRun" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zurückgegebene <xref:System.Windows.Rect> ist relativ zum Ursprung des <xref:System.Windows.Media.GlyphRun>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeInkBoundingBox">
      <MemberSignature Language="C#" Value="public System.Windows.Rect ComputeInkBoundingBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect ComputeInkBoundingBox() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.ComputeInkBoundingBox" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeInkBoundingBox () As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Rect ComputeInkBoundingBox();" />
      <MemberSignature Language="F#" Value="member this.ComputeInkBoundingBox : unit -&gt; System.Windows.Rect" Usage="glyphRun.ComputeInkBoundingBox " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das umgebende Freihandrechteck für den <see cref="T:System.Windows.Media.GlyphRun" /> ab.</summary>
        <returns>Ein <see cref="T:System.Windows.Rect" />, das das umgebende Freihandrechteck für den <see cref="T:System.Windows.Media.GlyphRun" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zurückgegebene <xref:System.Windows.Rect> ist relativ zum Ursprung des <xref:System.Windows.Media.GlyphRun>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceFontName">
      <MemberSignature Language="C#" Value="public string DeviceFontName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeviceFontName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.DeviceFontName" />
      <MemberSignature Language="VB.NET" Value="Public Property DeviceFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeviceFontName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeviceFontName : string with get, set" Usage="System.Windows.Media.GlyphRun.DeviceFontName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die spezifische Geräteschriftart ab, für die der <see cref="T:System.Windows.Media.GlyphRun" /> optimiert ist, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.String" />-Wert, der die Geräteschriftart darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein <xref:System.Windows.Media.GlyphRun> auf einem Gerät gerendert wird, das über eine integrierte Unterstützung für die benannte Geräte Schriftart verfügt, sollten die <xref:System.Windows.Media.GlyphRun> mithilfe eines gerätespezifischen Mechanismus zum Auswählen der Schriftart und durch das Senden von Unicode-Code Punkten anstelle von Glyphe-Indizes gerendert werden. Wenn Sie auf ein Gerät rendern, das keine integrierte Unterstützung für die benannte Geräte Schriftart enthält, sollten <xref:System.Windows.Media.GlyphRun.DeviceFontName%2A> ignoriert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontRenderingEmSize">
      <MemberSignature Language="C#" Value="public double FontRenderingEmSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 FontRenderingEmSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.FontRenderingEmSize" />
      <MemberSignature Language="VB.NET" Value="Public Property FontRenderingEmSize As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double FontRenderingEmSize { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.FontRenderingEmSize : double with get, set" Usage="System.Windows.Media.GlyphRun.FontRenderingEmSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Geviertgröße ab, die zum Rendern des <see cref="T:System.Windows.Media.GlyphRun" /> verwendet wird, oder legt diese fest.</summary>
        <value>Ein <see cref="T:System.Double" />-Wert, der die zum Rendern verwendete Geviertgröße darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCaretCharacterHitFromDistance">
      <MemberSignature Language="C#" Value="public System.Windows.Media.TextFormatting.CharacterHit GetCaretCharacterHitFromDistance (double distance, out bool isInside);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.TextFormatting.CharacterHit GetCaretCharacterHitFromDistance(float64 distance, [out] bool&amp; isInside) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.GetCaretCharacterHitFromDistance(System.Double,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCaretCharacterHitFromDistance (distance As Double, ByRef isInside As Boolean) As CharacterHit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::TextFormatting::CharacterHit GetCaretCharacterHitFromDistance(double distance, [Runtime::InteropServices::Out] bool % isInside);" />
      <MemberSignature Language="F#" Value="member this.GetCaretCharacterHitFromDistance : double * bool -&gt; System.Windows.Media.TextFormatting.CharacterHit" Usage="glyphRun.GetCaretCharacterHitFromDistance (distance, isInside)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.CharacterHit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distance" Type="System.Double" />
        <Parameter Name="isInside" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="distance">Der Offset, der zum Berechnen des ermittelten Caretzeichens verwendet werden soll.</param>
        <param name="isInside">Bestimmt, ob das ermittelte Zeichen im <see cref="T:System.Windows.Media.GlyphRun" /> ist.</param>
        <summary>Ruft den <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />-Wert ab, der das ermittelte Caretzeichen des <see cref="T:System.Windows.Media.GlyphRun" /> darstellt.</summary>
        <returns>Ein <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />-Wert, der das ermittelte Zeichen darstellt, das sich am nächsten am <paramref name="distance" />-Wert befindet. Das Out-Parameter <paramref name="isInside" /> gibt <see langword="true" /> zurück, wenn sich das ermittelte Zeichen innerhalb des <see cref="T:System.Windows.Media.GlyphRun" /> befindet, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `distance` Wert stellt den Offset vom führenden Rand des <xref:System.Windows.Media.GlyphRun>dar.  
  
 Wenn der Treffer außerhalb der <xref:System.Windows.Media.GlyphRun>liegt, stellt das Treffer Zeichen das nächste Einfügemarke dar, das in der <xref:System.Windows.Media.GlyphRun>getroffen wurde.  
  
 Die <xref:System.Windows.Media.TextFormatting.CharacterHit>-Struktur stellt Informationen über ein Zeichen dar, das innerhalb eines <xref:System.Windows.Media.GlyphRun> getroffen wurde, den Index des ersten Zeichens, das gefunden wurde, sowie Informationen über den führenden oder nachfolgenden Rand.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDistanceFromCaretCharacterHit">
      <MemberSignature Language="C#" Value="public double GetDistanceFromCaretCharacterHit (System.Windows.Media.TextFormatting.CharacterHit characterHit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDistanceFromCaretCharacterHit(valuetype System.Windows.Media.TextFormatting.CharacterHit characterHit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.GetDistanceFromCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDistanceFromCaretCharacterHit (characterHit As CharacterHit) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDistanceFromCaretCharacterHit(System::Windows::Media::TextFormatting::CharacterHit characterHit);" />
      <MemberSignature Language="F#" Value="member this.GetDistanceFromCaretCharacterHit : System.Windows.Media.TextFormatting.CharacterHit -&gt; double" Usage="glyphRun.GetDistanceFromCaretCharacterHit characterHit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterHit" Type="System.Windows.Media.TextFormatting.CharacterHit" />
      </Parameters>
      <Docs>
        <param name="characterHit">Der <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> zum Berechnen des Offsets.</param>
        <summary>Ruft den Offset vom führenden Rand des <see cref="T:System.Windows.Media.GlyphRun" /> zum führenden oder nachgestellten Rand eines Unterbrechungspunkts mit Caretzeichen ab, der das angegebene ermittelte Zeichen enthält.</summary>
        <returns>Ein <see cref="T:System.Double" />, der den Offset vom führenden Rand des <see cref="T:System.Windows.Media.GlyphRun" /> zum führenden oder nachgestellten Rand eines Unterbrechungspunkts mit Caretzeichen, der das ermittelte Zeichen enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Media.GlyphRun> nicht auf testable festgelegt ist, wird der Abstand von 0,0 zurückgegeben. Verwenden Sie die <xref:System.Windows.Media.GlyphRun.IsHitTestable%2A>-Eigenschaft, um zu bestimmen, ob ein <xref:System.Windows.Media.GlyphRun> Treffer Test durchführen kann.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Das ermittelte Zeichen befindet sich außerhalb des von der <see cref="T:System.Windows.Media.GlyphRun" />-Unicode-Zeichenfolge angegebenen Bereichs.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNextCaretCharacterHit">
      <MemberSignature Language="C#" Value="public System.Windows.Media.TextFormatting.CharacterHit GetNextCaretCharacterHit (System.Windows.Media.TextFormatting.CharacterHit characterHit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.TextFormatting.CharacterHit GetNextCaretCharacterHit(valuetype System.Windows.Media.TextFormatting.CharacterHit characterHit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextCaretCharacterHit (characterHit As CharacterHit) As CharacterHit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::TextFormatting::CharacterHit GetNextCaretCharacterHit(System::Windows::Media::TextFormatting::CharacterHit characterHit);" />
      <MemberSignature Language="F#" Value="member this.GetNextCaretCharacterHit : System.Windows.Media.TextFormatting.CharacterHit -&gt; System.Windows.Media.TextFormatting.CharacterHit" Usage="glyphRun.GetNextCaretCharacterHit characterHit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.CharacterHit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterHit" Type="System.Windows.Media.TextFormatting.CharacterHit" />
      </Parameters>
      <Docs>
        <param name="characterHit">Der <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />, der zum Berechnen des nächsten Trefferwerts verwendet werden soll.</param>
        <summary>Ruft das nächste gültige ermittelte Caretzeichen in der logischen Richtung im <see cref="T:System.Windows.Media.GlyphRun" /> ab.</summary>
        <returns>Ein <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />, der das nächste gültige ermittelte Caretzeichen in der logischen Richtung darstellt. Wenn der Rückgabewert gleich <paramref name="characterHit" /> ist, ist im <see cref="T:System.Windows.Media.GlyphRun" /> keine weitere Navigation möglich.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Windows.Media.GlyphRun.GetPreviousCaretCharacterHit%2A>, um das vorherige gültige Einfügezeichen abzurufen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviousCaretCharacterHit">
      <MemberSignature Language="C#" Value="public System.Windows.Media.TextFormatting.CharacterHit GetPreviousCaretCharacterHit (System.Windows.Media.TextFormatting.CharacterHit characterHit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.TextFormatting.CharacterHit GetPreviousCaretCharacterHit(valuetype System.Windows.Media.TextFormatting.CharacterHit characterHit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousCaretCharacterHit (characterHit As CharacterHit) As CharacterHit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::TextFormatting::CharacterHit GetPreviousCaretCharacterHit(System::Windows::Media::TextFormatting::CharacterHit characterHit);" />
      <MemberSignature Language="F#" Value="member this.GetPreviousCaretCharacterHit : System.Windows.Media.TextFormatting.CharacterHit -&gt; System.Windows.Media.TextFormatting.CharacterHit" Usage="glyphRun.GetPreviousCaretCharacterHit characterHit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.CharacterHit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="characterHit" Type="System.Windows.Media.TextFormatting.CharacterHit" />
      </Parameters>
      <Docs>
        <param name="characterHit">Der <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />, der zum Berechnen des vorherigen Trefferwerts verwendet werden soll.</param>
        <summary>Ruft das vorherige gültige ermittelte Caretzeichen in der logischen Richtung im <see cref="T:System.Windows.Media.GlyphRun" /> ab.</summary>
        <returns>Ein <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" />, der das vorherige gültige ermittelte Caretzeichen in der logischen Richtung darstellt. Wenn der Rückgabewert gleich <paramref name="characterHit" /> ist, ist im <see cref="T:System.Windows.Media.GlyphRun" /> keine weitere Navigation möglich.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um das nächste gültige Einfügezeichen abzurufen, verwenden Sie <xref:System.Windows.Media.GlyphRun.GetNextCaretCharacterHit%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphIndices">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;ushort&gt; GlyphIndices { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;unsigned int16&gt; GlyphIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.GlyphIndices" />
      <MemberSignature Language="VB.NET" Value="Public Property GlyphIndices As IList(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::UInt16&gt; ^ GlyphIndices { System::Collections::Generic::IList&lt;System::UInt16&gt; ^ get(); void set(System::Collections::Generic::IList&lt;System::UInt16&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GlyphIndices : System.Collections.Generic.IList&lt;uint16&gt; with get, set" Usage="System.Windows.Media.GlyphRun.GlyphIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.UShortIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Array von <see cref="T:System.UInt16" />-Werten ab, die die Symbolindizes in der zu rendernden physischen Schriftart darstellen, oder legt dieses fest.</summary>
        <value>Eine Liste von <see cref="T:System.UInt16" />-Werten, die Symbolindizes darstellen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert der Glyphe-Indizes wird durch die Zeichen Zuordnungs Tabelle der Schriftart für die entsprechenden Unicode-Code Punkte im inneren Text definiert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphOffsets">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Windows.Point&gt; GlyphOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.Windows.Point&gt; GlyphOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.GlyphOffsets" />
      <MemberSignature Language="VB.NET" Value="Public Property GlyphOffsets As IList(Of Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Windows::Point&gt; ^ GlyphOffsets { System::Collections::Generic::IList&lt;System::Windows::Point&gt; ^ get(); void set(System::Collections::Generic::IList&lt;System::Windows::Point&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GlyphOffsets : System.Collections.Generic.IList&lt;System.Windows.Point&gt; with get, set" Usage="System.Windows.Media.GlyphRun.GlyphOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Media.Converters.PointIListConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Windows.Point&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Array von <see cref="T:System.Windows.Point" />-Werten ab, die die Offsets der Glyphen in <see cref="T:System.Windows.Media.GlyphRun" /> darstellen, oder legt es fest.</summary>
        <value>Eine Liste der <see cref="T:System.Windows.Point" />-Werte, die die Offsets von Glyphen darstellen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Symbol Offset Werte werden dem nominalen Symbol Ursprung hinzugefügt, um den endgültigen Ursprung für das Symbol zu generieren. Die <xref:System.Windows.Media.GlyphRun.AdvanceWidths%2A>-Eigenschaft stellt die Werte der nominalen Symbol Ursprünge für die <xref:System.Windows.Media.GlyphRun>dar.  
  
 Basis Symbole haben in der Regel einen Symbol Offset von (0,0), wobei Symbole in der Regel über einen Offset verfügen, der Sie auf dem nächsten vorangehenden Basis Symbol ordnungsgemäß platziert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphTypeface">
      <MemberSignature Language="C#" Value="public System.Windows.Media.GlyphTypeface GlyphTypeface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.GlyphTypeface GlyphTypeface" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.GlyphTypeface" />
      <MemberSignature Language="VB.NET" Value="Public Property GlyphTypeface As GlyphTypeface" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::GlyphTypeface ^ GlyphTypeface { System::Windows::Media::GlyphTypeface ^ get(); void set(System::Windows::Media::GlyphTypeface ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GlyphTypeface : System.Windows.Media.GlyphTypeface with get, set" Usage="System.Windows.Media.GlyphRun.GlyphTypeface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GlyphTypeface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Media.GlyphTypeface" /> für den <see cref="T:System.Windows.Media.GlyphRun" /> ab oder legt diese fest.</summary>
        <value>Der <see cref="T:System.Windows.Media.GlyphTypeface" /> für den <see cref="T:System.Windows.Media.GlyphRun" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestable">
      <MemberSignature Language="C#" Value="public bool IsHitTestable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.IsHitTestable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHitTestable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestable : bool" Usage="System.Windows.Media.GlyphRun.IsHitTestable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob innerhalb des <see cref="T:System.Windows.Media.GlyphRun" /> gültige ermittelte Caretzeichen vorhanden sind.</summary>
        <value><see langword="true" />, wenn gültige ermittelte Caretzeichen vorhanden sind, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSideways">
      <MemberSignature Language="C#" Value="public bool IsSideways { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSideways" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.IsSideways" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSideways As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSideways { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSideways : bool with get, set" Usage="System.Windows.Media.GlyphRun.IsSideways" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Symbole gedreht werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Symbole gedreht werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Windows.Media.GlyphRun.IsSideways%2A> `true`ist, werden die Symbole, die Textzeichen bilden, 90 ° gegen den Uhrzeigersinn mithilfe vertikaler Baseline-positionierungsmetriken gedreht.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.Media.GlyphRun.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Markup.XmlLanguage" /> für den <see cref="T:System.Windows.Media.GlyphRun" /> ab oder legt diese fest.</summary>
        <value>Der <see cref="T:System.Windows.Markup.XmlLanguage" /> für den <see cref="T:System.Windows.Media.GlyphRun" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelsPerDip">
      <MemberSignature Language="C#" Value="public float PixelsPerDip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PixelsPerDip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.GlyphRun.PixelsPerDip" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelsPerDip As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PixelsPerDip { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PixelsPerDip : single with get, set" Usage="System.Windows.Media.GlyphRun.PixelsPerDip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die PixelsPerDip ab, wo der Text gerendert werden soll, oder legt sie fest.</summary>
        <value>Der aktuelle <see cref="P:System.Windows.Media.GlyphRun.PixelsPerDip" />-Wert.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.ISupportInitialize.BeginInit : unit -&gt; unit&#xA;override this.System.ComponentModel.ISupportInitialize.BeginInit : unit -&gt; unit" Usage="glyphRun.System.ComponentModel.ISupportInitialize.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.GlyphRun.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.ISupportInitialize.EndInit : unit -&gt; unit&#xA;override this.System.ComponentModel.ISupportInitialize.EndInit : unit -&gt; unit" Usage="glyphRun.System.ComponentModel.ISupportInitialize.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

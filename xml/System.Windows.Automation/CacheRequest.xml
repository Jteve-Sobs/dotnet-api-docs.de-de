<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata><Meta Name="ms.openlocfilehash" Value="611afb8af195ff3309c1e3d60244d862062c961e" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51907232" /></Metadata><TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <TypeSignature Language="F#" Value="type CacheRequest = class" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt Eigenschaften und Muster an, die das „UI Automation“-Framework beim Abrufen eines <see cref="T:System.Windows.Automation.AutomationElement" /> zwischenspeichert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Abrufen von Eigenschaften und Muster über [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] erfordert prozessübergreifenden Aufrufen, die Leistung verlangsamen können. Durch Zwischenspeichern der Werte von Eigenschaften und Mustern in einem Batchvorgang, können Sie die Leistung Ihrer Anwendung erhöhen.  
  
 Erstellen Sie eine neue cacheanforderung, indem der Konstruktor der Klasse aufrufen. Die Anforderung wird aufgefüllt, durch mehrfache Aufrufe von der <xref:System.Windows.Automation.CacheRequest.Add%2A> Methode.  
  
 Nur eine einzige <xref:System.Windows.Automation.CacheRequest> aktiv sein können. Es gibt zwei Möglichkeiten, um eine Anforderung zu aktivieren:  
  
-   Rufen Sie <xref:System.Windows.Automation.CacheRequest.Activate%2A> in der Anforderung. Dies legt die Anforderung auf den Stapel, und die Anforderung per pop ausgelesen wird, wenn das Objekt verworfen wird. Verwenden Sie zum Sicherstellen der Freigabe, auch wenn eine Ausnahme ausgelöst wird, die den Rückgabewert von <xref:System.Windows.Automation.CacheRequest.Activate%2A> innerhalb einer `using` Block (`Using` in Visual Basic).  
  
-   Setzen Sie die Anforderung auf den internen Stapel durch den Aufruf <xref:System.Windows.Automation.CacheRequest.Push%2A>. Nur die oberste Anforderung auf dem Stapel aktiv ist, und es sich auf den darauffolgenden aus dem Stapel entfernt muss <xref:System.Windows.Automation.CacheRequest.Pop%2A>. Entfernt die Anforderung wird sie deaktiviert.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Elemente abgerufen werden, während die Anforderung aktiv ist, werden Werte für die angegebenen Eigenschaften und Muster zwischengespeichert haben.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie mit <xref:System.Windows.Automation.CacheRequest.Activate%2A> zum Zwischenspeichern von Mustern und Eigenschaften.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 Das folgende Beispiel zeigt, wie Sie mit <xref:System.Windows.Automation.CacheRequest.Push%2A> und <xref:System.Windows.Automation.CacheRequest.Pop%2A> zum Zwischenspeichern von Mustern und Eigenschaften.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
    <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms771456(v=vs.90)">Für FetchTimer</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Automation.CacheRequest" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine <xref:System.Windows.Automation.CacheRequest> erstellt wird, die <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> Bezeichner wird als Standardeigenschaft Cache hinzugefügt.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; IDisposable" Usage="cacheRequest.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt diesen <see cref="T:System.Windows.Automation.CacheRequest" /> als aktive Spezifikation für die Elemente fest, die zurückgegeben werden, wenn ein <see cref="T:System.Windows.Automation.AutomationElement" /> im gleichen Thread angefordert wird.</summary>
        <returns>Das Objekt, mit dem der <see cref="T:System.Windows.Automation.CacheRequest" /> freigegeben werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode werden meist mit <xref:System.Windows.Automation.CacheRequest.Push%2A> und <xref:System.Windows.Automation.CacheRequest.Pop%2A> als Mittel zum Aktivieren der <xref:System.Windows.Automation.CacheRequest>. Das Objekt ist auf dem Stapel abgelegt. wenn <xref:System.Windows.Automation.CacheRequest.Activate%2A> wird aufgerufen, und klicken Sie dann geholt, wann er verworfen wird. Platzieren Sie zum Sicherstellen der Freigabe der Rückgabewert in einer `using` Block (`Using` in Visual Basic).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie mit <xref:System.Windows.Automation.CacheRequest.Activate%2A> zum Zwischenspeichern von Mustern und Eigenschaften.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fügt einem <see cref="T:System.Windows.Automation.CacheRequest" /> einen Eigenschaften- oder Musterbezeichner hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine <xref:System.Windows.Automation.CacheRequest> -Objekt wird erstellt, die <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> Bezeichner wird als Standardeigenschaft Cache hinzugefügt.  
  
 Hinzufügen eines Objekts, das bereits in der cacheanforderung ist, hat keine Auswirkungen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Automation.AutomationPattern -&gt; unit" Usage="cacheRequest.Add pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">Ein Bezeichner, der ein zwischenzuspeicherndes Muster angibt.</param>
        <summary>Fügt den angegebenen <see cref="T:System.Windows.Automation.AutomationPattern" />-Bezeichner diesem <see cref="T:System.Windows.Automation.CacheRequest" /> hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hinzufügen eines Musters, das bereits in der cacheanforderung ist, hat keine Auswirkungen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie erstellen eine <xref:System.Windows.Automation.CacheRequest> und fügen Sie ein Muster zwischengespeichert werden.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der <see cref="T:System.Windows.Automation.CacheRequest" /> ist aktiv.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Automation.AutomationProperty -&gt; unit" Usage="cacheRequest.Add property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">Ein Bezeichner, der einen zwischenzuspeichernden Eigenschaftswert angibt.</param>
        <summary>Fügt den angegebenen <see cref="T:System.Windows.Automation.AutomationProperty" />-Bezeichner diesem <see cref="T:System.Windows.Automation.CacheRequest" /> hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine <xref:System.Windows.Automation.CacheRequest> erstellt wird, die <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> Bezeichner wird als Standardeigenschaft Cache hinzugefügt.  
  
 Hinzufügen einer Eigenschaft, die bereits in der cacheanforderung ist, hat keine Auswirkungen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie erstellen eine <xref:System.Windows.Automation.CacheRequest> und fügen Sie eine Eigenschaft, die zwischengespeichert werden.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der <see cref="T:System.Windows.Automation.CacheRequest" /> ist aktiv.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberSignature Language="F#" Value="member this.AutomationElementMode : System.Windows.Automation.AutomationElementMode with get, set" Usage="System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob zurückgegebene Elemente vollständige Verweise auf die zugrunde liegende [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] oder nur zwischengespeicherte Informationen enthalten sollen, oder legt diesen fest.</summary>
        <value><see cref="F:System.Windows.Automation.AutomationElementMode.Full" />, wenn die zurückgegebenen Elemente über einen vollständigen Verweis auf die zugrunde liegende [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] verfügen, andernfalls <see cref="F:System.Windows.Automation.AutomationElementMode.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full> Der Standardwert ist, und gibt an, dass die zurückgegebenen Elemente über einen vollständigen Verweis auf die zugrunde liegende enthalten [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. <xref:System.Windows.Automation.AutomationElementMode.None> Gibt an, dass die zurückgegebenen Elemente kein Verweis auf die zugrunde liegende [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)], und nur zwischengespeicherte Informationen enthalten.  
  
 Bestimmte Vorgänge für Elemente, einschließlich <xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>, <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>, und <xref:System.Windows.Automation.AutomationElement.SetFocus%2A>, benötigen Sie eine vollständige Referenz; es wird versucht, zum Ausführen dieser auf ein Element, das keine verfügt, führt zu einer <xref:System.InvalidOperationException>.  
  
 Mithilfe von <xref:System.Windows.Automation.AutomationElementMode.None> effizienter, wenn Sie nur Eigenschaften erforderlich sind, werden können, wie es der Mehraufwand vermieden wird das Einrichten von vollständigen Verweise beteiligt.  
  
   
  
## Examples  
 Im folgenden Beispiel <xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A> nastaven NA hodnotu <xref:System.Windows.Automation.AutomationElementMode.None>, mit dem Ergebnis zwischengespeichert, die nur Eigenschaften und Muster für das abgerufene Objekt verfügbar sind.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Automation.CacheRequest" Usage="cacheRequest.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie dieser Instanz von <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <returns>Eine änderbare Kopie des aktuellen Objekts.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.Automation.CacheRequest" Usage="System.Windows.Automation.CacheRequest.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Windows.Automation.CacheRequest" /> ab, der im aktuellen Thread aktiv ist.</summary>
        <value>Das aktive <see cref="T:System.Windows.Automation.CacheRequest" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; unit" Usage="cacheRequest.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt den aktiven <see cref="T:System.Windows.Automation.CacheRequest" /> aus dem internen Stapel für den aktuellen Thread.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur die derzeit aktive Anforderung kann entfernt werden, mithilfe der <xref:System.Windows.Automation.CacheRequest.Pop%2A> Methode. Es wird versucht, eine Anforderung zu entfernen, die nicht die aktuellen eine Ergebnisse eine Ausnahme ausgelöst wird.  
  
 Wenn Sie cacheanforderungen schachteln sind, ist es besser, verwenden Sie <xref:System.Windows.Automation.CacheRequest.Activate%2A> auf die Anforderung auf dem Stapel zu stellen. Der Grund ist, dass Sie verwenden können, <xref:System.Windows.Automation.CacheRequest.Activate%2A> in eine `using` Block (`Using` in Visual Basic), um sicherzustellen, dass die Anforderung aus dem Stapel per pop ausgelesen wird, auch wenn eine Ausnahme ausgelöst wird.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie das Deaktivieren einer <xref:System.Windows.Automation.CacheRequest> mit <xref:System.Windows.Automation.CacheRequest.Pop%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Es wurde versucht, eine Cacheanforderung zu entfernen, bei der es sich nicht um die letzte auf dem Stapel abgelegte Anforderung handelt.</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberSignature Language="F#" Value="member this.Push : unit -&gt; unit" Usage="cacheRequest.Push " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Platziert den <see cref="T:System.Windows.Automation.CacheRequest" /> auf dem internen Zustandsstapel, sodass diese die aktuelle Anforderung im aktuellen Thread wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mehrere <xref:System.Windows.Automation.CacheRequest> Objekte auf den Status-Stapel eingefügt werden können. Cache-Anforderungen müssen aus dem Stapel in der Reihenfolge entfernt werden, die sie per Push übertragen wurden, auf; andernfalls ein <xref:System.InvalidOperationException> Ausnahme ausgelöst.  
  
 Wenn Sie cacheanforderungen schachteln sind, ist es besser, verwenden Sie <xref:System.Windows.Automation.CacheRequest.Activate%2A> auf die Anforderung auf dem Stapel zu stellen. Der Grund ist, dass Sie verwenden können, <xref:System.Windows.Automation.CacheRequest.Activate%2A> in eine `using` Block (`Using` in Visual Basic), um sicherzustellen, dass die Anforderung aus dem Stapel per pop ausgelesen wird, auch wenn eine Ausnahme ausgelöst wird.  
  
   
  
## Examples  
 Im folgende Beispiel wird das Aktivieren einer <xref:System.Windows.Automation.CacheRequest> mit <xref:System.Windows.Automation.CacheRequest.Push%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TreeFilter : System.Windows.Automation.Condition with get, set" Usage="System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der die beim Zwischenspeichern zu verwendende Ansicht der [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]-Elementstruktur angibt.</summary>
        <value>Die Ansicht der [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]-Elementstruktur. Die Standardansicht ist <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu Ansichten der [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] Elementstruktur, finden Sie unter [UI Automation Tree Overview](~/docs/framework/ui-automation/ui-automation-tree-overview.md).  
  
   
  
## Examples  
 Im folgenden Beispiel <xref:System.Windows.Automation.CacheRequest.TreeFilter%2A> nastaven NA hodnotu <xref:System.Windows.Automation.Automation.RawViewCondition> , damit Zwischenspeichern erfolgt für alle Elemente, unabhängig davon, ob sie Teil der Ansicht "Inhalt" oder der Ansicht des Steuerelement befinden.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberSignature Language="F#" Value="member this.TreeScope : System.Windows.Automation.TreeScope with get, set" Usage="System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Zwischenspeichern nur für den Stamm der Teilstruktur oder auch für untergeordnete Elemente oder Nachfolgerelemente erfolgt, oder legt diesen fest.</summary>
        <value>Ein oder mehrere Elemente von <see cref="F:System.Windows.Automation.TreeScope.Element" />, <see cref="F:System.Windows.Automation.TreeScope.Children" />, <see cref="F:System.Windows.Automation.TreeScope.Descendants" /> oder <see cref="F:System.Windows.Automation.TreeScope.Subtree" />. Der Standardwert ist <see cref="F:System.Windows.Automation.TreeScope.Element" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Umfang des Zwischenspeicherns wird in Bezug auf Objekte, die abgerufen werden, nicht auf das Objekt auf dem <xref:System.Windows.Automation.AutomationElement.FindFirst%2A> oder <xref:System.Windows.Automation.AutomationElement.FindAll%2A> aufgerufen wird. Siehe das Beispiel.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Listenelement-Feld aus dem übergeordneten Fensterelement beim abgerufen eine <xref:System.Windows.Automation.CacheRequest> aktiv ist und <xref:System.Windows.Automation.CacheRequest.TreeScope%2A> ist <xref:System.Windows.Automation.TreeScope.Children>. Die angegebenen Eigenschaften der untergeordneten Elemente (d. h. der Listenelemente) werden im Cache gespeichert und abgerufen werden können, aus der <xref:System.Windows.Automation.AutomationElement.CachedChildren%2A> des Listenfelds.  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde versucht, die Eigenschaft auf <see cref="F:System.Windows.Automation.TreeScope.Parent" /> oder <see cref="F:System.Windows.Automation.TreeScope.Ancestors" /> festzulegen.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/94c15031-4975-43cc-bcd5-c9439ed21c9c">Zwischenspeichern in Benutzeroberflächenautomatisierungs-Clients</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ec722dff-6009-4279-b86a-e18d3fa94ebf">Verwenden der Zwischenspeicherung in der Benutzeroberflächenautomatisierung</related>
      </Docs>
    </Member>
  </Members>
</Type>
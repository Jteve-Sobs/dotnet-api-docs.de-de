<Type Name="IFragmentCapableXmlDictionaryWriter" FullName="System.Xml.IFragmentCapableXmlDictionaryWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a5264c3438af84a90049569082f4b1287babf3d0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36435904" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="F#" Value="type IFragmentCapableXmlDictionaryWriter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ad053-101">Enthält Eigenschaften und Methoden, die die Verarbeitung von XML-Fragmenten ermöglichen, wenn sie von <see cref="T:System.Xml.XmlDictionaryWriter" /> implementiert werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad053-101">Contains properties and methods that when implemented by a <see cref="T:System.Xml.XmlDictionaryWriter" />, allows processing of XML fragments.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad053-102">Durch diese Klasse werden die Eigenschaften und Methoden definiert, die mit einer bestimmten Fähigkeit von <xref:System.Xml.XmlDictionaryWriter> im Zusammenhang stehen. Diese Fähigkeit besteht darin, einen Teil der Ausgabe (ein so genanntes Fragment) an einen anderen Stream umzuleiten als den Stream, mit dem sie erstellt wurde, und ein solches nach der Umleitung erfasstes Fragment zu einem späteren Zeitpunkt zurück in den Hauptstream desselben Writers einzufügen.</span><span class="sxs-lookup"><span data-stu-id="ad053-102">This class defines the properties and methods related to the capability of an <xref:System.Xml.XmlDictionaryWriter> to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanFragment">
      <MemberSignature Language="C#" Value="public bool CanFragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFragment" />
      <MemberSignature Language="DocId" Value="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFragment { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFragment : bool" Usage="System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ad053-103">Ruft einen Wert ab, der angibt, ob <see cref="T:System.Xml.XmlDictionaryWriter" /> XML-Fragmente verarbeiten kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-103">Gets a value that indicates whether this <see cref="T:System.Xml.XmlDictionaryWriter" /> can process XML fragments.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ad053-104">
            <see langword="true" />, wenn <see cref="T:System.Xml.XmlDictionaryWriter" /> XML-Fragmente verarbeiten kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-104">
              <see langword="true" /> if this <see cref="T:System.Xml.XmlDictionaryWriter" /> can process XML fragments; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad053-105">Gibt `true` Wenn der Writer, der diese Schnittstelle implementiert, generieren und XML-Fragmente akzeptieren kann.</span><span class="sxs-lookup"><span data-stu-id="ad053-105">Returns `true` if the writer that implements this interface can generate and accept XML fragments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndFragment">
      <MemberSignature Language="C#" Value="public void EndFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndFragment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndFragment ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndFragment();" />
      <MemberSignature Language="F#" Value="abstract member EndFragment : unit -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.EndFragment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad053-106">Beendet die Verarbeitung eines XML-Fragments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-106">Ends the processing of an XML fragment.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad053-107">Beendet die Umleitung der Ausgabe an den Stream, der vom entsprechenden `StartFragment`-Aufruf angegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="ad053-107">Stops redirecting output to the stream supplied by the matching `StartFragment` call.</span></span> <span data-ttu-id="ad053-108">Nach dem Aufruf wird die XML-Writerausgabe an den ursprünglichen Stream geleitet, der vor dem `StartFragment`-Aufruf vom Writer genutzt wurde.</span><span class="sxs-lookup"><span data-stu-id="ad053-108">After this call, the XML writing output goes to the stream originally used by the writer before the `StartFragment` call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartFragment">
      <MemberSignature Language="C#" Value="public void StartFragment (System.IO.Stream stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartFragment(class System.IO.Stream stream, bool generateSelfContainedTextFragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartFragment(System::IO::Stream ^ stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="F#" Value="abstract member StartFragment : System.IO.Stream * bool -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.StartFragment (stream, generateSelfContainedTextFragment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="generateSelfContainedTextFragment" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="ad053-109">Der Stream, in den geschrieben werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-109">The stream to write to.</span>
          </span>
        </param>
        <param name="generateSelfContainedTextFragment">
          <span data-ttu-id="ad053-110">Wenn <see langword="true" />, wird jeder Namespace, der außerhalb des Fragments deklariert wurde, bei Verwendung innerhalb des Fragments erneut deklariert. Wenn <see langword="false" />, wird der Namespace nicht erneut deklariert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-110">If <see langword="true" />, any namespaces declared outside the fragment is declared again if used inside of it; if <see langword="false" /> the namespaces are not declared again.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad053-111">Startet die Verarbeitung eines XML-Fragments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-111">Starts the processing of an XML fragment.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad053-112">Beginnt vorübergehend mit der Umleitung der XML-Ausgabe an den angegebenen Stream, bis `EndFragment` aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="ad053-112">Temporarily starts redirecting the writing of the XML output to the supplied stream until `EndFragment` is called.</span></span> <span data-ttu-id="ad053-113">Wenn `generateSelfContainedTextFragment` `true` ist, ist die umgeleitete XML-Ausgabe immer Text-XML und weist einen eigenständigen Namespacekontext auf.</span><span class="sxs-lookup"><span data-stu-id="ad053-113">If `generateSelfContainedTextFragment` is `true`, then the redirected XML output is always text XML and is self-contained in terms of its namespace context.</span></span> <span data-ttu-id="ad053-114">`StartFragment`()-Aufrufe können nicht geschachtelt werden.</span><span class="sxs-lookup"><span data-stu-id="ad053-114">`StartFragment`() calls cannot be nested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFragment">
      <MemberSignature Language="C#" Value="public void WriteFragment (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFragment(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteFragment (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteFragment(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteFragment : byte[] * int * int -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.WriteFragment (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="ad053-115">Der Puffer, in den geschrieben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-115">The buffer to write to.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="ad053-116">Die Anfangsposition, von der aus in <c>buffer</c> geschrieben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-116">The starting position from which to write in <c>buffer</c>.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="ad053-117">Die Anzahl der Bytes, die in <c>buffer</c> geschrieben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-117">The number of bytes to be written to the <c>buffer</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad053-118">Schreibt ein XML-Fragment in den zugrunde liegenden Stream des Writers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad053-118">Writes an XML fragment to the underlying stream of the writer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad053-119">Schreibt ein Fragment, das zwischen `StartFragment` und `EndFragment` erfasst wurde, und führt einen Rückruf in den Hauptstream von XmlDictionaryWriter durch.</span><span class="sxs-lookup"><span data-stu-id="ad053-119">Writes a fragment captured between `StartFragment` and `EndFragment` and calls back into the XmlDictionaryWriter's main stream.</span></span> <span data-ttu-id="ad053-120">Das geschriebene Fragment ist `count` Bytes groß und beginnt am Index-`offset` vom angegebenen `buffer`.</span><span class="sxs-lookup"><span data-stu-id="ad053-120">The fragment written is `count` bytes starting at the index `offset` from the supplied `buffer`.</span></span> <span data-ttu-id="ad053-121">Das Verhalten ist nicht definiert, wenn das angegebene Fragment nicht mit dieser Writerinstanz erfasst wurde.</span><span class="sxs-lookup"><span data-stu-id="ad053-121">The behavior is undefined if the supplied fragment was not captured using this writer instance.</span></span>  
  
   
  
## Examples  
  
```csharp  
MemoryStream stream = new MemoryStream();  
MemoryStream fragmentStream = new MemoryStream();  
XmlDictionaryWriter writer = XmlDictionaryWriter.CreateTextWriter(stream);  
IXmlFragmentCapableXmlDictionaryWriter fragmentWriter = writer as IXmlFragmentCapableXmlDictionaryWriter;  
if (fragmentWriter == null || !fragmentWriter.CanFragment)  
{  
Console.WriteLine("This writer doesn't support fragments");  
return;  
}  
writer.WriteStartElement("Root");  
fragmentWriter.StartFragment(fragmentStream, false);  
writer.WriteStartElement("Body");  
writer.WriteString("This is my body");  
writer.WriteEndElement();  
fragmentWriter.EndFragment();  
writer.WriteStartElement("CharsInTheBody");  
writer.WriteValue(fragmentStream.Length);  
writer.WriteEndElement();  
fragmentWriter.WriteFragment(fragmentStream.GetBuffer(), 0, (int)fragmentStream.Length);  
writer.WriteEndElement(); // Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
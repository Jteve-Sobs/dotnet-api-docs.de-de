<Type Name="IStreamProvider" FullName="System.Xml.IStreamProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63b42870026df71895c544c68109aeaa6ec779f4" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75046534" /></Metadata><TypeSignature Language="C#" Value="public interface IStreamProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStreamProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IStreamProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStreamProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStreamProvider" />
  <TypeSignature Language="F#" Value="type IStreamProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
    <AssemblyVersion>4.1.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="92089-101">Stellt eine Schnittstelle, die von Klassen implementiert werden kann, die Streams bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="92089-101">Represents an interface that can be implemented by classes providing streams.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92089-102">Wenn eine ausgehende Nachricht, die einen in einem Stream befindlichen Hauptteil enthält, in einen XML-Writer geschrieben wird, verwendet <xref:System.ServiceModel.Channels.Message> eine Aufrufsequenz, die der folgenden Sequenz in ihrer <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29>-Implementierung ähnlich ist:</span><span class="sxs-lookup"><span data-stu-id="92089-102">When writing an outgoing message containing a streamed body to an XML writer, the <xref:System.ServiceModel.Channels.Message> will use a sequence of calls similar to the following in its <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> implementation:</span></span>  
  
-   <span data-ttu-id="92089-103">Schreiben Sie alle notwendigen Informationen, die dem Stream vorausgehen (z.&#160;B. das öffnende XML-Tag).</span><span class="sxs-lookup"><span data-stu-id="92089-103">Write any necessary information preceding the stream (For example, the opening XML tag).</span></span>  
  
-   <span data-ttu-id="92089-104">Schreiben Sie den Stream.</span><span class="sxs-lookup"><span data-stu-id="92089-104">Write the stream.</span></span>  
  
-   <span data-ttu-id="92089-105">Schreiben Sie alle Informationen, die nach dem Stream folgen (z.&#160;B. das schließende XML-Tag).</span><span class="sxs-lookup"><span data-stu-id="92089-105">Write any information following the stream (For example, the closing XML tag).</span></span>  
  
 <span data-ttu-id="92089-106">Dies funktioniert gut bei Codierungen, die der Text-XML-Codierung ähnlich sind.</span><span class="sxs-lookup"><span data-stu-id="92089-106">This works well with encodings that are similar to the textual XML encoding.</span></span> <span data-ttu-id="92089-107">Es gibt jedoch einige Codierungen, bei denen XML-Infosetinformationen (z.&#160;B. Tags für startende und endende XML-Elemente) nicht zusammen mit den in den Elementen enthaltenen Daten platziert werden.</span><span class="sxs-lookup"><span data-stu-id="92089-107">However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</span></span> <span data-ttu-id="92089-108">Zum Beispiel wird bei der MTOM-Codierung die Nachricht in mehrere Teile aufgeteilt.</span><span class="sxs-lookup"><span data-stu-id="92089-108">For example, in the MTOM encoding, the message is split into multiple parts.</span></span> <span data-ttu-id="92089-109">Ein Teil enthält das XML-Infoset, das in Bezug auf tatsächlichen Elementinhalt Verweise auf andere Teile enthalten kann.</span><span class="sxs-lookup"><span data-stu-id="92089-109">One part contains the XML infoset, which may contain references to other parts for actual element contents.</span></span> <span data-ttu-id="92089-110">Da das XML-Infoset für gewöhnlich kleiner ist als der im Stream befindliche Inhalt, bietet es sich an, das Infoset zu puffern, es auszuschreiben und dann den Inhalt gestreamt zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="92089-110">Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</span></span> <span data-ttu-id="92089-111">Dies bedeutet, dass zu dem Zeitpunkt, zu dem das Tag für das schließende Element geschrieben wird, der Stream noch nicht ausgeschrieben sein sollte.</span><span class="sxs-lookup"><span data-stu-id="92089-111">This means that by the time the closing element tag is written, we should not have written out the stream yet.</span></span>  
  
 <span data-ttu-id="92089-112">Zu diesem Zweck wird die <xref:System.Xml.IStreamProvider> -Schnittstelle verwendet.</span><span class="sxs-lookup"><span data-stu-id="92089-112">For this purpose, the <xref:System.Xml.IStreamProvider> interface is used.</span></span> <span data-ttu-id="92089-113">Die Schnittstelle verfügt über eine <xref:System.Xml.IStreamProvider.GetStream> -Methode, die den zu schreibenden Stream zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="92089-113">The interface has a <xref:System.Xml.IStreamProvider.GetStream> method that returns the stream to be written.</span></span> <span data-ttu-id="92089-114">Die richtige Vorgehensweise, um einen in einem Stream befindlichen Nachrichtentext in <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> auszuschreiben, lautet wie folgt:</span><span class="sxs-lookup"><span data-stu-id="92089-114">The correct way to write out a streamed message body in <xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29> is as follows:</span></span>  
  
-   <span data-ttu-id="92089-115">Schreiben Sie alle notwendigen Informationen, die dem Stream vorausgehen (z.&#160;B. das öffnende XML-Tag).</span><span class="sxs-lookup"><span data-stu-id="92089-115">Write any necessary information preceding the stream (For example, the opening XML tag)</span></span>  
  
-   <span data-ttu-id="92089-116">Rufen Sie die `WriteValue` -Überladung in <xref:System.Xml.XmlDictionaryWriter> auf, die <xref:System.Xml.IStreamProvider>mit einer `IStreamProvider` -Implementierung verwendet, die den zu schreibenden Stream zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="92089-116">Call the `WriteValue` overload on the <xref:System.Xml.XmlDictionaryWriter> that takes an <xref:System.Xml.IStreamProvider>, with an `IStreamProvider` implementation that returns the stream to be written.</span></span>  
  
-   <span data-ttu-id="92089-117">Schreiben Sie alle Informationen, die nach dem Stream folgen (z.&#160;B. das schließende XML-Tag).</span><span class="sxs-lookup"><span data-stu-id="92089-117">Write any information following the stream (For example, the closing XML tag)</span></span>  
  
 <span data-ttu-id="92089-118">Auf diese Weise kann der XML-Writer bestimmen, wann <xref:System.Xml.IStreamProvider.GetStream> aufgerufen wird und die im Stream befindlichen Daten ausgeschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="92089-118">With this approach, the XML writer has a choice of when to call <xref:System.Xml.IStreamProvider.GetStream> and write out the streamed data.</span></span> <span data-ttu-id="92089-119">So rufen die Text-XML-Writer und die binären XML-Writer die Daten zum Beispiel direkt auf und schreiben den im Stream befindlichen Inhalt zwischen die Start- und Endtags.</span><span class="sxs-lookup"><span data-stu-id="92089-119">For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</span></span> <span data-ttu-id="92089-120">Der MTOM-Writer ruft <xref:System.Xml.IStreamProvider.GetStream> möglicherweise erst dann auf, wenn er zum Schreiben des entsprechenden Nachrichtenteils bereit ist.</span><span class="sxs-lookup"><span data-stu-id="92089-120">The MTOM writer may decide to call <xref:System.Xml.IStreamProvider.GetStream> later, when it is ready to write the appropriate part of the message.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IStreamProvider.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream();" />
      <MemberSignature Language="F#" Value="abstract member GetStream : unit -&gt; System.IO.Stream" Usage="iStreamProvider.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92089-121">Ruft einen Stream ab.</span><span class="sxs-lookup"><span data-stu-id="92089-121">Gets a stream.</span></span></summary>
        <returns><span data-ttu-id="92089-122">Ein <see cref="T:System.IO.Stream" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="92089-122">A <see cref="T:System.IO.Stream" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92089-123">Diese Methode kann verwendet werden, um den zu schreibenden Stream zurückzugeben.</span><span class="sxs-lookup"><span data-stu-id="92089-123">This method can be used to return the stream to be written.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseStream">
      <MemberSignature Language="C#" Value="public void ReleaseStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStream : System.IO.Stream -&gt; unit" Usage="iStreamProvider.ReleaseStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="92089-124">Der Stream, der freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="92089-124">The stream being released.</span></span></param>
        <summary><span data-ttu-id="92089-125">Gibt einen Stream zur Ausgabe frei.</span><span class="sxs-lookup"><span data-stu-id="92089-125">Releases a stream to output.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

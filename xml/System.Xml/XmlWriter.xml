<Type Name="XmlWriter" FullName="System.Xml.XmlWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95812f205b9870f283c0246150eb0ca30333cc98" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061910" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlWriter&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriter abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt einen Writer für die schnelle, vorwärts gerichtete Generierung von Streams oder Dateien mit XML-Daten ohne Zwischenspeicherung dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlWriter> -Klasse schreibt XML-Daten in einen Stream, Datei, einem Textreader oder Zeichenfolge. Es unterstützt die W3C [Extensible Markup Language (XML) 1.0 (vierte Ausgabe)](https://www.w3.org/TR/2006/REC-xml-20060816/) und [Namespaces in XML 1.0 (dritte Edition)](https://www.w3.org/TR/REC-xml-names/) Empfehlungen.  
  
 Die Mitglieder der <xref:System.Xml.XmlWriter> Klasse ermöglichen es Ihnen:  
  
-   Überprüfen, ob die Zeichen zulässige XML-Zeichen sind, und ob Element- und Attributnamen gültige XML-Namen sind.  
  
-   Überprüfen, ob das XML-Dokument wohlgeformt ist.  
  
-   Codieren von binären Bytes als Base64 oder BinHex und schreibt den resultierenden Text.  
  
-   Übergeben Sie Werte, indem Sie common Language Runtime-Typen anstelle von Zeichenfolgen, um zu vermeiden, dass wertkonvertierungen manuell ausführen.  
  
-   Mehrere Dokumente in einen Ausgabestream schreiben.  
  
-   Gültige Namen, qualifizierte Namen und Namenstoken schreiben.  
  
 In diesem Abschnitt  
  
 [Erstellen einen XML-writer](#create)   
 [Angeben des Ausgabeformats](#output)   
 [Datenkonformität](#conformance)   
 [Schreiben von Elementen](#writing_elements)   
 [Verfassen von Attributen](#writing_attributes)   
 [Handhabung von namespaces](#handling_ns)   
 [Schreiben von typisierten Daten](#writing_types)   
 [Schließen den XML-writer](#close)   
 [Asynchrones Programmieren](#async)   
 [Überlegungen zur Sicherheit](#security)  
  
<a name="create"></a>   
## <a name="creating-an-xml-writer"></a>Erstellen einen XML-writer  
 Zum Erstellen einer <xref:System.Xml.XmlWriter> Instanz ist, verwenden Sie die <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> Methode. Zum Angeben des Satz an Funktionen Sie aktivieren auf den XML-Writer möchten übergeben ein <xref:System.Xml.XmlWriterSettings> auf die <xref:System.Xml.XmlWriter.Create%2A> Methode. Andernfalls werden die Standardeinstellungen verwendet. Finden Sie unter der <xref:System.Xml.XmlWriter.Create%2A> -Referenzseiten Details.  
  
<a name="output"></a>   
## <a name="specifying-the-output-format"></a>Angeben des Ausgabeformats  
 Die <xref:System.Xml.XmlWriterSettings> Klasse enthält verschiedene Eigenschaften, die steuern, wie <xref:System.Xml.XmlWriter> Ausgabe so formatiert wird:  
  
|Eigenschaft|Beschreibung |  
|--------------|-----------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|Gibt die zu verwendende Textcodierung an. Der Standardwert ist `Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|Gibt an, ob Elemente eingerückt werden. Die Standardeinstellung ist `false` (kein Einzug).|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Gibt die für das Einrücken zu verwendende Zeichenfolge an. Der Standard beträgt zwei Leerzeichen.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|Gibt die für Zeilenumbrüche zu verwendende Zeichenfolge an. Der Standard ist `\r\n` (Wagenrücklauf, Zeilenvorschub).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|Gibt an, wie neue Zeilenumbruchzeichen zu behandeln.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|Gibt an, ob Attribute in einer neuen Zeile geschrieben werden sollen. <xref:System.Xml.XmlWriterSettings.Indent%2A> muss auf `true` festgelegt sein, wenn diese Eigenschaft verwendet wird. Der Standardwert ist `false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|Gibt an, ob eine XML-Deklaration geschrieben werden soll. Der Standardwert ist `false`.|  
  
 Die <xref:System.Xml.XmlWriterSettings.Indent%2A>-Eigenschaft und die <xref:System.Xml.XmlWriterSettings.IndentChars%2A>-Eigenschaft steuern die Formatierung von nicht signifikantem Leerraum. Geben Sie beispielsweise Folgendes ein, um den Einzug der Element-Knoten:  
  
 [!code-csharp[XmlWriter_v2#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#8)]
 [!code-vb[XmlWriter_v2#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#8)]  
  
 Verwenden der <xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A> jedes Attribut in einer neuen Zeile mit einer zusätzlichen Einzug schreiben:  
  
 [!code-csharp[XmlWriter_v2#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#9)]
 [!code-vb[XmlWriter_v2#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#9)]  
  
<a name="conformance"></a>   
## <a name="data-conformance"></a>Datenkonformität  
 Ein XML-Writer verwendet zwei Eigenschaften aus der <xref:System.Xml.XmlWriterSettings> Klasse, um die Übereinstimmung der Daten zu überprüfen:  
  
-   Die <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> Eigenschaft weist den XML-Writer Zeichen überprüfen und lösen eine <xref:System.Xml.XmlException> -Ausnahme aus, wenn alle Zeichen außerhalb des zulässigen Bereichs werden gemäß der W3C.  
  
-   Die <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> Eigenschaft konfiguriert das XML-Writer, um zu überprüfen, dass die Regeln für ein wohlgeformtes XML 1.0-Dokument oder Dokumentfragment, erfüllt der Stream geschrieben wird, gemäß der W3C. Die drei Übereinstimmungsebenen werden in der folgenden Tabelle beschrieben. Der Standardwert ist <xref:System.Xml.ConformanceLevel.Document>. Einzelheiten finden Sie in der <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> Eigenschaft und die <xref:System.Xml.ConformanceLevel?displayProperty=nameWithType> Enumeration.  
  
    |Ebene|Beschreibung |  
    |-----------|-----------------|  
    |<xref:System.Xml.ConformanceLevel.Document>|Die XML-Ausgabe entspricht den Regeln für ein wohlgeformtes XML 1.0-Dokument und kann von einem beliebigen konformen Prozessor verarbeitet werden.|  
    |<xref:System.Xml.ConformanceLevel.Fragment>|Die XML-Ausgabe entspricht den Regeln für ein wohlgeformtes XML 1.0-Dokument-Fragment.|  
    |<xref:System.Xml.ConformanceLevel.Auto>|Der XML-Writer bestimmt, welche Stufe von Unterschrift überprüft wird, gelten (Dokument oder-Fragment) basierend auf den eingehenden Daten.|  
  
<a name="writing_elements"></a>   
## <a name="writing-elements"></a>Schreiben von Elementen  
 Verwenden Sie die folgende <xref:System.Xml.XmlWriter> Methoden zum Schreiben von Elementknoten. Beispiele finden Sie auf die Methoden aufgeführt sind.  
  
|Mit|Beschreibung|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteElementString%2A>|Schreiben Sie einen gesamten Elementknoten, z. B. einen String-Wert.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A>|Um Elementwerts mithilfe mehrerer Methodenaufrufe zu schreiben.  Beispielsweise können Sie <xref:System.Xml.XmlWriter.WriteValue%2A> aufrufen, um einen typisierten Wert zu schreiben, <xref:System.Xml.XmlWriter.WriteCharEntity%2A>, um eine Zeichenentität zu schreiben, <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, um ein Attribut zu schreiben, oder Sie können ein untergeordnetes Element schreiben. Dies ist eine komplexere Version von den <xref:System.Xml.XmlWriter.WriteElementString%2A> Methode.<br /><br /> Um das Element zu schließen, rufen Sie die <xref:System.Xml.XmlWriter.WriteEndElement%2A> oder <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> Methode.|  
|<xref:System.Xml.XmlWriter.WriteNode%2A>|So kopieren Sie einen Elementknoten finden Sie unter der aktuellen Position des ein <xref:System.Xml.XmlReader> oder <xref:System.Xml.XPath.XPathNavigator> Objekt. Beim einem Aufruf werden alle Daten aus dem Quellobjekt in die <xref:System.Xml.XmlWriter>-Instanz kopiert.|  
  
<a name="writing_attributes"></a>   
## <a name="writing-attributes"></a>Verfassen von Attributen  
 Verwenden Sie die folgende <xref:System.Xml.XmlWriter> Methoden, um Attribute für Elementknoten zu schreiben. Diese Methoden können auch zum Erstellen von Namespacedeklarationen für ein Element verwendet werden, wie im nächsten Abschnitt erläutert.  
  
|Mit|Beschreibung|  
|---------|--------|  
|<xref:System.Xml.XmlWriter.WriteAttributeString%2A>|Um eine gesamte Attributknoten, einschließlich eines Zeichenfolgenwerts zu schreiben.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>|Um den Wert des Attributs mithilfe mehrerer Methodenaufrufe zu schreiben. Sie können z. B. Aufrufen <xref:System.Xml.XmlWriter.WriteValue%2A> einen typisierten Wert zu schreiben. Dies ist eine komplexere Version von den <xref:System.Xml.XmlWriter.WriteElementString%2A> Methode.<br /><br /> Um das Element zu schließen, rufen Sie die <xref:System.Xml.XmlWriter.WriteEndAttribute%2A> Methode.|  
|<xref:System.Xml.XmlWriter.WriteAttributes%2A>|So kopieren Sie alle Attribute finden Sie unter der aktuellen Position des ein <xref:System.Xml.XmlReader> Objekt. Die Attribute, die geschrieben werden, hängt vom Typ des Knotens, der Reader derzeit positioniert ist:<br /><br /> – Für ein Attributknoten schreibt es das aktuelle Attribut und dann die verbleibenden Attribute bis zum Endtag des Elements.<br />– Für einen Elementknoten schreibt er alle Attribute im Element enthalten sind.<br />– Für ein XML-Deklaration-Knoten ist schreibt er alle Attribute in der Deklaration.<br />– Für alle anderen Knotentypen löst die Methode eine Ausnahme aus.|  
  
<a name="handling_ns"></a>   
## <a name="handling-namespaces"></a>Handhabung von namespaces  
 Mit Namespaces werden Element- und Attributnamen in XML-Dokumenten qualifiziert. Namespace-Präfixe ordnen die Elemente und Attribute, Namespaces, die wiederum URI-Verweise zugeordnet sind. Namespaces gewährleisten eindeutige Element- und Attributnamen in einem XML-Dokument.  
  
 Die <xref:System.Xml.XmlWriter> verwaltet einen Namespacestapel, der alle Namespaces, die im aktuellen Namespacebereich definiert entspricht. Beim Schreiben von Elementen und Attributen können Sie Namespaces für folgende Aufgaben verwenden:  
  
-   Deklarieren von Namespaces manuell mithilfe der <xref:System.Xml.XmlWriter.WriteAttributeString%2A> Methode. Dies kann hilfreich sein, wenn Sie wissen, wie die Anzahl der Namespacedeklarationen optimiert werden kann. Ein Beispiel finden Sie die <xref:System.Xml.XmlWriter.WriteAttributeString%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> Methode.  
  
-   Überschreiben der aktuellen Namespacedeklaration mit einem neuen Namespace. Im folgenden Code wird die <xref:System.Xml.XmlWriter.WriteAttributeString%2A> Methode ändern Sie den Namespace-URI für die `"x"` Präfix von `"123"` auf `"abc"`.  
  
     [!code-csharp[XmlWriter_v2#18](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#18)]
     [!code-vb[XmlWriter_v2#18](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#18)]  
  
     Der Code generiert die folgende XML-Zeichenfolge:  
  
    ```xml  
    <x:root xmlns:x="123">  
      <item xmlns:x="abc" />  
    </x:root>  
    ```  
  
-   Angeben eines Namespacepräfixes beim Schreiben von Attributen oder Elementen. Viele der Methoden zum Schreiben von Element- und Attribute können Sie dies tun. Z. B. die <xref:System.Xml.XmlWriter.WriteStartElement%28System.String%2CSystem.String%2CSystem.String%29> Methode schreibt ein Starttag und ordnet es einem angegebenen Namespace und Präfix.  
  
<a name="writing_types"></a>   
## <a name="writing-typed-data"></a>Schreiben von typisierten Daten  
 Die <xref:System.Xml.XmlWriter.WriteValue%2A> Methode akzeptiert ein Objekt der common Language Runtime (CLR), konvertiert den Eingabewert in seine Zeichenfolgendarstellung gemäß XML Schema Definition Language (XSD) Daten typkonvertierungsregeln und out schreibt unter Verwendung der <xref:System.Xml.XmlWriter.WriteString%2A> Methode. Dies ist einfacher als die Verwendung der Methoden in der <xref:System.Xml.XmlConvert> Klasse, um die typisierten Daten vor dem Schreiben in einen Zeichenfolgenwert zu konvertieren.  
  
 Beim Schreiben in den Text der typisierte Wert Text serialisiert mithilfe der <xref:System.Xml.XmlConvert> Regeln für diesen Schema.  
  
 XSD-Standarddatentypen, die CLR-Typen entsprechen, finden Sie unter der <xref:System.Xml.XmlWriter.WriteValue%2A> Methode.  
  
 Die <xref:System.Xml.XmlWriter> kann auch zum Schreiben in einen XML-Datenspeicher verwendet werden. Die <xref:System.Xml.XPath.XPathNavigator>-Klasse kann z. B. ein <xref:System.Xml.XmlWriter>-Objekt erstellen, das Knoten für ein <xref:System.Xml.XmlDocument>-Objekt erstellt. Wenn der Datenspeicher Schemainformationen verfügbar ist, verfügt die <xref:System.Xml.XmlWriter.WriteValue%2A> Methode löst eine Ausnahme aus, wenn Sie versuchen, auf einen Typ zu konvertieren, die nicht zulässig ist. Wenn der Datenspeicher keine Schemainformationen verfügbar, die <xref:System.Xml.XmlWriter.WriteValue%2A> Methode behandelt alle Werte als ein `xsd:anySimpleType` Typ.  
  
<a name="close"></a>   
## <a name="closing-the-xml-writer"></a>Schließen den XML-writer  
 Bei Verwendung von <xref:System.Xml.XmlWriter> Methoden zur Ausgabe der XML-Elemente und Attribute werden nicht geschrieben werden, erst nach dem Aufruf der <xref:System.Xml.XmlWriter.Close%2A> Methode. Z. B. bei Verwendung von <xref:System.Xml.XmlWriter> zum Auffüllen einer <xref:System.Xml.XmlDocument> Objekt kann nicht an die geschriebenen Elemente und Attribute im Zieldokument erst beim Schließen der <xref:System.Xml.XmlWriter> Instanz.  
  
<a name="async"></a>   
## <a name="asynchronous-programming"></a>Asynchrone Programmierung  
 Die meisten der <xref:System.Xml.XmlWriter> Methoden verfügen über asynchrone Entsprechungen, die "Async" am Ende der Methodennamen aufweisen. Angenommen, das asynchrone Äquivalent von <xref:System.Xml.XmlWriter.WriteAttributeString%2A> ist <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
 Für die <xref:System.Xml.XmlWriter.WriteValue%2A> -Methode, die keine asynchrone Entsprechung haben, den Rückgabewert in eine Zeichenfolge zu konvertieren und verwenden die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode stattdessen.  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
 Beachten Sie Folgendes bei der Arbeit mit der <xref:System.Xml.XmlWriter> Klasse:  
  
-   Ausgelöste Ausnahmen der <xref:System.Xml.XmlWriter> können Offenlegen Pfadinformationen, die Sie nicht bis zu der app übergeben. Ihrer app muss Ausnahmen auffangen und entsprechend verarbeiten.  
  
-   <xref:System.Xml.XmlWriter> überprüft nicht, dass alle Daten, die an die <xref:System.Xml.XmlWriter.WriteDocType%2A> oder <xref:System.Xml.XmlWriter.WriteRaw%2A> Methode. Sie sollten keine willkürlichen Daten an diese Methoden übergeben.  
  
   
  
## Examples  
 Der folgende Beispielcode zeigt, wie auf die asynchrone API zu verwenden, um die XML-Dokument generieren.  
  
```csharp  
async Task TestWriter(Stream stream)   
{  
    XmlWriterSettings settings = new XmlWriterSettings();  
    settings.Async = true;  
  
    using (XmlWriter writer = XmlWriter.Create(stream, settings)) {  
        await writer.WriteStartElementAsync("pf", "root", "http://ns");  
        await writer.WriteStartElementAsync(null, "sub", null);  
        await writer.WriteAttributeStringAsync(null, "att", null, "val");  
        await writer.WriteStringAsync("text");  
        await writer.WriteEndElementAsync();  
        await writer.WriteProcessingInstructionAsync("pName", "pValue");  
        await writer.WriteCommentAsync("cValue");  
        await writer.WriteCDataAsync("cdata value");  
        await writer.WriteEndElementAsync();  
        await writer.FlushAsync();  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlWriter" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt beim Überschreiben in einer abgeleiteten Klasse diesen Stream und den zugrunde liegenden Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Elemente oder Attribute, die geöffnet bleiben, werden automatisch geschlossen.  
  
> [!NOTE]
>  Bei Verwendung der <xref:System.Xml.XmlWriter> Methoden zur Ausgabe der XML-Elemente und Attribute werden nicht geschrieben werden, erst nach dem Aufruf der <xref:System.Xml.XmlWriter.Close%2A> Methode. Z. B., wenn Sie zum Auffüllen der "XmlWriter" Verwenden einer <xref:System.Xml.XmlDocument>, erst beim Schließen der <xref:System.Xml.XmlWriter>, Sie werden nicht in der Lage, die geschriebenen Elemente und Attribute im Zieldokument.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt einen XML-Knoten.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt eine neue <see cref="T:System.Xml.XmlWriter" />-Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einige der <xref:System.Xml.XmlWriter.Create%2A> Überladungen enthalten einen `settings` Parameter, akzeptiert eine <xref:System.Xml.XmlWriterSettings> Objekt. Sie können dieses Objekt zu verwenden:  
  
-   Angeben, welche Funktionen für das erstellte unterstützt werden soll <xref:System.Xml.XmlWriter> Objekt.  
  
-   Wiederverwenden der <xref:System.Xml.XmlWriterSettings> Objekts, um mehrere Writerobjekte zu erstellen. Das <xref:System.Xml.XmlWriterSettings>-Objekt wird kopiert und für jeden erstellten Writer als schreibgeschützt markiert. Änderungen von Einstellungen in einer <xref:System.Xml.XmlWriterSettings>-Instanz wirken sich nicht auf Writer mit denselben Einstellungen aus. Deshalb können Sie dieselben Einstellungen verwenden, um mehrere Writer mit denselben Funktionen zu erstellen. Sie können auch die Einstellungen in einer <xref:System.Xml.XmlWriterSettings>-Instanz ändern und einen neuen Writer mit einer anderen Gruppe von Funktionen erstellen.  
  
-   Hinzufügen von Funktionen zu einer vorhandenen XML-Writer. Die <xref:System.Xml.XmlWriter.Create%2A>-Methode kann ein anderes <xref:System.Xml.XmlWriter>-Objekt annehmen. Die zugrunde liegende <xref:System.Xml.XmlWriter> Objekt muss es sich nicht in einen XML-Writer, die von der statischen erstellt werden <xref:System.Xml.XmlWriter.Create%2A> Methode. Beispielsweise können Sie einen benutzerdefinierte XML-Writer, um zusätzliche Funktionen hinzufügen angeben.  
  
-   In vollem Umfang vom Funktionen, z. B. eine bessere Übereinstimmung überprüft und Kompatibilität zu den [XML 1.0-Empfehlung](https://www.w3.org/TR/2006/REC-xml-20060816/) , die stehen nur in <xref:System.Xml.XmlWriter> Objekte erstellt, die von der statischen <xref:System.Xml.XmlWriter.Create%2A> Methode.  
  
 Bei Verwendung einer <xref:System.Xml.XmlWriter.Create%2A> Überladung, die nicht akzeptieren ein <xref:System.Xml.XmlWriterSettings> -Objekt, werden die folgenden Standardeinstellungen Writer verwendet:  
  
|Einstellung|Standard|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (keine entfernen)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (Wagenrücklauf, Zeilenumbruch)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
> [!NOTE]
>  Zwar .NET Framework enthält die <xref:System.Xml.XmlTextWriter> Klasse, die eine konkrete Implementierung ist von der <xref:System.Xml.XmlWriter> -Klasse, es wird empfohlen, Sie erstellen <xref:System.Xml.XmlWriter> Instanzen mithilfe der <xref:System.Xml.XmlWriter.Create%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="output">Der Stream, in den geschrieben werden soll. Der <see cref="T:System.Xml.XmlWriter" /> schreibt XML 1.0-Textsyntax und fügt diese an den angegebenen Stream an.</param>
        <summary>Erstellt eine neue <see cref="T:System.Xml.XmlWriter" />-Instanz mit dem angegebenen Stream.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie diese Überladung verwenden ein <xref:System.Xml.XmlWriterSettings> Objekt mit den folgenden Standardeinstellungen wird verwendet, um den XML-Writer zu erstellen:  
  
|Einstellung|Standard|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (keine entfernen)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (Wagenrücklauf, Zeilenumbruch)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Wenn Sie die Funktionen zur Unterstützung von auf den erstellten Writer angeben möchten, verwenden Sie eine Überladung mit einer <xref:System.Xml.XmlWriterSettings> -Objekt als eines ihrer Argumente ein, und übergeben ein <xref:System.Xml.XmlWriterSettings> Objekt mit den benutzerdefinierten Einstellungen.  
  
 Darüber hinaus schreibt "XmlWriter" immer eine Bytereihenfolge-Marke (BOM) für den zugrunde liegenden Datenstrom. Allerdings müssen einige Streams eine BOM keine. Die BOM auslassen möchten, erstellen Sie ein neues <xref:System.Xml.XmlWriterSettings> Objekt, und legen Sie die Codierung-Eigenschaft, um ein neues werden <xref:System.Text.UTF8Encoding> Objekt mit den booleschen Wert im Konstruktor auf "false" festgelegt.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt ein XML-Fragment in einen Speicherstream. (Es verwendet die <xref:System.Xml.XmlWriter.Create%28System.IO.Stream%2CSystem.Xml.XmlWriterSettings%29> überladen, die konfiguriert auch die Einstellungen auf die neue XML-Writer-Instanz.)  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stream" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">Der <see cref="T:System.IO.TextWriter" />, in den geschrieben werden soll. Der <see cref="T:System.Xml.XmlWriter" /> schreibt XML 1.0-Textsyntax und fügt diese an den angegebenen <see cref="T:System.IO.TextWriter" /> an.</param>
        <summary>Erstellt mit dem angegebenen <see cref="T:System.Xml.XmlWriter" /> eine neue <see cref="T:System.IO.TextWriter" />-Instanz.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie diese Überladung verwenden ein <xref:System.Xml.XmlWriterSettings> Objekt mit den Standardeinstellungen wird verwendet, um den XML-Writer zu erstellen.  
  
|Einstellung|Standard|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (keine entfernen)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (Wagenrücklauf, Zeilenumbruch)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Wenn Sie die Funktionen zur Unterstützung von auf den erstellten Writer angeben möchten, verwenden Sie eine Überladung mit einer <xref:System.Xml.XmlWriterSettings> -Objekt als eines ihrer Argumente ein, und übergeben ein <xref:System.Xml.XmlWriterSettings> Objekt mit den benutzerdefinierten Einstellungen.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt einen Writer, der an die Konsole ausgibt.  
  
 [!code-csharp[XmlWriter_v2#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#3)]
 [!code-vb[XmlWriter_v2#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="text" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputFileName">Die Datei, in die geschrieben werden soll. Der <see cref="T:System.Xml.XmlWriter" /> erstellt eine Datei am dem angegebenen Pfad und schreibt darin in XML 1.0-Textsyntax. Der <c>outputFileName</c> muss ein Dateisystempfad sein.</param>
        <summary>Erstellt eine neue <see cref="T:System.Xml.XmlWriter" />-Instanz mit dem angegebenen Dateinamen.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie diese Überladung verwenden ein <xref:System.Xml.XmlWriterSettings> Objekt mit den Standardeinstellungen wird verwendet, um den XML-Writer zu erstellen.  
  
|Einstellung|Standard|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (keine entfernen)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (Wagenrücklauf, Zeilenumbruch)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Wenn Sie die Funktionen zur Unterstützung von des erstellten XML-Writers angeben möchten, verwenden Sie eine Überladung mit einer <xref:System.Xml.XmlWriterSettings> -Objekt als eines ihrer Argumente ein, und übergeben ein <xref:System.Xml.XmlWriterSettings> Objekt mit den benutzerdefinierten Einstellungen.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein <xref:System.Xml.XmlWriter> -Objekt und ein Buchknoten geschrieben.  
  
 [!code-csharp[XmlWriter_v2#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#2)]
 [!code-vb[XmlWriter_v2#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="url" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="output">Der <see cref="T:System.Text.StringBuilder" />, in den geschrieben werden soll. Vom <see cref="T:System.Xml.XmlWriter" /> geschriebener Inhalt wird an den <see cref="T:System.Text.StringBuilder" /> angefügt.</param>
        <summary>Erstellt mit dem angegebenen <see cref="T:System.Xml.XmlWriter" /> eine neue <see cref="T:System.Text.StringBuilder" />-Instanz.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie diese Überladung verwenden ein <xref:System.Xml.XmlWriterSettings> Objekt mit den Standardeinstellungen wird verwendet, um den XML-Writer zu erstellen.  
  
|Einstellung|Standard|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (keine entfernen)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (Wagenrücklauf, Zeilenumbruch)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Wenn Sie die Funktionen zur Unterstützung von des erstellten XML-Writers angeben möchten, verwenden Sie eine Überladung mit einer <xref:System.Xml.XmlWriterSettings> -Objekt als eines ihrer Argumente ein, und übergeben ein <xref:System.Xml.XmlWriterSettings> Objekt mit den benutzerdefinierten Einstellungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="builder" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="output">Das <see cref="T:System.Xml.XmlWriter" />-Objekt, dass Sie als zugrunde liegenden Writer verwenden möchten.</param>
        <summary>Erstellt eine neue <see cref="T:System.Xml.XmlWriter" />-Instanz mit dem angegebenen <see cref="T:System.Xml.XmlWriter" />-Objekt.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt, das das angegebene <see cref="T:System.Xml.XmlWriter" />-Objekt umschließt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht das Hinzufügen von Funktionen zu einer zugrunde liegenden <xref:System.Xml.XmlWriter> Objekt. Die zugrunde liegende <xref:System.Xml.XmlWriter> Objekt kann es sich um ein Objekt erstellt, indem die <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> Methode oder ein Objekt erstellt, mit der <xref:System.Xml.XmlTextWriter> Implementierung.  
  
 Wenn Sie diese Überladung verwenden ein <xref:System.Xml.XmlWriterSettings> Objekt mit den Standardeinstellungen wird verwendet, um den XML-Writer zu erstellen.  
  
|Einstellung|Standard|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> (keine entfernen)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (Wagenrücklauf, Zeilenumbruch)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 Wenn Sie die Funktionen zur Unterstützung von des erstellten XML-Writers angeben möchten, verwenden Sie eine Überladung mit einer <xref:System.Xml.XmlWriterSettings> -Objekt als eines ihrer Argumente ein, und übergeben ein <xref:System.Xml.XmlWriterSettings> Objekt mit den benutzerdefinierten Einstellungen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="writer" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As Stream, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::Stream ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">Der Stream, in den geschrieben werden soll. Der <see cref="T:System.Xml.XmlWriter" /> schreibt XML 1.0-Textsyntax und fügt diese an den angegebenen Stream an.</param>
        <param name="settings">Das <see cref="T:System.Xml.XmlWriterSettings" />-Objekt zum Konfigurieren der neuen <see cref="T:System.Xml.XmlWriter" />-Instanz. Wenn dies <see langword="null" /> ist, wird <see cref="T:System.Xml.XmlWriterSettings" /> mit Standardeinstellungen verwendet.  
  
 Wenn der <see cref="T:System.Xml.XmlWriter" /> mit der <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />-Methode verwendet wird, sollten Sie die <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft verwenden, um ein <see cref="T:System.Xml.XmlWriterSettings" />-Objekt mit den korrekten Einstellungen abzurufen. Dieses Verfahren gewährleistet, dass das erstellte <see cref="T:System.Xml.XmlWriter" />-Objekt über die korrekten Ausgabeeinstellungen verfügt.</param>
        <summary>Erstellt eine neue <see cref="T:System.Xml.XmlWriter" />-Instanz mit dem Stream und dem <see cref="T:System.Xml.XmlWriterSettings" />-Objekt.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "XmlWriter" schreibt immer eine Bytereihenfolge-Marke (BOM) für den zugrunde liegenden Datenstrom. Allerdings müssen einige Streams eine BOM keine. Die BOM auslassen möchten, erstellen Sie ein neues <xref:System.Xml.XmlWriterSettings> Objekt, und legen Sie die Codierung-Eigenschaft, um ein neues werden <xref:System.Text.UTF8Encoding> Objekt mit den booleschen Wert im Konstruktor auf "false" festgelegt.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt ein XML-Fragment in einen Speicherstream.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stream" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As TextWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::IO::TextWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">Der <see cref="T:System.IO.TextWriter" />, in den geschrieben werden soll. Der <see cref="T:System.Xml.XmlWriter" /> schreibt XML 1.0-Textsyntax und fügt diese an den angegebenen <see cref="T:System.IO.TextWriter" /> an.</param>
        <param name="settings">Das <see cref="T:System.Xml.XmlWriterSettings" />-Objekt zum Konfigurieren der neuen <see cref="T:System.Xml.XmlWriter" />-Instanz. Wenn dies <see langword="null" /> ist, wird <see cref="T:System.Xml.XmlWriterSettings" /> mit Standardeinstellungen verwendet.  
  
 Wenn der <see cref="T:System.Xml.XmlWriter" /> mit der <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />-Methode verwendet wird, sollten Sie die <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft verwenden, um ein <see cref="T:System.Xml.XmlWriterSettings" />-Objekt mit den korrekten Einstellungen abzurufen. Dieses Verfahren gewährleistet, dass das erstellte <see cref="T:System.Xml.XmlWriter" />-Objekt über die korrekten Ausgabeeinstellungen verfügt.</param>
        <summary>Erstellt mit dem <see cref="T:System.Xml.XmlWriter" />-Objekt und dem <see cref="T:System.IO.TextWriter" />-Objekt eine neue <see cref="T:System.Xml.XmlWriterSettings" />-Instanz.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel schreibt eine XML-Zeichenfolge.  
  
 [!code-csharp[XmlWriter_v2#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#4)]
 [!code-vb[XmlWriter_v2#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="text" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (outputFileName As String, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::String ^ outputFileName, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="outputFileName">Die Datei, in die geschrieben werden soll. Der <see cref="T:System.Xml.XmlWriter" /> erstellt eine Datei am dem angegebenen Pfad und schreibt darin in XML 1.0-Textsyntax. Der <c>outputFileName</c> muss ein Dateisystempfad sein.</param>
        <param name="settings">Das <see cref="T:System.Xml.XmlWriterSettings" />-Objekt zum Konfigurieren der neuen <see cref="T:System.Xml.XmlWriter" />-Instanz. Wenn dies <see langword="null" /> ist, wird <see cref="T:System.Xml.XmlWriterSettings" /> mit Standardeinstellungen verwendet.  
  
 Wenn der <see cref="T:System.Xml.XmlWriter" /> mit der <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />-Methode verwendet wird, sollten Sie die <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft verwenden, um ein <see cref="T:System.Xml.XmlWriterSettings" />-Objekt mit den korrekten Einstellungen abzurufen. Dieses Verfahren gewährleistet, dass das erstellte <see cref="T:System.Xml.XmlWriter" />-Objekt über die korrekten Ausgabeeinstellungen verfügt.</param>
        <summary>Erstellt eine neue <see cref="T:System.Xml.XmlWriter" />-Instanz mit dem Dateinamen und dem <see cref="T:System.Xml.XmlWriterSettings" />-Objekt.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlWriter> Objekt mit den definierten Einstellungen.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="url" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As StringBuilder, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Text::StringBuilder ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">Der <see cref="T:System.Text.StringBuilder" />, in den geschrieben werden soll. Vom <see cref="T:System.Xml.XmlWriter" /> geschriebener Inhalt wird an den <see cref="T:System.Text.StringBuilder" /> angefügt.</param>
        <param name="settings">Das <see cref="T:System.Xml.XmlWriterSettings" />-Objekt zum Konfigurieren der neuen <see cref="T:System.Xml.XmlWriter" />-Instanz. Wenn dies <see langword="null" /> ist, wird <see cref="T:System.Xml.XmlWriterSettings" /> mit Standardeinstellungen verwendet.  
  
 Wenn der <see cref="T:System.Xml.XmlWriter" /> mit der <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />-Methode verwendet wird, sollten Sie die <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft verwenden, um ein <see cref="T:System.Xml.XmlWriterSettings" />-Objekt mit den korrekten Einstellungen abzurufen. Dieses Verfahren gewährleistet, dass das erstellte <see cref="T:System.Xml.XmlWriter" />-Objekt über die korrekten Ausgabeeinstellungen verfügt.</param>
        <summary>Erstellt mit dem <see cref="T:System.Xml.XmlWriter" />-Objekt und dem <see cref="T:System.Text.StringBuilder" />-Objekt eine neue <see cref="T:System.Xml.XmlWriterSettings" />-Instanz.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="builder" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (output As XmlWriter, settings As XmlWriterSettings) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlWriter ^ Create(System::Xml::XmlWriter ^ output, System::Xml::XmlWriterSettings ^ settings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">Das <see cref="T:System.Xml.XmlWriter" />-Objekt, dass Sie als zugrunde liegenden Writer verwenden möchten.</param>
        <param name="settings">Das <see cref="T:System.Xml.XmlWriterSettings" />-Objekt zum Konfigurieren der neuen <see cref="T:System.Xml.XmlWriter" />-Instanz. Wenn dies <see langword="null" /> ist, wird <see cref="T:System.Xml.XmlWriterSettings" /> mit Standardeinstellungen verwendet.  
  
 Wenn der <see cref="T:System.Xml.XmlWriter" /> mit der <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />-Methode verwendet wird, sollten Sie die <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft verwenden, um ein <see cref="T:System.Xml.XmlWriterSettings" />-Objekt mit den korrekten Einstellungen abzurufen. Dieses Verfahren gewährleistet, dass das erstellte <see cref="T:System.Xml.XmlWriter" />-Objekt über die korrekten Ausgabeeinstellungen verfügt.</param>
        <summary>Erstellt mit dem angegebenen <see cref="T:System.Xml.XmlWriter" />-Objekt und dem angegebenen <see cref="T:System.Xml.XmlWriter" />-Objekt eine neue <see cref="T:System.Xml.XmlWriterSettings" />-Instanz.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlWriter" />-Objekt, das das angegebene <see cref="T:System.Xml.XmlWriter" />-Objekt umschließt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie zusätzliche Funktionen hinzufügen, auf eine zugrunde liegende <xref:System.Xml.XmlWriter> Objekt. Die zugrunde liegende <xref:System.Xml.XmlWriter> Objekt kann es sich um ein Objekt erstellt, indem die <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> Methode oder ein Objekt erstellt, mit der <xref:System.Xml.XmlTextWriter> Implementierung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="writer" />-Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Gibt die von der <see cref="T:System.Xml.XmlWriter" />-Klasse verwendeten Ressourcen frei.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Xml.XmlWriter" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt die von <see cref="T:System.Xml.XmlWriter" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entleert beim Überschreiben in einer abgeleiteten Klasse den Inhalt des Puffers in die zugrunde liegenden Streams und leert den zugrunde liegenden Stream ebenfalls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hierbei spricht anstelle von <xref:System.Xml.XmlWriter.Close%2A> Wenn Sie weitere Daten in den zugrunde liegenden Stream ohne Verlust, was immer noch im Puffer ist schreiben möchten.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.FlushAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt zwei XML-Fragmente.  
  
 [!code-cpp[XmlWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Flush/CPP/write2docs_v2.cpp#1)]
 [!code-csharp[XmlWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Flush/CS/write2docs_v2.cs#1)]
 [!code-vb[XmlWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Flush/VB/write2docs_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entleert den Pufferinhalt asynchron in die zugrunde liegenden Streams und entleert den zugrunde liegenden Stream ebenfalls.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="Flush" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.Flush%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public abstract string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">Der Namespace-URI, dessen Präfix gesucht werden soll.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse das nächstliegende Präfix zurück, das im aktuellen Namespacebereich für den Namespace-URI definiert ist.</summary>
        <returns>Das passende Präfix oder <see langword="null" />, wenn im aktuellen Gültigkeitsbereich kein übereinstimmender Namespace-URI gefunden wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel schreibt ein Buch aus.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ns" /> ist entweder <see langword="null" /> oder <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriterSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Settings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlWriterSettings ^ Settings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das zum Erstellen dieser <see cref="T:System.Xml.XmlWriterSettings" />-Instanz verwendete <see cref="T:System.Xml.XmlWriter" />-Objekt ab.</summary>
        <value>Das zum Erstellen dieser Writer-Instanz verwendete <see cref="T:System.Xml.XmlWriterSettings" />-Objekt. Wenn dieser Writer nicht mit der <see cref="Overload:System.Xml.XmlWriter.Create" />-Methode erstellt wurde, gibt diese Eigenschaft <see langword="null" /> zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlWriterSettings> Klasse wird verwendet, um den Satz von Funktionen zur Unterstützung von auf die erstellten Writer-Instanz angeben. Die <xref:System.Xml.XmlWriterSettings> zurückgegebenes Objekt die <xref:System.Xml.XmlWriter.Settings%2A> Eigenschaft kann nicht geändert werden. Jeder Versuch, die einzelnen Einstellungen zu einer Ausnahme, die ausgelöst wird, zu ändern.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributes">
      <MemberSignature Language="C#" Value="public virtual void WriteAttributes (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttributes(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttributes (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttributes(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see langword="XmlReader" />, aus dem die Attribute kopiert werden sollen.</param>
        <param name="defattr">
          <see langword="true" />, um die Standardattribute aus dem <see langword="XmlReader" /> zu kopieren, andernfalls <see langword="false" />.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse sämtliche an der aktuellen Position gefundenen Attribute in den <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Reader positioniert ist, auf ein `element` Knoten `WriteAttributes` kopiert alle darin enthaltenen Attribute. Wenn der Reader positioniert ist, auf ein `attribute` Knoten, diese Methode schreibt das aktuelle Attribut und anschließend die verbleibenden Attribute bis zum Endtag des Elements. Wenn der Reader positioniert ist, auf ein `XmlDeclaration` Knoten, der diese Methode schreibt alle Attribute in der Deklaration. Wenn der Reader auf einem anderen Knotentyp positioniert ist, löst diese Methode eine <xref:System.Xml.XmlException>.  
  
 Wenn diese Methode aufgerufen wird, mithilfe von <xref:System.Xml.XmlValidatingReader>, um wohlgeformtes XML sicherzustellen, dass alle Inhalte (die von den Entitäten erweitert wurde), die ein ungültiges Dokument führen ersetzt wird, wenn geschrieben. Angenommen, ein Attribut enthält ein `&gt;` Entität, die erweitert wurde wurde, um sicherzustellen, dass einem wohlgeformten Dokument dem erweiterten > wird ersetzt, wenn mit geschrieben `&gt;`.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteAttributesAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird kopiert alle Elemente in der Ausgabe, ändert sich die Tagnamen in Großbuchstaben und kopiert die Attribute, die unverändert.  
  
 [!code-cpp[XmlWriter.WriteAttributes#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributes/CPP/writeattrs_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributes/CS/writeattrs_v2.cs#1)]
 [!code-vb[XmlWriter.WriteAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributes/VB/writeattrs_v2.vb#1)]  
  
 Im Beispiel wird die Datei `test1.xml`als Eingabe.  
  
 [!code-xml[XmlWriter.WriteAttributes#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteAttributes/XML/test1.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.XmlException">Der Reader ist nicht auf einem der Knoten <see langword="element" />, <see langword="attribute" /> oder <see langword="XmlDeclaration" /> positioniert.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAttributesAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAttributesAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAttributesAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAttributesAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteAttributesAsync&gt;c__async2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see langword="XmlReader" />, aus dem die Attribute kopiert werden sollen.</param>
        <param name="defattr">
          <see langword="true" />, um die Standardattribute aus dem <see langword="XmlReader" /> zu kopieren, andernfalls <see langword="false" />.</param>
        <summary>Schreibt asynchron alle Attribute aus, die in der aktuellen Position in <see cref="T:System.Xml.XmlReader" /> gefunden werden.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteAttributes" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteAttributes%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttributeString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse ein Attribut mit dem angegebenen Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des Attributs.</param>
        <param name="value">Der Wert des Attributs.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse das Attribut mit dem angegebenen lokalen Namen und Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteAttributeString` führt Folgendes aus:  
  
-   Wenn der Attributwert doppelte oder einfache Anführungszeichen enthält, werden sie durch ersetzt `&quot;` und `&apos;` bzw.  
  
-   Wenn beim Schreiben einer `xml:space` -Attribut, überprüft der Writer, der Attributwert ist ungültig. (Gültige Werte sind `preserve` oder `default`.)  
  
-   Wenn beim Schreiben einer `xml:lang` -Attribut, der Writer überprüft nicht, dass der Wert des Attributs gemäß der W3C XML 1.0-Empfehlung gültig ist.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt ein Buch aus.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.ArgumentException">Der <see langword="xml:space" />-Attributwert oder der <see langword="xml:lang" />-Attributwert ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des Attributs.</param>
        <param name="ns">Der Namespace-URI, der dem Attribut zugeordnet werden soll.</param>
        <param name="value">Der Wert des Attributs.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse ein Attribut mit dem angegebenen lokalen Namen, Namespace-URI und Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt ein Attribut mit einem Benutzer definierten Namespace-Präfix und ordnet dieses dem angegebenen Namespace. Wenn `localName` "Xmlns" ist, und klicken Sie dann diese Methode auch dies wie eine Namespacedeklaration behandelt werden. In diesem Fall die `ns` Argument kann `null`.  
  
 `WriteAttributeString` führt Folgendes aus:  
  
-   Wenn der Attributwert doppelte oder einfache Anführungszeichen enthält, werden sie durch ersetzt `&quot;` und `&apos;` bzw.  
  
-   Wenn beim Schreiben einer `xml:space` -Attribut, überprüft der Writer, der Attributwert ist ungültig. (Gültige Werte sind `preserve` oder `default`.)  
  
-   Wenn beim Schreiben einer `xml:lang` -Attribut, der Writer überprüft nicht, dass der Wert des Attributs gemäß der W3C XML 1.0-Empfehlung gültig ist.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.XmlWriter.WriteAttributeString%2A> -Methode, eine Namespacedeklaration zu schreiben.  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.ArgumentException">Der <see langword="xml:space" />-Attributwert oder der <see langword="xml:lang" />-Attributwert ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAttributeString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAttributeString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Das Namespacepräfix des Attributs.</param>
        <param name="localName">Der lokale Name des Attributs.</param>
        <param name="ns">Der Namespace-URI dieses Attributs.</param>
        <param name="value">Der Wert des Attributs.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse das Attribut mit dem angegebenen Präfix, lokalen Namen, Namespace-URI und Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt ein Attribut mit einem Benutzer definierten Namespace-Präfix und ordnet dieses dem angegebenen Namespace. Wenn das Präfix "Xmlns" ist dann diese Methode auch behandelt diesen als eine Namespacedeklaration und ordnet das deklarierte Präfix der Namespace-URI in den angegebenen Attributwert angegeben. In diesem Fall die `ns` Argument kann `null`.  
  
 `WriteAttributeString` führt Folgendes aus:  
  
-   Wenn der Attributwert doppelte oder einfache Anführungszeichen enthält, werden sie durch ersetzt `&quot;` und `&apos;` bzw.  
  
-   Wenn beim Schreiben einer `xml:space` -Attribut, überprüft der Writer, der Attributwert ist ungültig. (Gültige Werte sind `preserve` oder `default`.)  
  
-   Wenn beim Schreiben einer `xml:lang` -Attribut, der Writer überprüft nicht, dass der Wert des Attributs gemäß der W3C XML 1.0-Empfehlung gültig ist.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.XmlWriter.WriteAttributeString%2A> -Methode, eine Namespacedeklaration zu schreiben.  
  
 [!code-cpp[XmlWriter.WriteAttributeString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.ArgumentException">Der <see langword="xml:space" />-Attributwert oder der <see langword="xml:lang" />-Attributwert ist ungültig.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="localName" /> oder <paramref name="ns" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAttributeStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAttributeStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAttributeStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Das Namespacepräfix des Attributs.</param>
        <param name="localName">Der lokale Name des Attributs.</param>
        <param name="ns">Der Namespace-URI dieses Attributs.</param>
        <param name="value">Der Wert des Attributs.</param>
        <summary>Schreibt ein Attribut asynchron mit dem angegebenen Präfix, lokalen Namen, Namespace-URI und Wert.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteAttributeString" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public abstract void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Zu codierendes Bytearray.</param>
        <param name="index">Die Position innerhalb des Puffers, die den Anfang der zu schreibenden Bytes kennzeichnet.</param>
        <param name="count">Die Anzahl der zu schreibenden Bytes.</param>
        <summary>Codiert beim Überschreiben in einer abgeleiteten Klasse die angegebenen binären Bytes als Base64 und schreibt den resultierenden Text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Byte-Puffer kann z. B. den binären Inhalt eines GIF-Images enthalten. Dies würde gültigen XML-Code nicht eindeutig sein. Die `Base64` Codierung dient zum Darstellen von beliebigen Bytefolgen in ein Textformat, bestehend aus den 65 US-ASCII-Zeichen ([A-Za-z0-9 c++ / =]), wobei jedes Zeichen 6 Bits der Binärdaten codiert. Weitere Informationen finden Sie unter Anforderungen for Comments (RFC) 1521 befindet sich auf die [Request for Comments-Website](https://www.rfc-editor.org).  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteBase64Async%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.XmlWriter.WriteBase64%2A> -Methode, schreiben `Base64` Daten. Die `Base64` Daten eingebettet ist ein `<image>` Element.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#3)]
 [!code-vb[XmlReader_Read_Write_Binary#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.  
  
 - oder -   
  
 Die Länge des Puffers minus <paramref name="index" /> ist kleiner als <paramref name="count" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBase64Async (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBase64Async(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Zu codierendes Bytearray.</param>
        <param name="index">Die Position innerhalb des Puffers, die den Anfang der zu schreibenden Bytes kennzeichnet.</param>
        <param name="count">Die Anzahl der zu schreibenden Bytes.</param>
        <summary>Codiert die angegebenen binären Bytes asynchron als Base64 und schreibt den resultierenden Text.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteBase64" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteBase64%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public virtual void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Zu codierendes Bytearray.</param>
        <param name="index">Die Position innerhalb des Puffers, die den Anfang der zu schreibenden Bytes kennzeichnet.</param>
        <param name="count">Die Anzahl der zu schreibenden Bytes.</param>
        <summary>Codiert beim Überschreiben in einer abgeleiteten Klasse die angegebenen binären Bytes als <see langword="BinHex" /> und schreibt den resultierenden Text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteBinHexAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.XmlWriter.WriteBinHex%2A> -Methode, schreiben `BinHex` Daten. Die `BinHex` Daten eingebettet ist ein `<image>` Element.  
  
 [!code-csharp[XmlReader_Read_Write_Binary#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#1)]
 [!code-vb[XmlReader_Read_Write_Binary#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.  
  
 - oder -   
  
 Die Länge des Puffers minus <paramref name="index" /> ist kleiner als <paramref name="count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteBinHexAsync (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteBinHexAsync(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Zu codierendes Bytearray.</param>
        <param name="index">Die Position innerhalb des Puffers, die den Anfang der zu schreibenden Bytes kennzeichnet.</param>
        <param name="count">Die Anzahl der zu schreibenden Bytes.</param>
        <summary>Codiert die angegebenen binären Bytes asynchron als <see langword="BinHex" /> und schreibt den resultierenden Text.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteBinHex" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteBinHex%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public abstract void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCData(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der Text, der in den CDATA-Block eingefügt werden soll.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse einen &lt;![CDATA[...]]&gt;-Block mit dem angegebenen Text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `text` handelt es sich um `null` oder `String.Empty`, diese Methode schreibt einen leeren CDATA-Block, z. B. \<![CDATA []]] ><! [CDATA [] >.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteCDataAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt eine XML-Datei, die ein Buch darstellt.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Text ergibt kein wohlgeformtes XML-Dokument.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCDataAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCDataAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCDataAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCDataAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der Text, der in den CDATA-Block eingefügt werden soll.</param>
        <summary>Schreibt asynchron einen &lt;![CDATA[...]]&gt;-Block mit dem angegebenen Text.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteCData" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteCData%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteCharEntity(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Das Unicode-Zeichen, für das eine Zeichenentität generiert werden soll.</param>
        <summary>Erzwingt beim Überschreiben in einer abgeleiteten Klasse die Generierung einer Zeichenentität für den angegebenen Wert eines Unicode-Zeichens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt das Unicode-Zeichen in hexadezimaler Zeichenentitätsverweise.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteCharEntityAsync%2A>.  
  
   
  
## Examples  
 Finden Sie unter <xref:System.Xml.XmlTextWriter.WriteCharEntity%2A?displayProperty=nameWithType> für ein Beispiel für die Verwendung dieser Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Das Zeichen ist im Bereich der Ersatzzeichenpaare, <see langword="0xd800" /> - <see langword="0xdfff" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharEntityAsync (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharEntityAsync(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharEntityAsync (ch As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharEntityAsync(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Das Unicode-Zeichen, für das eine Zeichenentität generiert werden soll.</param>
        <summary>Erzwingt das Generieren einer Zeichenentität asynchron für den angegebenen Unicode-Zeichenwert.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteCharEntity" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteCharEntity%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public abstract void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Zeichenarray, das den zu schreibenden Text enthält.</param>
        <param name="index">Die Position innerhalb des Puffers, die den Anfang des zu schreibenden Texts kennzeichnet.</param>
        <param name="count">Die Anzahl der zu schreibenden Zeichen.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse Text in jeweils einen Puffer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, um große Mengen an einen Puffer zu schreiben.  
  
 Besondere Behandlung muss erfolgen, um sicherzustellen, dass die `WriteChars` Methode teilt Ersatzzeichenpaare nicht über mehrere Pufferschreibvorgänge. Die XML-Spezifikation definiert die gültigen Bereiche für Ersatzzeichenpaare.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteCharsAsync%2A>.  
  
   
  
## Examples  
 [!code-csharp[XmlWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.  
  
 - oder -   
  
 Die Länge des Puffers minus <paramref name="index" /> ist kleiner als <paramref name="count" />. Der Aufruf führt zur Aufteilung eines Ersatzzeichenpaars oder zum Schreiben eines ungültigen Ersatzzeichenpaars.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="buffer" />-Parameterwert ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharsAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharsAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCharsAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCharsAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Zeichenarray, das den zu schreibenden Text enthält.</param>
        <param name="index">Die Position innerhalb des Puffers, die den Anfang des zu schreibenden Texts kennzeichnet.</param>
        <param name="count">Die Anzahl der zu schreibenden Zeichen.</param>
        <summary>Schreibt Text asynchron in jeweils einen Puffer.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteChars" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteChars%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public abstract void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteComment(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Text, der in den Kommentar eingefügt werden soll.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse den Kommentar &lt;!--...--&gt; mit dem angegebenen Text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `text` handelt es sich um `null` oder `String.Empty`, diese Methode schreibt einen Kommentar mit Dateninhalt, z. B. \<!--->.  
  
 Wenn `text` enthält eine ungültige Folge von zwei Bindestriche "--" die <xref:System.Xml.XmlWriter> können entweder Throw ein <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter> Objekte) oder fügen Sie kein Leerzeichen zwischen der Bindestriche "-" so, dass der Text ein gültiger XML-Kommentar (<xref:System.Xml.XmlWriter> Objekte erstellt, indem die <xref:System.Xml.XmlWriter.Create%2A> Methode).  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteCommentAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt eine XML-Datei, die ein Buch darstellt.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Text ergibt kein wohlgeformtes XML-Dokument.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCommentAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCommentAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteCommentAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteCommentAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Text, der in den Kommentar eingefügt werden soll.</param>
        <summary>Schreibt asynchron einen Kommentar &lt;!--...--&gt;, der den angegebenen Text enthält.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteComment" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteComment%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public abstract void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des DOCTYPE. Dieser darf nicht leer sein.</param>
        <param name="pubid">Bei einem Wert ungleich NULL wird auch PUBLIC „pubid“ und „sysid“ geschrieben, wobei <c>pubid</c> und <c>sysid</c> durch die Werte der angegebenen Argumente ersetzt werden.</param>
        <param name="sysid">Wenn <c>pubid</c> gleich <see langword="null" /> und <c>sysid</c> ungleich NULL ist, wird SYSTEM „sysid“ geschrieben, wobei <c>sysid</c> durch den Wert dieses Arguments ersetzt wird.</param>
        <param name="subset">Wenn nicht NULL, wird [subset] geschrieben, wobei subset durch den Wert dieses Arguments ersetzt wird.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse die DOCTYPE-Deklaration mit dem angegebenen Namen und optionalen Attributen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überprüft nicht für ungültige Zeichen in `pubid`, `sysid` oder `subset`. Er überprüft auch nicht, dass die interne Teilmenge wohlgeformt ist.  
  
> [!IMPORTANT]
>  Die <xref:System.Xml.XmlWriter> überprüft nicht die Daten, die an die <xref:System.Xml.XmlWriter.WriteDocType%2A> Methode. Sie sollten Sie beliebige Daten nicht an diese Methode übergeben.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteDocTypeAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt eine XML-Datei, die ein Buch darstellt.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.ArgumentException">Der Wert für <paramref name="name" /> würde zu ungültigem XML-Code führen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocTypeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteDocTypeAsync (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteDocTypeAsync (name As String, pubid As String, sysid As String, subset As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteDocTypeAsync(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des DOCTYPE. Dieser darf nicht leer sein.</param>
        <param name="pubid">Bei einem Wert ungleich NULL wird auch PUBLIC „pubid“ und „sysid“ geschrieben, wobei <c>pubid</c> und <c>sysid</c> durch die Werte der angegebenen Argumente ersetzt werden.</param>
        <param name="sysid">Wenn <c>pubid</c> gleich <see langword="null" /> und <c>sysid</c> ungleich NULL ist, wird SYSTEM „sysid“ geschrieben, wobei <c>sysid</c> durch den Wert dieses Arguments ersetzt wird.</param>
        <param name="subset">Wenn nicht NULL, wird [subset] geschrieben, wobei subset durch den Wert dieses Arguments ersetzt wird.</param>
        <summary>Schreibt die DOCTYPE-Deklaration asynchron mit dem angegebenen Namen und optionalen Attributen.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteDocType" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteDocType%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteElementString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Schreibt ein Element, das einen Zeichenfolgenwert enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des Elements.</param>
        <param name="value">Der Wert des Elements.</param>
        <summary>Schreibt ein Element mit dem angegebenen lokalen Namen und Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird mehrere Write-Methoden, um ein XML-Fragment zu erstellen.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="localName" />-Wert ist <see langword="null" /> oder eine leere Zeichenfolge.  
  
 - oder -   
  
 Die Parameterwerte sind nicht gültig.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des Elements.</param>
        <param name="ns">Der Namespace-URI, der dem Element zugeordnet werden soll.</param>
        <param name="value">Der Wert des Elements.</param>
        <summary>Schreibt ein Element mit dem angegebenen lokalen Namen, Namespace-URI und Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird mehrere Write-Methoden, um ein XML-Fragment zu erstellen.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="localName" />-Wert ist <see langword="null" /> oder eine leere Zeichenfolge.  
  
 - oder -   
  
 Die Parameterwerte sind nicht gültig.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteElementString (prefix As String, localName As String, ns As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteElementString(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Das Präfix des Elements.</param>
        <param name="localName">Der lokale Name des Elements.</param>
        <param name="ns">Der Namespace-URI des Elements.</param>
        <param name="value">Der Wert des Elements.</param>
        <summary>Schreibt ein Element mit dem angegebenen Präfix, lokalen Namen, Namespace-URI und Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="localName" />-Wert ist <see langword="null" /> oder eine leere Zeichenfolge.  
  
 - oder -   
  
 Die Parameterwerte sind nicht gültig.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteElementStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteElementStringAsync (prefix As String, localName As String, ns As String, value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteElementStringAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteElementStringAsync&gt;c__async6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Das Präfix des Elements.</param>
        <param name="localName">Der lokale Name des Elements.</param>
        <param name="ns">Der Namespace-URI des Elements.</param>
        <param name="value">Der Wert des Elements.</param>
        <summary>Schreibt ein Element asynchron mit dem angegebenen Präfix, lokalen Namen, Namespace-URI und Wert.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteElementString" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteElementString%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndAttribute();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt beim Überschreiben in einer abgeleiteten Klasse den vorherigen <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />-Aufruf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Aufrufen `WriteStartAttribute`, können Sie das Attribut mit dieser Methode schließen.  
  
 Sie können auch das Attribut schließen, durch den Aufruf `WriteStartAttribute` erneut aufrufen <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, oder zum Aufrufen von <xref:System.Xml.XmlWriter.WriteEndElement%2A>.  
  
> [!NOTE]
>  Bei Verwendung der <xref:System.Xml.XmlWriter> Methoden zur Ausgabe der XML-Elemente und Attribute werden nicht geschrieben werden, erst nach dem Aufruf der <xref:System.Xml.XmlWriter.Close%2A> Methode. Z. B., wenn Sie zum Auffüllen der "XmlWriter" Verwenden einer <xref:System.Xml.XmlDocument>, erst beim Schließen der <xref:System.Xml.XmlWriter>, Sie werden nicht in der Lage, die geschriebenen Elemente und Attribute im Zieldokument.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteEndAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteEndAttributeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndAttributeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttributeAsync" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteEndAttributeAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndAttributeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt den asynchronen vorherigen <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />-Aufruf.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteEndAttribute" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt beim Überschreiben in einer abgeleiteten Klasse alle geöffneten Elemente oder Attribute und setzt den Writer in den Anfangszustand zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Bei Verwendung der <xref:System.Xml.XmlWriter> Methoden zur Ausgabe der XML-Elemente und Attribute werden nicht geschrieben werden, erst nach dem Aufruf der <xref:System.Xml.XmlWriter.Close%2A> Methode. Z. B., wenn Sie zum Auffüllen der "XmlWriter" Verwenden einer <xref:System.Xml.XmlDocument>, erst beim Schließen der <xref:System.Xml.XmlWriter>, Sie werden nicht in der Lage, die geschriebenen Elemente und Attribute im Zieldokument.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteEndDocumentAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt eine XML-Datei, die ein Buch darstellt.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Das XML-Dokument ist ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndDocumentAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt alle geöffneten Elemente oder Attribute asynchron und setzt den Writer in den Startzustand zurück.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteEndDocument" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteEndDocument%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt beim Überschreiben in einer abgeleiteten Klasse ein Element und löst den entsprechenden Namespacebereich auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Element keinen Inhalt enthält, ein kurzes Endtag "/ >" geschrieben wird. Andernfalls wird ein vollständiges Endtag geschrieben.  
  
> [!NOTE]
>  Bei Verwendung der <xref:System.Xml.XmlWriter> Methoden zur Ausgabe der XML-Elemente und Attribute werden nicht geschrieben werden, erst nach dem Aufruf der <xref:System.Xml.XmlWriter.Close%2A> Methode. Angenommen, Sie verwenden die XmlWriters zum Auffüllen einer <xref:System.Xml.XmlDocument>, erst beim Schließen der <xref:System.Xml.XmlWriter>, Sie werden nicht in der Lage, die geschriebenen Elemente und Attribute im Zieldokument.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteEndElementAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.XmlWriter.WriteEndElement%2A> und <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> Methoden.  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEndElementAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt ein Element asynchron und löst den entsprechenden Namespacebereich auf.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteEndElement" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteEndElement%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public abstract void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEntityRef(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Entitätsverweises.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse einen Entitätsverweis als <see langword="&amp;name;" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteEntityRefAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt eine XML-Datei, die ein Buch darstellt.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> ist entweder <see langword="null" /> oder <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEntityRefAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEntityRefAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteEntityRefAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteEntityRefAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Entitätsverweises.</param>
        <summary>Schreibt einen Entitätsverweis asynchron als <see langword="&amp;name;" /> aus.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteEntityRef" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteEntityRef%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteFullEndElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt beim Überschreiben in einer abgeleiteten Klasse ein Element und löst den entsprechenden Namespacebereich auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt immer das vollständige Endtag. Dies ist hilfreich beim Umgang mit Elementen, die ein vollständiges Endtag einschließen muss. Beispielsweise Browsern erwarten HTML Skriptblöcke geschlossen werden, mit " \< /script >".  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteFullEndElementAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.XmlWriter.WriteEndElement%2A> und <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> Methoden.  
  
 [!code-csharp[XmlWriter.WriteFullEndElement#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteFullEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteFullEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElementAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteFullEndElementAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteFullEndElementAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt ein Element asynchron und löst den entsprechenden Namespacebereich auf.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteFullEndElement" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public virtual void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der zu schreibende Name.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse den angegebenen Namen und stellt sicher, dass dieser gemäß der W3C-Empfehlung zu XML, Version 1.0 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name), ein gültiger Name ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Xml.XmlTextWriter.Namespaces%2A> festgelegt ist, um `true`, `WriteName` überprüft auch, dass der Name gemäß der W3C-Namespaces in XML-Empfehlung gültig ist.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteNameAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> ist kein gültiger XML-Name, oder <paramref name="name" /> ist <see langword="null" /> oder <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNameAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNameAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNameAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNameAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNameAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der zu schreibende Name.</param>
        <summary>Schreibt den angegebenen Namen asynchron aus und prüft dessen Gültigkeit entsprechend der W3C-Empfehlung für XML, Version 1.0 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteName" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteName%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public virtual void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNmToken(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der zu schreibende Name.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse den angegebenen Namen und stellt sicher, dass dieser gemäß der W3C-Empfehlung zu XML, Version 1.0 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name), ein gültiges NmToken ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteNmTokenAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> ist kein gültiges NmToken, oder <paramref name="name" /> ist <see langword="null" /> oder <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNmTokenAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNmTokenAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNmTokenAsync (name As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNmTokenAsync(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der zu schreibende Name.</param>
        <summary>Schreibt den angegebenen Namen asynchron aus und stellt sicher, dass dieser gemäß der W3C-Empfehlung für XML, Version 1.0 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name), ein gültiges NmToken ist.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteNmToken" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteNmToken%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNode">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Kopiert den gesamten Inhalt des Quellobjekts in die aktuelle Writer-Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (reader As XmlReader, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see cref="T:System.Xml.XmlReader" />, aus dem gelesen werden soll.</param>
        <param name="defattr">
          <see langword="true" />, um die Standardattribute aus dem <see langword="XmlReader" /> zu kopieren, andernfalls <see langword="false" />.</param>
        <summary>Kopiert beim Überschreiben in einer abgeleiteten Klasse den gesamten Inhalt des Readers in den Writer und verschiebt den Reader zum Anfang des nächsten nebengeordneten Elements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgende Tabelle zeigt die unterstützten Knotentypen für diese Methode.  
  
|NodeType|WriteNode-Verhalten|  
|--------------|------------------------|  
|`None`|Schreibt alle Knoten unabhängig vom Typ. D. h. der Writer nutzt die <xref:System.Xml.XmlReader> und schreibt alle Knoten zu lesen, einschließlich Attribute, verarbeitungsanweisungen, Kommentare und So weiter.<br /><br /> Diese Situation tritt auf, wenn die <xref:System.Xml.XmlReader> befindet sich in einem Anfangszustand. (Die <xref:System.Xml.XmlReader.ReadState%2A?displayProperty=nameWithType> -Eigenschaft gibt `ReaderState.Initial`).|  
|`Element`|Schreibt den Elementknoten und allen Attributknoten.|  
|`Attribute`|Keine Operation. Verwenden Sie stattdessen <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> oder <xref:System.Xml.XmlWriter.WriteAttributeString%2A>.|  
|`Text`|Schreibt den Textknoten.|  
|`CDATA`|Schreibt den CDATA-Abschnittsknoten.|  
|`EntityReference`|Schreibt den Entitätsverweisknoten.|  
|`ProcessingInstruction`|Schreibt die Verarbeitungsanweisungsknoten.|  
|`Comment`|Schreibt den Kommentarknoten.|  
|`DocumentType`|Schreibt den Dokumentknoten-Typ.|  
|`SignificantWhitespace`|Schreibt die signifikanter Leerraum-Knoten.|  
|`Whitespace`|Der Leerraumknoten schreibt.|  
|`EndElement`|Schreibt das Endtag.|  
|`EndEntity`|Keine Operation.|  
|`XmlDeclaration`|Schreibt die Knoten für die XML-Deklaration.|  
  
 Wenn der Reader in den ursprünglichen Zustand ist, verschiebt diese Methode den Reader zum Ende der Datei an. Wenn der Reader bereits am Ende der Datei oder in einem geschlossenen Zustand befindet, wird diese Methode nicht einsatzbereit.  
  
 Der folgende C#-Code kopiert ein gesamte XML-Eingabedokument in der Konsole:  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
XmlWriter writer = XmlWriter.Create(Console.Out);  
writer.WriteNode(reader, false);  
```  
  
 Wenn Sie aus den Stammknoten verschoben haben und werden an anderer Stelle im Dokument positioniert schreibt im folgenden C#-Beispiel ordnungsgemäß Knoten ein.  
  
```csharp  
XmlReader reader = XmlReader.Create(myfile);  
reader.Read(); // Read PI  
reader.Read(); // Read Comment  
reader.Read(); // Read DOCType  
XmlWriter writer = XmlWriter.Create(Console.Out);  
while (!reader.EOF){  
  writer.WriteNode(reader, false);  
 }  
```  
  
 Wenn der Reader so konfiguriert ist, dass Leerraum zurückgegeben und der Writer ist so konfiguriert, dass die Ausgabe, ziehen Sie ein `WriteNode` möglicherweise unerwartete Ausgabe erzeugt. Sie werden im Wesentlichen werden erste doppelte Formatierung.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die erste und letzte Buchknoten an die Konsole.  
  
 [!code-cpp[XmlWriter.WriteNode#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteNode/CPP/writenode.cpp#1)]
 [!code-csharp[XmlWriter.WriteNode#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteNode/CS/writenode.cs#1)]
 [!code-vb[XmlWriter.WriteNode#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteNode/VB/writenode.vb#1)]  
  
 Im Beispiel wird die Datei `books.xml`als Eingabe.  
  
 [!code-xml[XmlWriter.WriteNode#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteNode/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="reader" /> enthält ungültige Zeichen.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteNode (navigator As XPathNavigator, defattr As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteNode(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">Der <see cref="T:System.Xml.XPath.XPathNavigator" />, aus dem kopiert werden soll.</param>
        <param name="defattr">
          <see langword="true" />, um die Standardattribute zu kopieren, andernfalls <see langword="false" />.</param>
        <summary>Kopiert den gesamten Inhalt des <see cref="T:System.Xml.XPath.XPathNavigator" />-Objekts in den Writer. Die Position des <see cref="T:System.Xml.XPath.XPathNavigator" /> bleibt unverändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgende Tabelle zeigt die unterstützten `XPath` Knotentypen für diese Methode.  
  
|XPathNodeType|WriteNode-Verhalten|  
|-------------------|------------------------|  
|`Root`|Schreibt alle Knoten unabhängig vom Typ. D. h. der Writer nutzt die <xref:System.Xml.XPath.XPathNavigator> und schreibt alle Knoten aus dem Stammknoten (z. B. Attribute, produktionsanweisungen, Kommentare und So weiter).|  
|`Element`|Schreibt den Elementknoten und allen Attributknoten.|  
|`Attribute`|Keine Operation. Verwenden Sie stattdessen <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> oder <xref:System.Xml.XmlWriter.WriteAttributeString%2A>.|  
|`Text`|Schreibt den Textknoten.|  
|`Namespace`|Keine Operation. Verwenden der <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> oder <xref:System.Xml.XmlWriter.WriteAttributeString%2A> Methode, um den Namespacedeklaration geschrieben werden soll.|  
|`ProcessingInstruction`|Schreibt die Verarbeitungsanweisungsknoten.|  
|`Comment`|Schreibt den Kommentarknoten.|  
|`SignificantWhitespace`|Schreibt die signifikanter Leerraum-Knoten.|  
|`Whitespace`|Der Leerraumknoten schreibt.|  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.XmlWriter.WriteNode%2A> Methode, um die erste Buchknoten aus einem Dokument kopieren und in die Konsole geschrieben.  
  
 [!code-csharp[XmlWriteNode_nav#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriteNode_nav/CS/XmlWriteNode_nav.cs#1)]
 [!code-vb[XmlWriteNode_nav#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriteNode_nav/VB/XmlWriteNode_nav.vb#1)]  
  
 Im Beispiel wird die Datei books.xml als Eingabe verwendet.  
  
 [!code-xml[XPathXMLExamples#1](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/books.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="navigator" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNodeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
        <summary>Kopiert den gesamten Inhalt des Quellobjekts asynchron in die aktuelle Writer-Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteNode%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (reader As XmlReader, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XmlReader ^ reader, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">Der <see cref="T:System.Xml.XmlReader" />, aus dem gelesen werden soll.</param>
        <param name="defattr">
          <see langword="true" />, um die Standardattribute aus dem <see langword="XmlReader" /> zu kopieren, andernfalls <see langword="false" />.</param>
        <summary>Kopiert beim Überschreiben in einer abgeleiteten Klasse den gesamten Inhalt des Readers asynchron in den Writer und verschiebt den Reader zum Anfang des nächsten nebengeordneten Elements.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteNode" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteNode%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteNodeAsync (navigator As XPathNavigator, defattr As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteNodeAsync(System::Xml::XPath::XPathNavigator ^ navigator, bool defattr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteNodeAsync&gt;c__async5))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">Der <see cref="T:System.Xml.XPath.XPathNavigator" />, aus dem kopiert werden soll.</param>
        <param name="defattr">
          <see langword="true" />, um die Standardattribute zu kopieren, andernfalls <see langword="false" />.</param>
        <summary>Kopiert asynchron den gesamten Inhalt des <see cref="T:System.Xml.XPath.XPathNavigator" />-Objekt in den Writer. Die Position des <see cref="T:System.Xml.XPath.XPathNavigator" /> bleibt unverändert.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteNode" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteNode%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public abstract void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der Verarbeitungsanweisung.</param>
        <param name="text">Der in die Verarbeitungsanweisung einzufügende Text.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse eine Verarbeitungsanweisung mit einem Leerzeichen zwischen dem Namen und dem Text wie folgt: &lt;?name text?&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, die XML-Deklaration geschrieben (statt <xref:System.Xml.XmlWriter.WriteStartDocument%2A>). Dies könnte in das encoding-Attribut falsch geschriebenen führen. Beispielsweise würde der folgende C#-Code in ein ungültiges XML-Dokument kommen, da die standardcodierung UTF-8 ist.  
  
```csharp  
XmlWriter writer = XmlWriter.Create("output.xml");  
writer.WriteProcessingInstruction("xml", "version='1.0' encoding='UTF-16'");  
writer.WriteStartElement("root");  
writer.Close();  
```  
  
 Wenn `text` handelt es sich um `null` oder `String.Empty`, diese Methode schreibt eine `ProcessingInstruction` ohne Inhalt, z. B. Daten \<? Name? >.  
  
 Enthält Text eine ungültige Folge von "? >", die <xref:System.Xml.XmlWriter> können entweder Throw ein <xref:System.ArgumentException> (<xref:System.Xml.XmlTextWriter> Objekte) oder ein Leerzeichen einfügen "? > "zu vermeiden, Schreiben von ungültigen XML (<xref:System.Xml.XmlWriter> Objekte erstellt, indem die <xref:System.Xml.XmlWriter.Create%2A> Methode).  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteProcessingInstructionAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt eine XML-Datei, die ein Buch darstellt.  
  
 [!code-csharp[XmlWriter.WriteStartDocument#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Text ergibt kein wohlgeformtes XML-Dokument.  
  
 <paramref name="name" /> ist entweder <see langword="null" /> oder <see langword="String.Empty" />.  
  
 Diese Methode wird zum Erstellen einer XML-Deklaration nach einem Aufruf von <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> verwendet.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstructionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteProcessingInstructionAsync (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteProcessingInstructionAsync (name As String, text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteProcessingInstructionAsync(System::String ^ name, System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der Verarbeitungsanweisung.</param>
        <param name="text">Der in die Verarbeitungsanweisung einzufügende Text.</param>
        <summary>Schreibt eine Verarbeitungsanweisung asynchron mit einem Leerzeichen zwischen dem Namen und dem Text wie folgt: &lt;?name text?&gt;.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteProcessingInstruction" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der zu schreibende lokale Name.</param>
        <param name="ns">Der Namespace-URI für den Namen.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse den durch den Namespace angegebenen Namen. Diese Methode sucht das Präfix im Gültigkeitsbereich des Namespaces.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `ns` ordnet dem aktuellen Standardnamespace, kein Präfix generiert wird.  
  
 Beim Schreiben von Attributwerten generiert diese Methode ein Präfix an, wenn `ns` wurde nicht gefunden. Beim Schreiben von Elementinhalt wird eine Ausnahme ausgelöst, wenn `ns` wurde nicht gefunden.  
  
> [!NOTE]
>  Wenn von eine Klasse abgeleitet der <xref:System.Xml.XmlWriter> überschreibt diese Methode nicht `localName` wird nicht überprüft werden, um ein gültiger W3C XML-Name sein. In diesem Fall vor dem Aufrufen dieser Methode die Gültigkeit der Zeichenfolge kann durch überprüft <xref:System.Xml.XmlReader.IsName%2A> Methode.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteQualifiedNameAsync%2A>.  
  
   
  
## Examples  
 Das Beispiel schreibt das folgende Element:  
  
```xml  
<root xmlns:x="urn:abc">  
  <item href="#x:test"/>  
</root>  
```  
  
 [!code-csharp[XmlWriter_v2#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#5)]
 [!code-vb[XmlWriter_v2#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> ist entweder <see langword="null" /> oder <see langword="String.Empty" />.  
  
 <paramref name="localName" /> ist kein gültiger Name.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteQualifiedNameAsync (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteQualifiedNameAsync (localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteQualifiedNameAsync(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteQualifiedNameAsync&gt;c__async1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der zu schreibende lokale Name.</param>
        <param name="ns">Der Namespace-URI für den Namen.</param>
        <summary>Schreibt den durch Namespace gekennzeichneten Namen asynchron. Diese Methode sucht das Präfix im Gültigkeitsbereich des Namespaces.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteQualifiedName" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse manuell Rohdatenmarkup.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Zeichenfolge, die den zu schreibenden Text enthält.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse Rohdatenmarkup manuell aus einer Zeichenfolge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist nicht Sonderzeichen mit Escapezeichen versehen.  
  
> [!IMPORTANT]
>  Die <xref:System.Xml.XmlWriter> überprüft nicht die Daten, die an die <xref:System.Xml.XmlWriter.WriteRaw%2A> Methode. Sie sollten Sie beliebige Daten nicht an diese Methode übergeben.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
   
  
## Examples  
 Finden Sie unter <xref:System.Xml.XmlTextWriter.WriteRaw%2A?displayProperty=nameWithType> für ein Beispiel für die Verwendung dieser Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="data" /> ist entweder <see langword="null" /> oder <see langword="String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Zeichenarray, das den zu schreibenden Text enthält.</param>
        <param name="index">Die Position innerhalb des Puffers, die den Anfang des zu schreibenden Texts kennzeichnet.</param>
        <param name="count">Die Anzahl der zu schreibenden Zeichen.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse Rohdatenmarkup manuell aus einem Zeichenpuffer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist nicht Sonderzeichen mit Escapezeichen versehen.  
  
> [!IMPORTANT]
>  Die <xref:System.Xml.XmlWriter> überprüft nicht die Daten, die an die <xref:System.Xml.XmlWriter.WriteRaw%2A> Methode. Sie sollten Sie beliebige Daten nicht an diese Methode übergeben.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteRawAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.  
  
 - oder -   
  
 Die Länge des Puffers minus <paramref name="index" /> ist kleiner als <paramref name="count" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRawAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
        <summary>Schreibt asynchron unformatiertes Markup manuell aus einer Zeichenfolge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteRaw%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (data As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Zeichenfolge, die den zu schreibenden Text enthält.</param>
        <summary>Schreibt asynchron unformatiertes Markup manuell aus einer Zeichenfolge.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteRaw" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteRaw%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteRawAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteRawAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Zeichenarray, das den zu schreibenden Text enthält.</param>
        <param name="index">Die Position innerhalb des Puffers, die den Anfang des zu schreibenden Texts kennzeichnet.</param>
        <param name="count">Die Anzahl der zu schreibenden Zeichen.</param>
        <summary>Schreibt asynchron unformatiertes Markup manuell aus einem Zeichenpuffer.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteRaw" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteRaw%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse den Anfang eines Attributs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des Attributs.</param>
        <summary>Schreibt den Anfang eines Attributs mit dem angegebenen lokalen Namen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht Ihnen das Schreiben eines Werts mithilfe von mehreren Write-Methoden.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartAttribute (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartAttribute(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des Attributs.</param>
        <param name="ns">Der Namespace-URI dieses Attributs.</param>
        <summary>Schreibt den Anfang eines Attributs mit dem angegebenen lokalen Namen und dem angegebenen Namespace-URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist eine erweiterte Version des <xref:System.Xml.XmlWriter.WriteAttributeString%2A> , mit der Sie zum Schreiben eines Attributwerts mit mehreren Write-Methoden, wie <xref:System.Xml.XmlWriter.WriteString%2A>, <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>und so weiter.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
   
  
## Examples  
 Finden Sie unter <xref:System.Xml.XmlTextWriter.WriteStartAttribute%2A?displayProperty=nameWithType> für ein Beispiel für die Verwendung dieser Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <altmember cref="M:System.Xml.XmlWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Das Namespacepräfix des Attributs.</param>
        <param name="localName">Der lokale Name des Attributs.</param>
        <param name="ns">Der Namespace-URI für das Attribut.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse den Anfang eines Attributs mit dem angegebenen Präfix, dem angegebenen lokalen Namen und dem angegebenen Namespace-URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht Ihnen das Schreiben eines Werts mithilfe von mehreren Write-Methoden.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttributeAsync">
      <MemberSignature Language="C#" Value="protected internal virtual System.Threading.Tasks.Task WriteStartAttributeAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function WriteStartAttributeAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartAttributeAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Das Namespacepräfix des Attributs.</param>
        <param name="localName">Der lokale Name des Attributs.</param>
        <param name="ns">Der Namespace-URI für das Attribut.</param>
        <summary>Schreibt den Anfang eines Attributs asynchron mit dem angegebenen Präfix, lokalen Namen und Namespace-URI.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteStartAttribute" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteStartAttribute%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse die XML-Deklaration.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse die XML-Deklaration mit der Version "1.0".</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Codierung des Dokuments wird bestimmt durch die Implementierung des Writers. Z. B. wenn ein <xref:System.Text.Encoding> Objekt wurde angegeben, der `XmlTextWriter` Konstruktor Dies bestimmt den Wert des Codierungsattributs. Diese Methode erstellt kein eigenständiges Attribut.  
  
 Wenn `WriteStartDocument` heißt der Writer überprüft, ob Sie gerade ein wohlgeformtes XML-Dokument. Beispielsweise überprüft er, dass die XML-Deklaration der erste Knoten, eine ist und nur ein Stamm-Level-Element vorhanden ist, und so weiter. Diese Methode nicht aufgerufen wird, geht davon aus der Writer geschrieben wird, und ein XML-Fragment gilt keine Regeln auf Stammebene.  
  
 Wenn `WriteStartDocument` aufgerufen wurde und dann die <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> Methode wird verwendet, um eine andere XML-Deklaration erstellt, wird eine Ausnahme ausgelöst.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartDocument(bool standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">Wenn <see langword="true" />, wird "standalone=yes" geschrieben, wenn <see langword="false" />, wird "standalone=no" geschrieben.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse die XML-Deklaration mit der Version "1.0" und dem eigenständigen Attribut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Codierung des Dokuments wird bestimmt durch die Implementierung des Writers. Z. B. wenn ein <xref:System.Text.Encoding> Objekt wurde angegeben, der `XmlTextWriter` Konstruktor Dies bestimmt den Wert des Codierungsattributs.  
  
 Wenn `WriteStartDocument` wird aufgerufen, der Writer überprüft, ob Sie gerade ein wohlgeformtes XML-Dokument. Beispielsweise überprüft er, dass die XML-Deklaration der erste Knoten, eine ist und nur ein Stamm-Level-Element vorhanden ist, und so weiter. Diese Methode nicht aufgerufen wird, geht davon aus der Writer geschrieben wird, und ein XML-Fragment gilt keine Regeln auf Stammebene.  
  
 Wenn `WriteStartDocument` aufgerufen wurde und dann die <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> Methode wird verwendet, um eine andere XML-Deklaration erstellt, wird eine Ausnahme ausgelöst.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocumentAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
        <summary>Schreibt die XML-Deklaration asynchron.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt die XML-Deklaration asynchron mit der Version "1.0".</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteStartDocument" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartDocumentAsync (standalone As Boolean) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartDocumentAsync(bool standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">Wenn <see langword="true" />, wird "standalone=yes" geschrieben, wenn <see langword="false" />, wird "standalone=no" geschrieben.</param>
        <summary>Schreibt die XML-Deklaration asynchron mit der Version "1.0" und dem eigenständigen Attribut.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteStartDocument" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse das angegebene Starttag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des Elements.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse ein Starttag mit dem angegebenen lokalen Namen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt einen XML-Knoten.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartElement (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartElement(System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Der lokale Name des Elements.</param>
        <param name="ns">Der Namespace-URI, der dem Element zugeordnet werden soll. Wenn sich dieser Namespace bereits im Gültigkeitsbereich befindet und dem Namespace ein Präfix zugeordnet ist, schreibt der Writer automatisch auch das Präfix.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse das angegebene Starttag und ordnet dieses dem angegebenen Namespace zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nach dem Aufrufen dieser Methode können Sie Attribute schreiben oder erstellen Sie Inhalt mithilfe von <xref:System.Xml.XmlWriter.WriteComment%2A>, <xref:System.Xml.XmlWriter.WriteString%2A>, oder `WriteStartElement` für untergeordnete Elemente. Sie können das Element entweder mit schließen <xref:System.Xml.XmlWriter.WriteEndElement%2A> oder <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>. Um beispielsweise den folgenden C#-Code:  
  
```csharp  
writer.WriteStartElement("item",null);  
writer.WriteString("some text");  
writer.WriteEndElement();  
```  
  
 Generiert die folgende Ausgabe:  
  
```xml  
<item>some text</item>  
```  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Das Namespacepräfix des Elements.</param>
        <param name="localName">Der lokale Name des Elements.</param>
        <param name="ns">Der Namespace-URI, der dem Element zugeordnet werden soll.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse das angegebene Starttag und ordnet dieses dem angegebenen Namespace und Präfix zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt ein XML-Fragment.  
  
 [!code-cpp[XmlWriter.WriteElementString#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">Es gibt ein Zeichen im Puffer, das ein gültiges XML-Zeichen ist, aber nicht gültig für die Ausgabecodierung ist. Wenn die Ausgabecodierung z. B. ASCII ist, sollten Sie nur Zeichen im Bereich von 0 bis 127 für Element- und Attributnamen verwenden. Das ungültige Zeichen kann sich im Argument dieser Methode oder in einem Argument von vorherigen Methoden befinden, die in den Puffer geschrieben haben. Solche Zeichen werden wenn möglich von Zeichenentitätsverweisen maskiert (z. B., in Textknoten oder Attributwerten). Der Zeichenentitätsverweis ist jedoch nicht in Element- und Attributnamen, Kommentaren, Verarbeitungsanweisungen oder CDATA-Abschnitten zugelassen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartElementAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStartElementAsync (prefix As String, localName As String, ns As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStartElementAsync(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Das Namespacepräfix des Elements.</param>
        <param name="localName">Der lokale Name des Elements.</param>
        <param name="ns">Der Namespace-URI, der dem Element zugeordnet werden soll.</param>
        <summary>Schreibt das angegebene Starttag asynchron und ordnet dieses dem angegebenen Namespace und Präfix zu.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteStartElement" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteStartElement%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public abstract System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse den Zustand des Writers ab.</summary>
        <value>Einer der <see cref="T:System.Xml.WriteState" />-Werte.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public abstract void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteString(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der zu schreibende Text.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse den angegebenen Textinhalt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteString` führt Folgendes aus:  
  
-   Die Zeichen `&`, `<`, und `>` durch ersetzt `&amp;`, `&lt;`, und `&gt;`zugeordnet.  
  
-   Das Standardverhalten des ein <xref:System.Xml.XmlWriter> mit erstellt <xref:System.Xml.XmlWriter.Create%2A> ist das Auslösen einer <xref:System.ArgumentException> beim Zeichenwerten enthalten, die in den Bereich von 0 x-0x1F (außer den Leerzeichen 0 x 9, 0xA und 0xD) zu schreiben. Diese ungültigen XML-Zeichen geschrieben werden können, durch das Erstellen der <xref:System.Xml.XmlWriter> mit der <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> -Eigenschaftensatz auf `false`. Dadurch werden die Zeichen wird durch numerische Zeichenentitäten ersetzt (&\#0; bis & #0x1F). Darüber hinaus eine <xref:System.Xml.XmlTextWriter> erstellt, mit der `new` Operator ersetzt die ungültigen Zeichen durch numerische Zeichenentitäten standardmäßig.  
  
 **Hinweis** Microsoft ist nicht empfiehlt, die Vorgehensweise beim Schreiben von ungültige XML-Zeichen, da viele Anwendungen, die XML nutzen nicht konzipiert wurden, um ungültige Zeichen zu behandeln.  
  
-   Wenn `WriteString` heißt im Kontext eines Attributwerts durch doppelte und einfache Anführungszeichen ersetzt `&quot;` und `&apos;` bzw.  
  
 Beispielsweise Eingabezeichenfolge `test<item>test` als geschrieben wird  
  
```  
test&lt;item&gt;test  
```  
  
 Wenn `text` handelt es sich um `null` oder `String.Empty`, diese Methode schreibt einen Textknoten mit Dateninhalt.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteStringAsync%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt einen XML-Knoten.  
  
 [!code-cpp[XmlWriter.Close#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Textzeichenfolge enthält ein ungültiges Ersatzzeichenpaar.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStringAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStringAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteStringAsync (text As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteStringAsync(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der zu schreibende Text.</param>
        <summary>Schreibt den angegebenen Textinhalt asynchron.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteString" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteString%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">Das niedrige Ersatzzeichen. Dieses muss ein Wert zwischen 0xDC00 und 0xDFFF sein.</param>
        <param name="highChar">Das hohe Ersatzzeichen. Dieses muss ein Wert zwischen 0xD800 und 0xDBFF sein.</param>
        <summary>Generiert und schreibt beim Überschreiben in einer abgeleiteten Klasse die Ersatzzeichenentität für das Ersatzzeichenpaar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist nur anwendbar auf Systemen, die UTF-16-Codierung verwenden.  
  
 Die Ersatzzeichenentität wird im Hexadezimalformat geschrieben. Der Bereich für Ersatzzeichen ist #x 10000 auf #x10FFFF. Die folgende Formel wird verwendet, um die Ersatzzeichenentität zu generieren: (`highChar` -0xD800) * 0 x 400 + (`lowChar` -0xDC00) + 0 x 10000  
  
 Für HTML und XML-Dokument-Zeichensatz (und daher die Notation der numerischen Zeichenverweisen) UCS [ISO 10646] basiert. Einen einzelnen numerischen Zeichenverweis in ein Quelldokument kann daher in einigen Fällen zwei 16-Bit-Einheiten in einer Zeichenfolge (ein hohes Ersatzzeichen und ein niedriges Ersatzzeichen) entsprechen. Diese 16-Bit-Einheiten werden als ein Ersatzzeichenpaar bezeichnet.  
  
 Weitere Informationen über Ersatzzeichen oder Zeichen finden Sie in Abschnitt 3.7 des Unicode-standard 3.0/Unicode-2.0 finden Sie unter http://www.unicode.org, oder Abschnitt 2.2 des W3C XML 1.0-Empfehlung finden Sie unter http://www.w3.org/TR/REC-xml#charsets.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiges Ersatzzeichenpaar übergeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteSurrogateCharEntityAsync (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteSurrogateCharEntityAsync (lowChar As Char, highChar As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteSurrogateCharEntityAsync(char lowChar, char highChar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">Das niedrige Ersatzzeichen. Dieses muss ein Wert zwischen 0xDC00 und 0xDFFF sein.</param>
        <param name="highChar">Das hohe Ersatzzeichen. Dieses muss ein Wert zwischen 0xD800 und 0xDBFF sein.</param>
        <summary>Generiert und schreibt die Ersatzzeichenentität asynchron für das Ersatzzeichenpaar.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteSurrogateCharEntity" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteSurrogateCharEntity%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteValue">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
        <summary>Schreibt einen einzelnen, einfach typisierten Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlWriter.WriteValue%2A> Methode common Language Runtime (CLR) einfach typisierten Werte akzeptiert, konvertiert diese in ihre zeichenfolgendarstellungen, die gemäß der XML Schema Definition Language (XSD) Daten typkonvertierungsregeln und out schreibt, mithilfe der <xref:System.Xml.XmlWriter.WriteString%2A> Methode. Dadurch können Sie die pipeline für Simple-Type-Werte mit minimalen leerzeichentextknoten Mehraufwand bei der Übergabe von Daten zwischen <xref:System.Xml.XPath.XPathDocument>, <xref:System.Xml.XmlReader>, und <xref:System.Xml.XmlWriter> Objekte. Diese Fähigkeit ist auch nützlich, beim Umgang mit CLR-Simple-Typen und eine <xref:System.Xml.XmlWriter> Instanz. Sie erreichen die <xref:System.Xml.XmlWriter.WriteValue%2A> -Methode, schreiben den typisierten Wert anstelle von Methoden in der <xref:System.Xml.XmlConvert> Klasse, um die typisierten Daten vor dem Schreiben in einen Zeichenfolgenwert zu konvertieren.  
  
 Für asynchrone Vorgänge zu konvertieren den Rückgabewert der <xref:System.Xml.XmlWriter.WriteValue%2A> einer Zeichenfolge und das Verwenden der <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 Die folgende Tabelle zeigt die XSD-Datentypen, die CLR-Typen entsprechen:  
  
 Wenn das CLR-Objekt ein Listentyp ist (z. B. <xref:System.Collections.IEnumerable>, <xref:System.Collections.IList> oder <xref:System.Collections.ICollection>), wird es wie ein Array des Werttyps behandelt.  
  
|CLR-Typ|Standard-XSD-Datentyp|  
|--------------|---------------------------|  
|<xref:System.Boolean?displayProperty=nameWithType>|xsd:boolean|  
|<xref:System.Byte?displayProperty=nameWithType>**|xsd:integer|  
|<xref:System.Byte?displayProperty=nameWithType>-Array|xsd:base64Binary|  
|<xref:System.Char?displayProperty=nameWithType>**|xsd:string|  
|<xref:System.DateTime?displayProperty=nameWithType>|xsd:dateTime|  
|<xref:System.Decimal?displayProperty=nameWithType>|xsd:decimal|  
|<xref:System.Double?displayProperty=nameWithType>|xsd:double|  
|<xref:System.Int16?displayProperty=nameWithType>**|xsd:integer|  
|<xref:System.Int32?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Int64?displayProperty=nameWithType>|xsd:integer|  
|<xref:System.Single?displayProperty=nameWithType>|xsd:float|  
|<xref:System.String?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.TextReader?displayProperty=nameWithType>|xsd:string|  
|<xref:System.IO.BinaryReader?displayProperty=nameWithType>|xsd:base64Binary|  
  
 **Diese Typen sind nicht CLS-kompatibel. Sie verfügen nicht über entsprechende <xref:System.Xml.XmlWriter.WriteValue%2A> Methoden.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende <see cref="T:System.Boolean" />-Wert.</param>
        <summary>Schreibt einen <see cref="T:System.Boolean" />-Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der common Language Runtime-Objekt und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Beim Aufruf der <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode konvertiert der <xref:System.Xml.XmlWriter> den Wert gemäß den Konvertierungsregeln für XSD-Datentypen in die entsprechende Zeichenfolgendarstellung und schreibt ihn mit der <xref:System.Xml.XmlWriter.WriteString%2A>-Methode.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen. Übergeben Sie einen Arraytyp an die <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> Überladung, die ein Array von unterschiedlichen Werten zu schreiben.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende <see cref="T:System.DateTime" />-Wert.</param>
        <summary>Schreibt einen <see cref="T:System.DateTime" />-Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der common Language Runtime-Objekt und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Beim Aufruf der <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode konvertiert der <xref:System.Xml.XmlWriter> den Wert gemäß den Konvertierungsregeln für XSD-Datentypen in die entsprechende Zeichenfolgendarstellung und schreibt ihn mit der <xref:System.Xml.XmlWriter.WriteString%2A>-Methode.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen. Übergeben Sie einen Arraytyp an die <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> Überladung, die ein Array von unterschiedlichen Werten zu schreiben.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt einen Buchknoten mit typisierten Daten.  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(DateTimeOffset value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende <see cref="T:System.DateTimeOffset" />-Wert.</param>
        <summary>Schreibt einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende <see cref="T:System.Decimal" />-Wert.</param>
        <summary>Schreibt einen <see cref="T:System.Decimal" />-Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der common Language Runtime-Objekt und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Beim Aufruf der <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode konvertiert der <xref:System.Xml.XmlWriter> den Wert gemäß den Konvertierungsregeln für XSD-Datentypen in die entsprechende Zeichenfolgendarstellung und schreibt ihn mit der <xref:System.Xml.XmlWriter.WriteString%2A>-Methode.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen. Übergeben Sie einen Arraytyp an die <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> Überladung, die ein Array von unterschiedlichen Werten zu schreiben.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende <see cref="T:System.Double" />-Wert.</param>
        <summary>Schreibt einen <see cref="T:System.Double" />-Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der common Language Runtime-Objekt und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Beim Aufruf der <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode konvertiert der <xref:System.Xml.XmlWriter> den Wert gemäß den Konvertierungsregeln für XSD-Datentypen in die entsprechende Zeichenfolgendarstellung und schreibt ihn mit der <xref:System.Xml.XmlWriter.WriteString%2A>-Methode.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen. Übergeben Sie einen Arraytyp an die <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> Überladung, die ein Array von unterschiedlichen Werten zu schreiben.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel schreibt einen Buchknoten mit typisierten Daten.  
  
 [!code-csharp[XmlWriter_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende <see cref="T:System.Int32" />-Wert.</param>
        <summary>Schreibt einen <see cref="T:System.Int32" />-Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der common Language Runtime-Objekt und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Beim Aufruf der <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode konvertiert der <xref:System.Xml.XmlWriter> den Wert gemäß den Konvertierungsregeln für XSD-Datentypen in die entsprechende Zeichenfolgendarstellung und schreibt ihn mit der <xref:System.Xml.XmlWriter.WriteString%2A>-Methode.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen. Übergeben Sie einen Arraytyp an die <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> Überladung, die ein Array von unterschiedlichen Werten zu schreiben.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende <see cref="T:System.Int64" />-Wert.</param>
        <summary>Schreibt einen <see cref="T:System.Int64" />-Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der common Language Runtime-Objekt und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Beim Aufruf der <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode konvertiert der <xref:System.Xml.XmlWriter> den Wert gemäß den Konvertierungsregeln für XSD-Datentypen in die entsprechende Zeichenfolgendarstellung und schreibt ihn mit der <xref:System.Xml.XmlWriter.WriteString%2A>-Methode.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen. Übergeben Sie einen Arraytyp an die <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> Überladung, die ein Array von unterschiedlichen Werten zu schreiben.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Objektwert.  
  
 **Hinweis** Seit der Veröffentlichung von .NET Framework 3.5 akzeptiert diese Methode nun auch <see cref="T:System.DateTimeOffset" /> als Parameter.</param>
        <summary>Schreibt den Objektwert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird das Objekt der common Language Runtime (CLR) und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Wenn das CLR-Objekt ein Listentyp wie <xref:System.Collections.IEnumerable>, <xref:System.Collections.IList>, oder <xref:System.Collections.ICollection>, wird dies als ein Array des Werttyps behandelt. Die <xref:System.Xml.XmlWriter> konvertiert der Wert in seine zeichenfolgendarstellungen gemäß der XML-Schema (XSD) Datentyp Regeln und schreibt ihn mit der <xref:System.Xml.XmlWriter.WriteString%2A> Methode.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Die zu schreibende Gleitkommazahl mit einfacher Genauigkeit.</param>
        <summary>Schreibt eine Gleitkommazahl mit einfacher Genauigkeit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der common Language Runtime-Objekt und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Beim Aufruf der <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode konvertiert der <xref:System.Xml.XmlWriter> den Wert gemäß den Konvertierungsregeln für XSD-Datentypen in die entsprechende Zeichenfolgendarstellung und schreibt ihn mit der <xref:System.Xml.XmlWriter.WriteString%2A>-Methode.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen. Übergeben Sie einen Arraytyp an die <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> Überladung, die ein Array von unterschiedlichen Werten zu schreiben.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge den Rückgabewert dieser Methode in eine Zeichenfolge zu konvertieren, und verwenden Sie die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteValue(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende <see cref="T:System.String" />-Wert.</param>
        <summary>Schreibt einen <see cref="T:System.String" />-Wert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der common Language Runtime-Objekt und den Eingabewert mithilfe der XML Schema Definition Language (XSD) Data-typkonvertierungsregeln in die gewünschte Ausgabe konvertiert.  
  
 Wenn <xref:System.Xml.XmlWriter.WriteValue%2A> mehrmals hintereinander aufgerufen wird, werden die Werte nicht durch Leerzeichen getrennt. Wenn Leeraum eingefügt werden soll, müssen Sie zwischen Aufrufen von <xref:System.Xml.XmlWriter.WriteWhitespace%2A> die <xref:System.Xml.XmlWriter.WriteValue%2A>-Methode aufrufen. Übergeben Sie einen Arraytyp an die <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=nameWithType> Überladung, die ein Array von unterschiedlichen Werten zu schreiben.  
  
 Wenn diese Methode aufgerufen wird, auf eine <xref:System.Xml.XmlWriter> Instanz dieser Ausgaben nur-Text, der typisierte Wert in Text serialisiert wird.  
  
 Für asynchrone Vorgänge verwenden die <xref:System.Xml.XmlWriter.WriteStringAsync%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Es wurde ein ungültiger Wert angegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public abstract void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteWhitespace(System::String ^ ws);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">Die Zeichenfolge von Leerraumzeichen.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse den angegebenen Leerraum.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird verwendet, auf das Dokument manuell formatieren.  
  
 Die asynchrone Version dieser Methode finden Sie <xref:System.Xml.XmlWriter.WriteWhitespaceAsync%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Zeichenfolge enthält Zeichen, die keine Leerraumzeichen sind.</exception>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteWhitespaceAsync (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteWhitespaceAsync(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteWhitespaceAsync (ws As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteWhitespaceAsync(System::String ^ ws);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">Die Zeichenfolge von Leerraumzeichen.</param>
        <summary>Schreibt den angegebenen Leerraum asynchron.</summary>
        <returns>Die Aufgabe, die den asynchronen <see langword="WriteWhitespace" />-Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist die asynchrone Version von <xref:System.Xml.XmlWriter.WriteWhitespace%2A>, mit der gleichen Funktionalität. Wenn diese Methode verwenden möchten, müssen Sie festlegen der <xref:System.Xml.XmlWriterSettings.Async%2A> flag `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine asynchrone <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, ohne das <see cref="P:System.Xml.XmlWriterSettings.Async" />-Flag auf <see langword="true" /> festzulegen. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Nachricht „Legen Sie XmlWriterSettings.Async auf True fest, wenn Sie die Async-Methoden verwenden möchten“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse den aktuellen <see langword="xml:lang" />-Bereich ab.</summary>
        <value>Der aktuelle <see langword="xml:lang" />-Bereich.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft kann es sich um eine Komponente, um herauszufinden, in welchem Zustand sich, dass eine andere Komponente den Writer verlassen hat. Beispielsweise möchte vielleicht eine Komponente einer anderen mitteilen, welche Sprache Hilfetext generiert ist. Die Sprachinformationen durch Schreiben einer `xml:lang` Attribut.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse einen <see cref="T:System.Xml.XmlSpace" /> ab, der den aktuellen <see langword="xml:space" />-Bereich darstellt.</summary>
        <value>Ein <see langword="XmlSpace" />, der den aktuellen <see langword="xml:space" />-Bereich darstellt.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Bedeutung  
  
 </description></listheader><item><term><see langword="None" /></term><description> Dies ist die Standardeinstellung, wenn kein <see langword="xml:space" /> -Bereich vorhanden ist.  
  
 </description></item><item><term><see langword="Default" /></term><description> Der aktuelle Bereich ist <see langword="xml:space" />= "Default".  
  
 </description></item><item><term><see langword="Preserve" /></term><description> Der aktuelle Bereich ist <see langword="xml:space" />= "preserve".  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dadurch wird eine Komponente, um herauszufinden, welcher Zustand auf den Writer in einer anderen Komponente verlassen hat.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Eine <see cref="T:System.Xml.XmlWriter" />-Methode wurde aufgerufen, bevor ein vorheriger asynchroner Vorgang abgeschlossen wurde. In diesem Fall wird <see cref="T:System.InvalidOperationException" /> mit der Meldung „Es wird bereits ein asynchroner Vorgang ausgeführt“ ausgelöst.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
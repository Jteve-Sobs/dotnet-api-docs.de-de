<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7103051c3443fc2f7a99ece29b74446697fa64ff" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52613255" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt eine Gruppe von Funktionen an, die für das <see cref="T:System.Xml.XmlWriter" />-Objekt unterstützt werden sollen, das von der <see cref="Overload:System.Xml.XmlWriter.Create" />-Methode erstellt wurde.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlWriter.Create%2A> Methode ist der bevorzugte Mechanismus zum Abrufen von <xref:System.Xml.XmlWriter> Instanzen. Die <xref:System.Xml.XmlWriter.Create%2A> -Methode verwendet die <xref:System.Xml.XmlWriterSettings> Klasse angeben, welche Funktionen im Implementieren der <xref:System.Xml.XmlWriter> -Objekt, das erstellt wird.  
  
> [!NOTE]
>  Bei Verwendung der <xref:System.Xml.XmlWriter> Objekt mit der <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> -Methode, die Sie verwenden sollten die <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> -Eigenschaft zum Abrufen einer <xref:System.Xml.XmlWriterSettings> Objekt mit den richtigen Einstellungen. Dieses Verfahren gewährleistet, dass das erstellte <xref:System.Xml.XmlWriter>-Objekt über die korrekten Ausgabeeinstellungen verfügt.  
  
 Die <xref:System.Xml.XmlWriterSettings> Klasse enthält Eigenschaften dieses Steuerelements Daten Übereinstimmung mit Standards und die Ausgabe-Format.  
  
 Verwenden Sie für die datenkonformitätsüberprüfung und automatische Korrekturen: Diese Eigenschaften:  
  
|Eigenschaft|Bedeutung|Wert|Standard|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|Überprüfen Sie, dass in der zulässigen XML-Zeichen sind, ob Zeichensatz, gemäß der W3C.|`true` oder `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|Ob zu überprüfen, ob die Ausgabe um ein wohlgeformtes XML 1.0-Dokument oder-Fragment ist.|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (Anwendungsebene), <xref:System.Xml.ConformanceLevel.Fragment> (Fragment-Ebene), oder <xref:System.Xml.ConformanceLevel.Auto> (automatische Erkennung)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (Übereinstimmung auf Dokumentebene)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|An, ob schließende Tags für alle nicht geschlossene Elemente hinzugefügt. wenn die <xref:System.Xml.XmlWriter.Close%2A> Methode wird aufgerufen.|`true` oder `false`|`true`|  
  
 Um das Ausgabeformat angeben möchten, verwenden Sie diese Eigenschaften:  
  
|Eigenschaft|Bedeutung|Wert|Standard|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|Um zu verwendende textcodierung.|<xref:System.Text.Encoding?displayProperty=nameWithType>-Wert|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|Angibt, ob Elemente eingerückt werden sollen|`true` oder `false`|`false` (keine Einzüge)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zeichenfolge Einzug verwendet werden soll (wird verwendet, wenn <xref:System.Xml.XmlWriterSettings.Indent%2A> nastaven NA hodnotu `true`).|Zeichenfolge|Zwei Leerzeichen|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|Zeichenfolge, die für Zeilenumbrüche verwendet.|Zeichenfolge|`\r\n` (Carriage return, Wagenrücklauf, Zeilenvorschub)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|Gewusst wie Zeilenumbruchzeichen zu behandeln.|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> Wert: <xref:System.Xml.NewLineHandling.Entitize> (normalisiert), <xref:System.Xml.NewLineHandling.Replace> (ersetzen), oder <xref:System.Xml.NewLineHandling.None> (lassen Sie unverändert)|<xref:System.Xml.NewLineHandling.Replace> (ersetzen Sie dies durch von angegebenen Zeichen <xref:System.Xml.XmlWriterSettings.NewLineChars%2A>)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|Angibt, ob Attribute in einzelne Zeilen zu schreiben (hat keine Auswirkungen, wenn <xref:System.Xml.XmlWriterSettings.Indent%2A> ist `false`).|`true` oder `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|Ob eine XML-Deklaration geschrieben.|`true` oder `false`|`false`|  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlWriter> , die in eine XML-Datei schreibt und jedes Attribut in einer neuen Zeile.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 Das Beispiel erzeugt die folgende Ausgabe:  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlWriterSettings" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgende Tabelle werden die anfänglichen Eigenschaftenwerte für eine Instanz von <xref:System.Xml.XmlWriterSettings>.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (Wagenrücklauf, Zeilenumbruch).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlWriter> -Objekt, das das Tabstoppzeichen für den Einzug verwendet.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob asynchrone <see cref="T:System.Xml.XmlWriter" />-Methoden für eine bestimmte <see cref="T:System.Xml.XmlWriter" />-Instanz verwendet werden können.</summary>
        <value>
          <see langword="true" />, wenn asynchrone Methoden verwendet werden können; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen diesen Wert festlegen, um `true` beim Erstellen einer neuen <xref:System.Xml.XmlWriter> Instanz, wenn Sie asynchrone verwenden möchten <xref:System.Xml.XmlWriter> Methoden in dieser Instanz. Nach der <xref:System.Xml.XmlWriter> Instanz erstellt, die <xref:System.Xml.XmlWriterSettings.Async%2A> Eigenschaft ist schreibgeschützt. Der Standardwert dieser Eigenschaft ist `false`.  
  
 Dieses Flag wird ignoriert, durch die <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> überladen. Dies bedeutet, dass bei der Erstellung einer neuen <xref:System.Xml.XmlWriter> basierend auf einer vorhandenen <xref:System.Xml.XmlWriter>, das asynchrone Verhalten hängt von der Eingabe <xref:System.Xml.XmlWriter>, und Sie können keine der <xref:System.Xml.XmlWriterSettings.Async%2A> Flag, das asynchrone Verhalten zu ändern.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Asynchrone Programmierung mit Async und Await (C# und Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der XML-Writer prüfen soll, ob alle Zeichen im Dokument dem Abschnitt „2.2 Characters“ (Zeichen) der [W3C Recommendation (W3C-Empfehlung) für XML 1.0](https://www.w3.org/TR/REC-xml/#charsets) entsprechen, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn Zeichen überprüft werden sollen, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Xml.XmlWriter> Objekt unterstützt die zeichenüberprüfung, sie löst eine Ausnahme aus, wenn alle Zeichen außerhalb des Bereichs zulässiger XML-Zeichen, die vom "2.2 Characters"-Abschnitt der W3C angegeben werden, [XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/#charsets).  
  
 Zeichenüberprüfung enthält keine Überprüfung auf nicht zulässige Zeichen in XML-Namen oder sicher, dass alle XML-Namen ungültig sind. Diese Überprüfungen sind Teil der übereinstimmungsprüfung und werden immer ausgeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der <see cref="T:System.Xml.XmlWriterSettings" />-Instanz.</summary>
        <returns>Das geklonte <see cref="T:System.Xml.XmlWriterSettings" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die geklonte <xref:System.Xml.XmlWriterSettings> -Objekt geändert werden kann, ohne Auswirkungen auf die Einstellungen auf das ursprüngliche Objekt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Xml.XmlWriter" /> auch den zugrunde liegenden Stream oder <see cref="T:System.IO.TextWriter" /> schließen soll, wenn die <see cref="M:System.Xml.XmlWriter.Close" />-Methode aufgerufen wird, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn auch der zugrunde liegende Stream oder <see cref="T:System.IO.TextWriter" /> geschlossen werden soll, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Einstellung ist nützlich, wenn Sie möchten XML-Daten in einen Stream schreiben und zusätzliche Information an das Ende des Streams, der nach dem Hinzufügen der <xref:System.Xml.XmlWriter> Schreibvorgang abgeschlossen hat.  
  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Inhalte von Instanzen, die XML-Ausgabe in einen Stream oder <xref:System.IO.TextWriter>ist, andernfalls wird diese Einstellung ignoriert.  
  
   
  
## Examples  
 Im folgende Beispiel schreibt ein XML-Fragment in einen Speicherdatenstrom.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Übereinstimmungsniveau ab, auf den der XML-Writer die XML-Ausgabe überprüft, oder legt dieses fest.</summary>
        <value>Einer der Enumerationswerte, der das Übereinstimmungsniveau angibt (Dokument, Fragment oder automatische Erkennung). Der Standardwert ist <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> -Eigenschaft konfiguriert den XML-Writer, um zu überprüfen und garantiert, dass der geschriebene Stream einer bestimmten Gruppe von Regeln entspricht. Die XML-Daten können überprüft werden, um anzuzeigen, dass er den Regeln für ein wohlgeformtes XML 1.0-Dokument oder ein Dokumentfragment entspricht. Die folgende Tabelle beschreibt die drei Einstellungen. Der Standardwert ist-Konformität auf Dokumentebene.  
  
|Einstellung|Beschreibung |  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Stellt sicher, dass die XML-Ausgabe entspricht der [Regeln für ein wohlgeformtes XML 1.0-Dokument](https://www.w3.org/TR/REC-xml/#sec-well-formed) und können von einem beliebigen konformen Prozessor verarbeitet werden.<br /><br /> Die Überprüfungen der Compilerkonformität Dokument gehört der größte Teil der Überprüfungen auf, und vergewissern Sie sich außerdem Folgendes:<br /><br /> -Das Element der obersten Ebene keine Knoten als XML-Deklaration, DTD, Element, Kommentar, Leerraum und verarbeitungsanweisung.<br />-Die XML-Daten verfügt über nur einen Elementknoten der obersten Ebene.<br /><br /> Der XML-Writer keine DTD-Informationen analysiert werden, die geschrieben werden. Der Benutzer ist dafür verantwortlich, sicherzustellen, dass die DTD wohlgeformt ist.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Stellt sicher, dass die XML-Ausgabe entspricht der [Regeln für ein wohlgeformtes XML 1.0-Dokumentfragment](https://www.w3.org/TR/REC-xml/#wf-entities).<br /><br /> Diese Einstellung akzeptiert XML-Daten mit mehreren Stammelementen oder Textknoten auf der obersten Ebene. Diese Ebene der Überprüfung stellt sicher, dass alle Prozessoren den als eine extern analysierte XML 1.0-Entität gelesenen Stream verwenden können.<br /><br /> DTD-Informationen ist in Dokumentfragmenten nicht zulässig.|  
|<xref:System.Xml.ConformanceLevel.Auto>|Gibt an, dass die Ebene der übereinstimmungsprüfung für Fragmente wird basierend auf den eingehenden Daten von der XML-Writer bestimmt werden soll. Diese Einstellung kann hilfreich sein, wenn Sie nicht wissen, ob das generierte XML ein wohlgeformtes XML-Dokument oder ein Fragment ist.<br /><br /> Die Übereinstimmungsprüfung für Dokumente wird in den folgenden Fällen angewendet:<br /><br /> -If die <xref:System.Xml.XmlWriter.WriteStartDocument%2A> Methode wird aufgerufen.<br />– Wenn die DTD-Informationen geschrieben wird.<br /><br /> Konformitätsüberprüfung des Fragments wird angewendet, wenn die XML-Daten, eines der folgenden enthält:<br /><br /> -Text, CDATA oder EntityReference-Knoten auf der Stammebene.<br />-Mehr als ein Element auf der Stammebene.<br />-Kein Element auf der Stammebene.<br /><br /> Wenn ein Konflikt auftritt, z. B., wenn Sie versuchen, einen Textknoten und eine DTD auf der Stammebene zu schreiben, wird eine <xref:System.Xml.XmlException> ausgelöst.<br /><br /> Wenn Sie einen anderen umschlossen werden <xref:System.Xml.XmlWriter> Objekt, das äußere Objekt keine zusätzliche übereinstimmungsprüfung; Dies ist das zugrunde liegende Objekt überlassen.|  
  
 Wenn der XML-Writer alle Informationen, die die angegebene Ebene der Übereinstimmung mit Standards verletzen würde erkannt wird, wird eine Ausnahme ausgelöst. In einigen Fällen werden Fehler bei der Konformität mit der XML-Writer automatisch korrigiert. Zum Beispiel schließt den Writer ein Attribut nicht geschlossenes, ohne eine Ausnahme auszulösen. Die folgende Tabelle zeigt, wie verschiedene Verstöße gegen die Konformität in jede Einstellung, die verarbeitet werden.  
  
|Bedingung|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|DTD-Informationen gefunden wurden.|Nicht um einen Verstoß für diese Einstellung. Der XML-Writer prüft jedoch nicht die DTD; der Benutzer muss stellen Sie sicher, dass die DTD wohlgeformt ist.|<xref:System.Xml.XmlException> wird ausgelöst.|Übereinstimmungsprüfung für Dokumente angewendet wird.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> wird aufgerufen.|Nicht als einen Verstoß für diese Einstellung aus.|<xref:System.Xml.XmlException> wird ausgelöst.|Übereinstimmungsprüfung für Dokumente angewendet wird.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> wird mehrmals aufgerufen.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Ein Textwert, die auf der obersten Ebene (nicht unter einem Knoten Element oder Attribut) wird angezeigt.|<xref:System.Xml.XmlException> wird ausgelöst.|Nicht Verstoß als.|Die Konformitätsüberprüfung für Fragmente wird angewendet.|  
|Mehrere Elemente oder keine Elemente werden auf der obersten Ebene angezeigt.|<xref:System.Xml.XmlException> wird ausgelöst.|Nicht Verstoß als.|Die Konformitätsüberprüfung für Fragmente wird angewendet.|  
|Element der obersten Ebene besteht aus Leerzeichen.|Nicht Verstoß als.|Nicht Verstoß als.|Nicht Verstoß als.|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> wird nicht zum Beenden eines Attributknotens aufgerufen werden.|Durch die XML-Writer behoben.|Durch die XML-Writer behoben.|Durch die XML-Writer behoben.|  
|Der XML-Writer befindet sich in einem ungenügend geschachtelten Zustand (z. B. eine <xref:System.Xml.XmlWriter.WriteStartElement%2A> Aufruf wird gefolgt von einem <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>).|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Element der obersten Ebene ist ein Attribut.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Es werden mehrere aneinandergrenzende Textknoten gefunden.|Kein Verstoß, aber es liegt in der Verantwortung des Benutzers, der die Textknoten verketten.|Kein Verstoß, aber es liegt in der Verantwortung des Benutzers, der die Textknoten verketten.|Kein Verstoß, aber es liegt in der Verantwortung des Benutzers, der die Textknoten verketten.|  
|In einem Element wird das gleiche Namespacepräfix zweimal deklariert.|Der XML-Writer wird ein neues Präfix für den zweiten Namespace generiert.|Der XML-Writer wird ein neues Präfix für den zweiten Namespace generiert.|Der XML-Writer wird ein neues Präfix für den zweiten Namespace generiert.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> Gibt ein Präfix und einen Namespace, der innerhalb dieses Gültigkeitsbereichs deklariert wird oder das Präfix ist einem anderen Namespace zugeordnet.|Der XML-Writer schreibt den nötigen Namespaceknotens.|Der XML-Writer schreibt den nötigen Namespaceknotens.|Der XML-Writer schreibt den nötigen Namespaceknotens.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> Gibt an, einem Präfix und einen Namespace, der innerhalb des Bereichs deklariert wird.|Der XML-Writer schreibt den nötigen Namespaceknotens.|Der XML-Writer schreibt den nötigen Namespaceknotens.|Der XML-Writer schreibt den nötigen Namespaceknotens.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> Gibt an, ein Präfix und einen Namespace, aber das Präfix, das mit einem anderen in-Scope-Namespace zugeordnet ist.|Der XML-Writer ignoriert das angegebene Präfix und sucht das richtige Präfix oder generiert ein neues Präfix.|Der XML-Writer ignoriert das angegebene Präfix und sucht das richtige Präfix oder generiert ein neues Präfix.|Der XML-Writer ignoriert das angegebene Präfix und sucht das richtige Präfix oder generiert ein neues Präfix.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> Dient zum Schreiben von Inhalt des Elements mit einem Namespace, der nicht vorhanden ist innerhalb des Bereichs.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> Dient zum Attributinhalt mithilfe von innerhalb des Bereichs einen Namespace, der nicht vorhanden ist.|Der XML-Writer schreibt die nötigen Namespacedeklaration.|Der XML-Writer schreibt die nötigen Namespacedeklaration.|Der XML-Writer schreibt die nötigen Namespacedeklaration.|  
|Die `xml:space` Attribut keinen gültigen Wert enthält.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Es wurde ein ungültiger Name gefunden.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Die `xml` Präfix ist nicht zu einem URI überein.|Der XML-Writer überprüft nicht für diese Art von Verstoß.|Der XML-Writer überprüft nicht für diese Art von Verstoß.|Der XML-Writer überprüft nicht für diese Art von Verstoß.|  
|Die `xml` Präfix zugeordnet ist nicht die http://www.w3.org/XML/1998/namespace URI.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Die `xmlns` Präfix oder der lokale Name ist nicht zu einem URI überein.|Der XML-Writer überprüft nicht für diese Art von Verstoß.|Der XML-Writer überprüft nicht für diese Art von Verstoß.|Der XML-Writer überprüft nicht für diese Art von Verstoß.|  
|Die `xmlns` Präfix oder der lokale Name ist nicht abgeglichen, um die http://www.w3.org/2000/xmlns URI.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
  
   
  
## Examples  
 Im folgende Beispiel schreibt ein XML-Fragment in einen Speicherdatenstrom.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob <see cref="T:System.Xml.XmlWriter" /> die URI-Attribute nicht mit Escapezeichen versehen soll.</summary>
        <value>
          <see langword="true" /> Wenn die <see cref="T:System.Xml.XmlWriter" /> nicht mit Escapezeichen versehen URI-Attribute ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ der Textcodierung ab oder legt diesen fest.</summary>
        <value>Die zu verwendende Textcodierung. Der Standardwert ist <see langword="Encoding.UTF8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlWriter> einen Puffer von Zeichen codiert, alle gleichzeitig, anstatt Zeichen für Zeichen. Eine Ausnahme wird ausgelöst, wenn die <xref:System.Xml.XmlWriter.Flush%2A> Methode wird aufgerufen, wenn die Codierung Fehler auftreten.  
  
 Die <xref:System.Xml.XmlWriterSettings.Encoding%2A> Eigenschaft gilt nur für die <xref:System.Xml.XmlWriter> Instanzen, die entweder mit dem angegebenen erstellt werden <xref:System.IO.Stream> oder mit dem angegebenen Dateinamen. Wenn die <xref:System.Xml.XmlWriter> Instanz wird erstellt, mit dem angegebenen <xref:System.IO.TextWriter>, <xref:System.Xml.XmlWriterSettings.Encoding%2A> Eigenschaft überschrieben wird, von der Codierung des zugrunde liegenden <xref:System.IO.TextWriter>. Z. B., wenn diese Eigenschaft in Unicode (UTF-16) festgelegt ist, für einen bestimmten <xref:System.Xml.XmlWriter>, jedoch die zugrunde liegende Writer ist ein <xref:System.IO.StreamWriter> (die sich daraus ableitet <xref:System.IO.TextWriter>) die Codierung UTF8, wird die Ausgabe UTF-8 codiert sein.  
  
 Wenn die <xref:System.Xml.XmlWriter> Instanz wird mit anderen Output-Parameter erstellt der <xref:System.Xml.XmlWriterSettings.Encoding%2A> Eigenschaft wird ignoriert.  
  
 Im folgenden Beispiel:  
  
-   Der Standardwert von <xref:System.Xml.XmlWriterSettings.Encoding%2A> ist `Encoding.UTF8`.  
  
-   Die <xref:System.IO.StreamWriter> nastaven NA hodnotu `Encoding.Unicode` und <xref:System.IO.StreamWriter>Codierung des Außerkraftsetzungen der <xref:System.Xml.XmlWriterSettings.Encoding%2A> Einstellung.  
  
-   Die Ausgabe `Encoding.Unicode`.  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  Akzeptieren Sie kein <xref:System.Text.Encoding> Objekt aus einer nicht vertrauenswürdigen Quelle.  
  
   
  
## Examples  
 Im folgende Beispiel schreibt ein XML-Fragment in einen Speicherdatenstrom.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Elemente eingezogen werden sollen, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn einzelne Elemente mit Einzug in neue Zeilen geschrieben werden sollen, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text-Inhalt auszugeben; andernfalls wird diese Einstellung ignoriert.  
  
 Die Elemente werden eingezogen werden, solange das Element nicht gemischten Inhalt enthält. Nach der <xref:System.Xml.XmlWriter.WriteString%2A> oder <xref:System.Xml.XmlWriter.WriteWhitespace%2A> aufgerufen, um ein Element mit gemischtem Inhalt schreiben die <xref:System.Xml.XmlWriter> beendet den Einzug. Der Einzug wird fortgesetzt, sobald das Element mit gemischte Inhalte geschlossen wird.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlWriter> -Objekt, das das Tabstoppzeichen für den Einzug verwendet.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die für den Einzug verwendet werden soll, oder legt diese fest. Diese Einstellung wird verwendet, wenn die <see cref="P:System.Xml.XmlWriterSettings.Indent" />-Eigenschaft auf <see langword="true" /> festgelegt ist.</summary>
        <value>Die für den Einzug zu verwendende Zeichenfolge. Diese kann auf jeden Zeichenfolgenwert festgelegt werden. Wenn Sie die Gültigkeit des XML-Codes sicherstellen möchten, sollten Sie jedoch nur gültige Leerraumzeichen, z. B. Leerzeichen, Tabstoppzeichen, Wagenrückläufe oder Zeilenvorschübe angeben. Der Standard beträgt zwei Leerzeichen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text-Inhalt auszugeben; andernfalls wird diese Einstellung ignoriert. Die <xref:System.Xml.XmlWriter> löst eine Ausnahme aus, wenn die Einzugszeichen ungültigem XML-Code führen würde.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlWriter> -Objekt, das das Tabstoppzeichen für den Einzug verwendet.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> zugewiesene Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Xml.XmlWriter" /> beim Schreiben von XML-Inhalt doppelte Namespacedeklarationen entfernen soll, oder legt diesen fest. Im Standardverhalten gibt der Writer alle Namespacedeklarationen aus, die in der Namespaceauflösung des Writers vorhanden sind.</summary>
        <value>Die <see cref="T:System.Xml.NamespaceHandling" />-Enumeration, die verwendet wird, um anzugeben, ob doppelte Namespacedeklarationen im <see cref="T:System.Xml.XmlWriter" /> entfernt werden.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die für Zeilenumbrüche verwendet werden soll, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die für Zeilenumbrüche verwendet werden soll. Diese kann auf jeden Zeichenfolgenwert festgelegt werden. Wenn Sie die Gültigkeit des XML-Codes sicherstellen möchten, sollten Sie jedoch nur gültige Leerraumzeichen, z. B. Leerzeichen, Tabstoppzeichen, Wagenrückläufe oder Zeilenvorschübe angeben. Der Standardwert ist <c>\r\n</c> (Wagenrücklauf, Zeilenumbruch).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text-Inhalt auszugeben; andernfalls wird diese Einstellung ignoriert. Die <xref:System.Xml.XmlWriter> löst eine Ausnahme aus, wenn die Zeilenumbruchzeichen ungültigem XML-Code führen würde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> zugewiesene Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Zeilenumbrüche in der Ausgabe normalisiert werden sollen, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Xml.NewLineHandling" />-Werte. Der Standardwert ist <see cref="F:System.Xml.NewLineHandling.Replace" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Einstellung gilt beim Schreiben von Text-Inhalt oder Attributwerte. Jede der <xref:System.Xml.NewLineHandling> Werte wird im folgenden beschrieben:  
  
-   Die <xref:System.Xml.NewLineHandling.Entitize> Einstellung informiert den <xref:System.Xml.XmlWriter> neue-Zeile-Zeichen zu ersetzen, die andernfalls nicht von einem normalisierenden beibehalten werden würde <xref:System.Xml.XmlReader> mit Zeichenentitäten. Dies ist nützlich in Round-Trip-Szenarien, in dem die Ausgabe wird von einem normalisierenden gelesen <xref:System.Xml.XmlReader>. Zusätzliche Normalisierungsregeln gelten für Attributwerte bei der Roundtripping seit `\t`, `\n` und `\r` werden durch ein Leerzeichen in Attributwerten bei der Normalisierung in ersetzt eine <xref:System.Xml.XmlReader>.  
  
-   Die <xref:System.Xml.NewLineHandling.Replace> Einstellung informiert den <xref:System.Xml.XmlWriter> ersetzen neue-Zeile-Zeichen mit `\r\n`, d. h., die neue Zeile Format, die von der Microsoft Windows-Betriebssystem verwendet. Dadurch wird sichergestellt, dass die Datei ordnungsgemäß von den Editor oder Microsoft Word-Anwendungen angezeigt werden kann. Diese Einstellung ersetzt neue Zeilen in Attributen auch mit Zeichenentitäten um Zeichen zu erhalten. Dies ist der Standardwert.  
  
-   Die <xref:System.Xml.NewLineHandling.None> Einstellung informiert den <xref:System.Xml.XmlWriter> , die Eingabe nicht. Diese Einstellung wird verwendet, wenn Sie nicht, dass jede neue-Zeile-Verarbeitung möchten. Dies ist nützlich, wenn die Ausgabe von gelesen wird ein <xref:System.Xml.XmlReader> , die keiner Normalisierung (z. B. eine <xref:System.Xml.XmlTextReader> mit Standardeinstellungen.)  
  
 Die folgenden Tabellen zeigen die Ausgabe der <xref:System.Xml.XmlWriter.WriteString%2A> Methode, wenn der Eingabewert abhängig angegeben die <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> Einstellung der Eigenschaft. Die Tabellen zeigen die Ausgabe beim Schreiben von Textinhalt sowie beim Schreiben eines Attributwerts.  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Wurden|&#D;\n|\n|&#D;|\t|  
|Ersetzen|\r\n|\r\n|\r\n|\t|  
|Keiner|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Wurden|&#D;&#A;|&AMP; #A;|&#D;|&\#9;|  
|Ersetzen|&#D;&#A;|&AMP; #A;|&#D;|&\#9;|  
|Keiner|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  Die <xref:System.Xml.XmlWriter> weist das folgende Verhalten, beim Schreiben von Inhalten in einem CDATA-Abschnitt, kommentieren oder verarbeitungsanweisung. Neue Zeilen werden nicht durch ihre Zeichenentitäten, ersetzt, auch wenn die <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> -Eigenschaftensatz auf <xref:System.Xml.NewLineHandling.Entitize>. Dies ist da Zeichenentitäten in CDATA-Abschnitten, Kommentare oder Verarbeiten von Anweisungen nicht erkannt werden. Wenn die <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> -Eigenschaftensatz auf <xref:System.Xml.NewLineHandling.None> oder <xref:System.Xml.NewLineHandling.Replace>, das Verhalten ist identisch, beim Schreiben eines Textwert des Knotens.  
  
 Die folgende Tabelle beschreibt, was einem normalisierenden <xref:System.Xml.XmlReader> gibt für jede Eingabe Leerzeichen zurück. Weitere Informationen finden Sie in Abschnitten 2.11 und der W3C 3.3.3 [XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/).  
  
> [!NOTE]
>  Ein normalisierender Reader ist eine <xref:System.Xml.XmlReader> Objekt erstellt wurde, indem die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Methode. Diese Objekte führen immer Line-Break-Normalisierung und die vollständige Normalisierung von Attributen. Die <xref:System.Xml.XmlTextReader> Objekt kann auch einen normalisieren Reader sein, wenn es sich handelt <xref:System.Xml.XmlTextReader.Normalization%2A> -Eigenschaftensatz auf `true`.  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Knoten-Textwert|\n|\n|\n|\t|  
|Attributwert|Leerzeichen|Leerzeichen|Leerzeichen|Leerzeichen|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Attribute in eine neue Zeile geschrieben werden sollen, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, um Attribute in einzelne Zeilen zu schreiben, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.  
  
 <block subset="none" type="note"><para>  
 Diese Einstellung hat keinerlei Auswirkungen, wenn der <see cref="P:System.Xml.XmlWriterSettings.Indent" />-Eigenschaftswert <see langword="false" /> ist.  
  
</para></block>  
  
 Wenn <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> auf <see langword="true" /> festgelegt ist, wird jedem Attribut eine neue Zeile und eine zusätzliche Einzugsebene vorangestellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text-Inhalt auszugeben; andernfalls wird diese Einstellung ignoriert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlWriter> , die in eine XML-Datei schreibt und jedes Attribut in einer neuen Zeile.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 Das Beispiel erzeugt die folgende Ausgabe:  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob eine XML-Deklaration ausgelassen werden soll, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, um die XML-Deklaration auszulassen, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />. Es wird eine XML-Deklaration geschrieben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text-Inhalt auszugeben; andernfalls wird diese Einstellung ignoriert.  
  
 Wenn <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> nastaven NA hodnotu `false`, automatisch die XML-Deklaration geschrieben  
  
 Die XML-Deklaration wird immer geschrieben werden, wenn <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> nastaven NA hodnotu <xref:System.Xml.ConformanceLevel.Document>, auch wenn <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> nastaven NA hodnotu `true`.  
  
 Die XML-Deklaration werden nicht geschrieben werden, wenn <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> nastaven NA hodnotu <xref:System.Xml.ConformanceLevel.Fragment>. Rufen Sie <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> explizit eine XML-Deklaration geschrieben.  
  
   
  
## Examples  
 Im folgende Beispiel schreibt ein XML-Fragment in einen Speicherdatenstrom.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Methode zum Serialisieren der <see cref="T:System.Xml.XmlWriter" />-Ausgabe ab.</summary>
        <value>Einer der <see cref="T:System.Xml.XmlOutputMethod" />-Werte. Der Standardwert ist <see cref="F:System.Xml.XmlOutputMethod.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt die Methode verwendet, um die Ausgabe zu serialisieren. Die Ausgabe kann mit der HTML-Regeln, die XML 1.0-Regeln und So weiter serialisiert werden. Diese Einstellung wird festgelegt, indem der XSLT-Prozessor und wird intern vom Visual Studio verwendet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die Member der settings-Klasse auf ihre Standardwerte zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgende Tabelle zeigt die Eigenschaftswerte für eine Instanz von <xref:System.Xml.XmlWriterSettings>.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`.|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob <see cref="T:System.Xml.XmlWriter" /> Endtags zu allen nicht geschlossenen Elementtags hinzufügt, wenn die <see cref="M:System.Xml.XmlWriter.Close" />-Methode aufgerufen wird.</summary>
        <value>
          <see langword="true" />, wenn alle nicht geschlossenen Elementtags geschlossen werden; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie dieses Flag auf `false`, die XML-Ausgabedatei kann nicht analysiert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8818a212cb47719dcf30ea1c4fe2377b9859b40c" /><Meta Name="ms.sourcegitcommit" Value="48fd27f6aa659b18a958a72b9c956a9db49f2d96" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/12/2020" /><Meta Name="ms.locfileid" Value="79191189" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Xml" FromVersion="4.0.0.0" To="System.Xml.ReaderWriter" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt eine Gruppe von Funktionen an, die für das <see cref="T:System.Xml.XmlWriter" />-Objekt unterstützt werden sollen, das von der <see cref="Overload:System.Xml.XmlWriter.Create" />-Methode erstellt wurde.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlWriter.Create%2A>-Methode ist der bevorzugte Mechanismus zum Abrufen von <xref:System.Xml.XmlWriter>-Instanzen. Die <xref:System.Xml.XmlWriter.Create%2A>-Methode verwendet die <xref:System.Xml.XmlWriterSettings>-Klasse, um anzugeben, welche Funktionen in dem <xref:System.Xml.XmlWriter> Objekt implementiert werden sollen, das erstellt wird.  
  
> [!NOTE]
>  Wenn Sie das <xref:System.Xml.XmlWriter>-Objekt mit der <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>-Methode verwenden, sollten Sie die <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A>-Eigenschaft verwenden, um ein <xref:System.Xml.XmlWriterSettings> Objekt mit den korrekten Einstellungen abzurufen. Dieses Verfahren gewährleistet, dass das erstellte <xref:System.Xml.XmlWriter>-Objekt über die korrekten Ausgabeeinstellungen verfügt.  
  
 Die <xref:System.Xml.XmlWriterSettings>-Klasse stellt Eigenschaften bereit, mit denen die Daten Konformität und das Ausgabeformat gesteuert werden.  
  
 Verwenden Sie für die Überprüfung der Daten Konformität und automatische Korrekturen die folgenden Eigenschaften:  
  
|Eigenschaft|Bedeutung|Wert|Standard|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|Gibt an, ob die Zeichen im zulässigen XML-Zeichensatz gemäß W3C-Definition überprüft werden.|`true` oder `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|Gibt an, ob die Ausgabe ein wohl geformtes XML 1,0-Dokument oder-Fragment ist.|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (Dokument Ebene), <xref:System.Xml.ConformanceLevel.Fragment> (Fragmentebene) oder <xref:System.Xml.ConformanceLevel.Auto> (automatische Erkennung)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (Konformität auf Dokument Ebene)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|Gibt an, ob Endtags zu allen nicht geschlossenen Elementen hinzugefügt werden sollen, wenn die <xref:System.Xml.XmlWriter.Close%2A>-Methode aufgerufen wird.|`true` oder `false`|`true`|  
  
 Verwenden Sie die folgenden Eigenschaften, um das Ausgabeformat anzugeben:  
  
|Eigenschaft|Bedeutung|Wert|Standard|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|Zu verwendende Text Codierung.|Wert vom Typ <xref:System.Text.Encoding?displayProperty=nameWithType>|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|Ob Elemente einziehen werden sollen|`true` oder `false`|`false` (kein Einzug)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Beim Einzug zu verwendende Zeichenfolge (wird verwendet, wenn <xref:System.Xml.XmlWriterSettings.Indent%2A> auf `true`festgelegt ist).|String|Zwei Leerzeichen|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|Zeichenfolge, die für Zeilenumbrüche verwendet werden soll.|String|`\r\n` (Wagen Rücklauf, Zeilenvorschub)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|Gewusst wie: Verarbeiten von Zeilen Zeilenzeichen|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> Wert: <xref:System.Xml.NewLineHandling.Entitize> (normalize), <xref:System.Xml.NewLineHandling.Replace> (Replace) oder <xref:System.Xml.NewLineHandling.None> (unverändert lassen)|<xref:System.Xml.NewLineHandling.Replace> (durch <xref:System.Xml.XmlWriterSettings.NewLineChars%2A>ersetzen)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|Ob Attribute in einzelnen Zeilen geschrieben werden sollen (hat keine Auswirkung, wenn <xref:System.Xml.XmlWriterSettings.Indent%2A> `false`).|`true` oder `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|Ob eine XML-Deklaration geschrieben werden soll.|`true` oder `false`|`false`|  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Xml.XmlWriter> erstellt, die in eine XML-Datei schreibt und jedes Attribut in einer neuen Zeile schreibt.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 Im Beispiel wird die folgende Ausgabe erzeugt:  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlWriterSettings" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.Xml.XmlWriterSettings>angezeigt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|[https://login.microsoftonline.com/consumers/](`true`).|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|[https://login.microsoftonline.com/consumers/](<xref:System.Xml.ConformanceLevel.Document>).|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|[https://login.microsoftonline.com/consumers/](`Encoding.UTF8`).|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (Wagen Rücklauf, neue Zeile).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|[https://login.microsoftonline.com/consumers/](<xref:System.Xml.NewLineHandling.Replace>).|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|[https://login.microsoftonline.com/consumers/](`true`).|  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Xml.XmlWriter> Objekt erstellt, das das Tabstopp Zeichen für Einzug verwendet.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob asynchrone <see cref="T:System.Xml.XmlWriter" />-Methoden für eine bestimmte <see cref="T:System.Xml.XmlWriter" />-Instanz verwendet werden können.</summary>
        <value><see langword="true" />, wenn asynchrone Methoden verwendet werden können; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen diesen Wert auf `true` festlegen, wenn Sie eine neue <xref:System.Xml.XmlWriter>-Instanz erstellen, wenn Sie asynchrone <xref:System.Xml.XmlWriter>-Methoden für diese Instanz verwenden möchten. Nachdem die <xref:System.Xml.XmlWriter> Instanz erstellt wurde, ist die Eigenschaft <xref:System.Xml.XmlWriterSettings.Async%2A> schreibgeschützt. Der Standardwert dieser Eigenschaft ist `false`.  
  
 Dieses Flag wird von der <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> Überladung ignoriert. Dies bedeutet, dass beim Erstellen einer neuen <xref:System.Xml.XmlWriter> basierend auf einer vorhandenen <xref:System.Xml.XmlWriter>das asynchrone Verhalten von der Eingabe <xref:System.Xml.XmlWriter>abhängt, und Sie können das <xref:System.Xml.XmlWriterSettings.Async%2A>-Flag nicht verwenden, um das asynchrone Verhalten zu ändern.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Asynchrone Programmierung mit Async und Await (C# und Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der XML-Writer prüfen soll, ob alle Zeichen im Dokument dem Abschnitt „2.2 Characters“ (Zeichen) der [W3C Recommendation (W3C-Empfehlung) für XML 1.0](https://www.w3.org/TR/REC-xml/#charsets) entsprechen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Zeichen überprüft werden sollen, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das <xref:System.Xml.XmlWriter> Objekt die Zeichen Überprüfung unterstützt, wird eine Ausnahme ausgelöst, wenn Zeichen außerhalb des Bereichs der zulässigen XML-Zeichen liegen, die im Abschnitt "2,2 Zeichen" der W3C- [Empfehlung zu XML 1,0](https://www.w3.org/TR/REC-xml/#charsets)angegeben sind.  
  
 Bei der Zeichen Überprüfung ist das Überprüfen auf ungültige Zeichen in XML-Namen oder das Überprüfen der Gültigkeit aller XML-Namen nicht enthalten. Diese Überprüfungen sind Teil der Übereinstimmungs Prüfung und werden immer ausgeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der <see cref="T:System.Xml.XmlWriterSettings" />-Instanz.</summary>
        <returns>Das geklonte <see cref="T:System.Xml.XmlWriterSettings" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das geklonte <xref:System.Xml.XmlWriterSettings> Objekt kann geändert werden, ohne dass sich dies auf die Einstellungen des ursprünglichen Objekts auswirkt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Xml.XmlWriter" /> auch den zugrunde liegenden Stream oder <see cref="T:System.IO.TextWriter" /> schließen soll, wenn die <see cref="M:System.Xml.XmlWriter.Close" />-Methode aufgerufen wird, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn auch der zugrunde liegende Stream oder <see cref="T:System.IO.TextWriter" /> geschlossen werden soll, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Einstellung ist nützlich, wenn Sie XML in einen Stream schreiben und dann am Ende des Streams zusätzliche Informationen hinzufügen möchten, nachdem der <xref:System.Xml.XmlWriter> den Schreibvorgang abgeschlossen hat.  
  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die XML-Inhalt an einen Stream oder eine <xref:System.IO.TextWriter>ausgeben; Andernfalls wird diese Einstellung ignoriert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Fragment in einen Speicherstream geschrieben.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Übereinstimmungsniveau ab, auf den der XML-Writer die XML-Ausgabe überprüft, oder legt dieses fest.</summary>
        <value>Einer der Enumerationswerte, der das Übereinstimmungsniveau angibt (Dokument, Fragment oder automatische Erkennung). Der Standardwert lautet <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType>-Eigenschaft konfiguriert den XML-Writer so, dass er überprüft und garantiert, dass der geschriebene Stream einem bestimmten Satz von Regeln entspricht. Die XML-Daten können geprüft werden, um festzustellen, dass Sie den Regeln für ein wohl geformtes XML 1,0-Dokument oder ein Dokument Fragment entspricht. In der folgenden Tabelle werden die drei Einstellungen beschrieben. Der Standardwert ist die Konformität auf Dokument Ebene.  
  
|Einstellung|Beschreibung|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Stellt sicher, dass die XML-Ausgabe den [Regeln für ein wohl geformtes XML 1,0-Dokument](https://www.w3.org/TR/REC-xml/#sec-well-formed) entspricht und von jedem konformen Prozessor verarbeitet werden kann.<br /><br /> Die Überprüfungen der Dokument Konformität umfassen den größten Teil der Überprüfungen auf Fragmentebene und stellen außerdem Folgendes sicher:<br /><br /> -Das Element der obersten Ebene hat keine anderen Knoten als XML-Deklaration, DTD, Element, Kommentar, Leerraum oder Verarbeitungsanweisung.<br />-Die XML-Daten verfügen nur über einen und nur einen Elementknoten der obersten Ebene.<br /><br /> Der XML-Writer analysiert keine DTD-Informationen, die geschrieben werden. Der Benutzer muss sicherstellen, dass die DTD wohl geformt ist.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Stellt sicher, dass die XML-Ausgabe den [Regeln für ein wohl geformtes XML 1,0-Dokument Fragment](https://www.w3.org/TR/REC-xml/#wf-entities)entspricht.<br /><br /> Diese Einstellung akzeptiert XML-Daten, die über mehrere Stamm Elemente oder Textknoten auf der obersten Ebene verfügen. Diese Ebene der Überprüfung stellt sicher, dass alle Prozessoren den als eine extern analysierte XML 1.0-Entität gelesenen Stream verwenden können.<br /><br /> In Dokument Fragmenten sind keine DTD-Informationen zulässig.|  
|<xref:System.Xml.ConformanceLevel.Auto>|Gibt an, dass der XML-Writer die Ebene der Übereinstimmungs Überprüfung basierend auf den eingehenden Daten bestimmen soll. Diese Einstellung kann nützlich sein, wenn Sie nicht wissen, ob es sich bei dem generierten XML-Code um ein wohl geformtes XML-Dokument oder ein Fragment handelt.<br /><br /> Die Übereinstimmungsprüfung für Dokumente wird in den folgenden Fällen angewendet:<br /><br /> : Wenn die <xref:System.Xml.XmlWriter.WriteStartDocument%2A>-Methode aufgerufen wird.<br />-, Wenn DTD-Informationen geschrieben werden.<br /><br /> Die Überprüfung der fragmentkonformität wird angewendet, wenn die XML-Daten eine der folgenden Angaben enthalten:<br /><br /> -Text, CDATA oder EntityReference-Knoten auf Stamm Ebene.<br />: Mehr als ein Element auf der Stamm Ebene.<br />-Kein Element auf der Stamm Ebene.<br /><br /> Wenn ein Konflikt auftritt, z. B., wenn Sie versuchen, einen Textknoten und eine DTD auf der Stammebene zu schreiben, wird eine <xref:System.Xml.XmlException> ausgelöst.<br /><br /> Wenn Sie ein anderes <xref:System.Xml.XmlWriter> Objekt umwickeln, wird für das äußere Objekt keine zusätzliche Übereinstimmungs Überprüfung durchzuführen. Dies wird dem zugrunde liegenden Objekt überlassen.|  
  
 Wenn der XML-Writer Informationen erkennt, die gegen die angegebene Übereinstimmung verstoßen würden, löst er eine Ausnahme aus. In einigen Fällen korrigiert der XML-Writer den Konformitäts Fehler automatisch. Der Writer schließt z. b. ein nicht geschlossenes Attribut, ohne eine Ausnahme auszulösen. In der folgenden Tabelle wird gezeigt, wie verschiedene Konformitäts Verletzungen in den einzelnen Einstellungen behandelt werden.  
  
|Bedingung|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|Es wurden DTD-Informationen gefunden.|Kein Verstoß gegen diese Einstellung. Der XML-Writer prüft die DTD jedoch nicht. der Benutzer muss sicherstellen, dass die DTD wohl geformt ist.|<xref:System.Xml.XmlException> wird ausgelöst.|Die Überprüfung der Dokument Konformität wird angewendet.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> wird aufgerufen.|Dies gilt nicht als Verstoß gegen diese Einstellung.|<xref:System.Xml.XmlException> wird ausgelöst.|Die Überprüfung der Dokument Konformität wird angewendet.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> wird mehrmals aufgerufen.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Ein Textwert wird auf der obersten Ebene angezeigt (nicht unterhalb eines Element-oder Attribut Knotens).|<xref:System.Xml.XmlException> wird ausgelöst.|Dies gilt nicht als Verstoß.|Die Konformitätsüberprüfung für Fragmente wird angewendet.|  
|Mehrere Elemente oder keine Elemente werden auf der obersten Ebene angezeigt.|<xref:System.Xml.XmlException> wird ausgelöst.|Dies gilt nicht als Verstoß.|Die Konformitätsüberprüfung für Fragmente wird angewendet.|  
|Das Element der obersten Ebene ist Leerzeichen.|Dies gilt nicht als Verstoß.|Dies gilt nicht als Verstoß.|Dies gilt nicht als Verstoß.|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> wird nicht aufgerufen, um einen Attribut Knoten zu beenden.|Durch den XML-Writer korrigiert.|Durch den XML-Writer korrigiert.|Durch den XML-Writer korrigiert.|  
|Der XML-Writer befindet sich in einem nicht ordnungsgemäß eingefügten Zustand (z. b. folgt ein <xref:System.Xml.XmlWriter.WriteStartElement%2A>-Befehl einem <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>).|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Das Element der obersten Ebene ist ein Attribut.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Es werden mehrere aneinandergrenzende Textknoten gefunden.|Dies gilt nicht als Verstoß, aber es liegt in der Verantwortung des Benutzers, die Textknoten zu verketten.|Dies gilt nicht als Verstoß, aber es liegt in der Verantwortung des Benutzers, die Textknoten zu verketten.|Dies gilt nicht als Verstoß, aber es liegt in der Verantwortung des Benutzers, die Textknoten zu verketten.|  
|In einem Element wird das gleiche Namespacepräfix zweimal deklariert.|Der XML-Writer generiert ein neues Präfix für den zweiten Namespace.|Der XML-Writer generiert ein neues Präfix für den zweiten Namespace.|Der XML-Writer generiert ein neues Präfix für den zweiten Namespace.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> gibt ein Präfix und einen Namespace an, das in diesem Bereich nicht deklariert ist, oder das Präfix ist einem anderen Namespace zugeordnet.|Der XML-Writer schreibt den erforderlichen Namespace Knoten.|Der XML-Writer schreibt den erforderlichen Namespace Knoten.|Der XML-Writer schreibt den erforderlichen Namespace Knoten.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> gibt ein Präfix und einen Namespace an, der in diesem Bereich nicht deklariert ist.|Der XML-Writer schreibt den erforderlichen Namespace Knoten.|Der XML-Writer schreibt den erforderlichen Namespace Knoten.|Der XML-Writer schreibt den erforderlichen Namespace Knoten.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> gibt ein Präfix und einen Namespace an, aber das Präfix ist einem anderen Namespace im Gültigkeitsbereich zugeordnet.|Der XML-Writer ignoriert das angegebene Präfix und sucht entweder nach dem richtigen Präfix oder generiert ein neues Präfix.|Der XML-Writer ignoriert das angegebene Präfix und sucht entweder nach dem richtigen Präfix oder generiert ein neues Präfix.|Der XML-Writer ignoriert das angegebene Präfix und sucht entweder nach dem richtigen Präfix oder generiert ein neues Präfix.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> wird zum Schreiben von Element Inhalt mithilfe eines Namespace verwendet, der im Bereich nicht vorhanden ist.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|mit <xref:System.Xml.XmlWriter.WriteQualifiedName%2A> wird der Attribut Inhalt mithilfe eines Namespaces geschrieben, der im Gültigkeitsbereich nicht vorhanden ist.|Der XML-Writer schreibt die erforderliche Namespace Deklaration.|Der XML-Writer schreibt die erforderliche Namespace Deklaration.|Der XML-Writer schreibt die erforderliche Namespace Deklaration.|  
|Das `xml:space`-Attribut enthält keinen gültigen Wert.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Es wurde ein ungültiger Name gefunden.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Das `xml` Präfix stimmt nicht mit einem URI überein.|Der XML-Writer prüft nicht, ob diese Art von Verstoß vorliegt.|Der XML-Writer prüft nicht, ob diese Art von Verstoß vorliegt.|Der XML-Writer prüft nicht, ob diese Art von Verstoß vorliegt.|  
|Das `xml`-Präfix stimmt nicht mit dem http://www.w3.org/XML/1998/namespace-URI überein.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Das `xmlns` Präfix oder der lokale Name stimmt nicht mit einem URI überein.|Der XML-Writer prüft nicht, ob diese Art von Verstoß vorliegt.|Der XML-Writer prüft nicht, ob diese Art von Verstoß vorliegt.|Der XML-Writer prüft nicht, ob diese Art von Verstoß vorliegt.|  
|Das `xmlns` Präfix oder der lokale Name stimmt nicht mit dem http://www.w3.org/2000/xmlns-URI überein.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Fragment in einen Speicherstream geschrieben.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob <see cref="T:System.Xml.XmlWriter" /> die URI-Attribute nicht mit Escapezeichen versehen soll.</summary>
        <value><see langword="true" />, wenn die <see cref="T:System.Xml.XmlWriter" /> URI-Attribute nicht mit Escapezeichen versehen. Andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ der Textcodierung ab oder legt diesen fest.</summary>
        <value>Die zu verwendende Textcodierung. Der Standardwert lautet <see langword="Encoding.UTF8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Xml.XmlWriter> codiert einen Puffer von Zeichen auf einmal und nicht als Zeichen nach Zeichen. Eine-Ausnahme wird ausgelöst, wenn die <xref:System.Xml.XmlWriter.Flush%2A>-Methode aufgerufen wird, wenn Codierungsfehler auftreten.  
  
 Die <xref:System.Xml.XmlWriterSettings.Encoding%2A>-Eigenschaft gilt nur für die <xref:System.Xml.XmlWriter> Instanzen, die entweder mit dem angegebenen <xref:System.IO.Stream> oder mit dem angegebenen Dateinamen erstellt werden. Wenn die <xref:System.Xml.XmlWriter> Instanz mit dem angegebenen <xref:System.IO.TextWriter>erstellt wird, wird die Eigenschaft <xref:System.Xml.XmlWriterSettings.Encoding%2A> von der Codierung des zugrunde liegenden <xref:System.IO.TextWriter>überschrieben. Wenn diese Eigenschaft beispielsweise für eine bestimmte <xref:System.Xml.XmlWriter>auf Unicode (UTF-16) festgelegt ist, der zugrunde liegende Writer jedoch ein <xref:System.IO.StreamWriter> ist (der von <xref:System.IO.TextWriter>abgeleitet ist), dessen Codierung auf UTF8 festgelegt ist, wird die Ausgabe UTF-8-codiert.  
  
 Wenn die <xref:System.Xml.XmlWriter> Instanz mit anderen Ausgabeparametern erstellt wird, wird die <xref:System.Xml.XmlWriterSettings.Encoding%2A>-Eigenschaft ignoriert.  
  
 Siehe folgendes Beispiel:  
  
-   Der Standardwert von <xref:System.Xml.XmlWriterSettings.Encoding%2A> lautet `Encoding.UTF8`.  
  
-   Der <xref:System.IO.StreamWriter> ist auf `Encoding.Unicode` festgelegt, und die Codierung des <xref:System.IO.StreamWriter>überschreibt die <xref:System.Xml.XmlWriterSettings.Encoding%2A> Einstellung.  
  
-   Die Ausgabe wird `Encoding.Unicode`.  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  Akzeptieren Sie kein <xref:System.Text.Encoding> Objekt aus einer nicht vertrauenswürdigen Quelle.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die `Enconding`-Eigenschaft festgelegt wird:  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XML_Migration/CS/migration.cs#6)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XML_Migration/VB/migration.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Elemente eingezogen werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn einzelne Elemente mit Einzug in neue Zeilen geschrieben werden sollen, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text Inhalt ausgeben. Andernfalls wird diese Einstellung ignoriert.  
  
 Die Elemente werden eingerückt, solange das Element keinen gemischten Inhalt enthält. Wenn die <xref:System.Xml.XmlWriter.WriteString%2A>-oder <xref:System.Xml.XmlWriter.WriteWhitespace%2A>-Methode aufgerufen wird, um einen Inhalt gemischter Elemente zu schreiben, wird der Einzug des <xref:System.Xml.XmlWriter> beendet. Der Einzug wird fortgesetzt, sobald das gemischte Inhalts Element geschlossen wurde.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Xml.XmlWriter> Objekt erstellt, das das Tabstopp Zeichen für Einzug verwendet.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die für den Einzug verwendet werden soll, oder legt diese fest. Diese Einstellung wird verwendet, wenn die <see cref="P:System.Xml.XmlWriterSettings.Indent" />-Eigenschaft auf <see langword="true" /> festgelegt ist.</summary>
        <value>Die für den Einzug zu verwendende Zeichenfolge. Diese kann auf jeden Zeichenfolgenwert festgelegt werden. Wenn Sie die Gültigkeit des XML-Codes sicherstellen möchten, sollten Sie jedoch nur gültige Leerraumzeichen, z. B. Leerzeichen, Tabstoppzeichen, Wagenrückläufe oder Zeilenvorschübe angeben. Der Standard beträgt zwei Leerzeichen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text Inhalt ausgeben. Andernfalls wird diese Einstellung ignoriert. Der <xref:System.Xml.XmlWriter> löst eine Ausnahme aus, wenn die Einzugs Zeichen zu ungültigem XML-Code führen würden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Xml.XmlWriter> Objekt erstellt, das das Tabstopp Zeichen für Einzug verwendet.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> zugewiesene Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der <see cref="T:System.Xml.XmlWriter" /> beim Schreiben von XML-Inhalt doppelte Namespacedeklarationen entfernen soll, oder legt diesen fest. Im Standardverhalten gibt der Writer alle Namespacedeklarationen aus, die in der Namespaceauflösung des Writers vorhanden sind.</summary>
        <value>Die <see cref="T:System.Xml.NamespaceHandling" />-Enumeration, die verwendet wird, um anzugeben, ob doppelte Namespacedeklarationen im <see cref="T:System.Xml.XmlWriter" /> entfernt werden.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die für Zeilenumbrüche verwendet werden soll, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die für Zeilenumbrüche verwendet werden soll. Diese kann auf jeden Zeichenfolgenwert festgelegt werden. Wenn Sie die Gültigkeit des XML-Codes sicherstellen möchten, sollten Sie jedoch nur gültige Leerraumzeichen, z. B. Leerzeichen, Tabstoppzeichen, Wagenrückläufe oder Zeilenvorschübe angeben. Der Standardwert ist <c>\r\n</c> (Wagen Rücklauf, neue Zeile).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text Inhalt ausgeben. Andernfalls wird diese Einstellung ignoriert. Der <xref:System.Xml.XmlWriter> löst eine Ausnahme aus, wenn die Zeilenumbruch Zeichen zu ungültigem XML-Code führen würden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> zugewiesene Wert ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Zeilenumbrüche in der Ausgabe normalisiert werden sollen, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Xml.NewLineHandling" />-Werte. Der Standardwert lautet <see cref="F:System.Xml.NewLineHandling.Replace" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Einstellung gilt beim Schreiben von Text Inhalt oder Attributwerten. Die folgenden <xref:System.Xml.NewLineHandling> Werte werden im folgenden beschrieben:  
  
-   Die <xref:System.Xml.NewLineHandling.Entitize> Einstellung weist den <xref:System.Xml.XmlWriter> an, neue Zeilenzeichen zu ersetzen, die andernfalls durch eine normalisierungs <xref:System.Xml.XmlReader> mit Zeichen Entitäten nicht beibehalten werden. Dies ist in Roundtrip-Szenarien hilfreich, in denen die Ausgabe durch eine normalisierende <xref:System.Xml.XmlReader>gelesen wird. Weitere normalisierungs Regeln gelten für Attributwerte, wenn das Roundtrip seit `\t``\n` und `\r` durch ein Leerzeichen in Attributwerten ersetzt werden, wenn es in einem <xref:System.Xml.XmlReader>normalisiert wird.  
  
-   Die <xref:System.Xml.NewLineHandling.Replace> Einstellung weist den <xref:System.Xml.XmlWriter> an, neue Zeilenzeichen durch `\r\n`zu ersetzen, d. h. das neue Zeilen Format, das vom Microsoft Windows-Betriebssystem verwendet wird. Dadurch wird sichergestellt, dass die Datei von den Notepad-oder Microsoft Word-Anwendungen ordnungsgemäß angezeigt werden kann. Diese Einstellung ersetzt auch neue Zeilen in Attributen mit Zeichen Entitäten, um die Zeichen beizubehalten. Dies ist der Standardwert.  
  
-   Die <xref:System.Xml.NewLineHandling.None> Einstellung weist das <xref:System.Xml.XmlWriter> an, die Eingabe unverändert zu lassen. Diese Einstellung wird verwendet, wenn Sie keine neue Zeilen Verarbeitung wünschen. Dies ist hilfreich, wenn die Ausgabe von einem <xref:System.Xml.XmlReader> gelesen wird, der keine Normalisierung durchführt (z. b. eine <xref:System.Xml.XmlTextReader> mit Standardeinstellungen).  
  
 Die folgenden Tabellen zeigen die Ausgabe der <xref:System.Xml.XmlWriter.WriteString%2A>-Methode, wenn Sie mit dem Eingabe Wert abhängig von der <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>-Eigenschafts Einstellung angegeben wird. Die Tabellen zeigen die Ausgabe beim Schreiben von Text Inhalt und auch beim Schreiben eines Attribut Werts.  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Wurden|&#D;\n|\n|&#D;|\t|  
|Ersetzen|\r\n|\r\n|\r\n|\t|  
|Keine|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Wurden|&#D;&#A;|& #A;|&#D;|&\#9;|  
|Ersetzen|&#D;&#A;|& #A;|&#D;|&\#9;|  
|Keine|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  Beim Schreiben von Inhalt in einen CDATA-Abschnitt, einen Kommentar oder eine Verarbeitungsanweisung weist das <xref:System.Xml.XmlWriter> folgendes Verhalten auf. Neue Zeilen werden nie durch ihre Zeichen Entitäten ersetzt, auch wenn die <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>-Eigenschaft auf <xref:System.Xml.NewLineHandling.Entitize>festgelegt ist. Dies liegt daran, dass Zeichen Entitäten nicht in CDATA-Abschnitten, Kommentaren oder Verarbeitungsanweisungen erkannt werden. Wenn die <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>-Eigenschaft auf <xref:System.Xml.NewLineHandling.None> oder <xref:System.Xml.NewLineHandling.Replace>festgelegt ist, ist das Verhalten das gleiche wie beim Schreiben eines Textknoten Werts.  
  
 In der folgenden Tabelle wird beschrieben, was eine normalisierungs <xref:System.Xml.XmlReader> für jede leer Raum Eingabe zurückgibt. Weitere Informationen finden Sie in den Abschnitten 2,11 und 3.3.3 der W3C- [Empfehlung zu XML 1,0](https://www.w3.org/TR/REC-xml/).  
  
> [!NOTE]
>  Ein normalisierender Reader ist ein beliebiges <xref:System.Xml.XmlReader> Objekt, das von der <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Methode erstellt wird. Diese Objekte führen immer zu einer Zeilenumbruch Normalisierung und vollständiger Normalisierung von Attributen. Das <xref:System.Xml.XmlTextReader>-Objekt kann auch ein normalisierender Reader sein, wenn es <xref:System.Xml.XmlTextReader.Normalization%2A> Eigenschaft auf `true`festgelegt ist.  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|Text Knotenwert|\n|\n|\n|\t|  
|Attributwert|einzelnes Leerzeichen|einzelnes Leerzeichen|einzelnes Leerzeichen|einzelnes Leerzeichen|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Attribute in eine neue Zeile geschrieben werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, um Attribute in einzelne Zeilen zu schreiben, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.  
  
 <block subset="none" type="note"><para>  
 Diese Einstellung hat keinerlei Auswirkungen, wenn der <see cref="P:System.Xml.XmlWriterSettings.Indent" />-Eigenschaftswert <see langword="false" /> ist.  
  
</para></block>  
  
 Wenn <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> auf <see langword="true" /> festgelegt ist, wird jedem Attribut eine neue Zeile und eine zusätzliche Einzugsebene vorangestellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text Inhalt ausgeben. Andernfalls wird diese Einstellung ignoriert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Xml.XmlWriter> erstellt, die in eine XML-Datei schreibt und jedes Attribut in einer neuen Zeile schreibt.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 Im Beispiel wird die folgende Ausgabe erzeugt:  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob eine XML-Deklaration ausgelassen werden soll, oder legt diesen fest.</summary>
        <value><see langword="true" />, um die XML-Deklaration auszulassen, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />. Es wird eine XML-Deklaration geschrieben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gilt nur für <xref:System.Xml.XmlWriter> Instanzen, die Text Inhalt ausgeben. Andernfalls wird diese Einstellung ignoriert.  
  
 Wenn <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> auf `false`festgelegt ist, wird die XML-Deklaration automatisch geschrieben.  
  
 Die XML-Deklaration wird immer geschrieben, wenn <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> auf <xref:System.Xml.ConformanceLevel.Document>festgelegt ist, auch wenn <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> auf `true`festgelegt ist.  
  
 Die XML-Deklaration wird niemals geschrieben, wenn <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> auf <xref:System.Xml.ConformanceLevel.Fragment>festgelegt ist. Sie können <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> aufgerufen werden, um explizit eine XML-Deklaration zu schreiben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Fragment in einen Speicherstream geschrieben.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Methode zum Serialisieren der <see cref="T:System.Xml.XmlWriter" />-Ausgabe ab.</summary>
        <value>Einer der <see cref="T:System.Xml.XmlOutputMethod" />-Werte. Der Standardwert lautet <see cref="F:System.Xml.XmlOutputMethod.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt die Methode an, die zum Serialisieren der Ausgabe verwendet wird. Die Ausgabe kann mit den HTML-Regeln, den XML 1,0-Regeln usw. serialisiert werden. Diese Einstellung wird vom XSLT-Prozessor festgelegt und intern von Visual Studio verwendet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die Member der settings-Klasse auf ihre Standardwerte zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden die Standardeigenschaftswerte für eine Instanz von <xref:System.Xml.XmlWriterSettings>angezeigt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|[https://login.microsoftonline.com/consumers/](`true`).|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|[https://login.microsoftonline.com/consumers/](<xref:System.Xml.ConformanceLevel.Document>).|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|[https://login.microsoftonline.com/consumers/](`Encoding.UTF8`).|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Zwei Leerzeichen.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|[https://login.microsoftonline.com/consumers/](`\r\n`).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|[https://login.microsoftonline.com/consumers/](<xref:System.Xml.NewLineHandling.Replace>).|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|[https://login.microsoftonline.com/consumers/](`false`).|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|[https://login.microsoftonline.com/consumers/](`true`).|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob <see cref="T:System.Xml.XmlWriter" /> Endtags zu allen nicht geschlossenen Elementtags hinzufügt, wenn die <see cref="M:System.Xml.XmlWriter.Close" />-Methode aufgerufen wird.</summary>
        <value><see langword="true" />, wenn alle nicht geschlossenen Elementtags geschlossen werden; andernfalls <see langword="false" />. Standardwert: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie dieses Flag auf `false`festlegen, ist die XML-Ausgabedatei möglicherweise nicht wohl geformt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="897f2dbabe83aff7ed32611692dfd4d8665bbf57" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53476711" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlReaderSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt eine Gruppe von Funktionen an, die für das <see cref="T:System.Xml.XmlReader" />-Objekt unterstützt werden sollen, das von der <see cref="Overload:System.Xml.XmlReader.Create" />-Methode erstellt wurde.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden die <xref:System.Xml.XmlReader.Create%2A> Methode zum Abrufen <xref:System.Xml.XmlReader> Instanzen. Diese Methode verwendet die <xref:System.Xml.XmlReaderSettings> Klasse angeben, welche Funktionen im Implementieren der <xref:System.Xml.XmlReader> Objekt.  
  
 Finden Sie im Abschnitt "Hinweise" der <xref:System.Xml.XmlReader> und <xref:System.Xml.XmlReader.Create%2A> auf den Referenzseiten für Informationen über die gewünschten Einstellungen für die datenkonformitätsüberprüfung, Validierung und andere allgemeinen Szenarien. Finden Sie unter den <xref:System.Xml.XmlReaderSettings.%23ctor> Konstruktor für eine Liste der Standardeinstellungen.  
  
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
 Berücksichtigen Sie bei Verwendung der <xref:System.Xml.XmlReaderSettings> Klasse.  
  
-   Das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>-Validierungsflag und das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>-Validierungsflag eines <xref:System.Xml.XmlReaderSettings>-Objekts werden nicht standardmäßig festgelegt. Wenn diese Flags festgelegt sind, wird der <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> des <xref:System.Xml.XmlReaderSettings>-Objekts verwendet, um die im Instanzdokument des <xref:System.Xml.XmlReader> erkannten Schemaspeicherorte aufzulösen. Wenn die <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> Objekt `null`, Schemaspeicherorte nicht aufgelöst, wenn die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> und <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Validierungsflag festgelegt sind.  
  
-   Durch während der Validierung hinzugefügte Schemas werden neue Typen hinzugefügt, sodass das Validierungsergebnis des überprüften Dokuments möglicherweise geändert wird. Daher sollten externe Schemata nur von vertrauenswürdigen Quellen aufgelöst werden.  
  
-   Meldungen für Validierungsfehler können sensible Inhaltsmodell-Informationen verfügbar machen. Überprüfung Fehler- und Warnmeldungen erfolgt mithilfe der <xref:System.Xml.Schema.ValidationEventHandler> delegieren oder als verfügbar gemacht werden ein <xref:System.Xml.Schema.XmlSchemaValidationException> , wenn kein Ereignishandler bereitgestellt wird die <xref:System.Xml.XmlReaderSettings> Objekt (überprüfungswarnungen führen nicht dazu, dass ein <xref:System.Xml.Schema.XmlSchemaValidationException> ausgelöst wird). Diese Informationen Inhaltsmodell sollte nicht in nicht vertrauenswürdigen Szenarios verfügbar gemacht werden. Überprüfung-Warnmeldungen werden standardmäßig unterdrückt und gemeldet werden kann, durch Festlegen der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> Flag.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Eigenschaft eine <xref:System.Xml.Schema.XmlSchemaValidationException> gibt den URI-Pfad der Schemadatei, die die Ausnahme verursacht hat. Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Eigenschaft sollte in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht werden.  
  
-   Deaktivieren der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> Flag (standardmäßig aktiviert) wird empfohlen, wenn es sich bei Szenarien mit hochverfügbarkeit anhand eines Schemas mit der Identity-Einschränkung über einen großen Teil des Dokuments überprüfen, nicht vertrauenswürdige, große XML-Dokumenten.  
  
-   <xref:System.Xml.XmlReaderSettings>-Objekte können vertrauliche Informationen (z. B. Anmeldeinformationen des Benutzers) enthalten. Sie sollten daher beim Zwischenspeichern von <xref:System.Xml.XmlReaderSettings>-Objekten oder bei der Übergabe eines <xref:System.Xml.XmlReaderSettings>-Objekts von einer Komponente an eine andere sorgfältig vorgehen.  
  
-   Die DTD-Verarbeitung ist in der Standardeinstellung deaktiviert. Wenn Sie die DTD-Verarbeitung aktivieren, müssen Sie beachten einschließlich von DTDs aus nicht vertrauenswürdigen Quellen und möglichen Denial of Service-Angriffe. Verwenden der <xref:System.Xml.XmlSecureResolver> einschränken die Ressourcen, die die <xref:System.Xml.XmlReader> zugreifen können.  
  
-   Achten Sie darauf, keine Unterstützung für Komponenten aus einer nicht vertrauenswürdigen Quelle zu gewähren (z. B. den Objekten <xref:System.Xml.NameTable>, <xref:System.Xml.XmlNamespaceManager> und <xref:System.Xml.XmlResolver>).  
  
-   Zwischen der Speichernutzung einer Anwendung, die <xref:System.Xml.XmlReader> verwendet, und der Größe des analysierten XML-Dokuments kann eine enge Beziehung bestehen. Im Rahmen von Denial-of-Service-Angriffen können auch übermäßig große XML-Dokumente zum Analysieren gesendet werden. Sie können einschränken, dass die Größe des Dokuments, das durch Festlegen von analysiert werden kann die <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> -Eigenschaft, und klicken Sie dann Einschränken der Anzahl von Zeichen aus dem Erweitern von Entitäten durch Festlegen der <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlReader> , verwendet eine <xref:System.Xml.XmlUrlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML-Dokumente und XML-Daten</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlReaderSettings" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlReaderSettings" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgende Tabelle werden die anfänglichen Eigenschaftenwerte für eine Instanz von <xref:System.Xml.XmlReaderSettings>.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (es gibt keine Beschränkung für die Anzahl der Zeichen, das Erweitern von Entitäten ergeben).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (es gibt keine Beschränkung für die Größe des XML-Dokuments).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Diese Eigenschaft ist veraltet. Verwenden Sie stattdessen <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Wenn Sie festgelegt haben <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> auf seinen Standardwert `true` festgelegt <xref:System.Xml.XmlTextReader.DtdProcessing%2A> zu `Prohibit`. Wenn Sie festgelegt haben <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> zu `false` festgelegt <xref:System.Xml.XmlTextReader.DtdProcessing%2A> zu `Parse`.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Ein leeres <xref:System.Xml.Schema.XmlSchemaSet>-Objekt.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Ein neues <xref:System.Xml.XmlUrlResolver>-Objekt.|  
  
   
  
## Examples  
 Die folgenden erstellt ein Objekt mit Einstellungen, die verwendet werden kann, um einen Reader erstellen, der verarbeitungsanweisungen, Kommentare und nicht signifikanter Leerraum entfernt.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlReaderSettings : System.Xml.XmlResolver -&gt; System.Xml.XmlReaderSettings" Usage="new System.Xml.XmlReaderSettings resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">Der XML-Resolver.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlReaderSettings" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlReaderSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob asynchrone <see cref="T:System.Xml.XmlReader" />-Methoden für eine bestimmte <see cref="T:System.Xml.XmlReader" />-Instanz verwendet werden können.</summary>
        <value><see langword="true" />, wenn asynchrone Methoden verwendet werden können; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen diesen Wert festlegen, um `true` beim Erstellen einer neuen <xref:System.Xml.XmlReader> Instanz, wenn Sie asynchrone verwenden möchten <xref:System.Xml.XmlReader> Methoden in dieser Instanz. Nach der <xref:System.Xml.XmlReader> Instanz erstellt, die <xref:System.Xml.XmlReaderSettings.Async%2A> Eigenschaft ist schreibgeschützt. Der Standardwert dieser Eigenschaft ist `false`.  
  
 Dieses Flag wird ignoriert, durch die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> überladen. Dies bedeutet, dass bei der Erstellung einer neuen <xref:System.Xml.XmlReader> basierend auf einer vorhandenen <xref:System.Xml.XmlReader>, das asynchrone Verhalten hängt von der Eingabe <xref:System.Xml.XmlReader>, und Sie können keine der <xref:System.Xml.XmlReaderSettings.Async%2A> Flag, das asynchrone Verhalten zu ändern.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Asynchrone Programmierung mit Async und Await (C# und Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Zeichen überprüft werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Zeichen überprüft werden sollen, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.  
  
 <block subset="none" type="note"><para>  
 Wenn der <see cref="T:System.Xml.XmlReader" /> Textdaten verarbeitet, überprüft er unabhängig von der Eigenschafteneinstellung stets, ob die XML-Namen und der Textinhalt gültig sind. Durch Festlegen von <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> auf <see langword="false" /> wird die Zeichenüberprüfung für Zeichenentitätsverweise deaktiviert.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft weist den XML-Reader zum Überprüfen von Zeichen in den XML-Daten, die es liest und löst eine <xref:System.Xml.XmlException> Wenn sich Zeichen außerhalb des Bereichs zulässiger XML-Zeichen befinden. Bei aktivierter Zeichenüberprüfung ist Folgendes sichergestellt:  
  
-   Zeichen sind innerhalb des Bereichs zulässiger XML-Zeichen gemäß der [2.2 Characters](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets) Abschnitt der W3C-Empfehlung für XML 1.0.  
  
-   Alle XML-Namen gültig sind, gemäß der [2.3 Common Syntactic Constructs](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) Abschnitt der W3C-Empfehlung für XML 1.0.  
  
 Wenn diese Eigenschaft auf festgelegt ist `true`, dies ist die Standardeinstellung ein <xref:System.Xml.XmlException> Ausnahme wird ausgelöst, die XML-Datei enthält unzulässige Zeichen oder eine ungültige XML-Namen (z. B. ein Elementname mit einer Zahl beginnt).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlReaderSettings" Usage="xmlReaderSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der <see cref="T:System.Xml.XmlReaderSettings" />-Instanz.</summary>
        <returns>Das geklonte <see cref="T:System.Xml.XmlReaderSettings" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die geklonte <xref:System.Xml.XmlReaderSettings> -Objekt geändert werden kann, ohne Auswirkungen auf die Einstellungen auf das ursprüngliche Objekt.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool with get, set" Usage="System.Xml.XmlReaderSettings.CloseInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der zugrunde liegende Stream oder <see cref="T:System.IO.TextReader" /> geschlossen werden soll, nachdem der Reader geschlossen wurde, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, um den zugrunde liegenden Stream oder <see cref="T:System.IO.TextReader" /> zu schließen, nachdem der Reader geschlossen wurde, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Einstellung wird verwendet, wenn ein Datenstrom oder <xref:System.IO.TextReader> übergeben wird, um die <xref:System.Xml.XmlReader.Create%2A> Methode. Wenn ein Datenstrom durch den Reader für die eigene Verarbeitung erstellt wird, wie z. B. wenn der Reader erstellt wird, mit einem URI oder wenn sie eine externe Document Type Definition geöffnet wird, immer geschlossen wird, wenn der Reader geschlossen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Konformitätsgrad ab, dem der <see cref="T:System.Xml.XmlReader" /> entspricht, oder legt diesen fest.</summary>
        <value>Einer der Enumerationswerte, der das Übereinstimmungsniveau angibt, den der XML-Reader umsetzt. Die Standardeinstellung ist <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch die erstellte XML-Reader der <xref:System.Xml.XmlReader.Create%2A> Methode die folgenden Complianceanforderungen erfüllen, werden standardmäßig:  
  
-   Neue Zeilen und Attributwert werden gemäß der W3C normalisiert [XML 1.0 Recommendation](https://www.w3.org/TR/2006/REC-xml-20060816/).  
  
-   Alle Entitäten werden automatisch erweitert.  
  
-   Standardattribute, die in der Document Type Definition deklariert werden immer hinzugefügt werden, selbst wenn der Reader nicht überprüft.  
  
-   Deklaration eines XML-Namespacepräfix, den richtigen XML-Namespace-URI zugeordnet ist zulässig.  
  
-   Die Notationsnamen in einem einzelnen `NotationType` -Attributdeklaration und `NmTokens` in einem einzelnen `Enumeration` Attributdeklaration unterscheiden sich.  
  
 Sie können die <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> Eigenschaft, um zu überprüfen und garantiert, dass die gelesenen Stream mit den Regeln für ein wohlgeformtes XML 1.0-Dokument oder Dokumentfragment entspricht. Wenn die Daten nicht erfüllt, eine <xref:System.Xml.XmlException> Ausnahme ausgelöst. Der Standardwert ist <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (Übereinstimmung auf Dokumentebene).  
  
 Die mit drei Übereinstimmungsebenen sind:  
  
|Einstellung|Beschreibung |  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Stellt sicher, dass die XML-Daten die Regeln für ein wohlgeformtes XML 1.0-Dokument entspricht. Diese Ebene der Überprüfung wird sichergestellt, dass alle Prozessoren den als gelesenen Stream verwenden können eine [wohlgeformtes XML 1.0-Dokument](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed).<br /><br /> Folgendes wird vom Reader überprüft:<br /><br /> -Das Element der obersten Ebene darf nicht auf allen Knoten als XML-Deklaration, die Dokumenttypdefinition (DTD), -Element, Kommentar, Leerraum und verarbeitungsanweisung sein.<br />-Die XML-Daten müssen genau einen Elementknoten der obersten Ebene.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Stellt sicher, dass die XML-Daten die Regeln für ein wohlgeformtes XML 1.0-Dokumentfragment entspricht.<br /><br /> Bei dieser Einstellung werden XML-Daten mit mehreren Stammelementen oder Textknoten der obersten Ebene akzeptiert. Diese Ebene der Überprüfung wird sichergestellt, dass alle Prozessoren den als gelesenen Stream verwenden können eine [extern analysierte Entität](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities).|  
|<xref:System.Xml.ConformanceLevel.Auto>|Gibt an, dass der Reader die Ebene der übereinstimmungsprüfung für Fragmente wird basierend auf den eingehenden Daten bestimmt werden soll.<br /><br /> Wenn die XML-Daten DTD-Informationen enthalten, wird die Übereinstimmungsprüfung für Dokumente angewendet.<br /><br /> Die Übereinstimmungsprüfung für Fragmente wird angewendet, wenn die XML-Daten eines der folgenden Elemente enthalten:<br /><br /> -Text, CDATA oder Entitätsverweisknoten Verweisknoten auf der Stammebene.<br />-Mehr als ein Element auf der Stammebene.<br />-Kein Element auf der Stammebene.<br /><br /> Wenn ein Konflikt auftritt (z. B. wenn sich ein Textknoten und eine DTD auf der Stammebene befinden), wird eine <xref:System.Xml.XmlException> ausgelöst.<br /><br /> Diese Einstellung kann in Wrappingszenarios verwendet werden, wenn mithilfe der <xref:System.Xml.XmlReader.Create%2A>-Methode einem vorhandenen <xref:System.Xml.XmlReader> zusätzliche Funktionen hinzugefügt werden. In diesem Fall <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> fügt keine neue übereinstimmungsprüfung hinzu. Die Übereinstimmungsprüfung wird dem <xref:System.Xml.XmlReader> überlassen, für den ein Wrapper erstellt wird.|  
  
> [!NOTE]
>  Gemäß XML 1.0-Empfehlung muss bei vorhandener DTD eine Übereinstimmung auf Dokumentebene vorliegen. Aus diesem Grund, wenn der Reader für die Unterstützung konfiguriert ist <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>, aber die XML-Daten enthält, eine Dokumenttypdefinition (DTD), ein <xref:System.Xml.XmlException> ausgelöst.  
  
 Hier ist wie der Reader entsprechend der Einstellung von bestimmten übereinstimmungsverletzungen behandelt die <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> Eigenschaft:  
  
|Bedingung|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|Ein typisierter Wert oder Text wird auf der obersten Ebene angezeigt.|<xref:System.Xml.XmlException> wird ausgelöst.|Nicht als einen Verstoß für diese Einstellung aus.|Nicht als einen Verstoß für diese Einstellung aus.|  
|Mehrere Elemente oder kein Element angezeigt werden, auf der obersten Ebene.|<xref:System.Xml.XmlException> wird ausgelöst.|Nicht als einen Verstoß für diese Einstellung aus.|Nicht als einen Verstoß für diese Einstellung aus.|  
|Element der obersten Ebene besteht aus Leerzeichen.|Nicht als einen Verstoß für diese Einstellung aus.|Nicht als einen Verstoß für diese Einstellung aus.|Nicht als einen Verstoß für diese Einstellung aus.|  
|Element der obersten Ebene ist ein Attribut (als Textknoten erkannt).|<xref:System.Xml.XmlException> wird ausgelöst.|Nicht als einen Verstoß für diese Einstellung aus.|Nicht als einen Verstoß für diese Einstellung aus.|  
|Es werden mehrere aneinandergrenzende Textknoten gefunden.|Nicht als einen Verstoß für diese Einstellung aus.|Nicht als einen Verstoß für diese Einstellung aus.|Nicht als einen Verstoß für diese Einstellung aus.|  
|Das gleiche Namespacepräfix wird zweimal in einem lokalen Gültigkeitsbereich deklariert werden.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Der Namespace, in einem Element oder Attribut ist nicht im lokalen Gültigkeitsbereich vorhanden.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Daten enthalten einen Präfix und Namespace-Konflikt.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|`xml:space` Attribut enthält einen ungültigen Wert.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Es wurde ein ungültiger Name gefunden.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
|Die `xml` Präfix zugeordnet ist nicht die http://www.w3.org/XML/1998/namespace URI.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|<xref:System.Xml.XmlException> wird ausgelöst.|  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlReader> -Objekt, das Lesen eines XML-Fragments.  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der die Verarbeitung von DTDs bestimmt.</summary>
        <value>Einer der Enumerationswerte, der die Verarbeitung von DTDs bestimmt. Die Standardeinstellung ist <see cref="F:System.Xml.DtdProcessing.Prohibit" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Validierung Document Type Definition (DTD) wird durch implementiert folgende gültigkeitsbeschränkungen in der W3C [Extensible Markup Language (XML) 1.0 (fourth Edition) Recommendation](https://www.w3.org/TR/2006/REC-xml-20060816/). DTDs verwenden eine formale Grammatik zur Beschreibung der Struktur und Syntax kompatibler XML-Dokumente; Sie geben den Inhalt und die zulässigen Werte für das XML-Dokument.  
  
 Diese Eigenschaft kann einen der folgenden Werte aufweisen:  
  
-   <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType> So aktivieren Sie die DTD-Verarbeitung.  
  
-   <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType> Auslösen einer <xref:System.Xml.XmlException> Ausnahme aus, wenn eine DTD gefunden wird.  
  
-   <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> DTD-Verarbeitung ohne Warn- oder Ausnahmen zu deaktivieren.  
  
 Zur Ausführung einer DTD-Validierung verwendet der <xref:System.Xml.XmlReader> die in der DOCTYPE-Deklaration eines XML-Dokuments definierte DTD. Die DOCTYPE-Deklaration kann entweder auf eine Inline-DTD oder auf eine externe DTD-Datei verweisen. So überprüfen Sie eine XML-Datei anhand einer DTD:  
  
-   Legen Sie die <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType>-Eigenschaft auf `DtdProcessing.Parse.` fest.  
  
-   Legen Sie die <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> -Eigenschaft auf `ValidationType.DTD`fest.  
  
-   Wenn die DTD eine externe Datei ist, die auf einer Netzwerkressource mit Authentifizierungsanforderung gespeichert ist, übergeben Sie ein <xref:System.Xml.XmlResolver>-Objekt mit den notwendigen Anmeldeinformationen an die <xref:System.Xml.XmlReader.Create%2A>-Methode.  
  
> [!IMPORTANT]
>  Wenn die <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> -Eigenschaftensatz auf <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, <xref:System.Xml.XmlReader> die DTDs werden nicht gemeldet. Dies bedeutet, dass die DTD/DOCTYPE bei der Ausgabe verloren geht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XML-Datei mithilfe einer DTD-Datei validiert.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>Eingabe  
 In diesem Beispiel wird die Datei `itemDTD.xml` als Eingabe verwendet.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreComments : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Kommentare ignoriert werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Kommentare ignoriert werden sollen, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft auf `true` kann dazu führen, mehrere aneinandergrenzende Textknoten-Knoten, die vom Reader zurückgegeben wird. Dies wirkt sich nicht auf Überprüfung aus.  
  
   
  
## Examples  
 Die folgenden erstellt ein Objekt mit Einstellungen, die verwendet werden kann, um einen Reader erstellen, der verarbeitungsanweisungen, Kommentare und nicht signifikanter Leerraum entfernt.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreProcessingInstructions : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Verarbeitungsanweisungen ignoriert werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Verarbeitungsanweisungen ignoriert werden sollen, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft auf `true` kann dazu führen, mehrere aneinandergrenzende Textknoten-Knoten, die vom Reader zurückgegeben wird. Dies wirkt sich nicht auf Überprüfung aus.  
  
   
  
## Examples  
 Die folgenden erstellt ein Objekt mit Einstellungen, die verwendet werden kann, um einen Reader erstellen, der verarbeitungsanweisungen, Kommentare und nicht signifikanter Leerraum entfernt.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWhitespace : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob signifikanter Leerraum ignoriert werden soll, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, um Leerraum zu ignorieren, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leerraum, der nicht signifikant betrachtet wird, enthält Leerzeichen, Tabulatoren und leere Zeilen verwendet, um das Markup für bessere Lesbarkeit auseinander festzulegen. Ein Beispiel hierfür ist Leerraum im Elementinhalt.  
  
 Die Einstellung dieser Eigenschaft wirkt sich nicht auf die Leerraum zwischen Markup in einem Modus mit gemischtem Inhalt oder Leerraum, der innerhalb des Bereichs tritt auf, eine `xml:space='preserve'` Attribut.  
  
   
  
## Examples  
 Die folgenden erstellt ein Objekt mit Einstellungen, die verwendet werden kann, um einen Reader erstellen, der verarbeitungsanweisungen, Kommentare und nicht signifikanter Leerraum entfernt.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineNumberOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeilennummernoffset des <see cref="T:System.Xml.XmlReader" />-Objekts ab oder legt dieses fest.</summary>
        <value>Das Zeilennummernoffset. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A> Einstellung bestimmt den Punkt, in denen die <xref:System.Xml.IXmlLineInfo.LineNumber%2A> zählt die Eigenschaft. Dies ist nützlich, wenn die XML-Daten in einem größeren Dokument eingebettet ist. Beispielsweise wenn Ihre XML-Daten in einem größeren Dokument eingebettet wurden, und Ihre Daten, in Zeile 101 des Dokuments Beginn, empfiehlt an, dass der Reader am Zeile 100 beginnen. Wenn der Reader beim Analysieren der ersten Zeile des XML-eine Ausnahme ausgelöst hat, würde es die Nummer der Zeile als Zeile 101 und nicht als Zeile 1 aus diesem Grund melden.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LinePositionOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeilenpositionsoffset des <see cref="T:System.Xml.XmlReader" />-Objekts ab oder legt dieses fest.</summary>
        <value>Die Offset der Linienposition. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A> Einstellung bestimmt den Punkt, in denen die <xref:System.Xml.IXmlLineInfo.LinePosition%2A> zählt die Eigenschaft. Dies ist nützlich, wenn die XML-Daten innerhalb eines größeren Dokuments eingebettet ist, und es keine neue Zeile am Anfang des XML-Codes wird. In diesem Fall, wenn der Reader beim Analysieren des XML-Codes eine Ausnahme auslöst, möchten Sie die Position der Zeile relativ zum Hauptdokument, nicht nur in Bezug auf das XML-Fragment zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersFromEntities : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die maximal zulässige Anzahl von Zeichen in einem Dokument angibt, die aus dem Erweitern von Entitäten resultieren, oder legt diesen fest.</summary>
        <value>Die maximale zulässige Anzahl von Zeichen aus erweiterten Entitäten. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert 0 (null) bedeutet keine Beschränkung der Anzahl von Zeichen, das Erweitern von Entitäten ergeben. Ein Wert ungleich Null gibt an, die maximale Anzahl von Zeichen, die sich ergeben können, Erweitern von Entitäten.  
  
 Wenn der Reader zum Lesen eines Dokuments, die Entitäten enthält, sodass diese Eigenschaft die erweiterte Größe übersteigt, wird versucht eine <xref:System.Xml.XmlException> ausgelöst.  
  
 Diese Eigenschaft können Sie DOS-Angriffe zu verringern, in denen der Angreifer XML-Dokumente, die versuchen, das Arbeitsspeichergrenze über das Erweitern von Entitäten überschreiten übermittelt werden sollen. Durch beschränken die Zeichen, die sich aus erweiterten Entitäten ergeben, können Sie erkennen des Angriffs und zuverlässige Wiederherstellung.  
  
   
  
## Examples  
 Der folgende Code wird diese Eigenschaft festgelegt, und versucht dann, ein Dokument zu analysieren, die eine Entität enthält, die auf eine Größe, die größer als das festgelegte Limit erweitert wird. In einem realen Szenario legen dieses Limit hoch genug, um gültige Dokumente noch zu verarbeiten klein genug, um die Bedrohung durch schädliche Dokumente zu beschränken. Sie.  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    "]>" + Environment.NewLine + _  
    "<Root>Content &anEntity;</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD  
settings.MaxCharactersFromEntities = 30  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Dieses Beispiel erzeugt die folgende Ausgabe:  
  
```  
There is an error in XML document (MaxCharactersFromEntities, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersInDocument : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die maximale zulässige Anzahl von Zeichen in einem XML-Dokument angibt, oder legt diesen fest. Der Wert 0 (null) gibt an, dass die Größe des XML-Dokuments nicht beschränkt ist. Ein Wert ungleich 0 (null) gibt die maximale Größe in Zeichen an.</summary>
        <value>Die maximale zulässige Anzahl von Zeichen in einem XML-Dokument. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert 0 (null) bedeutet keine Beschränkung der Anzahl der Zeichen in das analysierte Dokument. Ein Wert ungleich Null gibt an, die maximale Anzahl von Zeichen, die analysiert werden kann.  
  
 Die maximale Zeichenanzahl für das Dokument enthält die Anzahl von Zeichen, die sich aus erweiterten Entitäten ergeben.  
  
 Wenn der Leser versucht, ein Dokument mit einer Größe zu lesen, die diese Eigenschaft überschreitet ein <xref:System.Xml.XmlException> ausgelöst.  
  
 Diese Eigenschaft können Sie DOS-Angriffe zu verringern, in denen der Angreifer extrem große XML-Dokumente übermittelt werden sollen. Durch Beschränken der Größe eines Dokuments, können Sie den Angriff erkennen und zuverlässige Wiederherstellung.  
  
   
  
## Examples  
 Der folgende Code wird diese Eigenschaft festgelegt und anschließend wird versucht, ein Dokument, die größer als das Limit zu analysieren. In einem realen Szenario legen dieses Limit hoch genug, um gültige Dokumente noch zu verarbeiten klein genug, um die Bedrohung durch schädliche Dokumente zu beschränken. Sie.  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Dieser Code erzeugt die folgende Ausgabe:  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable with get, set" Usage="System.Xml.XmlReaderSettings.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die für Vergleiche von atomisierten Zeichenfolgen verwendete<see cref="T:System.Xml.XmlNameTable" /> ab oder legt diese fest.</summary>
        <value>Die <see cref="T:System.Xml.XmlNameTable" />, in der alle atomisierten Zeichenfolgen gespeichert werden, die von allen <see cref="T:System.Xml.XmlReader" />-Instanzen verwendet werden, die mit diesem <see cref="T:System.Xml.XmlReaderSettings" />-Objekt erstellt wurden.  
  
Die Standardeinstellung ist <see langword="null" />. Die erstellte <see cref="T:System.Xml.XmlReader" /> -Instanz verwendet eine neue leere <see cref="T:System.Xml.NameTable" />, wenn dieser Wert <see langword="null" /> ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie diese Eigenschaft auf eine <xref:System.Xml.XmlNameTable> Instanz, wenn Sie für alle einen gemeinsamen Tabellennamen freigeben möchten, das erstellte <xref:System.Xml.XmlReader> Instanzen.  
  
> [!NOTE]
>  Die <xref:System.Xml.NameTable>-Klasse ist nicht threadsicher. Es kann nicht aus diesem Grund freigegeben werden, zwischen <xref:System.Xml.XmlReader> Objekte, die gleichzeitig in verschiedenen Threads ausgeführt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob eine DTD-Verarbeitung (Document Type Definition, Dokumenttypdefinition) verhindert werden soll, oder legt diesen fest. Diese Eigenschaft ist veraltet. Verwenden Sie stattdessen <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />.</summary>
        <value><see langword="true" />, wenn die DTD-Verarbeitung verhindert werden soll, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Festlegung auf `true`, <xref:System.Xml.XmlReader> löst eine <xref:System.Xml.XmlException> wenn DTD-Inhalt festgestellt wird. Aktivieren Sie die DTD-Verarbeitung nicht, wenn Sie DoS-Probleme befürchten oder wenn Sie mit nicht vertrauenswürdigen Quellen arbeiten.  
  
 Wenn die DTD-Verarbeitung aktiviert ist, können die Ressourcen, auf die der <xref:System.Xml.XmlSecureResolver> Zugriff hat, mit dem <xref:System.Xml.XmlReader> eingeschränkt werden. Sie können die Anwendung auch so entwerfen, dass die XML-Verarbeitung bezüglich Arbeitsspeicher und Zeit eingeschränkt wird. In einer ASP.NET-Anwendung können z. B. Timeouts konfiguriert werden.  
  
 Diese Eigenschaft ist veraltet. Verwenden Sie stattdessen <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Wenn Sie festgelegt haben <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> auf seinen Standardwert `true` festgelegt <xref:System.Xml.XmlTextReader.DtdProcessing%2A> zu `Prohibit`. Wenn Sie festgelegt haben <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> zu `false` festgelegt <xref:System.Xml.XmlTextReader.DtdProcessing%2A> zu `Parse`.  
  
   
  
## Examples  
 Das folgende Beispiel überprüft Daten, die mit einer DTD.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 Im Beispiel wird die Datei itemDTD.xml als Eingabe verwendet.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlReaderSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die Member der settings-Klasse auf ihre Standardwerte zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgende Tabelle werden die anfänglichen Eigenschaftenwerte für eine Instanz von <xref:System.Xml.XmlReaderSettings>.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (es gibt keine Beschränkung für die Anzahl der Zeichen, das Erweitern von Entitäten ergeben).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (es gibt keine Beschränkung für die Größe des XML-Dokuments).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Diese Eigenschaft ist veraltet. Verwenden Sie stattdessen <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Wenn Sie festgelegt haben <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> auf seinen Standardwert `true` festgelegt <xref:System.Xml.XmlTextReader.DtdProcessing%2A> zu `Prohibit`. Wenn Sie festgelegt haben <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> zu `false` festgelegt <xref:System.Xml.XmlTextReader.DtdProcessing%2A> zu `Parse`.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Ein leeres <xref:System.Xml.Schema.XmlSchemaSet>-Objekt.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Ein neues <xref:System.Xml.XmlUrlResolver>-Objekt.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet with get, set" Usage="System.Xml.XmlReaderSettings.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ab, das beim Ausführen einer Schemavalidierung verwendet werden soll, oder legt dieses fest.</summary>
        <value>Der zu verwendende <see cref="T:System.Xml.Schema.XmlSchemaSet" />, wenn eine Schemavalidierung ausgeführt wird. Standardmäßig ist das <see cref="T:System.Xml.Schema.XmlSchemaSet" /> -Objekt leer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   Verwenden Sie die Schemas aus unbekannten oder nicht vertrauenswürdigen Quellen oder Standorte nicht zu. Auf diese Weise wird die Sicherheit Ihres Codes gefährdet werden.  
> -   XML-Schemas (auch Inlineschemas) sind von Natur aus anfällig für DOS-Angriffe; Akzeptieren Sie sie nicht in nicht vertrauenswürdigen Szenarios.  
> -   Schema-Validation-Fehlermeldungen und Ausnahmen können vertrauliche Informationen über die Content-Modell oder das URI-Pfade zur Schemadatei verfügbar machen. Achten Sie darauf, dass Sie nicht diese Informationen, um nicht vertrauenswürdige Aufrufer verfügbar zu machen.  
> -   Weitere Informationen finden Sie im Abschnitt "Überlegungen zur Sicherheit".  
  
 Die <xref:System.Xml.Schema.XmlSchemaSet> -Klasse unterstützt nur die Schemas für XML Schema Definition Language (XSD). <xref:System.Xml.XmlReader> erstellt Instanzen der <xref:System.Xml.XmlReader.Create%2A> Methode kann nicht konfiguriert werden, um XML-Data Reduced (XDR)-Schema-Validierung zu aktivieren.  
  
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
  
-   Verwenden Sie Schemas nicht aus unbekannten oder nicht vertrauenswürdigen Quellen aus. Auf diese Weise wird die Sicherheit Ihres Codes gefährdet werden. Die <xref:System.Xml.XmlUrlResolver> Klasse zum Auflösen von externen Schemata wird standardmäßig verwendet. Legen Sie zur Auflösung von einschließen, Import, deaktivieren und neu definieren die Elemente eines Schemas, die <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> Eigenschaft `null`.  
  
-   Ausnahmen, die ausgelöst wird, durch die Verwendung der <xref:System.Xml.Schema.XmlSchemaSet> Klasse, z. B. die <xref:System.Xml.Schema.XmlSchemaException> Klasse enthält möglicherweise vertrauliche Informationen, die in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht werden sollen. Z. B. die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Eigenschaft eine <xref:System.Xml.Schema.XmlSchemaException> gibt den URI-Pfad der Schemadatei, die die Ausnahme verursacht hat. Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Eigenschaft sollte in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht werden. Ausnahmen sollten ordnungsgemäß behandelt werden, sodass diese vertraulichen Informationen in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.XmlReaderSettings> Objekt und die <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Methode, ein XML-Dokument ein Schema zugeordnet werden soll. Das Schema wird hinzugefügt, um die <xref:System.Xml.XmlReaderSettings.Schemas%2A> Eigenschaft der <xref:System.Xml.XmlReaderSettings> Objekt. Der Wert des der <xref:System.Xml.XmlReaderSettings.Schemas%2A> -Eigenschaft ist ein <xref:System.Xml.Schema.XmlSchemaSet> Objekt. Das Schema wird verwendet, um sicherzustellen, dass das XML-Dokument, das Schemainhaltsmodell entspricht. Schema-Validierungsfehler und-Warnungen werden verarbeitet, indem die <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> definiert, der <xref:System.Xml.XmlReaderSettings> Objekt.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 Im Beispiel wird die Datei books.xml als Eingabe verwendet.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 Im Beispiel verwendet die books.xsd-Datei als Eingabe an.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Reader Validierungsfehler feststellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Ereignisse treten beim Lesen eines XML-Instanzdokuments, falls die <xref:System.Xml.XmlReaderSettings.ValidationType%2A> wird <xref:System.Xml.ValidationType.DTD> oder <xref:System.Xml.ValidationType.Schema>. Wenn die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> Einstellung aktiviert wurde die <xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> Eigenschaft, die diese Ereignisse auch auftreten, wenn Warnungen gefunden werden.  
  
 Wenn der Reader für die Überprüfung konfiguriert ist, und kein Ereignishandler für die Validierung festgelegt wurde, ein <xref:System.Xml.Schema.XmlSchemaValidationException> wird für alle Validierungsfehler ausgelöst. (Überprüfungswarnungen führen nicht dazu, dass ein <xref:System.Xml.Schema.XmlSchemaValidationException> ausgelöst wird).  
  
> [!IMPORTANT]
>  Meldungen für Validierungsfehler können sensible Inhaltsmodell-Informationen verfügbar machen. Überprüfung Fehler- und Warnmeldungen erfolgt mithilfe der <xref:System.Xml.Schema.ValidationEventHandler> delegieren oder als verfügbar gemacht werden ein <xref:System.Xml.Schema.XmlSchemaValidationException> , wenn kein Ereignishandler bereitgestellt wird die <xref:System.Xml.XmlReaderSettings> Objekt (überprüfungswarnungen führen nicht dazu, dass ein <xref:System.Xml.Schema.XmlSchemaValidationException> ausgelöst wird). Diese Informationen Inhaltsmodell sollte nicht in nicht vertrauenswürdigen Szenarios verfügbar gemacht werden. Überprüfung-Warnmeldungen werden standardmäßig unterdrückt und gemeldet werden kann, durch Festlegen der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> Flag.  
>   
>  Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Eigenschaft eine <xref:System.Xml.Schema.XmlSchemaValidationException> gibt den URI-Pfad der Schemadatei, die die Ausnahme verursacht hat. Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Eigenschaft sollte in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Einstellungen, die angeben, um einen Reader zu erstellen, die mit einem Inlineschema überprüft sowie die, die Warnungen an. Der Ereignishandler für die Überprüfung verwendet die <xref:System.Xml.Schema.XmlSeverityType> Enumeration zum unterscheiden zwischen Warnungen und Fehler.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationFlags : System.Xml.Schema.XmlSchemaValidationFlags with get, set" Usage="System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die Schemavalidierungseinstellungen angibt, oder legt diesen fest. Diese Einstellung gilt für <see cref="T:System.Xml.XmlReader" />-Objekte, die Schemata validieren (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> Eigenschaft auf <see langword="ValidationType.Schema" /> festgelegt).</summary>
        <value>Eine bitweise Kombination von Enumerationswerten, die Validierungsoptionen festlegen. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> und <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> sind standardmäßig aktiviert. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> und <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> sind standardmäßig deaktiviert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>-Validierungsflag und das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>-Validierungsflag eines <xref:System.Xml.XmlReaderSettings>-Objekts werden nicht standardmäßig festgelegt. Wenn diese Flags festgelegt sind, wird der <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> des <xref:System.Xml.XmlReaderSettings>-Objekts verwendet, um die im Instanzdokument des <xref:System.Xml.XmlReader> erkannten Schemaspeicherorte aufzulösen. Wenn die <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> Objekt `null`, Schemaspeicherorte nicht aufgelöst, wenn die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> und <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Validierungsflag festgelegt sind.  
>   
>  Durch während der Validierung hinzugefügte Schemas werden neue Typen hinzugefügt, sodass das Validierungsergebnis des überprüften Dokuments möglicherweise geändert wird. Daher sollten externe Schemata nur von vertrauenswürdigen Quellen aufgelöst werden.  
>   
>  Deaktivieren der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> Flag (standardmäßig aktiviert) wird empfohlen, wenn es sich bei Szenarien mit hochverfügbarkeit anhand eines Schemas mit der Identity-Einschränkung über einen großen Teil des Dokuments überprüfen, nicht vertrauenswürdige, große XML-Dokumenten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird überprüft, ob eine XML-Datei anhand einer XML-Inlineschemas durch Aktivieren der <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> festlegen. Der XML-Reader zum Anzeigen von validierungswarnungen konfiguriert ist, sp Sie auch sehen erwartungsgemäße Warnung für das Stammelement.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>Eingabe  
 In diesem Beispiel wird die Datei inlineSchema.xml als Eingabe verwendet.  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>Output  
 Warnung:   Kein übereinstimmendes Schema gefunden. Es wurde keine Validierung durchgeführt. Es konnten keine Schemainformationen für das Element "root" gefunden werden.  
  
 Validierungsfehler:   Das Element "xsdHeadCount: HeadCount" weist ungültige untergeordnete Element "Division". Erwartet wurde 'ID'.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlReaderSettings.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert fest, der angibt, ob der <see cref="T:System.Xml.XmlReader" /> beim Lesen eine Validierung oder Typzuweisung ausführt, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Xml.ValidationType" />-Werte, der angibt, ob XmlReader die Validierung oder Typzuordnung beim Lesen ausführt. Die Standardeinstellung ist <see langword="ValidationType.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgende Tabelle beschreibt die <xref:System.Xml.ValidationType> Werte.  
  
> [!NOTE]
>  Die <xref:System.Xml.ValidationType.Auto> und <xref:System.Xml.ValidationType.XDR> Enumerationswerte sind in .NET Framework, Version 2.0, veraltet.  
  
|ValidationType|Beschreibung |  
|--------------------|-----------------|  
|`DTD`|Überprüfung erfolgt mithilfe einer Dokumenttypdefinition (DTD). **Hinweis**:  Die <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> Eigenschaft muss auch festgelegt werden, um <xref:System.Xml.DtdProcessing.Parse>.|  
|`None`|Die <xref:System.Xml.XmlReader> nicht überprüfen von Daten oder alle typzuweisung führen.|  
|`Schema`|Überprüfung und Typ-Zuweisung erfolgt über ein Schema für XML Schema Definition Language (XSD). Der Reader greift auf das XML-Schema mithilfe der folgenden:<br /><br /> – Verwendet die <xref:System.Xml.XmlReaderSettings.Schemas%2A> Eigenschaft, die Zugriff auf die <xref:System.Xml.Schema.XmlSchemaSet> dieser Reader zugeordnete Objekt.<br />– Verwendet die Inline-Schemas in das XML-Instanzdokument. (Die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> Option muss aktiviert sein.)<br />– Verwendet das XML-Schema anhand des angetroffenen Schemaspeicherorthinweise (`xsi:schemaLocation` oder `xsi:noNamespaceSchemaLocation` Attribut) finden Sie in dem XML-Instanzdokument. (Die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Option muss aktiviert sein.)|  
  
   
  
## Examples  
 Im folgenden Beispiel wird überprüft, ob mit einem Schema gespeichert, der <xref:System.Xml.Schema.XmlSchemaSet>.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 Das Beispiel verwendet die folgenden Eingabedateien:  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt den <see cref="T:System.Xml.XmlResolver" /> fest, der für den Zugriff auf externe Dokumente verwendet wird.</summary>
        <value>Ein <see cref="T:System.Xml.XmlResolver" />, der für den Zugriff auf externe Dokumente verwendet wird. Bei Festlegung auf<see langword="null" /> wird eine <see cref="T:System.Xml.XmlException" /> ausgelöst, wenn der <see cref="T:System.Xml.XmlReader" /> auf eine externe Ressource zugreift. Standard ist ein neuer <see cref="T:System.Xml.XmlUrlResolver" /> ohne Anmeldeinformationen.  Ab der .NET Framework-Version 4.5.2 hat diese Einstellung den Standardwert <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlResolver> dient zum Suchen und öffnen Sie eine XML-Instanzendokument oder zum Suchen und öffnen Sie keine externen Ressourcen, die von dem XML-Instanzdokument verwiesen wird. Dies kann die Entitäten, DTD oder Schemas einschließen. Die <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> Eigenschaft kann verwendet werden, um Anmeldeinformationen für die Netzwerkauthentifizierung erforderlich angegeben.  
  
> [!IMPORTANT]
>  Da die <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> können vertrauliche Informationen enthalten wie die Anmeldeinformationen, sollten Sie vorsichtig beim Zwischenspeichern von <xref:System.Xml.XmlReaderSettings> Objekte oder bei der Übergabe der <xref:System.Xml.XmlReaderSettings> Objekt von einer Komponente zu einem anderen.  
>   
>  Ein <xref:System.Xml.XmlSecureResolver> Zugriff auf externe Dokumente verwendet werden können. Die <xref:System.Xml.XmlSecureResolver> Klasse hilft, eine andere Implementierung der <xref:System.Xml.XmlResolver> durch Umschließen der <xref:System.Xml.XmlResolver> -Objekt und die Ressourcen beschränkt, die die zugrunde liegende <xref:System.Xml.XmlResolver> hat Zugriff auf.  
>   
>  Das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>-Validierungsflag und das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>-Validierungsflag eines <xref:System.Xml.XmlReaderSettings>-Objekts werden nicht standardmäßig festgelegt. Wenn diese Flags festgelegt sind, wird der <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> des <xref:System.Xml.XmlReaderSettings>-Objekts verwendet, um die im Instanzdokument des <xref:System.Xml.XmlReader> erkannten Schemaspeicherorte aufzulösen. Wenn die <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> Objekt `null`, Schemaspeicherorte nicht aufgelöst, wenn die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> und <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Validierungsflag festgelegt sind.  
>   
>  Durch während der Validierung hinzugefügte Schemas werden neue Typen hinzugefügt, sodass das Validierungsergebnis des überprüften Dokuments möglicherweise geändert wird. Daher sollten externe Schemata nur von vertrauenswürdigen Quellen aufgelöst werden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Xml.XmlReader> , verwendet eine <xref:System.Xml.XmlSecureResolver> mit Standardanmeldeinformationen.  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="85fd8a174f89dadfc095852a1095bef2d6c66a51" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69439527" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlReaderSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt eine Gruppe von Funktionen an, die für das <see cref="T:System.Xml.XmlReader" />-Objekt unterstützt werden sollen, das von der <see cref="Overload:System.Xml.XmlReader.Create" />-Methode erstellt wurde.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden die <xref:System.Xml.XmlReader.Create%2A> -Methode <xref:System.Xml.XmlReader> , um Instanzen abzurufen. Diese Methode verwendet die <xref:System.Xml.XmlReaderSettings> -Klasse, um anzugeben, welche Funktionen in <xref:System.Xml.XmlReader> dem erstellten Objekt implementiert werden sollen.  
  
 Informationen zu den Einstellungen, die <xref:System.Xml.XmlReader> für <xref:System.Xml.XmlReader.Create%2A> Übereinstimmungs Überprüfungen, Validierung und andere gängige Szenarien verwendet werden, finden Sie in den Abschnitten zu den Abschnitten der Referenzseiten und. Eine Liste <xref:System.Xml.XmlReaderSettings.%23ctor> der Standardeinstellungen finden Sie im-Konstruktor.  
  
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
 Beachten Sie Folgendes, wenn Sie <xref:System.Xml.XmlReaderSettings> die-Klasse verwenden.  
  
-   Das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>-Validierungsflag und das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>-Validierungsflag eines <xref:System.Xml.XmlReaderSettings>-Objekts werden nicht standardmäßig festgelegt. Wenn diese Flags festgelegt sind, wird der <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> des <xref:System.Xml.XmlReaderSettings>-Objekts verwendet, um die im Instanzdokument des <xref:System.Xml.XmlReader> erkannten Schemaspeicherorte aufzulösen. Wenn das <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> -Objekt `null`ist, werden Schema Speicherorte nicht aufgelöst, <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> auch <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> wenn die Validierungs Flags und festgelegt sind.  
  
-   Durch während der Validierung hinzugefügte Schemas werden neue Typen hinzugefügt, sodass das Validierungsergebnis des überprüften Dokuments möglicherweise geändert wird. Daher sollten externe Schemata nur von vertrauenswürdigen Quellen aufgelöst werden.  
  
-   Validierungs Fehlermeldungen machen möglicherweise sensible Inhalts Modellinformationen verfügbar. Validierungs Fehler und Warnmeldungen <xref:System.Xml.Schema.ValidationEventHandler> werden mit dem-Delegaten behandelt oder werden <xref:System.Xml.Schema.XmlSchemaValidationException> als bereitgestellt, wenn kein Ereignishandler für das <xref:System.Xml.XmlReaderSettings> -Objekt bereitgestellt wird (Validierungs Warnungen <xref:System.Xml.Schema.XmlSchemaValidationException> bewirken nicht, dass eine ausgelöst wird). Diese Inhalts Modellinformationen sollten nicht in nicht vertrauenswürdigen Szenarien verfügbar gemacht werden. Validierungs Warnmeldungen werden standardmäßig unterdrückt und können durch Festlegen des <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> -Flags gemeldet werden.  
  
-   Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> -Eigenschaft <xref:System.Xml.Schema.XmlSchemaValidationException> eines gibt den URI-Pfad zu der Schema Datei zurück, die die Ausnahme verursacht hat. Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> -Eigenschaft sollte in nicht vertrauenswürdigen Szenarios nicht verfügbar gemacht werden.  
  
-   Das Deaktivieren des <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> Flags (standardmäßig aktiviert) empfiehlt sich beim Validieren von nicht vertrauenswürdigen, großen XML-Dokumenten in Szenarien mit hoher Verfügbarkeit für ein Schema mit Identitäts Einschränkungen für einen großen Teil des Dokuments.  
  
-   <xref:System.Xml.XmlReaderSettings>-Objekte können vertrauliche Informationen (z. B. Anmeldeinformationen des Benutzers) enthalten. Sie sollten daher beim Zwischenspeichern von <xref:System.Xml.XmlReaderSettings>-Objekten oder bei der Übergabe eines <xref:System.Xml.XmlReaderSettings>-Objekts von einer Komponente an eine andere sorgfältig vorgehen.  
  
-   Die DTD-Verarbeitung ist in der Standardeinstellung deaktiviert. Wenn Sie die DTD-Verarbeitung aktivieren, müssen Sie wissen, ob Sie DTDs aus nicht vertrauenswürdigen Quellen und mögliche Denial-of-Service-Angriffe einschließen. Verwenden Sie, um die Ressourcen einzuschränken, <xref:System.Xml.XmlReader> auf die der zugreifen kann. <xref:System.Xml.XmlSecureResolver>  
  
-   Achten Sie darauf, keine Unterstützung für Komponenten aus einer nicht vertrauenswürdigen Quelle zu gewähren (z. B. den Objekten <xref:System.Xml.NameTable>, <xref:System.Xml.XmlNamespaceManager> und <xref:System.Xml.XmlResolver>).  
  
-   Zwischen der Speichernutzung einer Anwendung, die <xref:System.Xml.XmlReader> verwendet, und der Größe des analysierten XML-Dokuments kann eine enge Beziehung bestehen. Im Rahmen von Denial-of-Service-Angriffen können auch übermäßig große XML-Dokumente zum Analysieren gesendet werden. Sie können die Größe des Dokuments, das analysiert werden kann, begrenzen, indem Sie <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> die-Eigenschaft festlegen und dann die Anzahl der Zeichen begrenzen, die sich aus dem <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> Erweitern von Entitäten ergeben, indem Sie die-Eigenschaft festlegen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Xml.XmlReader> erstellt, die <xref:System.Xml.XmlUrlResolver> eine mit den erforderlichen Anmelde Informationen verwendet.  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML-Dokumente und XML-Daten</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlReaderSettings" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlReaderSettings" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftswerte für <xref:System.Xml.XmlReaderSettings>eine Instanz von angezeigt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (es gibt keine Beschränkung für die Anzahl der Zeichen, die sich aus dem Erweitern von Entitäten ergeben).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (es gibt keine Beschränkung für die Größe des XML-Dokuments).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Diese Eigenschaft ist veraltet. Verwenden Sie stattdessen <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Wenn Sie auf den <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> Standardwert `true` festgelegt haben <xref:System.Xml.XmlTextReader.DtdProcessing%2A> , `Prohibit`der auf festgelegt ist. Wenn Sie festgelegt <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> haben `false` , <xref:System.Xml.XmlTextReader.DtdProcessing%2A> dass `Parse`auf festgelegt ist.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Ein leeres <xref:System.Xml.Schema.XmlSchemaSet>-Objekt.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Ein neues <xref:System.Xml.XmlUrlResolver>-Objekt.|  
  
   
  
## Examples  
 Im folgenden wird ein Einstellungs Objekt erstellt, das zum Erstellen eines Readers verwendet werden kann, der Verarbeitungsanweisungen, Kommentare und unbedeutende Leerräume entfernt.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlReaderSettings : System.Xml.XmlResolver -&gt; System.Xml.XmlReaderSettings" Usage="new System.Xml.XmlReaderSettings resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resolver">Der XML-Resolver.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.XmlReaderSettings" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlReaderSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob asynchrone <see cref="T:System.Xml.XmlReader" />-Methoden für eine bestimmte <see cref="T:System.Xml.XmlReader" />-Instanz verwendet werden können.</summary>
        <value><see langword="true" />, wenn asynchrone Methoden verwendet werden können; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen diesen Wert auf festlegen `true` , wenn Sie eine neue <xref:System.Xml.XmlReader> -Instanz erstellen, wenn Sie asynchrone <xref:System.Xml.XmlReader> Methoden für diese Instanz verwenden möchten. Nachdem die <xref:System.Xml.XmlReader> Instanz erstellt wurde, ist <xref:System.Xml.XmlReaderSettings.Async%2A> die Eigenschaft schreibgeschützt. Der Standardwert dieser Eigenschaft ist `false`.  
  
 Dieses Flag wird von der <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Überladung ignoriert. Dies bedeutet, dass beim Erstellen eines neuen <xref:System.Xml.XmlReader> basierend auf einem vorhandenen <xref:System.Xml.XmlReader>das asynchrone Verhalten von der Eingabe <xref:System.Xml.XmlReader>abhängt, und Sie können das <xref:System.Xml.XmlReaderSettings.Async%2A> -Flag nicht verwenden, um das Async-Verhalten zu ändern.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Asynchrone Programmierung mit Async und Await (C# und Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Zeichen überprüft werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Zeichen überprüft werden sollen, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.  
  
 <block subset="none" type="note"><para>  
 Wenn der <see cref="T:System.Xml.XmlReader" /> Textdaten verarbeitet, überprüft er unabhängig von der Eigenschafteneinstellung stets, ob die XML-Namen und der Textinhalt gültig sind. Durch Festlegen von <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> auf <see langword="false" /> wird die Zeichenüberprüfung für Zeichenentitätsverweise deaktiviert.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft weist den XML-Reader an, die Zeichen in den gelesenen XML-Daten zu <xref:System.Xml.XmlException> überprüfen und eine auszulösen, wenn sich Zeichen außerhalb des Bereichs zulässiger XML-Zeichen befinden. Bei aktivierter Zeichenüberprüfung ist Folgendes sichergestellt:  
  
-   Zeichen liegen innerhalb des Bereichs zulässiges XML-Zeichen, wie im Abschnitt [2,2-Zeichen](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets) der W3C-Empfehlung zu XML 1,0 definiert.  
  
-   Alle XML-Namen sind gültig, wie im Abschnitt [2,3 common syntaktische Konstrukte](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) der W3C-Empfehlung zu XML 1,0 definiert.  
  
 Wenn diese Eigenschaft auf `true`festgelegt ist (Dies ist die Standardeinstellung), wird eine <xref:System.Xml.XmlException> Ausnahme ausgelöst, wenn die XML-Datei ungültige Zeichen oder ungültige XML-Namen enthält (z. b. Wenn ein Elementname mit einer Zahl beginnt).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlReaderSettings" Usage="xmlReaderSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der <see cref="T:System.Xml.XmlReaderSettings" />-Instanz.</summary>
        <returns>Das geklonte <see cref="T:System.Xml.XmlReaderSettings" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das geklonte <xref:System.Xml.XmlReaderSettings> Objekt kann geändert werden, ohne dass sich dies auf die Einstellungen des ursprünglichen Objekts auswirkt.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool with get, set" Usage="System.Xml.XmlReaderSettings.CloseInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der zugrunde liegende Stream oder <see cref="T:System.IO.TextReader" /> geschlossen werden soll, nachdem der Reader geschlossen wurde, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, um den zugrunde liegenden Stream oder <see cref="T:System.IO.TextReader" /> zu schließen, nachdem der Reader geschlossen wurde, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Einstellung wird verwendet, wenn ein Stream <xref:System.IO.TextReader> oder an die <xref:System.Xml.XmlReader.Create%2A> -Methode übermittelt wird. Wenn ein Stream vom Reader für die eigene Verarbeitung erstellt wird, z. b. wenn der Reader mit einem URI erstellt wird oder eine externe Dokumenttyp Definition öffnet, wird er immer geschlossen, wenn der Reader geschlossen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Konformitätsgrad ab, dem der <see cref="T:System.Xml.XmlReader" /> entspricht, oder legt diesen fest.</summary>
        <value>Einer der Enumerationswerte, der das Übereinstimmungsniveau angibt, den der XML-Reader umsetzt. Die Standardeinstellung ist <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML-Reader, die von der <xref:System.Xml.XmlReader.Create%2A> -Methode erstellt werden, erfüllen standardmäßig die folgenden Konformitätsanforderungen:  
  
-   Neue Zeilen und Attributwerte werden gemäß der W3C-Empfehlung für [XML 1,0](https://www.w3.org/TR/2006/REC-xml-20060816/)normalisiert.  
  
-   Alle Entitäten werden automatisch erweitert.  
  
-   In der Dokumenttyp Definition deklarierte Standard Attribute werden immer hinzugefügt, auch wenn der Reader nicht validiert wird.  
  
-   Deklaration des dem richtigen XML-Namespace-URI zugeordneten XML-Präfixes ist zulässig.  
  
-   Die Notations Namen in einer einzelnen `NotationType` Attribut Deklaration `NmTokens` und in einer `Enumeration` einzelnen Attribut Deklaration sind unterschiedlich.  
  
 Mithilfe der <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> -Eigenschaft können Sie überprüfen und sicherstellen, dass der gelesene Stream den Regeln für ein wohl geformtes XML 1,0-Dokument oder-Dokument Fragment entspricht. Wenn die Daten nicht übereinstimmen, <xref:System.Xml.XmlException> wird eine Ausnahme ausgelöst. Der Standardwert <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> ist (Konformität auf Dokument Ebene).  
  
 Die drei Konformitätsstufen lauten:  
  
|Einstellung|Beschreibung|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Stellt sicher, dass die XML-Daten den Regeln für ein wohl geformtes XML 1,0-Dokument entsprechen. Diese Ebene der Überprüfung stellt sicher, dass jeder Prozessor den gelesenen Stream als [wohl geformtes XML 1,0-Dokument](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed)verwenden kann.<br /><br /> Folgendes wird vom Reader überprüft:<br /><br /> -Das Element der obersten Ebene darf keine anderen Knoten als XML-Deklaration, Dokumenttyp Definition (DTD), Element, Kommentar, Leerraum oder Verarbeitungsanweisung enthalten.<br />-Die XML-Daten müssen genau einen Elementknoten der obersten Ebene aufweisen.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Stellt sicher, dass die XML-Daten den Regeln für ein wohl geformtes XML 1,0-Dokument Fragment entsprechen.<br /><br /> Bei dieser Einstellung werden XML-Daten mit mehreren Stammelementen oder Textknoten der obersten Ebene akzeptiert. Diese Ebene der Überprüfung stellt sicher, dass jeder Prozessor den gelesenen Stream als [externe analysierte Entität](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities)verarbeiten kann.|  
|<xref:System.Xml.ConformanceLevel.Auto>|Gibt an, dass der Reader die Ebene der Übereinstimmungs Überprüfung basierend auf den eingehenden Daten bestimmen soll.<br /><br /> Wenn die XML-Daten DTD-Informationen enthalten, wird die Übereinstimmungsprüfung für Dokumente angewendet.<br /><br /> Die Übereinstimmungsprüfung für Fragmente wird angewendet, wenn die XML-Daten eines der folgenden Elemente enthalten:<br /><br /> -Text, CDATA oder Entitäts Verweis Knoten auf Stamm Ebene.<br />: Mehr als ein Element auf der Stamm Ebene.<br />-Kein Element auf der Stamm Ebene.<br /><br /> Wenn ein Konflikt auftritt (z. B. wenn sich ein Textknoten und eine DTD auf der Stammebene befinden), wird eine <xref:System.Xml.XmlException> ausgelöst.<br /><br /> Diese Einstellung kann in Wrappingszenarios verwendet werden, wenn mithilfe der <xref:System.Xml.XmlReader.Create%2A>-Methode einem vorhandenen <xref:System.Xml.XmlReader> zusätzliche Funktionen hinzugefügt werden. In diesem Fall wird <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> von keine neue Übereinstimmungs Prüfung hinzugefügt. Die Übereinstimmungsprüfung wird dem <xref:System.Xml.XmlReader> überlassen, für den ein Wrapper erstellt wird.|  
  
> [!NOTE]
>  Gemäß XML 1.0-Empfehlung muss bei vorhandener DTD eine Übereinstimmung auf Dokumentebene vorliegen. Wenn der Reader für die Unterstützung <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>von konfiguriert ist, die XML-Daten jedoch eine DTD (Document Type Definition) enthalten, wird eine <xref:System.Xml.XmlException> ausgelöst.  
  
 Im folgenden wird erläutert, wie der Reader bestimmte Konformitäts Verletzungen in Abhängigkeit von der Einstellung <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> der-Eigenschaft behandelt:  
  
|Bedingung|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|Text oder ein typisierter Wert wird auf der obersten Ebene angezeigt.|<xref:System.Xml.XmlException>wird ausgelöst.|Dies gilt nicht als Verstoß gegen diese Einstellung.|Dies gilt nicht als Verstoß gegen diese Einstellung.|  
|Mehrere Elemente oder kein Element werden auf der obersten Ebene angezeigt.|<xref:System.Xml.XmlException>wird ausgelöst.|Dies gilt nicht als Verstoß gegen diese Einstellung.|Dies gilt nicht als Verstoß gegen diese Einstellung.|  
|Das Element der obersten Ebene ist Leerzeichen.|Dies gilt nicht als Verstoß gegen diese Einstellung.|Dies gilt nicht als Verstoß gegen diese Einstellung.|Dies gilt nicht als Verstoß gegen diese Einstellung.|  
|Das Element der obersten Ebene ist ein Attribut (als Textknoten erkannt).|<xref:System.Xml.XmlException>wird ausgelöst.|Dies gilt nicht als Verstoß gegen diese Einstellung.|Dies gilt nicht als Verstoß gegen diese Einstellung.|  
|Es werden mehrere aneinandergrenzende Textknoten gefunden.|Dies gilt nicht als Verstoß gegen diese Einstellung.|Dies gilt nicht als Verstoß gegen diese Einstellung.|Dies gilt nicht als Verstoß gegen diese Einstellung.|  
|Das gleiche Namespace Präfix wird zweimal im selben lokalen Gültigkeitsbereich deklariert.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|  
|Der Namespace in einem Element oder Attribut ist im lokalen Gültigkeitsbereich nicht vorhanden.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|  
|Die Daten enthalten eine nicht übereinstimmende Präfix-Namespace.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|  
|`xml:space`das Attribut enthält einen ungültigen Wert.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|  
|Es wurde ein ungültiger Name gefunden.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|  
|Das `xml` Präfix stimmt nicht mit http://www.w3.org/XML/1998/namespace dem URI überein.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|<xref:System.Xml.XmlException>wird ausgelöst.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Xml.XmlReader> -Objekt erstellt, das ein XML-Fragment liest.  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der die Verarbeitung von DTDs bestimmt.</summary>
        <value>Einer der Enumerationswerte, der die Verarbeitung von DTDs bestimmt. Die Standardeinstellung ist <see cref="F:System.Xml.DtdProcessing.Prohibit" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die DTD-Überprüfung (Document Type Definition) wird mithilfe der in der [Empfehlung W3C Extensible Markup Language (XML) 1,0 (Fourth Edition)](https://www.w3.org/TR/2006/REC-xml-20060816/)definierten Gültigkeits Einschränkungen implementiert. DTDs verwenden eine formale Grammatik, um die Struktur und Syntax von kompatiblen XML-Dokumenten zu beschreiben. Sie geben den Inhalt und die Werte an, die für das XML-Dokument zulässig sind.  
  
 Diese Eigenschaft kann einen der folgenden Werte aufweisen:  
  
-   <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType>, um die DTD-Verarbeitung zu aktivieren.  
  
-   <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType>, um eine <xref:System.Xml.XmlException> Ausnahme auszulösen, wenn eine DTD gefunden wird.  
  
-   <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, wenn die DTD-Verarbeitung ohne Warnungen oder Ausnahmen deaktiviert werden soll.  
  
 Zur Ausführung einer DTD-Validierung verwendet der <xref:System.Xml.XmlReader> die in der DOCTYPE-Deklaration eines XML-Dokuments definierte DTD. Die DOCTYPE-Deklaration kann entweder auf eine Inline-DTD oder auf eine externe DTD-Datei verweisen. So überprüfen Sie eine XML-Datei anhand einer DTD:  
  
-   Legen Sie die <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType>-Eigenschaft auf `DtdProcessing.Parse.` fest.  
  
-   Legen Sie die <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> -Eigenschaft auf `ValidationType.DTD`fest.  
  
-   Wenn die DTD eine externe Datei ist, die auf einer Netzwerkressource mit Authentifizierungsanforderung gespeichert ist, übergeben Sie ein <xref:System.Xml.XmlResolver>-Objekt mit den notwendigen Anmeldeinformationen an die <xref:System.Xml.XmlReader.Create%2A>-Methode.  
  
> [!IMPORTANT]
>  Wenn die <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> -Eigenschaft auf <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>festgelegt ist <xref:System.Xml.XmlReader> , meldet nicht die DTDs. Dies bedeutet, dass der DTD/DOCTYPE bei der Ausgabe verloren geht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XML-Datei mithilfe einer DTD-Datei validiert.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>Eingabe  
 In diesem Beispiel wird die Datei `itemDTD.xml` als Eingabe verwendet.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreComments : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Kommentare ignoriert werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Kommentare ignoriert werden sollen, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft auf `true` festgelegt wird, kann dies dazu führen, dass mehrere zusammenhängende Textknoten vom Reader zurückgegeben werden. Dies hat keine Auswirkungen auf die Validierung.  
  
   
  
## Examples  
 Im folgenden wird ein Einstellungs Objekt erstellt, das zum Erstellen eines Readers verwendet werden kann, der Verarbeitungsanweisungen, Kommentare und unbedeutende Leerräume entfernt.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreProcessingInstructions : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob Verarbeitungsanweisungen ignoriert werden sollen, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn Verarbeitungsanweisungen ignoriert werden sollen, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft auf `true` festgelegt wird, kann dies dazu führen, dass mehrere zusammenhängende Textknoten vom Reader zurückgegeben werden. Dies hat keine Auswirkungen auf die Validierung.  
  
   
  
## Examples  
 Im folgenden wird ein Einstellungs Objekt erstellt, das zum Erstellen eines Readers verwendet werden kann, der Verarbeitungsanweisungen, Kommentare und unbedeutende Leerräume entfernt.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWhitespace : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob signifikanter Leerraum ignoriert werden soll, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, um Leerraum zu ignorieren, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Leerraum, der nicht als signifikant betrachtet wird, umfasst Leerzeichen, Tabstopps und leere Zeilen, mit denen das Markup für eine bessere Lesbarkeit festgelegt wird. Ein Beispiel hierfür ist Leerraum im Element Inhalt.  
  
 Diese Eigenschafts Einstellung wirkt sich nicht auf Leerraum zwischen Markup in einem gemischten Inhalts Modus oder Leerraum aus, der innerhalb des Gültigkeits Bereichs eines `xml:space='preserve'` Attributs auftritt.  
  
   
  
## Examples  
 Im folgenden wird ein Einstellungs Objekt erstellt, das zum Erstellen eines Readers verwendet werden kann, der Verarbeitungsanweisungen, Kommentare und unbedeutende Leerräume entfernt.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineNumberOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeilennummernoffset des <see cref="T:System.Xml.XmlReader" />-Objekts ab oder legt dieses fest.</summary>
        <value>Das Zeilennummernoffset. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A> -Einstellung bestimmt den Punkt, <xref:System.Xml.IXmlLineInfo.LineNumber%2A> an dem die-Eigenschaft die Zählung startet. Dies ist nützlich, wenn Ihre XML-Daten in ein größeres Dokument eingebettet sind. Wenn Ihre XML-Daten z. b. in einem größeren Dokument eingebettet sind und die Daten in Zeile 101 des Dokuments gestartet wurden, können Sie angeben, dass der Reader in Zeile 100 gestartet werden soll. Wenn der Reader beim Ausführen der ersten Zeile des XML-Codes eine Ausnahme ausgelöst hat, würde er daher die Zeilennummer als Zeile 101 und nicht als Zeile 1 melden.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LinePositionOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeilenpositionsoffset des <see cref="T:System.Xml.XmlReader" />-Objekts ab oder legt dieses fest.</summary>
        <value>Die Offset der Linienposition. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A> -Einstellung bestimmt den Punkt, <xref:System.Xml.IXmlLineInfo.LinePosition%2A> an dem die-Eigenschaft die Zählung startet. Dies ist nützlich, wenn Ihre XML-Daten in ein größeres Dokument eingebettet sind und am Anfang des XML-Codes keine neue Zeile vorhanden ist. Wenn der Reader in diesem Fall eine Ausnahme auslöst, während der XML-Code verarbeitet wird, soll die Zeilen Position relativ zum Hauptdokument, nicht nur relativ zum XML-Fragment, zurückgegeben werden.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersFromEntities : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die maximal zulässige Anzahl von Zeichen in einem Dokument angibt, die aus dem Erweitern von Entitäten resultieren, oder legt diesen fest.</summary>
        <value>Die maximale zulässige Anzahl von Zeichen aus erweiterten Entitäten. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein NULL-Wert (0) bedeutet, dass die Anzahl der Zeichen, die sich aus dem Erweitern von Entitäten ergeben, nicht begrenzt ist Ein Wert ungleich 0 (null) gibt die maximale Anzahl von Zeichen an, die sich aus erweiterbaren Entitäten ergeben können.  
  
 Wenn der Reader versucht, ein Dokument zu lesen, das Entitäten enthält, sodass die erweiterte Größe diese Eigenschaft über <xref:System.Xml.XmlException> schreitet, wird eine ausgelöst.  
  
 Diese Eigenschaft ermöglicht Ihnen das Verringern von Denial-of-Service-Angriffen, bei denen der Angreifer XML-Dokumente übermittelt, die versuchen, die Arbeitsspeicher Limits über die Erweiterung Durch das Einschränken der Zeichen, die sich aus erweiterten Entitäten ergeben, können Sie den Angriff erkennen und zuverlässig wiederherstellen.  
  
   
  
## Examples  
 Mit dem folgenden Code wird diese Eigenschaft festgelegt, und anschließend wird versucht, ein Dokument zu analysieren, das eine Entität enthält, die eine größere Größe als das festgelegte Limit erreicht. In einem realen Szenario legen Sie diese Beschränkung auf einen Wert fest, der groß genug ist, um gültige Dokumente zu verarbeiten, aber klein genug, um die Bedrohung durch böswillige Dokumente einzuschränken.  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    "]>" + Environment.NewLine + _  
    "<Root>Content &anEntity;</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD  
settings.MaxCharactersFromEntities = 30  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Dieses Beispiel erzeugt die folgende Ausgabe:  
  
```  
There is an error in XML document (MaxCharactersFromEntities, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersInDocument : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die maximale zulässige Anzahl von Zeichen in einem XML-Dokument angibt, oder legt diesen fest. Der Wert 0 (null) gibt an, dass die Größe des XML-Dokuments nicht beschränkt ist. Ein Wert ungleich 0 (null) gibt die maximale Größe in Zeichen an.</summary>
        <value>Die maximale zulässige Anzahl von Zeichen in einem XML-Dokument. Der Standard ist 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein NULL-Wert (0) bedeutet, dass die Anzahl der Zeichen im analysierten Dokument unbegrenzt ist. Ein Wert ungleich 0 (null) gibt die maximale Anzahl von Zeichen an, die analysiert werden können.  
  
 Die maximale Zeichen Anzahl für das Dokument schließt die Anzahl von Zeichen ein, die sich aus erweiterten Entitäten ergeben.  
  
 Wenn der Reader versucht, ein Dokument mit einer Größe zu lesen, die diese Eigenschaft über <xref:System.Xml.XmlException> schreitet, wird eine ausgelöst.  
  
 Diese Eigenschaft ermöglicht Ihnen das Verringern von Denial-of-Service-Angriffen, bei denen der Angreifer extrem große XML-Dokumente übermittelt. Durch die Begrenzung der Größe eines Dokuments können Sie den Angriff erkennen und zuverlässig wiederherstellen.  
  
   
  
## Examples  
 Mit dem folgenden Code wird diese Eigenschaft festgelegt, und anschließend wird versucht, ein Dokument zu analysieren, das größer ist als das Limit. In einem realen Szenario legen Sie diese Beschränkung auf einen Wert fest, der groß genug ist, um gültige Dokumente zu verarbeiten, aber klein genug, um die Bedrohung durch böswillige Dokumente einzuschränken.  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Dieser Code erzeugt die folgende Ausgabe:  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable with get, set" Usage="System.Xml.XmlReaderSettings.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die für Vergleiche von atomisierten Zeichenfolgen verwendete<see cref="T:System.Xml.XmlNameTable" /> ab oder legt diese fest.</summary>
        <value>Die <see cref="T:System.Xml.XmlNameTable" />, in der alle atomisierten Zeichenfolgen gespeichert werden, die von allen <see cref="T:System.Xml.XmlReader" />-Instanzen verwendet werden, die mit diesem <see cref="T:System.Xml.XmlReaderSettings" />-Objekt erstellt wurden.  
  
Die Standardeinstellung ist <see langword="null" />. Die erstellte <see cref="T:System.Xml.XmlReader" /> -Instanz verwendet eine neue leere <see cref="T:System.Xml.NameTable" />, wenn dieser Wert <see langword="null" /> ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie diese Eigenschaft auf <xref:System.Xml.XmlNameTable> eine Instanz fest, wenn Sie eine allgemeine namens Tabelle für alle erstellten <xref:System.Xml.XmlReader> Instanzen freigeben möchten.  
  
> [!NOTE]
>  Die <xref:System.Xml.NameTable>-Klasse ist nicht threadsicher. Daher kann er nicht von <xref:System.Xml.XmlReader> Objekten gemeinsam genutzt werden, die gleichzeitig in verschiedenen Threads ausgeführt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob eine DTD-Verarbeitung (Document Type Definition, Dokumenttypdefinition) verhindert werden soll, oder legt diesen fest. Diese Eigenschaft ist veraltet. Verwenden Sie stattdessen <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />.</summary>
        <value><see langword="true" />, wenn die DTD-Verarbeitung verhindert werden soll, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Festlegung `true`auf <xref:System.Xml.XmlReader> wird eine <xref:System.Xml.XmlException> ausgelöst, wenn ein DTD-Inhalt gefunden wird. Aktivieren Sie die DTD-Verarbeitung nicht, wenn Sie DoS-Probleme befürchten oder wenn Sie mit nicht vertrauenswürdigen Quellen arbeiten.  
  
 Wenn die DTD-Verarbeitung aktiviert ist, können die Ressourcen, auf die der <xref:System.Xml.XmlSecureResolver> Zugriff hat, mit dem <xref:System.Xml.XmlReader> eingeschränkt werden. Sie können die Anwendung auch so entwerfen, dass die XML-Verarbeitung bezüglich Arbeitsspeicher und Zeit eingeschränkt wird. In einer ASP.NET-Anwendung können z. B. Timeouts konfiguriert werden.  
  
 Diese Eigenschaft ist veraltet. Verwenden Sie stattdessen <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Wenn Sie auf den <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> Standardwert `true` festgelegt haben <xref:System.Xml.XmlTextReader.DtdProcessing%2A> , `Prohibit`der auf festgelegt ist. Wenn Sie festgelegt <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> haben `false` , <xref:System.Xml.XmlTextReader.DtdProcessing%2A> dass `Parse`auf festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Beispiel werden Daten mithilfe einer DTD überprüft.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 Im Beispiel wird die Datei "itemDTD. xml" als Eingabe verwendet.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlReaderSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die Member der settings-Klasse auf ihre Standardwerte zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftswerte für <xref:System.Xml.XmlReaderSettings>eine Instanz von angezeigt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (es gibt keine Beschränkung für die Anzahl der Zeichen, die sich aus dem Erweitern von Entitäten ergeben).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (es gibt keine Beschränkung für die Größe des XML-Dokuments).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Diese Eigenschaft ist veraltet. Verwenden Sie stattdessen <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Wenn Sie auf den <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> Standardwert `true` festgelegt haben <xref:System.Xml.XmlTextReader.DtdProcessing%2A> , `Prohibit`der auf festgelegt ist. Wenn Sie festgelegt <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> haben `false` , <xref:System.Xml.XmlTextReader.DtdProcessing%2A> dass `Parse`auf festgelegt ist.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Ein leeres <xref:System.Xml.Schema.XmlSchemaSet>-Objekt.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Ein neues <xref:System.Xml.XmlUrlResolver>-Objekt.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet with get, set" Usage="System.Xml.XmlReaderSettings.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ab, das beim Ausführen einer Schemavalidierung verwendet werden soll, oder legt dieses fest.</summary>
        <value>Der zu verwendende <see cref="T:System.Xml.Schema.XmlSchemaSet" />, wenn eine Schemavalidierung ausgeführt wird. Standardmäßig ist das <see cref="T:System.Xml.Schema.XmlSchemaSet" /> -Objekt leer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   Verwenden Sie keine Schemas aus unbekannten oder nicht vertrauenswürdigen Quellen oder Speicherorten. Dadurch wird die Sicherheit Ihres Codes beeinträchtigt.  
> -   XML-Schemas (einschließlich Inline Schemas) sind von Natur aus anfällig für Denial-of-Service-Angriffe. akzeptieren Sie Sie nicht in nicht vertrauenswürdigen Szenarien.  
> -   Schema Validierungs Fehlermeldungen und-Ausnahmen können vertrauliche Informationen über das Inhalts Modell oder URI-Pfade zur Schema Datei verfügbar machen. Achten Sie darauf, diese Informationen nicht für nicht vertrauenswürdige Aufrufer verfügbar zu machen.  
> -   Weitere Informationen finden Sie im Abschnitt "Sicherheitsüberlegungen".  
  
 Die <xref:System.Xml.Schema.XmlSchemaSet> -Klasse unterstützt nur XSD-Schemas (XML Schema Definition Language). <xref:System.Xml.XmlReader>von der-Methode <xref:System.Xml.XmlReader.Create%2A> erstellte Instanzen können nicht so konfiguriert werden, dass die XDR-Schema Validierung (XML-Data Reduced) aktiviert wird.  
  
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
  
-   Verwenden Sie keine Schemas aus unbekannten oder nicht vertrauenswürdigen Quellen. Dadurch wird die Sicherheit Ihres Codes beeinträchtigt. Die <xref:System.Xml.XmlUrlResolver> -Klasse wird verwendet, um externe Schemas standardmäßig aufzulösen. Zum Deaktivieren der Auflösung von include-, Import-und neu definierenden Elementen eines Schemas legen `null`Sie die <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> -Eigenschaft auf fest.  
  
-   Ausnahmen, die aufgrund der Verwendung der <xref:System.Xml.Schema.XmlSchemaSet> -Klasse ausgelöst werden, z. b. die <xref:System.Xml.Schema.XmlSchemaException> -Klasse, können vertrauliche Informationen enthalten, die in nicht vertrauenswürdigen Szenarien nicht verfügbar gemacht werden sollen. Beispielsweise <xref:System.Xml.Schema.XmlSchemaException> gibt die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> -Eigenschaft eines den URI-Pfad zur Schema Datei zurück, die die Ausnahme verursacht hat. Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> -Eigenschaft sollte in nicht vertrauenswürdigen Szenarios nicht verfügbar gemacht werden. Ausnahmen sollten ordnungsgemäß behandelt werden, damit diese vertraulichen Informationen in nicht vertrauenswürdigen Szenarios nicht verfügbar gemacht werden.  
  
   
  
## Examples  
 Im folgenden Beispiel werden das <xref:System.Xml.XmlReaderSettings> -Objekt und <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> die-Methode verwendet, um einem XML-Dokument ein Schema zuzuordnen. Das Schema wird der <xref:System.Xml.XmlReaderSettings.Schemas%2A> -Eigenschaft <xref:System.Xml.XmlReaderSettings> des-Objekts hinzugefügt. Der Wert <xref:System.Xml.XmlReaderSettings.Schemas%2A> der Eigenschaft ist ein <xref:System.Xml.Schema.XmlSchemaSet> Objekt. Das Schema wird verwendet, um zu überprüfen, ob das XML-Dokument dem Schema Inhalts Modell entspricht. Schema Validierungs Fehler und-Warnungen werden von der <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> <xref:System.Xml.XmlReaderSettings> im-Objekt definierten behandelt.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 Im Beispiel wird die Datei books. XML als Eingabe verwendet.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 Im Beispiel wird die Datei books. xsd als Eingabe verwendet.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Reader Validierungsfehler feststellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Ereignisse treten beim Lesen eines XML-Instanzdokuments <xref:System.Xml.XmlReaderSettings.ValidationType%2A> auf, wenn entweder <xref:System.Xml.ValidationType.DTD> auf <xref:System.Xml.ValidationType.Schema>oder festgelegt ist. Wenn die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> Einstellung für die <xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> Eigenschaft aktiviert wurde, treten diese Ereignisse auch auf, wenn Validierungs Warnungen auftreten.  
  
 Wenn der Reader für die Validierung konfiguriert ist und kein Validierungs Ereignishandler festgelegt wurde, <xref:System.Xml.Schema.XmlSchemaValidationException> wird für alle Validierungs Fehler eine ausgelöst. (Validierungs Warnungen führen nicht dazu, <xref:System.Xml.Schema.XmlSchemaValidationException> dass eine ausgelöst wird.)  
  
> [!IMPORTANT]
>  Validierungs Fehlermeldungen machen möglicherweise sensible Inhalts Modellinformationen verfügbar. Validierungs Fehler und Warnmeldungen <xref:System.Xml.Schema.ValidationEventHandler> werden mit dem-Delegaten behandelt oder werden <xref:System.Xml.Schema.XmlSchemaValidationException> als bereitgestellt, wenn kein Ereignishandler für das <xref:System.Xml.XmlReaderSettings> -Objekt bereitgestellt wird (Validierungs Warnungen <xref:System.Xml.Schema.XmlSchemaValidationException> bewirken nicht, dass eine ausgelöst wird). Diese Inhalts Modellinformationen sollten nicht in nicht vertrauenswürdigen Szenarien verfügbar gemacht werden. Validierungs Warnmeldungen werden standardmäßig unterdrückt und können durch Festlegen des <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> -Flags gemeldet werden.  
>   
>  Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> -Eigenschaft <xref:System.Xml.Schema.XmlSchemaValidationException> eines gibt den URI-Pfad zu der Schema Datei zurück, die die Ausnahme verursacht hat. Die <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> -Eigenschaft sollte in nicht vertrauenswürdigen Szenarios nicht verfügbar gemacht werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Einstellungen, mit denen angegeben wird, dass ein Reader erstellt werden soll, der mit einem Inline Schema validiert und auch Validierungs Warnungen anzeigt. Der Validierungs Ereignishandler verwendet die <xref:System.Xml.Schema.XmlSeverityType> -Enumeration, um zwischen Warnungen und Fehlern zu unterscheiden.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationFlags : System.Xml.Schema.XmlSchemaValidationFlags with get, set" Usage="System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der die Schemavalidierungseinstellungen angibt, oder legt diesen fest. Diese Einstellung gilt für <see cref="T:System.Xml.XmlReader" />-Objekte, die Schemata validieren (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> Eigenschaft auf <see langword="ValidationType.Schema" /> festgelegt).</summary>
        <value>Eine bitweise Kombination von Enumerationswerten, die Validierungs Optionen angeben. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> und <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> sind standardmäßig aktiviert. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> und <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> sind standardmäßig deaktiviert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>-Validierungsflag und das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>-Validierungsflag eines <xref:System.Xml.XmlReaderSettings>-Objekts werden nicht standardmäßig festgelegt. Wenn diese Flags festgelegt sind, wird der <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> des <xref:System.Xml.XmlReaderSettings>-Objekts verwendet, um die im Instanzdokument des <xref:System.Xml.XmlReader> erkannten Schemaspeicherorte aufzulösen. Wenn das <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> -Objekt `null`ist, werden Schema Speicherorte nicht aufgelöst, <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> auch <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> wenn die Validierungs Flags und festgelegt sind.  
>   
>  Durch während der Validierung hinzugefügte Schemas werden neue Typen hinzugefügt, sodass das Validierungsergebnis des überprüften Dokuments möglicherweise geändert wird. Daher sollten externe Schemata nur von vertrauenswürdigen Quellen aufgelöst werden.  
>   
>  Das Deaktivieren des <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> Flags (standardmäßig aktiviert) empfiehlt sich beim Validieren von nicht vertrauenswürdigen, großen XML-Dokumenten in Szenarien mit hoher Verfügbarkeit für ein Schema mit Identitäts Einschränkungen für einen großen Teil des Dokuments.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XML-Datei anhand eines XML-Inline Schemas überprüft <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> , indem die-Einstellung aktiviert wird. Der XML-Reader ist so konfiguriert, dass er Validierungs Warnungen anzeigt. SP Sie sehen auch die erwartete Warnung für das Stamm Element.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>Eingabe  
 In diesem Beispiel wird die Datei inlineSchema.xml als Eingabe verwendet.  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>Output  
 Warnung:   Übereinstimmendes Schema nicht gefunden. Es wurde keine Validierung durchgeführt. Es konnten keine Schemainformationen für das Element "root" gefunden werden.  
  
 Validierungs Fehler:   Das Element "xsdHeadCount: HeadCount" hat ein ungültiges untergeordnetes Element "Division". Erwartet wurde 'ID'.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlReaderSettings.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert fest, der angibt, ob der <see cref="T:System.Xml.XmlReader" /> beim Lesen eine Validierung oder Typzuweisung ausführt, oder legt diesen Wert fest.</summary>
        <value>Einer der <see cref="T:System.Xml.ValidationType" />-Werte, der angibt, ob XmlReader die Validierung oder Typzuordnung beim Lesen ausführt. Die Standardeinstellung ist <see langword="ValidationType.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden <xref:System.Xml.ValidationType> die-Werte beschrieben.  
  
> [!NOTE]
>  Die <xref:System.Xml.ValidationType.Auto> Enumerationswerte und <xref:System.Xml.ValidationType.XDR> sind in .NET Framework Version 2,0 veraltet.  
  
|ValidationType|Beschreibung|  
|--------------------|-----------------|  
|`DTD`|Die Validierung erfolgt mithilfe einer Dokumenttyp Definition (DTD). **Hinweis**:  Die <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> -Eigenschaft muss auch auf <xref:System.Xml.DtdProcessing.Parse>festgelegt werden.|  
|`None`|Der <xref:System.Xml.XmlReader> überprüft weder Daten noch eine Typzuweisung.|  
|`Schema`|Validierung und Typzuweisung werden mithilfe eines XSD-Schemas (XML Schema Definition Language) ausgeführt. Der Reader greift auf das XML-Schema zu, indem Folgendes verwendet wird:<br /><br /> -Verwendet die <xref:System.Xml.XmlReaderSettings.Schemas%2A> -Eigenschaft, um <xref:System.Xml.Schema.XmlSchemaSet> auf das-Objekt zuzugreifen, das diesem Reader zugeordnet ist.<br />-Verwendet das Inline Schema, das im XML-Instanzdokument enthalten ist. (Die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> Option muss aktiviert sein.)<br />-Verwendet das XML-Schema, das von Schema Speicherort `xsi:noNamespaceSchemaLocation` hinweisen (`xsi:schemaLocation` oder Attributen) im XML-Instanzdokument festgelegt wird. (Die <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Option muss aktiviert sein.)|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung eines Schemas überprüft, <xref:System.Xml.Schema.XmlSchemaSet>das im gespeichert ist.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 Das Beispiel verwendet die folgenden Eingabedateien:  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt den <see cref="T:System.Xml.XmlResolver" /> fest, der für den Zugriff auf externe Dokumente verwendet wird.</summary>
        <value>Ein <see cref="T:System.Xml.XmlResolver" />, der für den Zugriff auf externe Dokumente verwendet wird. Bei Festlegung auf<see langword="null" /> wird eine <see cref="T:System.Xml.XmlException" /> ausgelöst, wenn der <see cref="T:System.Xml.XmlReader" /> auf eine externe Ressource zugreift. Standard ist ein neuer <see cref="T:System.Xml.XmlUrlResolver" /> ohne Anmeldeinformationen.  Ab der .NET Framework-Version 4.5.2 hat diese Einstellung den Standardwert <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> Wird verwendet, um ein XML-Instanzdokument zu suchen und zu öffnen oder um externe Ressourcen zu suchen und zu öffnen, auf die vom XML-Instanzdokument verwiesen wird. Dies kann Entitäten, DTD oder Schemas einschließen. Die <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> -Eigenschaft kann verwendet werden, um alle für die Netzwerk Authentifizierung erforderlichen Anmelde Informationen anzugeben.  
  
> [!IMPORTANT]
>  Da die <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> vertrauliche Informationen, wie z. b. Benutzer Anmelde Informationen, enthalten kann, <xref:System.Xml.XmlReaderSettings> sollten Sie beim Zwischenspeichern von <xref:System.Xml.XmlReaderSettings> Objekten oder bei der Übergabe des Objekts von einer Komponente an eine andere Vorsicht walten lassen.  
>   
>  Eine <xref:System.Xml.XmlSecureResolver> kann für den Zugriff auf externe Dokumente verwendet werden. Mithilfe <xref:System.Xml.XmlSecureResolver> der-Klasse kann eine andere Implementierung <xref:System.Xml.XmlResolver> von gesichert werden <xref:System.Xml.XmlResolver> , indem das-Objekt umwickelt und <xref:System.Xml.XmlResolver> die Ressourcen eingeschränkt werden, auf die der zugrunde liegende Zugriff hat.  
>   
>  Das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>-Validierungsflag und das <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>-Validierungsflag eines <xref:System.Xml.XmlReaderSettings>-Objekts werden nicht standardmäßig festgelegt. Wenn diese Flags festgelegt sind, wird der <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> des <xref:System.Xml.XmlReaderSettings>-Objekts verwendet, um die im Instanzdokument des <xref:System.Xml.XmlReader> erkannten Schemaspeicherorte aufzulösen. Wenn das <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> -Objekt `null`ist, werden Schema Speicherorte nicht aufgelöst, <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> auch <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> wenn die Validierungs Flags und festgelegt sind.  
>   
>  Durch während der Validierung hinzugefügte Schemas werden neue Typen hinzugefügt, sodass das Validierungsergebnis des überprüften Dokuments möglicherweise geändert wird. Daher sollten externe Schemata nur von vertrauenswürdigen Quellen aufgelöst werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine <xref:System.Xml.XmlReader> erstellt, die <xref:System.Xml.XmlSecureResolver> eine mit Standard Anmelde Informationen verwendet.  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="InstallContext" FullName="System.Configuration.Install.InstallContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="490aa1005f294d7655c6ef034b3a59f0c10bc3a4" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37689893" /></Metadata><TypeSignature Language="C#" Value="public class InstallContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstallContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Install.InstallContext" />
  <TypeSignature Language="VB.NET" Value="Public Class InstallContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstallContext" />
  <TypeSignature Language="F#" Value="type InstallContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enthält Informationen über die derzeitige Installation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel eine <xref:System.Configuration.Install.InstallContext> wird erstellt, indem eine Installation ausführbare Datei an, z. B. von InstallUtil.exe, mit der Assemblys installiert. Ruft das Installationsprogramm die <xref:System.Configuration.Install.InstallContext> -Konstruktor, und übergeben sie den Standardpfad für die Protokolldatei und der Befehlszeilenparameter.  
  
 Vor dem Aufrufen der <xref:System.Configuration.Install.Installer.Install%2A>, <xref:System.Configuration.Install.Installer.Commit%2A>, <xref:System.Configuration.Install.Installer.Rollback%2A>, oder <xref:System.Configuration.Install.Installer.Uninstall%2A> Methoden, die das Installationsprogramm legt diese fest der <xref:System.Configuration.Install.Installer.Context%2A> Eigenschaft eine <xref:System.Configuration.Install.Installer> mit der Instanz von <xref:System.Configuration.Install.InstallContext>. Vor dem Aufrufen dieser Methoden eine <xref:System.Configuration.Install.Installer> , die in eine Auflistung von Installationsprogrammen enthält die <xref:System.Configuration.Install.Installer.Installers%2A> Eigenschaftensätze der <xref:System.Configuration.Install.Installer.Context%2A> Eigenschaft für jedes enthaltene Installationsprogramm.  
  
 Die <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft enthält die von der Befehlszeile, die zum Ausführen der Installationsdatei eingegeben werden. Die Eigenschaft enthält Informationen wie z. B. den Pfad zu einer Protokolldatei, ob Protokollinformationen in der Konsole angezeigt und, ob eine Benutzeroberfläche während der Installation angezeigt. Rufen Sie die <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methode, um herauszufinden, ob die Befehlszeilenparameter ist `true`.  
  
 Verwenden der <xref:System.Configuration.Install.InstallContext.LogMessage%2A> Methode zum Schreiben von statusmeldungen in der Installationsprotokolldatei und die Konsole.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.Configuration.Install.InstallContext.%23ctor%2A> Konstruktoren, die <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft und die <xref:System.Configuration.Install.InstallContext.LogMessage%2A> und <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methoden der <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Wenn die <xref:System.Configuration.Install.Installer.Install%2A> -Methode des Installationsprogramms aufgerufen wird, überprüft, ob Parameter über die Befehlszeile. Abhängig davon, dass der statusmeldungen auf der Konsole angezeigt und auch in der angegebenen Protokolldatei gespeichert.  
  
 Wenn das Programm aufgerufen wird, ohne jegliche Argumente, die eine leere <xref:System.Configuration.Install.InstallContext> erstellt wird. Wenn "/ LogFile" und "/ LogtoConsole" angegeben ist, die <xref:System.Configuration.Install.InstallContext> wird erstellt, indem Sie die entsprechenden Argumente übergeben <xref:System.Configuration.Install.InstallContext.%23ctor%2A>.  
  
 [!code-cpp[InstallContext_InstallContext#1](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#1)]
 [!code-csharp[InstallContext_InstallContext#1](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#1)]
 [!code-vb[InstallContext_InstallContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.Install.Installer" />
    <altmember cref="T:System.Configuration.Install.TransactedInstaller" />
    <altmember cref="T:System.Configuration.Install.AssemblyInstaller" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Configuration.Install.InstallContext" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Configuration.Install.InstallContext" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung ist eine Protokolldatei für die Installation nicht erstellt werden.  
  
   
  
## Examples  
  
> [!NOTE]
>  Dieses Beispiel zeigt, wie Sie eine der überladenen Versionen der verwenden die <xref:System.Configuration.Install.InstallContext> Konstruktor. Andere Beispiele, die möglicherweise verfügbar sind, finden Sie unter den einzelnen Überladung Themen.  
  
 Wenn das Programm aufgerufen wird, ohne jegliche Argumente, die eine leere <xref:System.Configuration.Install.InstallContext> erstellt wird.  
  
 [!code-cpp[InstallContext_InstallContext#2](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#2)]
 [!code-csharp[InstallContext_InstallContext#2](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#2)]
 [!code-vb[InstallContext_InstallContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext (string logFilePath, string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logFilePath, string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logFilePath As String, commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext(System::String ^ logFilePath, cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="new System.Configuration.Install.InstallContext : string * string[] -&gt; System.Configuration.Install.InstallContext" Usage="new System.Configuration.Install.InstallContext (logFilePath, commandLine)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logFilePath" Type="System.String" />
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="logFilePath">Der Pfad zur Protokolldatei für diese Installation oder <see langword="null" />, wenn keine Protokolldatei erstellt werden soll.</param>
        <param name="commandLine">Die beim Ausführen des Installationsprogramms eingegebenen Befehlszeilenparameter oder <see langword="null" />, wenn keine Parameter eingegeben wurden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Configuration.Install.InstallContext" />-Klasse und erstellt eine Protokolldatei für die Installation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Installation verwendet [Installutil.exe (Installationstool)](~/docs/framework/tools/installutil-exe-installer-tool.md), dieser Konstruktor erstellt eine Protokolldatei im angegebenen Pfad und liest das Array von Befehlszeilenparametern in der <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft. Wenn ein Pfad der Protokolldatei in den Befehlszeilenparametern angegeben wird, wird er verwendet zum Erstellen der Datei. Wenn das Log File-Argument nicht, in der Befehlszeile, die den Wert des angegeben ist der `logFilePath` Parameter wird verwendet. Um die Erstellung einer Protokolldatei zu unterdrücken, übergeben Sie den "/ Logfile =" Befehlszeilenparameter.  
  
   
  
## Examples  
 In diesem Beispiel ist ein Auszug aus dem Beispiel in der Übersicht über die Klasse der <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Wenn "/ LogFile" und "/ LogtoConsole" angegeben ist, die <xref:System.Configuration.Install.InstallContext> wird erstellt, indem Sie die entsprechenden Argumente übergeben <xref:System.Configuration.Install.InstallContext.%23ctor%2A>.  
  
 [!code-cpp[InstallContext_InstallContext#3](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#3)]
 [!code-csharp[InstallContext_InstallContext#3](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#3)]
 [!code-vb[InstallContext_InstallContext#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Übergeben Sie den Standardpfad für die Protokolldatei in der <paramref name="logFilePath" /> -Parameters beim Aufrufen dieses Konstruktors. Dies ist der Speicherort der Protokolldatei wird erstellt, es sei denn, der Befehlszeilenparameter/LogFile verwendet wird, wenn die ausführbare Installationsdatei ausgeführt wird.</para></block>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsParameterTrue">
      <MemberSignature Language="C#" Value="public bool IsParameterTrue (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsParameterTrue(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsParameterTrue (paramName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsParameterTrue(System::String ^ paramName);" />
      <MemberSignature Language="F#" Value="member this.IsParameterTrue : string -&gt; bool" Usage="installContext.IsParameterTrue paramName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">Der Name des zu überprüfenden Befehlszeilenparameters.</param>
        <summary>Bestimmt, ob der angegebene Befehlszeilenparameter <see langword="true" /> ist.</summary>
        <returns><see langword="true" />, wenn der angegebene Parameter auf "yes", "true", "1" oder eine leere Zeichenfolge ("") festgelegt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode greift auf die <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft, die die Befehlszeilenparameter, um festzustellen, ob der angegebene Parameter ist der eingelesenen enthält `true`.  
  
   
  
## Examples  
 In diesem Beispiel ist ein Auszug aus dem Beispiel in der Übersicht über die Klasse von der <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Er verwendet den <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methode, um zu ermitteln, ob die `LogtoConsole` -Parameter festgelegt wurde. Wenn `yes`, er verwendet dann die <xref:System.Configuration.Install.InstallContext.LogMessage%2A> Methode zum Schreiben von statusmeldungen in der Installationsprotokolldatei und die Konsole.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="LogMessage">
      <MemberSignature Language="C#" Value="public void LogMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LogMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LogMessage(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.LogMessage : string -&gt; unit" Usage="installContext.LogMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die zu schreibende Meldung.</param>
        <summary>Gibt eine Meldung an die Konsole und in die Protokolldatei für die Installation aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Installationsprogramm, kann diese Methode, um den Fortschritt oder andere Statusinformationen in die Protokolldatei schreiben aufrufen. Wenn die Befehlszeilenparameter angeben, dass es sich bei eine Benutzeroberfläche angezeigt werden soll, das Installationsprogramm sollte Anzeigen von Meldungsfeldern oder Abfragen zusätzlich zum Aufrufen der <xref:System.Configuration.Install.InstallContext.LogMessage%2A> Methode. Text, der in die Protokolldatei geschrieben wird nicht vom Benutzer angezeigt werden, sofern nicht InstallUtil.exe verwendet wird, um die Installation auszuführen und "/ LogToConsole = True" in der Befehlszeile angegeben ist.  
  
   
  
## Examples  
 In diesem Beispiel ist ein Auszug aus dem Beispiel in der Übersicht über die Klasse der <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Er verwendet den <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methode, um zu ermitteln, ob die `LogtoConsole` -Parameter festgelegt wurde. Wenn `yes`, er verwendet dann die <xref:System.Configuration.Install.InstallContext.LogMessage%2A> Methode zum Schreiben von statusmeldungen in der Installationsprotokolldatei und die Konsole.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Install.InstallContext.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Parameters { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Befehlszeilenparameter ab, die beim Ausführen von InstallUtil.exe eingegeben wurden.</summary>
        <value>Ein <see cref="T:System.Collections.Specialized.StringDictionary" />, das die Befehlszeilenparameter darstellt, die beim Ausführen der Installationsdatei eingegeben wurden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein neuer <xref:System.Configuration.Install.InstallContext> erstellt wird, die Befehlszeile Parameter werden in analysiert die <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft. Sowohl der Schlüssel als auch die Werte der Parameter sind Zeichenfolgen.  
  
   
  
## Examples  
 In diesem Beispiel ist ein Auszug aus dem Beispiel in der Übersicht über die Klasse der <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Das Beispiel ruft die <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft, um festzustellen, ob alle Befehlszeilenargument vom Benutzer eingegeben wurde. Darüber hinaus verwendet er die <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methode, um zu ermitteln, ob die `LogtoConsole` -Parameter festgelegt wurde. Wenn `yes`, er verwendet dann die <xref:System.Configuration.Install.InstallContext.LogMessage%2A> Methode zum Schreiben von statusmeldungen in der Installationsprotokolldatei und die Konsole.  
  
 [!code-cpp[InstallContext_InstallContext#6](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#6)]
 [!code-csharp[InstallContext_InstallContext#6](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#6)]
 [!code-vb[InstallContext_InstallContext#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ParseCommandLine">
      <MemberSignature Language="C#" Value="protected static System.Collections.Specialized.StringDictionary ParseCommandLine (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Specialized.StringDictionary ParseCommandLine(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.ParseCommandLine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ParseCommandLine (args As String()) As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Collections::Specialized::StringDictionary ^ ParseCommandLine(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member ParseCommandLine : string[] -&gt; System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.ParseCommandLine args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Ein Array, das die Befehlszeilenparameter enthält.</param>
        <summary>Liest die Befehlszeilenparameter in ein Zeichenfolgenwörterbuch ein.</summary>
        <returns>Ein <see cref="T:System.Collections.Specialized.StringDictionary" />, das die analysierten Befehlszeilenparameter enthält.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="InstallContext" FullName="System.Configuration.Install.InstallContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e86e397330369eb3a5530552e7a9dfacf1fb2e47" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83976507" /></Metadata><TypeSignature Language="C#" Value="public class InstallContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstallContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Install.InstallContext" />
  <TypeSignature Language="VB.NET" Value="Public Class InstallContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstallContext" />
  <TypeSignature Language="F#" Value="type InstallContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Enthält Informationen über die derzeitige Installation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel <xref:System.Configuration.Install.InstallContext> wird ein von einer ausführbaren Installationsdatei erstellt, z. b. InstallUtil.exe, die Assemblys installiert. Das Installationsprogramm ruft den <xref:System.Configuration.Install.InstallContext> Konstruktor auf und übergibt dabei den standardmäßigen Protokolldatei Pfad und die Befehlszeilenparameter.  
  
 Vor dem Aufrufen der <xref:System.Configuration.Install.Installer.Install%2A> <xref:System.Configuration.Install.Installer.Commit%2A> Methoden,, <xref:System.Configuration.Install.Installer.Rollback%2A> oder <xref:System.Configuration.Install.Installer.Uninstall%2A> legt das Installationsprogramm die- <xref:System.Configuration.Install.Installer.Context%2A> Eigenschaft eines <xref:System.Configuration.Install.Installer> auf die-Instanz fest <xref:System.Configuration.Install.InstallContext> . Vor dem Aufrufen dieser Methoden <xref:System.Configuration.Install.Installer> legt eine, die eine Installerauflistung in der-Eigenschaft enthält, <xref:System.Configuration.Install.Installer.Installers%2A> die- <xref:System.Configuration.Install.Installer.Context%2A> Eigenschaft der einzelnen enthaltenen Installationsprogramme fest.  
  
 Die- <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft enthält eine analysierte Version der Befehlszeile, die zum Ausführen der ausführbaren Installationsdatei eingegeben wird. Die-Eigenschaft enthält Informationen, z. b. den Pfad zu einer Protokolldatei, ob Protokollinformationen in der Konsole angezeigt werden sollen und ob während der Installation eine Benutzeroberfläche angezeigt werden soll. Aufrufen der <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> -Methode, um herauszufinden, ob ein Befehlszeilenparameter ist `true` .  
  
 Verwenden <xref:System.Configuration.Install.InstallContext.LogMessage%2A> Sie die-Methode, um Statusmeldungen in die Installationsprotokoll Datei und die-Konsole zu schreiben.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die- <xref:System.Configuration.Install.InstallContext.%23ctor%2A> Konstruktoren, die- <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft und die <xref:System.Configuration.Install.InstallContext.LogMessage%2A> -Methode und die- <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methode der- <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Wenn die- <xref:System.Configuration.Install.Installer.Install%2A> Methode des Installers aufgerufen wird, wird von der Befehlszeile auf Parameter geprüft. Abhängig davon werden die Statusmeldungen in der Konsole angezeigt und auch in der angegebenen Protokolldatei gespeichert.  
  
 Wenn das Programm ohne Argumente aufgerufen wird, wird eine leere <xref:System.Configuration.Install.InstallContext> erstellt. Wenn "/logfile" und "/LogToConsole" angegeben werden, <xref:System.Configuration.Install.InstallContext> wird der erstellt, indem die entsprechenden Argumente an übergeben werden <xref:System.Configuration.Install.InstallContext.%23ctor%2A> .  
  
 [!code-cpp[InstallContext_InstallContext#1](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#1)]
 [!code-csharp[InstallContext_InstallContext#1](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#1)]
 [!code-vb[InstallContext_InstallContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.Install.Installer" />
    <altmember cref="T:System.Configuration.Install.TransactedInstaller" />
    <altmember cref="T:System.Configuration.Install.AssemblyInstaller" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Configuration.Install.InstallContext" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Configuration.Install.InstallContext" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung erstellt keine Protokolldatei für die Installation.  
  
   
  
## Examples  
  
> [!NOTE]
>  In diesem Beispiel wird gezeigt, wie eine der überladenen Versionen des- <xref:System.Configuration.Install.InstallContext> Konstruktors verwendet wird. Weitere Beispiele, die möglicherweise verfügbar sind, finden Sie in den Themen zu den einzelnen Überladungen.  
  
 Wenn das Programm ohne Argumente aufgerufen wird, wird eine leere <xref:System.Configuration.Install.InstallContext> erstellt.  
  
 [!code-cpp[InstallContext_InstallContext#2](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#2)]
 [!code-csharp[InstallContext_InstallContext#2](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#2)]
 [!code-vb[InstallContext_InstallContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext (string logFilePath, string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logFilePath, string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logFilePath As String, commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext(System::String ^ logFilePath, cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberSignature Language="F#" Value="new System.Configuration.Install.InstallContext : string * string[] -&gt; System.Configuration.Install.InstallContext" Usage="new System.Configuration.Install.InstallContext (logFilePath, commandLine)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logFilePath" Type="System.String" />
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="logFilePath">Der Pfad zur Protokolldatei für diese Installation oder <see langword="null" />, wenn keine Protokolldatei erstellt werden soll.</param>
        <param name="commandLine">Die beim Ausführen des Installationsprogramms eingegebenen Befehlszeilenparameter oder <see langword="null" />, wenn keine Parameter eingegeben wurden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Configuration.Install.InstallContext" />-Klasse und erstellt eine Protokolldatei für die Installation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn bei der Installation [Installutil.exe (Installationstool)](/dotnet/framework/tools/installutil-exe-installer-tool)verwendet wird, erstellt dieser Konstruktor eine Protokolldatei im angegebenen Pfad und analysiert das Array der Befehlszeilenparameter in die- <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft. Wenn ein Protokolldatei Pfad in den Befehlszeilen Parametern angegeben ist, wird er verwendet, um die Datei zu erstellen. Wenn das Protokolldatei Argument nicht in der Befehlszeile angegeben ist, wird der Wert des- `logFilePath` Parameters verwendet. Wenn Sie die Erstellung einer Protokolldatei unterdrücken möchten, übergeben Sie den Befehlszeilenparameter "/logfile =".  
  
   
  
## Examples  
 Dieses Beispiel ist ein Auszug aus dem Beispiel in der Klassen Übersicht der- <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Wenn "/logfile" und "/LogToConsole" angegeben werden, <xref:System.Configuration.Install.InstallContext> wird der erstellt, indem die entsprechenden Argumente an übergeben werden <xref:System.Configuration.Install.InstallContext.%23ctor%2A> .  
  
 [!code-cpp[InstallContext_InstallContext#3](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#3)]
 [!code-csharp[InstallContext_InstallContext#3](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#3)]
 [!code-vb[InstallContext_InstallContext#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Übergeben Sie den standardmäßigen Protokolldatei Pfad im- <paramref name="logFilePath" /> Parameter, wenn Sie diesen Konstruktor aufrufen. Dies ist der Ort, an dem die Protokolldatei erstellt wird, es sei denn, der/Logfile-Befehlszeilenparameter wird beim Ausführen der ausführbaren Installationsdatei verwendet.</para></block>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsParameterTrue">
      <MemberSignature Language="C#" Value="public bool IsParameterTrue (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsParameterTrue(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsParameterTrue (paramName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsParameterTrue(System::String ^ paramName);" />
      <MemberSignature Language="F#" Value="member this.IsParameterTrue : string -&gt; bool" Usage="installContext.IsParameterTrue paramName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">Der Name des zu überprüfenden Befehlszeilenparameters.</param>
        <summary>Bestimmt, ob der angegebene Befehlszeilenparameter <see langword="true" /> ist.</summary>
        <returns><see langword="true" />, wenn der angegebene Parameter auf "yes", "true", "1" oder eine leere Zeichenfolge ("") festgelegt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode greift auf die- <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft zu, die eine analysierte Version der Befehlszeilenparameter enthält, um zu bestimmen, ob der angegebene-Parameter ist `true` .  
  
   
  
## Examples  
 Dieses Beispiel ist ein Auszug aus dem Beispiel in der Klassen Übersicht der- <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Es verwendet die- <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methode, um herauszufinden, ob der- `LogtoConsole` Parameter festgelegt wurde. Wenn `yes` , wird die <xref:System.Configuration.Install.InstallContext.LogMessage%2A> -Methode verwendet, um Statusmeldungen in die Installationsprotokoll Datei und die-Konsole zu schreiben.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="LogMessage">
      <MemberSignature Language="C#" Value="public void LogMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LogMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LogMessage(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.LogMessage : string -&gt; unit" Usage="installContext.LogMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die zu schreibende Meldung.</param>
        <summary>Gibt eine Meldung an die Konsole und in die Protokolldatei für die Installation aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Installer kann diese Methode zum Schreiben von Statusinformationen oder anderen Statusinformationen in die Protokolldatei abrufen. Wenn die Befehlszeilenparameter angeben, dass eine Benutzeroberfläche angezeigt werden soll, sollte das Installationsprogramm neben dem Aufrufen der-Methode Meldungs Felder anzeigen oder Abfragen erstellen <xref:System.Configuration.Install.InstallContext.LogMessage%2A> . Text, der in die Protokolldatei geschrieben wird, wird vom Benutzer nur angezeigt, wenn InstallUtil.exe zum Ausführen der Installation verwendet wird und "/LogToConsole = true" in der Befehlszeile angegeben ist.  
  
   
  
## Examples  
 Dieses Beispiel ist ein Auszug aus dem Beispiel in der Klassen Übersicht der- <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Es verwendet die- <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methode, um herauszufinden, ob der- `LogtoConsole` Parameter festgelegt wurde. Wenn `yes` , wird die <xref:System.Configuration.Install.InstallContext.LogMessage%2A> -Methode verwendet, um Statusmeldungen in die Installationsprotokoll Datei und die-Konsole zu schreiben.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Install.InstallContext.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Parameters { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Befehlszeilenparameter ab, die beim Ausführen von InstallUtil.exe eingegeben wurden.</summary>
        <value>Ein <see cref="T:System.Collections.Specialized.StringDictionary" />, das die Befehlszeilenparameter darstellt, die beim Ausführen der Installationsdatei eingegeben wurden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein neues <xref:System.Configuration.Install.InstallContext> erstellt wird, werden die Befehlszeilenparameter in die-Eigenschaft aufgelöst <xref:System.Configuration.Install.InstallContext.Parameters%2A> . Sowohl die Schlüssel als auch die Werte der Parameter sind Zeichen folgen.  
  
   
  
## Examples  
 Dieses Beispiel ist ein Auszug aus dem Beispiel in der Klassen Übersicht der- <xref:System.Configuration.Install.InstallContext> Klasse.  
  
 Das Beispiel ruft die- <xref:System.Configuration.Install.InstallContext.Parameters%2A> Eigenschaft ab, um festzustellen, ob vom Benutzer ein Befehlszeilenargument eingegeben wurde. Außerdem wird die- <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> Methode verwendet, um herauszufinden, ob der- `LogtoConsole` Parameter festgelegt wurde. Wenn `yes` , wird die <xref:System.Configuration.Install.InstallContext.LogMessage%2A> -Methode verwendet, um Statusmeldungen in die Installationsprotokoll Datei und die-Konsole zu schreiben.  
  
 [!code-cpp[InstallContext_InstallContext#6](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#6)]
 [!code-csharp[InstallContext_InstallContext#6](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#6)]
 [!code-vb[InstallContext_InstallContext#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ParseCommandLine">
      <MemberSignature Language="C#" Value="protected static System.Collections.Specialized.StringDictionary ParseCommandLine (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Specialized.StringDictionary ParseCommandLine(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.ParseCommandLine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ParseCommandLine (args As String()) As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Collections::Specialized::StringDictionary ^ ParseCommandLine(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member ParseCommandLine : string[] -&gt; System.Collections.Specialized.StringDictionary" Usage="System.Configuration.Install.InstallContext.ParseCommandLine args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Ein Array, das die Befehlszeilenparameter enthält.</param>
        <summary>Liest die Befehlszeilenparameter in ein Zeichenfolgenwörterbuch ein.</summary>
        <returns>Ein <see cref="T:System.Collections.Specialized.StringDictionary" />, das die analysierten Befehlszeilenparameter enthält.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>

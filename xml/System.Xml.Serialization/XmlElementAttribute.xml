<Type Name="XmlElementAttribute" FullName="System.Xml.Serialization.XmlElementAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1616876d253176dedcddac9c6a9752af96c6e33" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69440710" /></Metadata><TypeSignature Language="C#" Value="public class XmlElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlElementAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlElementAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt an, dass ein öffentliches Feld oder eine öffentliche Eigenschaft beim Serialisieren bzw. Deserialisieren des Objekts, in dem diese enthalten sind, durch <see cref="T:System.Xml.Serialization.XmlSerializer" /> ein XML-Element darstellt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Xml.Serialization.XmlElementAttribute> gehört zu einer Gruppe von Attributen, die steuert, <xref:System.Xml.Serialization.XmlSerializer> wie ein Objekt serialisiert oder deserialisiert. Eine umfassende Liste mit ähnlichen Attributen finden Sie unter [Attribute, die die XML-Serialisierung steuern](~/docs/standard/serialization/attributes-that-control-xml-serialization.md).  
  
 Ein XML-Dokument enthält normalerweise XML-Elemente, von denen jedes aus drei Teilen besteht: ein öffnendes Tag mit möglichen Attributen, ein Endtag und die Daten zwischen den Tags. XML-Tags können mit einem Wert versehen werden, d. h. die Daten zwischen Tags können auch XML-Elemente sein. Durch diese Kapazität eines Elements, das ein anderes umschließt, kann das Dokument Daten Hierarchien enthalten. Ein XML-Element kann auch Attribute enthalten.  
  
 Wenden Sie <xref:System.Xml.Serialization.XmlElementAttribute> die auf öffentliche Felder oder öffentliche Lese-/Schreibeigenschaften an, um die Merkmale der XML-Elemente wie den Elementnamen und den Namespace zu steuern.  
  
 <xref:System.Xml.Serialization.XmlElementAttribute> Kann mehrmals auf ein Feld angewendet werden, das ein Array von-Objekten zurückgibt. Der Zweck dieser Vorgehensweise besteht darin, die verschiedenen <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> Typen (über die-Eigenschaft) anzugeben, die in das Array eingefügt werden können. Beispielsweise akzeptiert das Array im folgenden C# Code sowohl Zeichen folgen als auch ganze Zahlen.  
  
```  
public class Things{  
   [XmlElement(Type = typeof(string)),  
   XmlElement(Type = typeof(int))]  
   public object[] StringsAndInts;  
}  
```  
  
 Dies führt zu XML-Code, der möglicherweise dem folgenden ähnelt.  
  
```  
<Things>  
   <string>Hello</string>  
   <int>999</int>  
   <string>World</string>  
</Things>  
```  
  
 Beachten Sie, dass die Elemente <xref:System.Xml.Serialization.XmlElementAttribute> nach dem Typ der zulässigen <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> Objekte benannt werden, wenn Sie mehrmals anwenden, ohne einen Eigenschafts Wert anzugeben.  
  
 Wenn Sie das <xref:System.Xml.Serialization.XmlElementAttribute> auf ein Feld oder eine Eigenschaft anwenden, das ein Array zurückgibt, werden die Elemente im Array als Sequenz von XML-Elementen codiert.  
  
 Im Gegensatz dazu, <xref:System.Xml.Serialization.XmlElementAttribute> wenn eine nicht auf ein solches Feld oder eine Eigenschaft angewendet wird, werden die Elemente im Array als Sequenz von Elementen codiert, die unter einem Element nach dem Feld oder der Eigenschaft benannt ist. (Verwenden Sie <xref:System.Xml.Serialization.XmlArrayAttribute> die <xref:System.Xml.Serialization.XmlArrayItemAttribute> Attribute und, um zu steuern, wie ein Array serialisiert wird.)  
  
 Sie können die <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> -Eigenschaft festlegen, um einen Typ anzugeben, der vom Typ des ursprünglichen Felds oder der ursprünglichen Eigenschaft abgeleitet ist, d <xref:System.Xml.Serialization.XmlElementAttribute>. h. das Feld oder die Eigenschaft, auf die Sie angewendet haben.  
  
 Wenn ein Feld oder eine Eigenschaft zurück <xref:System.Collections.ArrayList>gibt, können Sie mehrere Instanzen <xref:System.Xml.Serialization.XmlElementAttribute> von auf den Member anwenden. Legen Sie für jede Instanz die <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> -Eigenschaft auf einen Objekttyp fest, der in das Array eingefügt werden kann.  
  
 Weitere Informationen zum Verwenden von Attributen finden Sie unter [Attribute](~/docs/standard/attributes/index.md).  
  
> [!NOTE]
>  Sie können das Wort `XmlElement` in Ihrem Code anstelle der längeren <xref:System.Xml.Serialization.XmlElementAttribute>verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Klasse mit dem `Group` <xref:System.Xml.Serialization.XmlElementAttribute> Namen serialisiert und auf mehrere Member angewendet. Das Feld mit `Employees` dem Namen gibt ein `Employee` Array von-Objekten zurück. In diesem Fall gibt das <xref:System.Xml.Serialization.XmlElementAttribute> an, dass der resultierende XML-Code nicht in den Code eingefügt werden soll (Dies ist das Standardverhalten von Elementen in einem Array).  
  
 [!code-cpp[Classic XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlElementAttributes" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
    <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">Einführung in die XML-Serialisierung</related>
    <related type="Article" href="~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md">Gewusst wie: Angeben eines alternativen Elementnamens für einen XML-Stream</related>
    <related type="Article" href="~/docs/standard/serialization/controlling-xml-serialization-using-attributes.md">Steuern der XML-Serialisierung mit Attributen</related>
    <related type="Article" href="~/docs/standard/serialization/examples-of-xml-serialization.md">Beispiele für die XML-Serialisierung</related>
    <related type="Article" href="~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md">XML Schema Definition-Tool (Xsd.exe)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Serialization.XmlElementAttribute" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Serialization.XmlElementAttribute" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.Xml.Serialization.XmlElementAttribute> auf eine Klasse angewendet.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Der XML-Elementname des serialisierten Members.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Serialization.XmlElementAttribute" />-Klasse und gibt den Namen des XML-Elements an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig verwendet den <xref:System.Xml.Serialization.XmlSerializer> Elementnamen als XML-Elementnamen beim Serialisieren einer Klasseninstanz. Ein-Feld mit dem Namen `Vehicle` generiert beispielsweise ein XML `Vehicle`-Element mit dem Namen. Wenn Sie jedoch ein anderes Element benötigen, z `Cars`. b., übergeben Sie es `elementName` im-Parameter.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine einfache Klasse, die ein einzelnes Feld mit `Vehicles`dem Namen enthält. Im Beispiel wird das <xref:System.Xml.Serialization.XmlElementAttribute> -Element auf das-Feld `elementName` angewendet und der-Parameter eingeschlossen <xref:System.Xml.Serialization.XmlSerializer> . Dadurch wird der angewiesen, XML-Elemente mit dem Namen "Cars" anstelle von "Vehicles" zu generieren.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Der <see cref="T:System.Type" /> eines Objekts, das vom Typ des Members abgeleitet ist.</param>
        <summary>Initialisiert eine neues Instanz der <see cref="T:System.Xml.Serialization.XmlElementAttribute" />-Klasse und gibt einen Typ für den Member an, auf den das <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> angewendet wird. Dieser Typ wird vom <see cref="T:System.Xml.Serialization.XmlSerializer" /> verwendet, wenn das Objekt serialisiert oder deserialisiert wird, in dem es enthalten ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie `type` den-Parameter, um einen Typ anzugeben, der von einer Basisklasse abgeleitet ist. Angenommen, eine Eigenschaft mit dem Namen `MyAnimal` gibt ein `Animal` -Objekt zurück. Wenn Sie das Objekt erweitern möchten, erstellen Sie eine neue Klasse mit dem `Mammal` Namen, die von der `Animal` -Klasse erbt. <xref:System.Xml.Serialization.XmlSerializer> Um den anzuweisen, die `Mammal` -Klasse beim Serialisieren der `MyAnimal` -Eigenschaft zu akzeptieren, übergeben `Mammal` Sie den <xref:System.Type> der-Klasse an den-Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Klasse mit dem `Orchestra` Namen serialisiert, die ein `Instruments`einzelnes Feld mit dem Namen enthält `Instrument` , das ein Array von-Objekten zurückgibt. Eine zweite Klasse mit `Brass` dem Namen erbt `Instrument` von der-Klasse. Im Beispiel wird das <xref:System.Xml.Serialization.XmlElementAttribute> auf das `Instruments` -Feld angewendet, und `Brass` es wird der- `Instruments` Typ angegeben, `Brass` sodass das Feld-Objekte akzeptieren kann. Im Beispiel wird auch der Name des XML-Elements angegeben, indem <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> die-Eigenschaft festgelegt wird.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string * Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute (elementName, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">Der XML-Elementname des serialisierten Members.</param>
        <param name="type">Der <see cref="T:System.Type" /> eines Objekts, das vom Typ des Members abgeleitet ist.</param>
        <summary>Initialisiert eine neue Instanz von <see cref="T:System.Xml.Serialization.XmlElementAttribute" />, und gibt den Namen des XML-Elements und einen abgeleiteten Typ für den Member an, auf den das <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> angewendet wird. Dieser Membertyp wird verwendet, wenn der <see cref="T:System.Xml.Serialization.XmlSerializer" /> das Objekt serialisiert, in dem es enthalten ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig verwendet den <xref:System.Xml.Serialization.XmlSerializer> Elementnamen als XML-Elementnamen beim Serialisieren einer Klasseninstanz. Ein-Feld mit dem Namen `Vehicle` generiert beispielsweise ein XML `Vehicle`-Element mit dem Namen. Wenn Sie jedoch ein anderes Element benötigen, z `Cars`. b., übergeben Sie es `elementName` im-Parameter.  
  
 Verwenden Sie `type` den-Parameter, um einen Typ anzugeben, der von einer Basisklasse abgeleitet ist. Angenommen, eine Eigenschaft mit dem Namen `MyAnimal` gibt ein `Animal` -Objekt zurück. Wenn Sie das Objekt erweitern möchten, erstellen Sie eine neue Klasse mit dem `Mammal` Namen, die von der `Animal` -Klasse erbt. <xref:System.Xml.Serialization.XmlSerializer> Um den anzuweisen, die `Mammal` -Klasse beim Serialisieren der `MyAnimal` -Eigenschaft zu akzeptieren, übergeben `Mammal` Sie den <xref:System.Type> der-Klasse an den-Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Klasse mit dem `Orchestra` Namen serialisiert, die ein `Instruments`einzelnes Feld mit dem Namen enthält `Instrument` , das ein Array von-Objekten zurückgibt. Eine zweite Klasse mit `Brass` dem Namen erbt `Instrument` von der-Klasse. Im Beispiel wird das <xref:System.Xml.Serialization.XmlElementAttribute> auf das `Instruments` -Feld angewendet, und `Brass` es wird der- `Instruments` Typ angegeben, `Brass` sodass das Feld-Objekte akzeptieren kann. Im Beispiel wird auch der Name des XML-Elements angegeben, indem <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> die-Eigenschaft festgelegt wird.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den XSD (XML Schema Definition)-Datentyp des vom <see cref="T:System.Xml.Serialization.XmlSerializer" /> generierten XML-Elements ab oder legt diesen fest.</summary>
        <value>Ein XML-Schema Datentyp.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle sind die einfachen XML-Schema Datentypen mit their.NET-Entsprechungen aufgelistet.  
  
 Verwenden Sie für das `base64Binary` XML `hexBinary` -Schema und die Datentypen ein <xref:System.Byte> Array von-Strukturen, <xref:System.Xml.Serialization.XmlElementAttribute> und wenden <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> Sie ein-Array mit dem auf "base64Binary" oder "hexBinary" festgelegten nach Bedarf an. Verwenden Sie für das `time` XML `date` -Schema und die Daten <xref:System.DateTime> Typen den-Typ <xref:System.Xml.Serialization.XmlElementAttribute> , und <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> wenden Sie das mit dem Satz auf "Date" oder "Time" an.  
  
 Wenden Sie für jeden XML-Schematyp, der einer Zeichenfolge <xref:System.Xml.Serialization.XmlElementAttribute> zugeordnet ist <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> , das-Objekt mit der-Eigenschaft auf den XML-Schematyp fest. Es ist möglich, dass dadurch das Serialisierungsformat geändert werden kann, nicht nur das Schema für den Member.  
  
> [!NOTE]
>  Bei der-Eigenschaft wird die Groß-/Kleinschreibung beachtet, sodass Sie Sie genau auf einen der XML-Schema Datentypen festlegen müssen.  
  
> [!NOTE]
>  Das übergeben von Binärdaten als XML-Element ist effizienter als das übergeben als XML-Schema Attribut.  
  
 Weitere Informationen zu XML-Datentypen finden Sie im World Wide Web Consortium Dokument mit [dem Namen XML Schema Part 2: Datatypes](https://www.w3.org/TR/xmlschema-2/).  
  
|XSD-Datentyp|.NET-Datentyp|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|Array von <xref:System.Byte> Objekten|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|KLEINSTUNTERNEHMEN|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|Array von <xref:System.Byte> Objekten|  
|Id|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|Ganze Zahl|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|Uhrzeit|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Klasse mit dem `Group` Namen serialisiert, die `ExtraInfo`ein Feld mit dem <xref:System.Collections.ArrayList>Namen enthält, das einen zurückgibt. Im Beispiel werden zwei Instanzen von <xref:System.Xml.Serialization.XmlElementAttribute> auf das-Feld angewendet, und es werden unterschiedliche <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> Werte für jede Instanz angegeben. Jede-Instanz ermöglicht <xref:System.Xml.Serialization.XmlSerializer> das Serialisieren der in das Array eingefügten angegebenen Typen.  
  
 [!code-cpp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Der angegebene XML-Schemadatentyp kann dem .NET-Datentyp nicht zugeordnet werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des generierten XML-Elements ab oder legt diesen fest.</summary>
        <value>Der Name des generierten XML-Elements. Der Standardwert ist der Memberbezeichner.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Geben Sie <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> an, wenn der Name des generierten XML-Elements vom Bezeichner des Elements abweicht.  
  
 Sie können denselben <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> Wert auf mehr als einen Klassenmember festlegen, wenn das generierte XML-Dokument XML-Namespaces verwendet, um zwischen den identisch benannten Membern zu unterscheiden. Ausführliche Informationen zur Verwendung von Namespaces und Präfixen Namen im XML-Dokument finden Sie unter der <xref:System.Xml.Serialization.XmlSerializerNamespaces> -Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> -Eigenschaft <xref:System.Xml.Serialization.XmlElementAttribute> eines auf einen neuen Wert festgelegt.  
  
 [!code-cpp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName" />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Xml.Schema.XmlSchemaForm with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Element qualifiziert ist.</summary>
        <value>Einer der <see cref="T:System.Xml.Schema.XmlSchemaForm" />-Werte. Die Standardeinstellung ist <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> -Eigenschaft bestimmt, ob ein XML-Element qualifiziert oder nicht qualifiziert ist. Die <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> -Eigenschaft entspricht der World Wide Web Consortium 1999-Spezifikation, [Namespaces in XML](https://www.w3.org/TR/1999/REC-xml-names-19990114/).  
  
 Wenn die <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> Eigenschaft auf einen beliebigen Wert festgelegt ist, wird beim <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> Versuch, `XmlSchemaForm.Unqualified` die-Eigenschaft auf festzulegen, eine Ausnahme ausgelöst. Die Standardeinstellung `XmlSchemaForm.None`,, weist den <xref:System.Xml.Serialization.XmlSerializer> an, das Schema für das XML-Dokument zu überprüfen, um zu bestimmen, ob der Namespace qualifiziert ist. Wenn das Schema keinen Wert für ein einzelnes Element oder Attribut angibt, <xref:System.Xml.Serialization.XmlSerializer> `elementFormDefault` verwendet den-Wert und den `attributeFormDefault` -Wert, um zu bestimmen, ob ein Element oder Attribut qualifiziert ist. Der folgende XML-Code zeigt ein Schema:  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified"... >  
 <element name="Name"/>  
 <attribute name="Number"/>  
</schema>  
```  
  
 `Number` `Name` <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> `Name` Wenn das Schema `Number` liest, ist`XmlSchemaForm.None`der-Wert sowohl für als auch für, aber das-Element ist qualifiziert, während das-Element nicht qualifiziert ist. <xref:System.Xml.Serialization.XmlSerializer>  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> -Eigenschaft `XmlSchemaForm.Unqualified`auf festgelegt.  
  
 [!code-cpp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob <see cref="T:System.Xml.Serialization.XmlSerializer" /> einen Member, der auf <see langword="null" /> festgelegt ist, als leeres Tag, dessen <see langword="xsi:nil" />-Attribut auf <see langword="true" /> festgelegt ist, serialisieren muss, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn <see cref="T:System.Xml.Serialization.XmlSerializer" /> das <see langword="xsi:nil" />-Attribut generiert, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die XML-Schema Spezifikation für Strukturen ermöglicht einem XML-Dokument, explizit zu signalisieren, dass der Inhalt eines Elements fehlt. Ein solches Element enthält das- `xsi:nil` Attribut, `true`das auf festgelegt ist. Weitere Informationen finden Sie in der World Wide Web Consortium Spezifikation [XML Schema Part 1: Strukturen](https://www.w3.org/TR/xmlschema-1/).
  
 Wenn die <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> -Eigenschaft auf `true`festgelegt ist `xsi:nil` , wird das-Attribut für Klassenmember generiert, `null`die auf festgelegt wurden. Wenn Sie z. b. ein Feld `MyStringArray` mit `null`dem Namen <xref:System.Xml.Serialization.XmlSerializer> auf festlegen, generiert den folgenden XML-Code.  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 Wenn die <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> -Eigenschaft `false`ist, wird kein XML-Element für Klassenmember generiert, die `null`auf festgelegt wurden.  
  
> [!NOTE]
>  Die Eigenschaft kann nicht <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> auf einen Member angewendet werden, der als Werttyp typisiert ist, `null`da ein Werttyp nicht enthalten darf. Darüber hinaus können Sie diese Eigenschaft nicht auf `false` für Werte zulässt-Werttypen festlegen. Wenn solche Typen sind `null`, werden Sie serialisiert, indem auf `xsi:nil` `true`festgelegt wird.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt ein Feld mit dem <xref:System.Xml.Serialization.XmlElementAttribute> , das auf das Feld angewendet <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> wird, und `false`die-Eigenschaft ist auf festgelegt.  
  
 [!code-cpp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namespace ab, der dem XML-Element zugeordnet ist, das aus dem Serialisieren der Klasse resultiert, oder legt diesen fest.</summary>
        <value>Der Namespace des XML-Elements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> -Eigenschaft entspricht der World Wide Web Consortium Spezifikation, [Namespaces in XML](https://www.w3.org/TR/1999/REC-xml-names-19990114/).  
  
 Zum Erstellen von Namespaces, die einem Präfix zugeordnet sind, müssen Sie <xref:System.Xml.Serialization.XmlSerializerNamespaces> eine erstellen, die die im XML-Dokument verwendeten Namespaces und Präfixe enthält. Wenn Sie den Namespace für die einzelnen <xref:System.Xml.Serialization.XmlArrayAttribute>festlegen, muss er mit einem der Namespaces in der <xref:System.Xml.Serialization.XmlSerializerNamespaces>identisch sein. Beim Generieren des XML-Codes wird jedem Array ordnungsgemäß das Präfix vorangestellt, das dem angegebenen Namespace zugeordnet ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Order : int with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die explizite Reihenfolge ab, in der die Elemente serialisiert oder deserialisiert werden, oder legt diese fest.</summary>
        <value>Die Reihenfolge der Codegenerierung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder> die-Enumeration, <xref:System.Web.Services.Description.ServiceDescriptionImporter> um den anzuweisen, Code <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> zu generieren, der die-Eigenschaft festlegt.  
  
> [!IMPORTANT]
>  Sobald die <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> Eigenschaft für eine öffentliche Eigenschaft oder ein öffentliches Feld in einem Typ verwendet wurde, muss Sie auf alle öffentlichen Eigenschaften und Felder für diesen Typ und alle geerbten Typen angewendet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Objekttyp ab, mit dem das XML-Element dargestellt wird, oder legt diesen fest.</summary>
        <value>Der <see cref="T:System.Type" /> des Members.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> die-Eigenschaft, um einen abgeleiteten Typ für ein Feld oder eine Eigenschaft anzugeben.  
  
 Wenn ein Feld oder eine Eigenschaft zurück <xref:System.Collections.ArrayList>gibt, können Sie mehrere Instanzen <xref:System.Xml.Serialization.XmlElementAttribute> von auf den Member anwenden. Legen Sie für jede Instanz die <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> -Eigenschaft auf einen Objekttyp fest, der in das Array eingefügt werden kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> -Eigenschaft verwendet, um ein abgeleitetes Objekt für einen <xref:System.Xml.Serialization.XmlElementAttribute>anzugeben. Im Beispiel werden auch drei Instanzen von <xref:System.Xml.Serialization.XmlElementAttribute> auf ein Feld angewendet, das einen <xref:System.Collections.ArrayList>zurückgibt. Jede Instanz gibt einen Typ an, der im Feld zulässig ist.  
  
 [!code-cpp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

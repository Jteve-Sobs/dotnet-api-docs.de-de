<Type Name="AspNetWebSocket" FullName="System.Web.WebSockets.AspNetWebSocket">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="437366316ce58bcfea56939a19c7db1f254780e9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30609154" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AspNetWebSocket extends System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="DocId" Value="T:System.Web.WebSockets.AspNetWebSocket" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AspNetWebSocket&#xA;Inherits WebSocket" />
  <TypeSignature Language="C++ CLI" Value="public ref class AspNetWebSocket sealed : System::Net::WebSockets::WebSocket" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebSockets.WebSocket</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine vollduplexe Echtzeitverbindung zwischen einem Webserver und einem Client in einer ASP.NET-Anwendung dar.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bricht alle ausstehenden E/A-Vorgänge auf dem <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Objekt ab und legt den Zustand des Objekts fest, sodass es nicht verwendet werden kann, um zusätzliche E/A-Vorgänge zu starten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nach der <xref:System.Web.WebSockets.AspNetWebSocket.Abort%2A> -Methode aufgerufen wurde, können Sie Eigenschaften und Methoden, die e/a-Vorgänge nicht beinhalten weiterhin zugreifen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Das Objekt war zuvor freigegeben.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ CloseAsync(System::Net::WebSockets::WebSocketCloseStatus closeStatus, System::String ^ statusDescription, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">Der Statuscode des Schließen-Vorgangs.</param>
        <param name="statusDescription">Die Statusmeldung des Schließvorgangs.</param>
        <param name="cancellationToken">Das Objekt, das einen ausstehenden Vorgang abbricht.</param>
        <summary>Sendet eine asynchrone Meldung an einen Client, um die Verbindung zu schließen. Wenn der Server die Anforderung initiiert, um die Verbindung zu schließen, wartet die Methode darauf, dass der Client die Anforderung bestätigt, bevor eine Rückgabe erfolgt.</summary>
        <returns>Ein Verweis auf den Vorgang.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> und <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> Methoden für Client initiierten und vom Server initiierte Anforderungen zu schließen eine <xref:System.Web.WebSockets.AspNetWebSocket> Verbindung. Die beiden Methoden Client initiierten Anforderungen auf die gleiche Weise verarbeitet: Nachdem der Client sendet eine Nachricht an den Server aus, um die Verbindung zu schließen, der Server eine der folgenden Methoden aufruft und sendet eine Bestätigung an den Client, und klicken Sie dann die Methode gibt.  
  
 Für serverseitig initiierte Anforderungen arbeiten die beiden Methoden unterschiedlich. Die <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> Methode sendet eine Nachricht an den Client die Verbindung schließen, eine Antwort wartet und wechselt zurück. Der Server wartet nicht auf alle zusätzlichen Daten, die vom Client gesendet. Im Gegensatz dazu die <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> Methode sendet eine Nachricht an den Client zu schließen die Verbindung und gibt zurück, ohne eine Antwort warten. Nachdem der Rückgabewert dieser Methode können Sie rufen die <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> Methode und behandeln Sie zusätzliche Daten oder die Bestätigung, die der Client sendet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Das <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Objekt war zuvor freigegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Das <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> -Objekt weist einen Abbruchstatus auf.  
  
 - oder -   
  
 Senden von Vorgängen, die nicht verfügbar sind.  
  
 - oder -   
  
 Empfangen von Vorgängen nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseOutputAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseOutputAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ CloseOutputAsync(System::Net::WebSockets::WebSocketCloseStatus closeStatus, System::String ^ statusDescription, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">Der Statuscode des Schließen-Vorgangs.</param>
        <param name="statusDescription">Die Statusmeldung des Schließvorgangs.</param>
        <param name="cancellationToken">Das Objekt, das einen ausstehenden Vorgang abbricht.</param>
        <summary>Sendet eine asynchrone Meldung an einen Client, um die Verbindung zu schließen. Wenn der Server die Anforderung initiiert, um die Verbindung zu schließen, erfolgt eine Rückgabe, ohne auf eine Antwort zu warten.</summary>
        <returns>Ein Verweis auf den Vorgang.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> und <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> Methoden für Client initiierten und vom Server initiierte Anforderungen zu schließen eine <xref:System.Web.WebSockets.AspNetWebSocket> Verbindung. Die beiden Methoden Client initiierten Anforderungen auf die gleiche Weise verarbeitet: Nachdem der Client sendet eine Nachricht an den Server aus, um die Verbindung zu schließen, der Server eine der folgenden Methoden aufruft und sendet eine Bestätigung an den Client, und klicken Sie dann die Methode gibt.  
  
 Für serverseitig initiierte Anforderungen arbeiten die beiden Methoden unterschiedlich. Die <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> Methode sendet eine Nachricht an den Client die Verbindung schließen, eine Antwort wartet und wechselt zurück. Der Server wartet nicht auf alle zusätzlichen Daten, die vom Client gesendet. Im Gegensatz dazu die <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> Methode sendet eine Nachricht an den Client zu schließen die Verbindung und gibt zurück, ohne eine Antwort warten. Nachdem der Rückgabewert dieser Methode können Sie rufen die <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> Methode und behandeln Sie zusätzliche Daten oder die Bestätigung, die der Client sendet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Das Objekt war zuvor freigegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Das <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> -Objekt weist einen Abbruchstatus auf.  
  
 - oder -   
  
 Senden von Vorgängen, die nicht verfügbar sind.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatus">
      <MemberSignature Language="C#" Value="public override Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseStatus As Nullable(Of WebSocketCloseStatus)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Nullable&lt;System::Net::WebSockets::WebSocketCloseStatus&gt; CloseStatus { Nullable&lt;System::Net::WebSockets::WebSocketCloseStatus&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Statuscode ab, der angibt, warum ein <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Objekt geschlossen wurde.</summary>
        <value>Der Statuscode.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Das Objekt war zuvor freigegeben.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatusDescription">
      <MemberSignature Language="C#" Value="public override string CloseStatusDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseStatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseStatusDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CloseStatusDescription { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Statusmeldung ab, die erklärt, warum ein <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Objekt geschlossen wurde.</summary>
        <value>Die Statusmeldung.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Das Objekt war zuvor freigegeben.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Dispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Objekt verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET ruft automatisch den <xref:System.Web.WebSockets.AspNetWebSocket.Dispose%2A> Methode auf eine <xref:System.Web.WebSockets.AspNetWebSocket> Objekt, um alle Ressourcen freizugeben, die nach dem Abschluss der Code ausgeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync (ArraySegment&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::WebSockets::WebSocketReceiveResult ^&gt; ^ ReceiveAsync(ArraySegment&lt;System::Byte&gt; buffer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">Das Array, das die Meldungsdaten enthält.</param>
        <param name="cancellationToken">Das Objekt, das einen ausstehenden Vorgang abbricht.</param>
        <summary>Empfängt ein einzelnes Nachrichtenfragment eines Remoteclients.</summary>
        <returns>Ein Verweis auf die Aufgabe des Empfangs einer Nachricht.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Das <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Objekt war zuvor freigegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Das <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> -Objekt weist einen Abbruchstatus auf.  
  
 - oder -   
  
 Empfangen von Vorgängen nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task SendAsync (ArraySegment&lt;byte&gt; buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task SendAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ SendAsync(ArraySegment&lt;System::Byte&gt; buffer, System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="messageType" Type="System.Net.WebSockets.WebSocketMessageType" />
        <Parameter Name="endOfMessage" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">Das Array, das die Meldungsdaten enthält.</param>
        <param name="messageType">Der Meldungstyp.</param>
        <param name="endOfMessage">
          <see langword="true" />, um anzugeben, dass ein Fragment das Ende einer vollständigen Meldung ist; andernfalls <see langword="false" />.</param>
        <param name="cancellationToken">Das Objekt, das einen ausstehenden Vorgang abbricht.</param>
        <summary>Sendet ein einzelnes Nachrichtenfragment an einen Remoteclient.</summary>
        <returns>Ein Verweis auf die Aufgabe des Sendens einer Nachricht.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Das <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Objekt wurde freigegeben.</exception>
        <exception cref="T:System.InvalidOperationException">Das <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> -Objekt weist einen Abbruchstatus auf.  
  
 - oder -   
  
 Senden von Vorgängen, die nicht verfügbar sind.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Net.WebSockets.WebSocketState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.WebSockets.WebSocketState State" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As WebSocketState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::WebSockets::WebSocketState State { System::Net::WebSockets::WebSocketState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebSockets.WebSocketState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der den offenen oder geschlossenen Zustand eines <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Objekts angibt.</summary>
        <value>Der aktuelle Status.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Das Objekt war zuvor freigegeben.</exception>
      </Docs>
    </Member>
    <Member MemberName="SubProtocol">
      <MemberSignature Language="C#" Value="public override string SubProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SubProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.SubProtocol" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SubProtocol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SubProtocol { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen eines anwendungsspezifischen Protokolls ab, das ein Remote Client und ein Server nutzen können, um Daten über eine <see cref="T:System.Web.WebSockets.AspNetWebSocket" />-Verbindung austauschen zu können.</summary>
        <value>Der Name des Protokolls.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Das Objekt war zuvor freigegeben.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
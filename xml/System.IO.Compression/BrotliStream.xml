<Type Name="BrotliStream" FullName="System.IO.Compression.BrotliStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04399adbebf9f8fa6ffa3f7858e29ddbf89455fe" /><Meta Name="ms.sourcegitcommit" Value="71cd9c2de2cd52bd5b71424de92feb029aa2818b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/09/2019" /><Meta Name="ms.locfileid" Value="72185960" /></Metadata><TypeSignature Language="C#" Value="public sealed class BrotliStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BrotliStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.BrotliStream" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BrotliStream&#xA;Inherits Stream" />
  <TypeSignature Language="C++ CLI" Value="public ref class BrotliStream sealed : System::IO::Stream" />
  <TypeSignature Language="F#" Value="type BrotliStream = class&#xA;    inherit Stream" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="78dbb-101">Stellt Methoden und Eigenschaften bereit, die zum Komprimieren und Dekomprimieren von Streams über die Brotli-Datenformatspezifikation verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-101">Provides methods and properties used to compress and decompress streams by using the Brotli data format specification.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BrotliStream (System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.CompressionLevel compressionLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BrotliStream(System::IO::Stream ^ stream, System::IO::Compression::CompressionLevel compressionLevel);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.BrotliStream : System.IO.Stream * System.IO.Compression.CompressionLevel -&gt; System.IO.Compression.BrotliStream" Usage="new System.IO.Compression.BrotliStream (stream, compressionLevel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="78dbb-102">Der zu komprimierende Stream.</span><span class="sxs-lookup"><span data-stu-id="78dbb-102">The stream to compress.</span></span></param>
        <param name="compressionLevel"><span data-ttu-id="78dbb-103">Einer der Enumerationswerte, der angibt, ob die Geschwindigkeit oder Komprimierungsleistungsfähigkeit priorisiert wird, wenn der Stream komprimiert wird.</span><span class="sxs-lookup"><span data-stu-id="78dbb-103">One of the enumeration values that indicates whether to emphasize speed or compression efficiency when compressing the stream.</span></span></param>
        <summary><span data-ttu-id="78dbb-104">Initialisiert eine neue Instanz der <see cref="T:System.IO.Compression.BrotliStream" />-Klasse mithilfe des angegebenen Stream- und Komprimierungsgrads.</span><span class="sxs-lookup"><span data-stu-id="78dbb-104">Initializes a new instance of the <see cref="T:System.IO.Compression.BrotliStream" /> class by using the specified stream and compression level.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BrotliStream (System.IO.Stream stream, System.IO.Compression.CompressionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.CompressionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BrotliStream(System::IO::Stream ^ stream, System::IO::Compression::CompressionMode mode);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.BrotliStream : System.IO.Stream * System.IO.Compression.CompressionMode -&gt; System.IO.Compression.BrotliStream" Usage="new System.IO.Compression.BrotliStream (stream, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.IO.Compression.CompressionMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="78dbb-105">Der zu komprimierende Stream.</span><span class="sxs-lookup"><span data-stu-id="78dbb-105">The stream to compress.</span></span></param>
        <param name="mode"><span data-ttu-id="78dbb-106">Einer der Enumerationswerte, der angibt, ob der Stream gelesen oder geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="78dbb-106">One of the enumeration values that indicates whether to compress or decompress the stream.</span></span></param>
        <summary><span data-ttu-id="78dbb-107">Initialisiert eine neue Instanz der <see cref="T:System.IO.Compression.BrotliStream" />-Klasse mithilfe des angegebenen Stream- und Komprimierungsmodus.</span><span class="sxs-lookup"><span data-stu-id="78dbb-107">Initializes a new instance of the <see cref="T:System.IO.Compression.BrotliStream" /> class by using the specified stream and compression mode.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BrotliStream (System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BrotliStream(System::IO::Stream ^ stream, System::IO::Compression::CompressionLevel compressionLevel, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.BrotliStream : System.IO.Stream * System.IO.Compression.CompressionLevel * bool -&gt; System.IO.Compression.BrotliStream" Usage="new System.IO.Compression.BrotliStream (stream, compressionLevel, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="78dbb-108">Der zu komprimierende Stream.</span><span class="sxs-lookup"><span data-stu-id="78dbb-108">The stream to compress.</span></span></param>
        <param name="compressionLevel"><span data-ttu-id="78dbb-109">Einer der Enumerationswerte, der angibt, ob die Geschwindigkeit oder Komprimierungsleistungsfähigkeit priorisiert wird, wenn der Stream komprimiert wird.</span><span class="sxs-lookup"><span data-stu-id="78dbb-109">One of the enumeration values that indicates whether to emphasize speed or compression efficiency when compressing the stream.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="78dbb-110"><see langword="true" />, um den Stream offen zu lassen, nachdem das <see cref="T:System.IO.Compression.BrotliStream" />-Objekt freigegeben wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="78dbb-110"><see langword="true" /> to leave the stream open after disposing the <see cref="T:System.IO.Compression.BrotliStream" /> object; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="78dbb-111">Initialisiert eine neue Instanz der <see cref="T:System.IO.Compression.BrotliStream" />-Klasse unter Verwendung des angegebenen Streams und der Komprimierungsebene und lässt den Stream optional geöffnet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-111">Initializes a new instance of the <see cref="T:System.IO.Compression.BrotliStream" /> class by using the specified stream and compression level, and optionally leaves the stream open.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BrotliStream (System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.CompressionMode mode, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BrotliStream(System::IO::Stream ^ stream, System::IO::Compression::CompressionMode mode, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.BrotliStream : System.IO.Stream * System.IO.Compression.CompressionMode * bool -&gt; System.IO.Compression.BrotliStream" Usage="new System.IO.Compression.BrotliStream (stream, mode, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.IO.Compression.CompressionMode" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="78dbb-112">Der zu komprimierende Stream.</span><span class="sxs-lookup"><span data-stu-id="78dbb-112">The stream to compress.</span></span></param>
        <param name="mode"><span data-ttu-id="78dbb-113">Einer der Enumerationswerte, der angibt, ob der Stream gelesen oder geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="78dbb-113">One of the enumeration values that indicates whether to compress or decompress the stream.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="78dbb-114"><see langword="true" />, um den Datenstrom geöffnet zu lassen, nach dem das <see cref="T:System.IO.Compression.BrotliStream" />-Objekt freigegeben wurde; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="78dbb-114"><see langword="true" /> to leave the stream open after the <see cref="T:System.IO.Compression.BrotliStream" /> object is disposed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="78dbb-115">Initialisiert eine neue Instanz der <see cref="T:System.IO.Compression.BrotliStream" />-Klasse unter Verwendung des angegebenen Streams und des Komprimierungsmodus und lässt den Stream optional geöffnet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-115">Initializes a new instance of the <see cref="T:System.IO.Compression.BrotliStream" /> class by using the specified stream and compression mode, and optionally leaves the stream open.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.BrotliStream.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseStream : System.IO.Stream" Usage="System.IO.Compression.BrotliStream.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78dbb-116">Ruft einen Verweis auf den zugrunde liegenden Stream ab.</span><span class="sxs-lookup"><span data-stu-id="78dbb-116">Gets a reference to the underlying stream.</span></span></summary>
        <value><span data-ttu-id="78dbb-117">Ein Streamobjekt, das den zugrunde liegenden Stream darstellt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-117">A stream object that represents the underlying stream.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="78dbb-118">Der zugrunde liegende Stream ist geschlossen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-118">The underlying stream is closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="brotliStream.BeginRead (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-119">Der Puffer, aus dem Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-119">The buffer from which data will be read.</span></span></param>
        <param name="offset"><span data-ttu-id="78dbb-120">Der Byteoffset im <paramref name="array" />, ab dem aus dem Stream gelesene Daten gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-120">The byte offset in <paramref name="array" /> at which to begin reading data from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="78dbb-121">Die maximale Anzahl der zu lesenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-121">To maximum number of bytes to read.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="78dbb-122">Ein optionaler asynchroner Rückruf, der nach Abschluss des Lesevorgangs aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="78dbb-122">An optional asynchronous callback, to be called when the read operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="78dbb-123">Ein vom Benutzer bereitgestelltes Objekt, das diese asynchrone Leseanforderung von anderen Anforderungen unterscheidet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-123">A user-provided object that distinguishes this particular asynchronous read request from other requests.</span></span></param>
        <summary><span data-ttu-id="78dbb-124">Beginnt einen asynchronen Lesevorgang.</span><span class="sxs-lookup"><span data-stu-id="78dbb-124">Begins an asynchronous read operation.</span></span> <span data-ttu-id="78dbb-125">(Verwenden Sie stattdessen die <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />-Methode.)</span><span class="sxs-lookup"><span data-stu-id="78dbb-125">(Consider using the <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> method instead.)</span></span></summary>
        <returns><span data-ttu-id="78dbb-126">Ein Objekt, das den asynchronen Lesevorgang darstellt, der möglicherweise noch aussteht.</span><span class="sxs-lookup"><span data-stu-id="78dbb-126">An object that represents the asynchronous read operation, which could still be pending.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="78dbb-127">Die Methode hat versucht, asynchron über das Ende des Streams hinaus zu lesen, oder ein Plattenfehler ist aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="78dbb-127">The method tried to read asynchronously past the end of the stream, or a disk error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78dbb-128">Mindestens eines der Argumente ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="78dbb-128">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="78dbb-129">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="78dbb-129">Methods were called after the stream was closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78dbb-130">Die aktuelle <see cref="T:System.IO.Compression.BrotliStream" />-Implementierung unterstützt den Lesevorgang nicht.</span><span class="sxs-lookup"><span data-stu-id="78dbb-130">The current <see cref="T:System.IO.Compression.BrotliStream" /> implementation does not support the read operation.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78dbb-131">Dieser Aufruf kann nicht abgeschlossen werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-131">This call cannot be completed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="brotliStream.BeginWrite (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-132">Der Puffer, aus dem Daten geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-132">The buffer from which data will be written.</span></span></param>
        <param name="offset"><span data-ttu-id="78dbb-133">Der Byteoffset im <paramref name="array" />, ab dem Daten aus dem Stream geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-133">The byte offset in <paramref name="array" /> at which to begin writing data from the stream.</span></span></param>
        <param name="count"><span data-ttu-id="78dbb-134">Die maximale Anzahl der zu schreibenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-134">The maximum number of bytes to write.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="78dbb-135">Ein optionaler asynchroner Rückruf, der nach Abschluss des Schreibvorgangs aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="78dbb-135">An optional asynchronous callback, to be called when the write operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="78dbb-136">Ein vom Benutzer bereitgestelltes Objekt, das diese asynchrone Schreibanforderung von anderen Anforderungen unterscheidet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-136">A user-provided object that distinguishes this particular asynchronous write request from other requests.</span></span></param>
        <summary><span data-ttu-id="78dbb-137">Beginnt einen asynchronen Schreibvorgang.</span><span class="sxs-lookup"><span data-stu-id="78dbb-137">Begins an asynchronous write operation.</span></span> <span data-ttu-id="78dbb-138">(Verwenden Sie stattdessen die <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />-Methode.)</span><span class="sxs-lookup"><span data-stu-id="78dbb-138">(Consider using the <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> method instead.)</span></span></summary>
        <returns><span data-ttu-id="78dbb-139">Ein Objekt, das den asynchronen Schreibvorgang darstellt, der möglicherweise noch aussteht.</span><span class="sxs-lookup"><span data-stu-id="78dbb-139">An object that represents the asynchronous write operation, which could still be pending.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="78dbb-140">Die Methode hat versucht, asynchron über das Ende des Streams hinaus zu schreiben, oder ein Plattenfehler ist aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="78dbb-140">The method tried to write asynchronously past the end of the stream, or a disk error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78dbb-141">Mindestens eines der Argumente ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="78dbb-141">One or more of the arguments is invalid.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="78dbb-142">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="78dbb-142">Methods were called after the stream was closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78dbb-143">Die aktuelle <see cref="T:System.IO.Compression.BrotliStream" />-Implementierung unterstützt den Schreibvorgang nicht.</span><span class="sxs-lookup"><span data-stu-id="78dbb-143">The current <see cref="T:System.IO.Compression.BrotliStream" /> implementation does not support the write operation.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78dbb-144">Der Schreibvorgang kann nicht ausgeführt werden, da der Stream geschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="78dbb-144">The write operation cannot be performed because the stream is closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.BrotliStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.IO.Compression.BrotliStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78dbb-145">Ruft einen Wert ab, der angibt, ob der Stream Lesevorgänge unterstützt, während eine Datei dekomprimiert wird.</span><span class="sxs-lookup"><span data-stu-id="78dbb-145">Gets a value indicating whether the stream supports reading while decompressing a file.</span></span></summary>
        <value><span data-ttu-id="78dbb-146"><see langword="true" />, wenn der <see cref="T:System.IO.Compression.CompressionMode" />-Wert gleich <see langword="Decompress," /> ist und der zugrunde liegende Stream Lesevorgänge unterstützt und nicht geschlossen ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="78dbb-146"><see langword="true" /> if the <see cref="T:System.IO.Compression.CompressionMode" /> value is <see langword="Decompress," /> and the underlying stream supports reading and is not closed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.BrotliStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.IO.Compression.BrotliStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78dbb-147">Ruft einen Wert, der angibt, ob der Stream Suchvorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-147">Gets a value indicating whether the stream supports seeking.</span></span></summary>
        <value><span data-ttu-id="78dbb-148"><see langword="false" /> in allen Fällen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-148"><see langword="false" /> in all cases.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.BrotliStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.IO.Compression.BrotliStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78dbb-149">Ruft einen Wert, der angibt, ob der Stream Schreibvorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-149">Gets a value indicating whether the stream supports writing.</span></span></summary>
        <value><span data-ttu-id="78dbb-150"><see langword="true" />, wenn der <see cref="T:System.IO.Compression.CompressionMode" />-Wert gleich <see langword="Compress" /> ist und der zugrunde liegende Stream Schreibvorgänge unterstützt und nicht geschlossen ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="78dbb-150"><see langword="true" /> if the <see cref="T:System.IO.Compression.CompressionMode" /> value is <see langword="Compress" />, and the underlying stream supports writing and is not closed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="brotliStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="78dbb-151"><see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="78dbb-151"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="78dbb-152">Gibt die von <see cref="T:System.IO.Compression.BrotliStream" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</span><span class="sxs-lookup"><span data-stu-id="78dbb-152">Releases the unmanaged resources used by the <see cref="T:System.IO.Compression.BrotliStream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="brotliStream.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78dbb-153">Gibt die nicht verwalteten Ressourcen, die von der <see cref="T:System.IO.Compression.BrotliStream" /> verwendet werden, asynchron frei.</span><span class="sxs-lookup"><span data-stu-id="78dbb-153">Asynchronously releases the unmanaged resources used by the <see cref="T:System.IO.Compression.BrotliStream" />.</span></span></summary>
        <returns><span data-ttu-id="78dbb-154">Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-154">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="78dbb-155">Mit der `DisposeAsync`-Methode können Sie einen ressourcenintensiven Löschvorgang ausführen, ohne den Haupt Thread zu blockieren.</span><span class="sxs-lookup"><span data-stu-id="78dbb-155">The `DisposeAsync` method lets you perform a resource-intensive dispose operation without blocking the main thread.</span></span> <span data-ttu-id="78dbb-156">Diese Überlegungen zur Leistung sind insbesondere in einer [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] -App oder [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] -App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-156">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="78dbb-157">Die Async-Methoden werden in Visual Basic und C#zusammen mit den Schlüsselwörtern `async` und `await` verwendet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-157">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span> 

<span data-ttu-id="78dbb-158">Diese Methode gibt den brotli-Stream aus, indem alle Änderungen an den Sicherungs Speicher geschrieben und der Stream zum Freigeben von Ressourcen geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="78dbb-158">This method disposes the Brotli stream by writing any changes to the backing store and closing the stream to release resources.</span></span>   

<span data-ttu-id="78dbb-159">Wenn Sie `DisposeAsync` aufrufen, können die vom <xref:System.IO.Compression.BrotliStream> verwendeten Ressourcen für andere Zwecke neu zugeordnet werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-159">Calling `DisposeAsync` allows the resources used by the <xref:System.IO.Compression.BrotliStream> to be reallocated for other purposes.</span></span> <span data-ttu-id="78dbb-160">Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="78dbb-160">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="brotliStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="78dbb-161">Der Verweis auf die ausstehende asynchrone Anforderung, die beendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="78dbb-161">The reference to the pending asynchronous request to finish.</span></span></param>
        <summary><span data-ttu-id="78dbb-162">Wartet, bis der ausstehende asynchrone Lesevorgang abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="78dbb-162">Waits for the pending asynchronous read to complete.</span></span> <span data-ttu-id="78dbb-163">(Verwenden Sie stattdessen die <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />-Methode.)</span><span class="sxs-lookup"><span data-stu-id="78dbb-163">(Consider using the <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> method instead.)</span></span></summary>
        <returns><span data-ttu-id="78dbb-164">Die Anzahl der aus dem Stream gelesenen Bytes. Diese Anzahl kann zwischen 0 und der Anzahl der angeforderten Bytes liegen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-164">The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested.</span></span> <span data-ttu-id="78dbb-165"><see cref="T:System.IO.Compression.BrotliStream" /> gibt null (0) nur am Ende des Streams zurück, andernfalls wird er blockiert, bis mindestens ein Byte verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="78dbb-165"><see cref="T:System.IO.Compression.BrotliStream" /> returns 0 only at the end of the stream; otherwise, it blocks until at least one byte is available.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78dbb-166"><paramref name="asyncResult" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="78dbb-166"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78dbb-167"><paramref name="asyncResult" /> basiert nicht auf einer <see cref="M:System.IO.Compression.BrotliStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />-Methode im aktuellen Stream.</span><span class="sxs-lookup"><span data-stu-id="78dbb-167"><paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Compression.BrotliStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78dbb-168">Der Abschlussvorgang kann nicht ausgeführt werden, da der Stream geschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="78dbb-168">The end operation cannot be performed because the stream is closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="brotliStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="78dbb-169">Das -Objekt, das den asynchronen Aufruf darstellt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-169">The object that represents the asynchronous call.</span></span></param>
        <summary><span data-ttu-id="78dbb-170">Behandelt das Ende eines asynchronen Schreibvorgangs.</span><span class="sxs-lookup"><span data-stu-id="78dbb-170">Handles the end of an asynchronous write operation.</span></span> <span data-ttu-id="78dbb-171">(Verwenden Sie stattdessen die <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />-Methode.)</span><span class="sxs-lookup"><span data-stu-id="78dbb-171">(Consider using the <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> method instead.)</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78dbb-172">Der zugrunde liegende Stream ist geschlossen oder <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="78dbb-172">The underlying stream is closed or <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="brotliStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78dbb-173">Die aktuelle Implementierung dieser Methode hat keine Funktion.</span><span class="sxs-lookup"><span data-stu-id="78dbb-173">The current implementation of this method has no functionality.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="brotliStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="78dbb-174">Das Token zum Überwachen von Abbruchanforderungen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-174">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="78dbb-175">Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</span><span class="sxs-lookup"><span data-stu-id="78dbb-175">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="78dbb-176">Löscht alle Puffer für diesen Brotli-Datenstrom asynchron, veranlasst die Ausgabe aller gepufferten Daten an das zugrunde liegende Gerät und überwacht Abbruchanforderungen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-176">Asynchronously clears all buffers for this Brotli stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="78dbb-177">Eine Aufgabe, die die asynchrone Leerung darstellt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-177">A task that represents the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="78dbb-178">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen ist, enthält die zurückgegebene Aufgabe den <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType>-Wert für die Eigenschaft <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="78dbb-178">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType> value for the <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType> property.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.BrotliStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.IO.Compression.BrotliStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78dbb-179">Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</span><span class="sxs-lookup"><span data-stu-id="78dbb-179">This property is not supported and always throws a <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <value><span data-ttu-id="78dbb-180">Ein Long-Wert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-180">A long value.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78dbb-181">Diese Eigenschaft wird für diesen Stream nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-181">This property is not supported on this stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.BrotliStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.IO.Compression.BrotliStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78dbb-182">Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</span><span class="sxs-lookup"><span data-stu-id="78dbb-182">This property is not supported and always throws a <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <value><span data-ttu-id="78dbb-183">Ein Long-Wert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-183">A long value.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78dbb-184">Diese Eigenschaft wird für diesen Stream nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-184">This property is not supported on this stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.Read : Span&lt;byte&gt; -&gt; int" Usage="brotliStream.Read buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-185">Ein Bereich im Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="78dbb-185">A region of memory.</span></span> <span data-ttu-id="78dbb-186">Bei der Rückgabe dieser Methode werden die Inhalte dieses Bereichs durch die aus der aktuellen Quelle gelesenen Bytes ersetzt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-186">When this method returns, the contents of this region are replaced by the bytes read from the current source.</span></span></param>
        <summary><span data-ttu-id="78dbb-187">Liest eine Bytesequenz aus dem aktuellen Brotli-Datenstrom in eine Bytespanne und erhöht die Position innerhalb des Brotli-Datenstroms um die Anzahl der gelesen Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-187">Reads a sequence of bytes from the current Brotli stream to a byte span and advances the position within the Brotli stream by the number of bytes read.</span></span></summary>
        <returns><span data-ttu-id="78dbb-188">Die Gesamtanzahl der in den Puffer gelesenen Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-188">The total number of bytes read into the buffer.</span></span> <span data-ttu-id="78dbb-189">Dies kann weniger als die Anzahl der im Puffer zugeordneten Bytes sein, wenn diese Anzahl an Bytes derzeit nicht verfügbar ist, oder 0 (null), wenn das Ende des Streams erreicht ist.</span><span class="sxs-lookup"><span data-stu-id="78dbb-189">This can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="78dbb-190">Verwenden Sie die <xref:System.IO.Compression.BrotliStream.CanRead%2A>-Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Lesevorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-190">Use the <xref:System.IO.Compression.BrotliStream.CanRead%2A> property to determine whether the current instance supports reading.</span></span> <span data-ttu-id="78dbb-191">Verwenden Sie die <xref:System.IO.Compression.BrotliStream.ReadAsync%2A>-Methode, um asynchron aus dem aktuellen Stream zu lesen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-191">Use the <xref:System.IO.Compression.BrotliStream.ReadAsync%2A> method to read asynchronously from the current stream.</span></span>

<span data-ttu-id="78dbb-192">Diese Methode liest maximal `buffer.Length` Bytes aus dem aktuellen Stream und speichert Sie in `buffer`.</span><span class="sxs-lookup"><span data-stu-id="78dbb-192">This method read a maximum of `buffer.Length` bytes from the current stream and store them in `buffer`.</span></span> <span data-ttu-id="78dbb-193">Die aktuelle Position im brotli-Stream wird um die Anzahl der gelesenen Bytes erweitert. Wenn jedoch eine Ausnahme auftritt, bleibt die aktuelle Position im brotli-Stream unverändert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-193">The current position within the Brotli stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the Brotli stream remains unchanged.</span></span> <span data-ttu-id="78dbb-194">Diese Methode wird blockiert, bis mindestens ein Byte der Daten gelesen werden kann, wenn keine Daten verfügbar sind.</span><span class="sxs-lookup"><span data-stu-id="78dbb-194">This method will block until at least one byte of data can be read, in the event that no data is available.</span></span> <span data-ttu-id="78dbb-195">`Read` gibt 0 (null) nur dann zurück, wenn keine weiteren Daten im Stream vorhanden sind und nicht mehr erwartet wird (z. b. ein geschlossener Socket oder ein Dateiende).</span><span class="sxs-lookup"><span data-stu-id="78dbb-195">`Read` returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</span></span> <span data-ttu-id="78dbb-196">Die-Methode kann weniger Bytes zurückgeben als angefordert werden, auch wenn das Ende des Streams nicht erreicht wurde.</span><span class="sxs-lookup"><span data-stu-id="78dbb-196">The method is free to return fewer bytes than requested even if the end of the stream has not been reached.</span></span>

 <span data-ttu-id="78dbb-197">Verwenden Sie <xref:System.IO.BinaryReader> zum Lesen von primitiven Datentypen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-197">Use <xref:System.IO.BinaryReader> for reading primitive data types.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="brotliStream.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-198">Das Array, das zum Speichern von dekomprimierten Bytes verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="78dbb-198">The array used to store decompressed bytes.</span></span></param>
        <param name="offset"><span data-ttu-id="78dbb-199">Das Byteoffset in <paramref name="buffer" />, an dem die gelesenen Bytes platziert werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-199">The byte offset in <paramref name="buffer" /> at which the read bytes will be placed.</span></span></param>
        <param name="count"><span data-ttu-id="78dbb-200">Die maximale Anzahl der zu lesenden dekomprimierten Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-200">The maximum number of decompressed bytes to read.</span></span></param>
        <summary><span data-ttu-id="78dbb-201">Liest eine Anzahl von dekomprimierten Bytes in das angegebene Bytearray.</span><span class="sxs-lookup"><span data-stu-id="78dbb-201">Reads a number of decompressed bytes into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="78dbb-202">Die Anzahl der Bytes, die im Bytearray dekomprimiert wurden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-202">The number of bytes that were decompressed into the byte array.</span></span> <span data-ttu-id="78dbb-203">Wenn das Ende des Streams erreicht worden ist, wird 0 oder die Anzahl der gelesenen Bytes zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="78dbb-203">If the end of the stream has been reached, zero or the number of bytes read is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78dbb-204"><paramref name="buffer" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="78dbb-204"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78dbb-205">Die <see cref="T:System.IO.Compression.CompressionMode" />-Wert lautete <see langword="Compress" />, als das Objekt erstellt wurde, oder es gibt bereits einen aktiven asynchronen Vorgang für diesen Stream.</span><span class="sxs-lookup"><span data-stu-id="78dbb-205">The <see cref="T:System.IO.Compression.CompressionMode" /> value was <see langword="Compress" /> when the object was created, or there is already an active asynchronous operation on this stream.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="78dbb-206"><paramref name="offset" /> oder <paramref name="count" /> ist kleiner als 0.</span><span class="sxs-lookup"><span data-stu-id="78dbb-206"><paramref name="offset" /> or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78dbb-207">Die Länge von <paramref name="buffer" /> abzüglich des Indexausgangspunkts ist kleiner als <paramref name="count" />.</span><span class="sxs-lookup"><span data-stu-id="78dbb-207">The <paramref name="buffer" /> length minus the index starting point is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.IO.InvalidDataException"><span data-ttu-id="78dbb-208">Die Daten haben ein ungültiges Format.</span><span class="sxs-lookup"><span data-stu-id="78dbb-208">The data is in an invalid format.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="78dbb-209">Der zugrunde liegende Stream ist NULL oder geschlossen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-209">The underlying stream is null or closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (Memory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(valuetype System.Memory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : Memory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="brotliStream.ReadAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-210">Der Bereich im Arbeitsspeicher, in den die Daten geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-210">The region of memory to write the data into.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="78dbb-211">Das Token zum Überwachen von Abbruchanforderungen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-211">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="78dbb-212">Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</span><span class="sxs-lookup"><span data-stu-id="78dbb-212">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="78dbb-213">Liest eine Folge von Bytes asynchron aus dem aktuellen Brotli-Datenstrom, schreibt diese in einen Bytespeicherbereich, erhöht die Position im Brotli-Datenstrom um die Anzahl der gelesenen Bytes und überwacht Abbruchsanforderungen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-213">Asynchronously reads a sequence of bytes from the current Brotli stream, writes them to a byte memory range, advances the position within the Brotli stream by the number of bytes read, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="78dbb-214">Eine Aufgabe, die den asynchronen Lesevorgang darstellt, der die Gesamtanzahl der in den Puffer gelesenen Bytes umschließt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-214">A task that represents the asynchronous read operation, which wraps the total number of bytes read into the buffer.</span></span> <span data-ttu-id="78dbb-215">Der Ergebniswert kann geringer als die Anzahl der im Puffer zugeordneten Bytes sein, wenn diese Anzahl an Bytes derzeit nicht verfügbar ist, oder er kann 0 (null) sein, wenn das Ende des Brotli-Datenstroms erreicht ist.</span><span class="sxs-lookup"><span data-stu-id="78dbb-215">The result value can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or it can be 0 (zero) if the end of the Brotli stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="78dbb-216">Mit der `ReadAsync`-Methode können Sie ressourcenintensive e/a-Vorgänge durchführen, ohne den Haupt Thread zu blockieren.</span><span class="sxs-lookup"><span data-stu-id="78dbb-216">The `ReadAsync` method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="78dbb-217">Diese Überlegungen zur Leistung sind insbesondere in einer [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] -App oder [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] -App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-217">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="78dbb-218">Die Async-Methoden werden in Visual Basic und C#zusammen mit den Schlüsselwörtern `async` und `await` verwendet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-218">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>

<span data-ttu-id="78dbb-219">Verwenden Sie die <xref:System.IO.Compression.BrotliStream.CanRead%2A>-Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Lesevorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-219">Use the <xref:System.IO.Compression.BrotliStream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>

<span data-ttu-id="78dbb-220">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen ist, enthält die zurückgegebene Aufgabe den <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType>-Wert für die Eigenschaft <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="78dbb-220">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType> value for the <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType> property.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="brotliStream.ReadAsync (buffer, offset, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-221">Der Puffer, in den die Daten geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-221">The buffer to write the data into.</span></span></param>
        <param name="offset"><span data-ttu-id="78dbb-222">Der Byteoffset in <paramref name="buffer" />, ab dem Daten aus dem Brotli-Datenstrom geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-222">The byte offset in <paramref name="buffer" /> at which to begin writing data from the Brotli stream.</span></span></param>
        <param name="count"><span data-ttu-id="78dbb-223">Die maximale Anzahl der zu lesenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-223">The maximum number of bytes to read.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="78dbb-224">Das Token zum Überwachen von Abbruchanforderungen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-224">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="78dbb-225">Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</span><span class="sxs-lookup"><span data-stu-id="78dbb-225">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="78dbb-226">Liest eine Folge von Bytes asynchron aus dem aktuellen Brotli-Datenstrom, schreibt diese beim angegebenen Index beginnend in ein Bytearray, erhöht die Position im Brotli-Datenstrom um die Anzahl der gelesenen Bytes und überwacht Abbruchsanforderungen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-226">Asynchronously reads a sequence of bytes from the current Brotli stream, writes them to a byte array starting at a specified index, advances the position within the Brotli stream by the number of bytes read, and monitors cancellation requests.</span></span></summary>
        <returns><span data-ttu-id="78dbb-227">Eine Aufgabe, die den asynchronen Lesevorgang darstellt, der die Gesamtanzahl der in <paramref name="buffer" /> gelesenen Bytes umschließt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-227">A task that represents the asynchronous read operation, which wraps the total number of bytes read into the <paramref name="buffer" />.</span></span> <span data-ttu-id="78dbb-228">Der Ergebniswert kann niedriger als die Anzahl der angeforderten Bytes sein, wenn die Anzahl an derzeit verfügbaren Bytes kleiner ist als die angeforderte Anzahl, oder sie kann 0 (null) sein, wenn das Ende des Brotli-Datenstroms erreicht ist.</span><span class="sxs-lookup"><span data-stu-id="78dbb-228">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the Brotli stream has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Remarks

<span data-ttu-id="78dbb-229">Mit der `ReadAsync`-Methode können Sie ressourcenintensive e/a-Vorgänge durchführen, ohne den Haupt Thread zu blockieren.</span><span class="sxs-lookup"><span data-stu-id="78dbb-229">The `ReadAsync` method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="78dbb-230">Diese Überlegungen zur Leistung sind insbesondere in einer [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] -App oder [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] -App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-230">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="78dbb-231">Die Async-Methoden werden in Visual Basic und C#zusammen mit den Schlüsselwörtern `async` und `await` verwendet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-231">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>

<span data-ttu-id="78dbb-232">Verwenden Sie die <xref:System.IO.Compression.BrotliStream.CanRead%2A>-Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Lesevorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-232">Use the <xref:System.IO.Compression.BrotliStream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>

<span data-ttu-id="78dbb-233">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen ist, enthält die zurückgegebene Aufgabe den <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType>-Wert für die Eigenschaft <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="78dbb-233">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType> value for the <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType> property.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="brotliStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="78dbb-234">Die Position im Stream.</span><span class="sxs-lookup"><span data-stu-id="78dbb-234">The location in the stream.</span></span></param>
        <param name="origin"><span data-ttu-id="78dbb-235">Einer der <see cref="T:System.IO.SeekOrigin" />-Werte.</span><span class="sxs-lookup"><span data-stu-id="78dbb-235">One of the <see cref="T:System.IO.SeekOrigin" /> values.</span></span></param>
        <summary><span data-ttu-id="78dbb-236">Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</span><span class="sxs-lookup"><span data-stu-id="78dbb-236">This property is not supported and always throws a <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="78dbb-237">Ein Long-Wert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-237">A long value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="78dbb-238">Diese Eigenschaft wird für diesen Stream nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-238">This property is not supported on this stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="brotliStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="78dbb-239">Die Länge des Streams.</span><span class="sxs-lookup"><span data-stu-id="78dbb-239">The length of the stream.</span></span></param>
        <summary><span data-ttu-id="78dbb-240">Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</span><span class="sxs-lookup"><span data-stu-id="78dbb-240">This property is not supported and always throws a <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="brotliStream.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-241">Ein Bereich im Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="78dbb-241">A region of memory.</span></span> <span data-ttu-id="78dbb-242">Diese Methode kopiert den Inhalt dieses Bereichs in den aktuellen Brotli-Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="78dbb-242">This method copies the contents of this region to the current Brotli stream.</span></span></param>
        <summary><span data-ttu-id="78dbb-243">Schreibt eine Bytesequenz aus einer schreibgeschützten Bytespanne in den aktuellen Brotli-Datenstrom und erhöht die aktuelle Position in diesem Brotli-Datenstrom um die Anzahl der geschriebenen Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-243">Writes a sequence of bytes to the current Brotli stream from a read-only byte span and advances the current position within this Brotli stream by the number of bytes written.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="78dbb-244">Verwenden Sie die <xref:System.IO.Compression.BrotliStream.CanWrite%2A>-Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-244">Use the <xref:System.IO.Compression.BrotliStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="78dbb-245">Verwenden Sie die <xref:System.IO.Compression.BrotliStream.WriteAsync%2A>-Methode, um asynchron in den aktuellen Stream zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="78dbb-245">Use the <xref:System.IO.Compression.BrotliStream.WriteAsync%2A> method to write asynchronously to the current stream.</span></span>

<span data-ttu-id="78dbb-246">Wenn der Schreibvorgang erfolgreich ist, wird die Position im brotli-Stream um die Anzahl der geschriebenen Bytes fortgesetzt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-246">If the write operation is successful, the position within the Brotli stream advances by the number of bytes written.</span></span> <span data-ttu-id="78dbb-247">Wenn eine Ausnahme auftritt, bleibt die Position im brotli-Stream unverändert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-247">If an exception occurs, the position within the Brotli stream remains unchanged.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="brotliStream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-248">Der Puffer, der die zu komprimierenden Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="78dbb-248">The buffer containing the data to compress.</span></span></param>
        <param name="offset"><span data-ttu-id="78dbb-249">Das Byteoffset in <paramref name="array" />, aus dem die Bytes gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-249">The byte offset in <paramref name="array" /> from which the bytes will be read.</span></span></param>
        <param name="count"><span data-ttu-id="78dbb-250">Die maximale Anzahl der zu schreibenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-250">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="78dbb-251">Schreibt komprimierte Bytes aus dem angegebenen Bytearray in den zugrunde liegenden Stream.</span><span class="sxs-lookup"><span data-stu-id="78dbb-251">Writes compressed bytes to the underlying stream from the specified byte array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="78dbb-252">Der Schreibvorgang kann nicht ausgeführt werden, da der Stream geschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="78dbb-252">The write operation cannot be performed because the stream is closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask WriteAsync (ReadOnlyMemory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask WriteAsync(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : ReadOnlyMemory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="brotliStream.WriteAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-253">Der Speicherbereich, aus dem Daten geschrieben werden sollen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-253">The memory region to write data from.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="78dbb-254">Das Token zum Überwachen von Abbruchanforderungen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-254">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="78dbb-255">Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</span><span class="sxs-lookup"><span data-stu-id="78dbb-255">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="78dbb-256">Schreibt komprimierte Bytes aus dem angegebenen Bytespeicherbereich asynchron in den zugrunde liegenden Brotli-Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="78dbb-256">Asynchronously writes compressed bytes to the underlying Brotli stream from the specified byte memory range.</span></span></summary>
        <returns><span data-ttu-id="78dbb-257">Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-257">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="78dbb-258">Mit der `WriteAsync`-Methode können Sie ressourcenintensive e/a-Vorgänge durchführen, ohne den Haupt Thread zu blockieren.</span><span class="sxs-lookup"><span data-stu-id="78dbb-258">The `WriteAsync` method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="78dbb-259">Diese Überlegungen zur Leistung sind insbesondere in einer [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] -App oder [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] -App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-259">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="78dbb-260">Die Async-Methoden werden in Visual Basic und C#zusammen mit den Schlüsselwörtern `async` und `await` verwendet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-260">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>

<span data-ttu-id="78dbb-261">Verwenden Sie die <xref:System.IO.Compression.BrotliStream.CanWrite%2A>-Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-261">Use the <xref:System.IO.Compression.BrotliStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>

<span data-ttu-id="78dbb-262">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen ist, enthält die zurückgegebene Aufgabe den <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType>-Wert für die Eigenschaft <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="78dbb-262">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType> value for the <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType> property.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.BrotliStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="brotliStream.WriteAsync (buffer, offset, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression.Brotli</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="78dbb-263">Der Puffer, der die zu komprimierenden Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="78dbb-263">The buffer that contains the data to compress.</span></span></param>
        <param name="offset"><span data-ttu-id="78dbb-264">Der nullbasierte Byteoffset in <paramref name="buffer" />, ab dem Bytes in den Brotli-Datenstrom kopiert werden.</span><span class="sxs-lookup"><span data-stu-id="78dbb-264">The zero-based byte offset in <paramref name="buffer" /> from which to begin copying bytes to the Brotli stream.</span></span></param>
        <param name="count"><span data-ttu-id="78dbb-265">Die maximale Anzahl der zu schreibenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="78dbb-265">The maximum number of bytes to write.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="78dbb-266">Das Token zum Überwachen von Abbruchanforderungen.</span><span class="sxs-lookup"><span data-stu-id="78dbb-266">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="78dbb-267">Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</span><span class="sxs-lookup"><span data-stu-id="78dbb-267">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="78dbb-268">Schreibt komprimierte Bytes aus dem angegebenen Bytearray asynchron in den zugrunde liegenden Brotli-Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="78dbb-268">Asynchronously writes compressed bytes to the underlying Brotli stream from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="78dbb-269">Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-269">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="78dbb-270">Mit der `WriteAsync`-Methode können Sie ressourcenintensive e/a-Vorgänge durchführen, ohne den Haupt Thread zu blockieren.</span><span class="sxs-lookup"><span data-stu-id="78dbb-270">The `WriteAsync` method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="78dbb-271">Diese Überlegungen zur Leistung sind insbesondere in einer [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] -App oder [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] -App wichtig, bei der ein zeitaufwendiger Streamvorgang den UI-Thread blockieren kann und es dann den Anschein hat, dass Ihre App nicht funktioniert.</span><span class="sxs-lookup"><span data-stu-id="78dbb-271">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="78dbb-272">Die Async-Methoden werden in Visual Basic und C#zusammen mit den Schlüsselwörtern `async` und `await` verwendet.</span><span class="sxs-lookup"><span data-stu-id="78dbb-272">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>

<span data-ttu-id="78dbb-273">Verwenden Sie die <xref:System.IO.Compression.BrotliStream.CanWrite%2A>-Eigenschaft, um zu bestimmen, ob die aktuelle Instanz Schreibvorgänge unterstützt.</span><span class="sxs-lookup"><span data-stu-id="78dbb-273">Use the <xref:System.IO.Compression.BrotliStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>

<span data-ttu-id="78dbb-274">Wenn der Vorgang abgebrochen wird, bevor er abgeschlossen ist, enthält die zurückgegebene Aufgabe den <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType>-Wert für die Eigenschaft <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="78dbb-274">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType> value for the <xref:System.Threading.Tasks.Task.Status?displayProperty=nameWithType> property.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IExpressionEditorInstance" FullName="System.Activities.Presentation.View.IExpressionEditorInstance">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4453c85fdb38fe8729f9151748abb790e5b98a95" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IExpressionEditorInstance" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExpressionEditorInstance" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.View.IExpressionEditorInstance" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExpressionEditorInstance" />
  <TypeSignature Language="C++ CLI" Value="public interface class IExpressionEditorInstance" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="07f3b-101">Stellt eine Ausdrucks-Editor-Instanz dar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07f3b-101">Represents an expression editor instance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07f3b-102">Eine ausführliche Beschreibung einer Ausdrucks-Editor-Instanz finden Sie unter <xref:System.Activities.Presentation.View.IExpressionEditorService>.</span><span class="sxs-lookup"><span data-stu-id="07f3b-102">For a detailed description of an expression editor instance, see <xref:System.Activities.Presentation.View.IExpressionEditorService>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AcceptsReturn">
      <MemberSignature Language="C#" Value="public bool AcceptsReturn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsReturn" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsReturn" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsReturn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsReturn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-103">Ruft einen Wert ab, der angibt, ob die Ausdrucks-Editor-Instanz die EINGABETASTE akzeptiert, oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-103">Gets or sets a value that indicates whether the expression editor instance accepts the RETURN key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-104">
            <see langword="true" />, wenn der Ausdrucks-Editor die EINGABETASTE akzeptiert; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-104">
              <see langword="true" /> if the expression editor accepts the RETURN key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-105">Ruft einen Wert ab, der angibt, ob die Ausdrucks-Editor-Instanz die TAB-TASTE akzeptiert, oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-105">Gets or sets a value that indicates whether the expression editor instance accepts the TAB key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-106">
            <see langword="true" />, wenn der Ausdrucks-Editor die TABULATORTASTE akzeptiert; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-106">
              <see langword="true" /> if the expression editor accepts the TAB key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCompleteWord">
      <MemberSignature Language="C#" Value="public bool CanCompleteWord ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCompleteWord() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCompleteWord" />
      <MemberSignature Language="VB.NET" Value="Public Function CanCompleteWord () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanCompleteWord();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-107">Ruft einen booleschen Wert ab, der angibt, ob die Ausdrucks-Editor-Instanz die Zeichenfolge vervollständigen kann, die vom Benutzer eingegeben wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-107">Gets a Boolean value that indicates whether the expression editor instance can complete the string being typed by the user.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-108">Gibt einen <see cref="T:System.Boolean" /> auf festgelegten <see langword="true" /> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-108">Returns a <see cref="T:System.Boolean" /> set to <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCopy">
      <MemberSignature Language="C#" Value="public bool CanCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCopy" />
      <MemberSignature Language="VB.NET" Value="Public Function CanCopy () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanCopy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-109">Ruft einen booleschen Wert ab, der angibt, ob die Ausdrucks-Editor-Instanz geschlossen werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-109">Gets a Boolean value that indicates whether the expression editor instance can be closed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-110">
            <see langword="true" />, wenn die Ausdrucks-Editor-Instanz geschlossen werden kann; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-110">
              <see langword="true" /> if the expression editor instance can be closed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCut">
      <MemberSignature Language="C#" Value="public bool CanCut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanCut" />
      <MemberSignature Language="VB.NET" Value="Public Function CanCut () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanCut();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-111">Ruft einen booleschen Wert ab, der angibt, ob der Ausdruck ausgeschnitten werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-111">Gets a Boolean value that indicates whether the expression can be cut.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-112">
            <see langword="true" />, wenn der Ausdruck ausgeschnitten werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-112">
              <see langword="true" /> if the expression can be cut; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDecreaseFilterLevel">
      <MemberSignature Language="C#" Value="public bool CanDecreaseFilterLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanDecreaseFilterLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanDecreaseFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function CanDecreaseFilterLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanDecreaseFilterLevel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-113">Gibt einen Wert zurück, der angibt, ob beim Verwenden von IntelliSense-Filtern die Filterebene verringert werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-113">Returns a value that indicates whether the filter level can be decreased when using Intellisense filtering.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-114">
            <see langword="true" />, wenn die Filterebene verringert werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-114">
              <see langword="true" /> if the filter level can be decreased; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGlobalIntellisense">
      <MemberSignature Language="C#" Value="public bool CanGlobalIntellisense ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanGlobalIntellisense() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanGlobalIntellisense" />
      <MemberSignature Language="VB.NET" Value="Public Function CanGlobalIntellisense () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanGlobalIntellisense();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-115">Ruft einen booleschen Wert ab, der angibt, ob die Ausdrucks-Editor-Instanz globale IntelliSense-Funktionen für den Ausdruck abrufen kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-115">Gets a Boolean value that indicates whether the expression editor instance can retrieve global IntelliSense on the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-116">Gibt einen <see cref="T:System.Boolean" /> auf festgelegten <see langword="true" /> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-116">Returns a <see cref="T:System.Boolean" /> set to <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanIncreaseFilterLevel">
      <MemberSignature Language="C#" Value="public bool CanIncreaseFilterLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanIncreaseFilterLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanIncreaseFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function CanIncreaseFilterLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanIncreaseFilterLevel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-117">Gibt einen Wert zurück, der angibt, ob beim Verwenden von IntelliSense-Filtern die Filterebene erhöht werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-117">Returns a value that indicates whether the filter level can be increased when using Intellisense filtering.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-118">
            <see langword="true" />, wenn die Filterebene erhöht werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-118">
              <see langword="true" /> if the filter level can be increased; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanParameterInfo">
      <MemberSignature Language="C#" Value="public bool CanParameterInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanParameterInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanParameterInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CanParameterInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanParameterInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-119">Ruft einen booleschen Wert ab, der angibt, ob die Ausdrucks-Editor-Instanz Parameterinformationen zum Ausdruck abrufen kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-119">Gets a Boolean value that indicates whether the expression editor instance can retrieve parameter information on the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-120">Gibt einen <see cref="T:System.Boolean" /> auf festgelegten <see langword="true" /> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-120">Returns a <see cref="T:System.Boolean" /> set to <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPaste">
      <MemberSignature Language="C#" Value="public bool CanPaste ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanPaste() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanPaste" />
      <MemberSignature Language="VB.NET" Value="Public Function CanPaste () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanPaste();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-121">Ruft einen booleschen Wert ab, der angibt, ob der Ausdruck eingefügt werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-121">Gets a Boolean value that indicates whether the expression can be pasted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-122">
            <see langword="true" />, wenn der Ausdruck eingefügt werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-122">
              <see langword="true" /> if the expression can be pasted; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanQuickInfo">
      <MemberSignature Language="C#" Value="public bool CanQuickInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanQuickInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanQuickInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CanQuickInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanQuickInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-123">Ruft einen booleschen Wert ab, der angibt, ob die Ausdrucks-Editor-Instanz Typinformationen abrufen kann, die in einer IntelliSense-QuickInfo angezeigt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-123">Gets a Boolean value that indicates whether the expression editor instance can retrieve type information to be shown in an IntelliSense quick info tool tip.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-124">Gibt einen <see cref="T:System.Boolean" /> auf festgelegten <see langword="true" /> zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-124">Returns a <see cref="T:System.Boolean" /> set to <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRedo">
      <MemberSignature Language="C#" Value="public bool CanRedo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRedo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanRedo" />
      <MemberSignature Language="VB.NET" Value="Public Function CanRedo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanRedo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-125">Ruft einen booleschen Wert ab, der angibt, ob das System den Vorgang wiederholen kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-125">Gets a Boolean value that indicates whether the system can redo the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-126">
            <see langword="true" />, wenn das System den Vorgang wiederholen kann; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-126">
              <see langword="true" /> if the system can redo the operation; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public Function CanUndo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanUndo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-127">Ruft einen booleschen Wert ab, der angibt, ob das System den Vorgang rückgängig machen kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-127">Gets a Boolean value that indicates whether the system can undo the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-128">
            <see langword="true" />, wenn das System den Vorgang nicht rückgängig machen kann; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-128">
              <see langword="true" /> if the system can undo the operation; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="public void ClearSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.ClearSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-129">Hebt die Auswahl in der Editor-Instanz auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-129">Clears the selection in the editor instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-130">Schließt und löscht die Editorelemente endgültig.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-130">Closes and purges the editor items.</span>
          </span>
          <span data-ttu-id="07f3b-131">Dadurch wird die bestimmte Ausdrucks-Editor-Instanz geschlossen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-131">This will close the specific expression editor instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="event EventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.View.IExpressionEditorInstance.Closing" />
      <MemberSignature Language="VB.NET" Value="Event Closing As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-132">Tritt auf, wenn die Ausdrucks-Editor-Instanz geschlossen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-132">Occurs when the expression editor instance is closing.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompleteWord">
      <MemberSignature Language="C#" Value="public bool CompleteWord ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CompleteWord() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.CompleteWord" />
      <MemberSignature Language="VB.NET" Value="Public Function CompleteWord () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CompleteWord();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-133">Bestimmt, ob die Ausdrucks-Editor-Instanz eine Liste von Vervollständigungen für den vom Benutzer eingegebene Wortteil bereitstellen kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-133">Determines whether the expression editor instance can provide a list of completions for the partial word typed by the user.</span>
          </span>
          <span data-ttu-id="07f3b-134">Dem Benutzer können z. B. Member-, Argument- und Methodennamen gezeigt werden, um ihm dabei zu helfen, das eingegebene Wort zu vervollständigen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-134">For example, member, argument, and method names can be shown to the user in an attempt to help them complete the word they are typing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-135">
            <see langword="true" />, wenn diese Methode erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-135">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public bool Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-136">Kopiert den aktiven Ausdruck.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-136">Copies the active expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-137">
            <see langword="true" />, wenn der Kopiervorgang erfolgreich war; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-137">
              <see langword="true" /> if the copy is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cut">
      <MemberSignature Language="C#" Value="public bool Cut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Cut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Cut" />
      <MemberSignature Language="VB.NET" Value="Public Function Cut () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cut();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-138">Schneidet den aktiven Ausdruck aus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-138">Cuts the active expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-139">
            <see langword="true" />, wenn der Ausschneidevorgang erfolgreich war; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-139">
              <see langword="true" /> if the cut is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecreaseFilterLevel">
      <MemberSignature Language="C#" Value="public bool DecreaseFilterLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DecreaseFilterLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.DecreaseFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function DecreaseFilterLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DecreaseFilterLevel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-140">Verringert die Filterebene, um alle Elemente in der IntelliSense-Filterliste anzuzeigen, und gibt einen Wert zurück, der angibt, ob dieser Vorgang erfolgreich war.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-140">Decreases the filter level to show all items in the Intellisense filter list and returns a value that indicates whether this operation was successful.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-141">
            <see langword="true" />, wenn diese Methode erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-141">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-142">Legt den Fokus auf die Editor-Instanz fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-142">Sets focus on the editor instance.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommittedText">
      <MemberSignature Language="C#" Value="public string GetCommittedText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCommittedText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.GetCommittedText" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCommittedText () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCommittedText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-143">Ruft den Text ab, der verwendet wird, um einen Ausdruck zu generieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-143">Gets the text used to generate an expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-144">Gibt eine <see cref="T:System.String" /> zurück, die den Text enthält, der verwendet wurde, um einen Ausdruck zu generieren.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-144">Returns a <see cref="T:System.String" /> that contains the text used to generate an expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIntellisense">
      <MemberSignature Language="C#" Value="public bool GlobalIntellisense ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalIntellisense() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.GlobalIntellisense" />
      <MemberSignature Language="VB.NET" Value="Public Function GlobalIntellisense () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalIntellisense();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-145">Ruft globale IntelliSense-Funktionen zum Ausdruck im Ausdrucks-Editor ab und gibt einen Wert zurück, der angibt, ob dieser Vorgang erfolgreich war.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-145">Retrieves global IntelliSense on the expression in the expression editor and returns a value that indicates whether this operation was successful.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-146">
            <see langword="true" />, wenn diese Methode erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-146">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotAggregateFocus">
      <MemberSignature Language="C#" Value="event EventHandler GotAggregateFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GotAggregateFocus" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.View.IExpressionEditorInstance.GotAggregateFocus" />
      <MemberSignature Language="VB.NET" Value="Event GotAggregateFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ GotAggregateFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-147">Tritt auf, wenn die Ausdrucks-Editor-Instanz den aggregierten Fokus hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-147">Occurs when the expression editor instance has aggregate focus.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAggregateFocus">
      <MemberSignature Language="C#" Value="public bool HasAggregateFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAggregateFocus" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.HasAggregateFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAggregateFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAggregateFocus { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-148">Ruft einen Wert ab, der angibt, ob die Instanz den aggregierten Fokus hat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-148">Gets a value that indicates whether the instance has aggregate focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-149">
            <see langword="true" />, wenn die Editor-Instanz den aggregierten Fokus hat; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-149">
              <see langword="true" /> if the editor instance has aggregate focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07f3b-150">Die Instanz hat den aggregierten Fokus, wenn das <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> oder ein beliebiges anderes Steuerelement, das von <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> erstellt wurde, den Fokus besitzt.</span><span class="sxs-lookup"><span data-stu-id="07f3b-150">The instance has aggregate focus when the <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> or any other control created by the <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> has focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollBarVisibility">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ScrollBarVisibility HorizontalScrollBarVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ScrollBarVisibility HorizontalScrollBarVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.HorizontalScrollBarVisibility" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollBarVisibility As ScrollBarVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ScrollBarVisibility HorizontalScrollBarVisibility { System::Windows::Controls::ScrollBarVisibility get(); void set(System::Windows::Controls::ScrollBarVisibility value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ScrollBarVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-151">Ruft einen Wert ab, der angibt, ob die horizontale Bildlaufleiste sichtbar ist, oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-151">Gets or sets a value that indicates whether the horizontal scrollbar is visible.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-152">Gibt <see cref="T:System.Windows.Controls.ScrollBarVisibility" />zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-152">Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostControl">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Control HostControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.Control HostControl" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::Control ^ HostControl { System::Windows::Controls::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-153">Ruft eine <see cref="T:System.Windows.Controls.Control" />-Instanz ab, die im <see langword="ExpressionTextBox" /> angezeigt werden kann.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-153">Gets a <see cref="T:System.Windows.Controls.Control" /> instance that can be used to display in the <see langword="ExpressionTextBox" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-154">Gibt <see cref="T:System.Windows.Controls.Control" />zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-154">Returns <see cref="T:System.Windows.Controls.Control" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncreaseFilterLevel">
      <MemberSignature Language="C#" Value="public bool IncreaseFilterLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IncreaseFilterLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.IncreaseFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Function IncreaseFilterLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IncreaseFilterLevel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-155">Erhöht die Filterebene, um allgemeine Elemente in der IntelliSense-Filterliste anzuzeigen, und gibt einen Wert zurück, der angibt, ob dieser Vorgang erfolgreich war.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-155">Increases the filter level to show common items in the Intellisense filter list and returns a value that indicates whether this operation was successful.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-156">
            <see langword="true" />, wenn diese Methode erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-156">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LostAggregateFocus">
      <MemberSignature Language="C#" Value="event EventHandler LostAggregateFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LostAggregateFocus" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.View.IExpressionEditorInstance.LostAggregateFocus" />
      <MemberSignature Language="VB.NET" Value="Event LostAggregateFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LostAggregateFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-157">Stellt ein Ereignis dar, das ausgelöst wird, wenn die Ausdrucks-Editor-Instanz den aggregierten Fokus verliert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-157">Represents an event that is raised when the expression editor instance loses aggregate focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07f3b-158">Die Instanz verliert den aggregierten Fokus, wenn das <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> und jedes Steuerelement, das von <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> erstellt wurde, den Fokus verlieren.</span><span class="sxs-lookup"><span data-stu-id="07f3b-158">The instance loses aggregate focus when the <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> and every control created by the <xref:System.Activities.Presentation.View.IExpressionEditorInstance.HostControl%2A> loose focus.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLines">
      <MemberSignature Language="C#" Value="public int MaxLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLines" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.MaxLines" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLines As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLines { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-159">Ruft die maximale Anzahl von Textzeilen ab, die vom <see langword="ExpressionTextBox" />-Steuerelement angezeigt werden sollen, oder legt sie fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-159">Gets or sets the maximum number of lines of text to be displayed by the <see langword="ExpressionTextBox" /> control.</span>
          </span>
          <span data-ttu-id="07f3b-160">Diese Eigenschaft legt die Höhe des <see langword="ExpressionTextBox" />-Steuerelements implizit fest, wenn es zum Einpassen vergrößert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-160">This property implicitly sets the height of the <see langword="ExpressionTextBox" /> control when growing to fit.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-161">Gibt einen <see cref="T:System.Int32" /> zurück, der die maximale Anzahl von Textzeilen enthält, die vom <see langword="ExpressionTextBox" />-Steuerelement angezeigt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-161">Returns an <see cref="T:System.Int32" /> that containing the maximum number of lines of text to be displayed by the <see langword="ExpressionTextBox" /> control.</span>
          </span>
        </value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MinLines">
      <MemberSignature Language="C#" Value="public int MinLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinLines" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.MinLines" />
      <MemberSignature Language="VB.NET" Value="Public Property MinLines As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinLines { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-162">Ruft die minimale Anzahl von Textzeilen ab, die vom <see langword="ExpressionTextBox" />-Steuerelement angezeigt werden sollen, oder legt sie fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-162">Gets or sets the minimum number of lines of text to be displayed by the <see langword="ExpressionTextBox" /> control.</span>
          </span>
          <span data-ttu-id="07f3b-163">Diese Eigenschaft legt die Höhe des <see langword="ExpressionTextBox" />-Steuerelements implizit fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-163">This property implicitly sets the height of the <see langword="ExpressionTextBox" /> control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-164">Gibt eine <see cref="T:System.Int32" /> , die die minimale Anzahl von Zeilen durch anzuzeigenden Text enthält die <see langword="ExpressionTextBox" /> Steuerelement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-164">Returns an <see cref="T:System.Int32" /> that contains the minimum number of lines of text to be displayed by the <see langword="ExpressionTextBox" /> control.</span>
          </span>
        </value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterInfo">
      <MemberSignature Language="C#" Value="public bool ParameterInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParameterInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.ParameterInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function ParameterInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ParameterInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-165">Ruft Parameterinformationen zum Ausdruck im Ausdrucks-Editor ab und gibt einen Wert zurück, der angibt, ob dieser Vorgang erfolgreich war.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-165">Retrieves parameter information on the expression in the expression editor and returns a value that indicates whether this operation was successful.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-166">
            <see langword="true" />, wenn diese Methode erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-166">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public bool Paste ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Paste() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Paste" />
      <MemberSignature Language="VB.NET" Value="Public Function Paste () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Paste();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-167">Fügt den aktiven Ausdruck ein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-167">Pastes the active expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-168">
            <see langword="true" />, wenn das Einfügen erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-168">
              <see langword="true" /> if the paste is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuickInfo">
      <MemberSignature Language="C#" Value="public bool QuickInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool QuickInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.QuickInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function QuickInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool QuickInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-169">Bestimmt, ob Typinformationen in einer IntelliSense-QuickInfo angezeigt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-169">Determines whether type information to be shown in an IntelliSense quick info tool tip.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-170">
            <see langword="true" />, wenn diese Methode erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-170">
              <see langword="true" /> if this method succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Redo">
      <MemberSignature Language="C#" Value="public bool Redo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Redo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Redo" />
      <MemberSignature Language="VB.NET" Value="Public Function Redo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Redo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-171">Wendet den letzten Vorgang, der im Editor rückgängig gemacht wurde, erneut an, das heißt, die Auswirkungen des Rückgängigmachens werden umgekehrt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-171">Reapplies the last operation that was undone in the editor, that is, reverse the effects of the undo operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-172">
            <see langword="true" />, wenn das Wiederholen erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-172">
              <see langword="true" /> if the redo is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-173">Ruft den Wert des Texts ab oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-173">Gets or sets the value of the text.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-174">Gibt <see cref="T:System.String" />zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-174">Returns <see cref="T:System.String" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.View.IExpressionEditorInstance.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-175">Stellt ein Ereignis dar, das ausgelöst wird, wenn der Text in einer Ausdrucks-Editor-Instanz geändert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-175">Represents an event that is raised when the text in an expression editor instance is changed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public bool Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.View.IExpressionEditorInstance.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Function Undo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Undo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-176">Macht den letzten Vorgang im Editor rückgängig.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-176">Undoes the last operation in the editor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07f3b-177">
            <see langword="true" />, wenn das Rückgängigmachen erfolgreich ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-177">
              <see langword="true" /> if the undo is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollBarVisibility">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ScrollBarVisibility VerticalScrollBarVisibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ScrollBarVisibility VerticalScrollBarVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.View.IExpressionEditorInstance.VerticalScrollBarVisibility" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalScrollBarVisibility As ScrollBarVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ScrollBarVisibility VerticalScrollBarVisibility { System::Windows::Controls::ScrollBarVisibility get(); void set(System::Windows::Controls::ScrollBarVisibility value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ScrollBarVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07f3b-178">Ruft einen Wert ab, der angibt, ob die vertikale Scrollleiste sichtbar ist, oder legt ihn fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-178">Gets or sets a value that indicates whether the vertical scrollbar is visible.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="07f3b-179">Gibt <see cref="T:System.Windows.Controls.ScrollBarVisibility" />zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07f3b-179">Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
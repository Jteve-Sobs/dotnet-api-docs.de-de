<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Queryable.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59c9380e65a895a3a4c48c8f4493f3434a4b3c9eb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c9380e65a895a3a4c48c8f4493f3434a4b3c9eb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Provides a set of <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) methods for querying data structures that implement <ph id="ph3">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Stellt einen Satz von <ph id="ph1">&lt;see langword="static" /&gt;</ph>-Methoden (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph>-Methoden in Visual Basic) zum Abfragen von Datenstrukturen bereit, die <ph id="ph3">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> implementieren.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The set of methods declared in the <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> class provides an implementation of the standard query operators for querying data sources that implement <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">Der Satz von Methoden deklariert werden, der <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> -Klasse stellt eine Implementierung der Standardabfrageoperatoren zum Abfragen von implementiert Datenquellen, <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The standard query operators are general purpose methods that follow the <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</source>
          <target state="translated">Die Standardabfrageoperatoren sind allgemeine Methoden, die Folgen der <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> Muster und ermöglichen es Ihnen, Durchlauf, Filter- und projektionsvorgänge Vorgänge in einer express. NET-basierte Programmiersprache Ihrer Wahl.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The majority of the methods in this class are defined as extension methods that extend the <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> type.</source>
          <target state="translated">Der Großteil der Methoden in dieser Klasse werden als Erweiterungsmethoden, die Erweiterung definiert die <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> Typ.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>This means they can be called like an instance method on any object that implements <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">Dies bedeutet, sie können aufgerufen werden, wie eine Instanzmethode für jedes Objekt, das implementiert <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>These methods that extend <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> do not perform any querying directly.</source>
          <target state="translated">Diese Methoden, mit denen erweitert <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> nicht direkt Abfragen durchführen.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>Instead, their functionality is to build an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> object, which is an expression tree that represents the cumulative query.</source>
          <target state="translated">Stattdessen wird ihre Funktionalität zum Erstellen einer <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> Objekt, das einer Ausdrucksbaumstruktur dar, das die kumulierte Abfrage darstellt.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The methods then pass the new expression tree to either the <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the input <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">Die Methoden übergeben dann die neue Ausdrucksbaumstruktur entweder die <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode oder die <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> die Eingabemethode <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The method that is called depends on whether the <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> method returns a singleton value, in which case <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is called, or has enumerable results, in which case <ph id="ph3">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is called.</source>
          <target state="translated">Die Methode, die aufgerufen wird, hängt davon ab, ob die <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> Methodenrückgabe Singleton-Wert, in diesem Fall <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> aufgerufen wird, oder aufzählbare Ergebnisse in diesem Fall hat <ph id="ph3">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The actual query execution on the target data is performed by a class that implements <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">Die tatsächliche Ausführung der Abfrage auf die Zieldaten erfolgt durch eine Klasse, die implementiert <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The expectation of any <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> implementation is that the result of executing an expression tree that was constructed by a <ph id="ph2">&lt;xref:System.Linq.Queryable&gt;</ph> standard query operator method is equivalent to the result of calling the corresponding method in the <ph id="ph3">&lt;xref:System.Linq.Enumerable&gt;</ph> class, if the data source were an <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Die Annahme eines beliebigen <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> Implementierung ist, die das Ergebnis der Ausführung einer Ausdrucksbaumstruktur dar, die von der Erstellung einer <ph id="ph2">&lt;xref:System.Linq.Queryable&gt;</ph> Standardabfrageoperator-Operator-Methode entspricht das Ergebnis des Aufrufs der entsprechenden Methode der <ph id="ph3">&lt;xref:System.Linq.Enumerable&gt;</ph> Klasse, wenn die Datenquelle wäre ein <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>In addition to the standard query operator methods that operate on <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> objects, this class also contains a method, <ph id="ph2">&lt;xref:System.Linq.Queryable.AsQueryable%2A&gt;</ph>, which types <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> objects as <ph id="ph4">&lt;xref:System.Linq.IQueryable&gt;</ph> objects.</source>
          <target state="translated">Zusätzlich zu den Standardabfrageoperator-Methoden, die Vorgänge an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> Objekte, die diese Klasse enthält auch eine Methode <ph id="ph2">&lt;xref:System.Linq.Queryable.AsQueryable%2A&gt;</ph>, welche Typen <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> als Objekte <ph id="ph4">&lt;xref:System.Linq.IQueryable&gt;</ph> Objekte.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>A sequence to aggregate over.</source>
          <target state="translated">Eine Sequenz, die aggregiert werden soll.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>An accumulator function to apply to each element.</source>
          <target state="translated">Eine Akkumulatorfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Wendet eine Akkumulatorfunktion auf eine Sequenz an</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The final accumulator value.</source>
          <target state="translated">Der letzte Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The expected behavior is that the specified function, <ph id="ph1">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.</source>
          <target state="translated">Das erwartete Verhalten, die die angegebene Funktion ist <ph id="ph1">`func`</ph>, angewendet wird, um jeden Wert in der Quellsequenz und der akkumulierte Wert zurückgegeben.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The first value in <ph id="ph1">`source`</ph> is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id="ph2">`func`</ph>.</source>
          <target state="translated">Der erste Wert in <ph id="ph1">`source`</ph> wird für den akkumulierten Wert der erste Parameter im entspricht Wert als Ausgangswert verwendet <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</source>
          <target state="translated">Um allgemeine Aggregationsvorgänge zu vereinfachen, enthält der Satz von Standardabfrageoperatoren auch zwei zählen Methoden, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, und vier numerische Aggregationsmethoden, nämlich <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, und <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> to build a sentence from an array of strings.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> zum Erstellen eines Satzes aus einem Array von Zeichenfolgen.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="func" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The type of the accumulator value.</source>
          <target state="translated">Der Typ des Akkumulatorwerts.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>A sequence to aggregate over.</source>
          <target state="translated">Eine Sequenz, die aggregiert werden soll.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The initial accumulator value.</source>
          <target state="translated">Der erste Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>An accumulator function to invoke on each element.</source>
          <target state="translated">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Wendet eine Akkumulatorfunktion auf eine Sequenz an</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The specified seed value is used as the initial accumulator value.</source>
          <target state="translated">Der angegebene Startwert wird als erster Akkumulatorwert verwendet.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The final accumulator value.</source>
          <target state="translated">Der letzte Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The expected behavior is that the specified function, <ph id="ph1">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.</source>
          <target state="translated">Das erwartete Verhalten, die die angegebene Funktion ist <ph id="ph1">`func`</ph>, angewendet wird, um jeden Wert in der Quellsequenz und der akkumulierte Wert zurückgegeben.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The <ph id="ph1">`seed`</ph> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id="ph2">`func`</ph>.</source>
          <target state="translated">Die <ph id="ph1">`seed`</ph> Parameter wird für den akkumulierten Wert der erste Parameter im entspricht Wert als Ausgangswert verwendet <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</source>
          <target state="translated">Um allgemeine Aggregationsvorgänge zu vereinfachen, enthält der Satz von Standardabfrageoperatoren auch zwei zählen Methoden, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, und vier numerische Aggregationsmethoden, nämlich <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, und <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> to apply an accumulator function when a seed value is provided to the function.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> eine Akkumulatorfunktion angewendet, wenn ein Startwert für die Funktion bereitgestellt wird.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="func" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The type of the accumulator value.</source>
          <target state="translated">Der Typ des Akkumulatorwerts.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The type of the resulting value.</source>
          <target state="translated">Der Typ des Ergebniswerts.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>A sequence to aggregate over.</source>
          <target state="translated">Eine Sequenz, die aggregiert werden soll.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The initial accumulator value.</source>
          <target state="translated">Der erste Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>An accumulator function to invoke on each element.</source>
          <target state="translated">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>A function to transform the final accumulator value into the result value.</source>
          <target state="translated">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Wendet eine Akkumulatorfunktion auf eine Sequenz an</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</source>
          <target state="translated">Der angegebene Startwert wird als erster Akkumulatorwert verwendet, und der Ergebniswert wird mit der angegebenen Funktion ausgewählt.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The transformed final accumulator value.</source>
          <target state="translated">Der transformierte letzte Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The expected behavior is that the specified function, <ph id="ph1">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.</source>
          <target state="translated">Das erwartete Verhalten, die die angegebene Funktion ist <ph id="ph1">`func`</ph>, angewendet wird, um jeden Wert in der Quellsequenz und der akkumulierte Wert zurückgegeben.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The <ph id="ph1">`seed`</ph> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id="ph2">`func`</ph>.</source>
          <target state="translated">Die <ph id="ph1">`seed`</ph> Parameter wird für den akkumulierten Wert der erste Parameter im entspricht Wert als Ausgangswert verwendet <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The final accumulated value is passed to <ph id="ph1">`selector`</ph> to obtain the result value.</source>
          <target state="translated">Der letzte akkumulierte Wert übergeben wird, um <ph id="ph1">`selector`</ph> um den Ergebniswert zu erhalten.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</source>
          <target state="translated">Um allgemeine Aggregationsvorgänge zu vereinfachen, enthält der Satz von Standardabfrageoperatoren auch zwei zählen Methoden, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, und vier numerische Aggregationsmethoden, nämlich <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, und <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> to apply an accumulator function and a result selector.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> eine Akkumulatorfunktion und eine Ergebnisauswahl angewendet.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> or <ph id="ph3">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="func" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A sequence whose elements to test for a condition.</source>
          <target state="translated">Eine Sequenz, deren Elemente auf eine Bedingung überprüft werden sollen.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Determines whether all the elements of a sequence satisfy a condition.</source>
          <target state="translated">Bestimmt, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn jedes Element der Quellsequenz im angegebenen Prädikat erfolgreich überprüft wird oder wenn die Sequenz leer ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the <ph id="ph2">`source`</ph> parameter's type.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung von der <ph id="ph2">`source`</ph> Typ des Parameters.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it determines if all the elements in <ph id="ph1">`source`</ph> satisfy the condition in <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Das erwartete Verhalten bestimmt wird, wenn alle Elemente im <ph id="ph1">`source`</ph> erfüllen die Bedingung in <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to determine whether all the elements in a sequence satisfy a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> zu bestimmen, ob alle Elemente in einer Sequenz eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) or a direct call to the <ph id="ph5">&lt;xref:System.Linq.Queryable.Where%2A&gt;</ph> method.</source>
          <target state="translated">Der boolesche Wert, der die <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methodenrückgabe wird im Prädikat in der Regel verwendet eine <ph id="ph2">`where`</ph> -Klausel (<ph id="ph3">`Where`</ph> -Klausel in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) oder ein direkter Aufruf der <ph id="ph5">&lt;xref:System.Linq.Queryable.Where%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following example demonstrates this use of the <ph id="ph1">`All`</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt diese Verwendung von der <ph id="ph1">`All`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Determines whether any element of an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> sequence exists or satisfies a condition.</source>
          <target state="translated">Bestimmt, ob ein Element einer <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>-Sequenz vorhanden ist oder eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>A sequence to check for being empty.</source>
          <target state="translated">Eine Sequenz, für die überprüft werden soll, ob sie leer ist.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>Determines whether a sequence contains any elements.</source>
          <target state="translated">Bestimmt, ob eine Sequenz Elemente enthält.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains any elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Quellsequenz Elemente enthält, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it determines if <ph id="ph1">`source`</ph> contains any elements.</source>
          <target state="translated">Das erwartete Verhalten bestimmt wird, wenn <ph id="ph1">`source`</ph> irgendwelche Elemente enthält.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to determine whether a sequence contains any elements.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> zu bestimmen, ob eine Sequenz Elemente enthält.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) or a direct call to the <ph id="ph5">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method.</source>
          <target state="translated">Der boolesche Wert, der die <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methodenrückgabe wird im Prädikat in der Regel verwendet eine <ph id="ph2">`where`</ph> -Klausel (<ph id="ph3">`Where`</ph> -Klausel in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) oder ein direkter Aufruf der <ph id="ph5">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The following example demonstrates this use of the <ph id="ph1">`Any`</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt diese Verwendung von der <ph id="ph1">`Any`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A sequence whose elements to test for a condition.</source>
          <target state="translated">Eine Sequenz, deren Elemente auf eine Bedingung überprüft werden sollen.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Determines whether any element of a sequence satisfies a condition.</source>
          <target state="translated">Bestimmt, ob ein Element einer Sequenz eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn Elemente der Quellsequenz im angegebenen Prädikat erfolgreich überprüft werden, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it determines if any of the elements of <ph id="ph1">`source`</ph> satisfy the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Das erwartete Verhalten bestimmt wird, wenn keines der Elemente des <ph id="ph1">`source`</ph> von angegebene Bedingung erfüllen <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to determine whether any element in a sequence satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> zu bestimmen, ob ein Element in einer Sequenz eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>A sequence to convert.</source>
          <target state="translated">Eine zu konvertierende Sequenz.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>Converts an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>.</source>
          <target state="translated">Konvertiert einen <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> in einen <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> that represents the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>, das die Eingabesequenz darstellt.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29&gt;</ph> returns it directly.</source>
          <target state="translated">Wenn der Typ des <ph id="ph1">`source`</ph> implementiert <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29&gt;</ph> direkt zurückgegeben.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>Otherwise, it returns an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that executes queries by calling the equivalent query operator methods in <ph id="ph2">&lt;xref:System.Linq.Enumerable&gt;</ph> instead of those in <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph>.</source>
          <target state="translated">Zurückgegeben, andernfalls ein <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> , Abfragen ausführt, durch Aufrufen der entsprechenden Abfrage Standardabfrageoperator-Methoden in <ph id="ph2">&lt;xref:System.Linq.Enumerable&gt;</ph> statt in <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>This method assumes that <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> for some <ph id="ph3">`T`</ph>.</source>
          <target state="translated">Diese Methode setzt voraus, dass <ph id="ph1">`source`</ph> implementiert <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> für einige <ph id="ph3">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>At runtime, the result is of type <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> for the same <ph id="ph2">`T`</ph>.</source>
          <target state="translated">Zur Laufzeit ist das Ergebnis vom Typ <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> für dieselbe <ph id="ph2">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>This method is useful in dynamic scenarios when you do not statically know the type of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Diese Methode ist in dynamischen Szenarios nützlich, wenn Sie den Typ des nicht statisch kennen <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> for some <ph id="ph3">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated">Für einige <ph id="ph1">&lt;paramref name="source" /&gt;</ph> wird <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> von <ph id="ph3">&lt;paramref name="T" /&gt;</ph> nicht implementiert.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence to convert.</source>
          <target state="translated">Eine zu konvertierende Sequenz.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Converts a generic <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to a generic <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Konvertiert ein generisches <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> in ein generisches <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that represents the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die Eingabesequenz darstellt.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> returns it directly.</source>
          <target state="translated">Wenn der Typ des <ph id="ph1">`source`</ph> implementiert <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> direkt zurückgegeben.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, it returns an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that executes queries by calling the equivalent query operator methods in <ph id="ph2">&lt;xref:System.Linq.Enumerable&gt;</ph> instead of those in <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph>.</source>
          <target state="translated">Zurückgegeben, andernfalls ein <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> , Abfragen ausführt, durch Aufrufen der entsprechenden Abfrage Standardabfrageoperator-Methoden in <ph id="ph2">&lt;xref:System.Linq.Enumerable&gt;</ph> statt in <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to convert an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> to an <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Konvertieren einer <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> auf eine <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Computes the average of a sequence of numeric values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von numerischen Werten.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur <ph id="ph2">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur <ph id="ph2">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur <ph id="ph2">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur <ph id="ph2">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur <ph id="ph2">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>A sequence of values that are used to calculate an average.</source>
          <target state="translated">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die <ph id="ph2">&lt;paramref name="source" /&gt;</ph>-Sequenz leer ist oder nur <ph id="ph3">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die <ph id="ph2">&lt;paramref name="source" /&gt;</ph>-Sequenz leer ist oder nur <ph id="ph3">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die <ph id="ph2">&lt;paramref name="source" /&gt;</ph>-Sequenz leer ist oder nur <ph id="ph3">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf die <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die <ph id="ph2">&lt;paramref name="source" /&gt;</ph>-Sequenz leer ist oder nur <ph id="ph3">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die <ph id="ph2">&lt;paramref name="source" /&gt;</ph>-Sequenz leer ist oder nur <ph id="ph3">&lt;see langword="null" /&gt;</ph>-Werte enthält.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf die <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Es wird erwartet, den Durchschnitt der Werte in berechnet <ph id="ph1">`source`</ph> nach dem Aufrufen <ph id="ph2">`selector`</ph> auf jedem Wert.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> zum Berechnen des Durchschnitts <ph id="ph2">&lt;xref:System.String&gt;</ph> Länge in einer Sequenz von Werten des Typs <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The type to convert the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">Der Typ, konvertiert die Elemente eines <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept> an.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> that contains the elements to be converted.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>, das die zu konvertierenden Elemente enthält.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>Converts the elements of an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> to the specified type.</source>
          <target state="translated">Konvertiert die Elemente einer <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> in den angegebenen Typ.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains each element of the source sequence converted to the specified type.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, die jedes in den angegebenen Typ konvertierte Element der Quellsequenz enthält.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The expected behavior is that it converts the values in <ph id="ph1">`source`</ph> to type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass er die Werte in konvertiert <ph id="ph1">`source`</ph> Eingabe <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> to convert objects in a sequence to type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> um Objekte in einer Sequenz in den Typ konvertieren <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>An element in the sequence cannot be cast to type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Ein Element in der Sequenz kann nicht in den Typ <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> umgewandelt werden.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The first sequence to concatenate.</source>
          <target state="translated">Die erste zu verkettende Sequenz.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to concatenate to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verkettet werden soll.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Concatenates two sequences.</source>
          <target state="translated">Verkettet zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the concatenated elements of the two input sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die verketteten Elemente der beiden Eingabesequenzen enthält.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that the elements in <ph id="ph1">`source2`</ph> are concatenated to those of <ph id="ph2">`source1`</ph> to create a new sequence.</source>
          <target state="translated">Das erwartete Verhalten ist, die die Elemente in <ph id="ph1">`source2`</ph> verkettet werden, die von <ph id="ph2">`source1`</ph> zum Erstellen einer neuen Sequenz.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to concatenate two sequences.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> um zwei Sequenzen zu verketten.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Determines whether an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> contains a specified element.</source>
          <target state="translated">Bestimmt, ob ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> ein angegebenes Element enthält.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> in which to locate <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>-Schnittstelle, in der <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The object to locate in the sequence.</source>
          <target state="translated">Das Objekt, das in der Sequenz gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>Determines whether a sequence contains a specified element by using the default equality comparer.</source>
          <target state="translated">Bestimmt mithilfe des Standardgleichheitsvergleichs, ob eine Sequenz ein angegebenes Element enthält</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the input sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Eingabesequenz ein Element mit dem angegebenen Wert enthält, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The expected behavior is that it determines if <ph id="ph1">`source`</ph> contains <ph id="ph2">`item`</ph>.</source>
          <target state="translated">Das erwartete Verhalten bestimmt wird, wenn <ph id="ph1">`source`</ph> enthält <ph id="ph2">`item`</ph>.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> to determine whether a sequence contains a specific element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> zu bestimmen, ob eine Sequenz ein bestimmtes Element enthält.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> in which to locate <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>-Schnittstelle, in der <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The object to locate in the sequence.</source>
          <target state="translated">Das Objekt, das in der Sequenz gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether a sequence contains a specified element by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Bestimmt mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>, ob eine Sequenz ein angegebenes Element enthält</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the input sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Eingabesequenz ein Element mit dem angegebenen Wert enthält, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that it determines if <ph id="ph1">`source`</ph> contains <ph id="ph2">`item`</ph> by using <ph id="ph3">`comparer`</ph> to compare values.</source>
          <target state="translated">Das erwartete Verhalten bestimmt wird, wenn <ph id="ph1">`source`</ph> enthält <ph id="ph2">`item`</ph> mit <ph id="ph3">`comparer`</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Gibt die Anzahl der Elemente in einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die zu zählenden Elemente enthält.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Gibt die Anzahl der Elemente in einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The number of elements in the input sequence.</source>
          <target state="translated">Die Anzahl der Elemente in der Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it counts the number of items in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass die Anzahl der Elemente im gezählt <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to count the elements in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> zum zählen der Elemente in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Elemente in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist größer als <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die zu zählenden Elemente enthält</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the number of elements in the specified sequence that satisfies a condition.</source>
          <target state="translated">Gibt die Anzahl der Elemente in der angegebenen Sequenz zurück, die eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The number of elements in the sequence that satisfies the condition in the predicate function.</source>
          <target state="translated">Die Anzahl von Elementen in der Sequenz, die die Bedingung in der Prädikatfunktion erfüllen.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it counts the number of items in <ph id="ph1">`source`</ph> that satisfy the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass die Anzahl der Elemente im gezählt <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllen <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to count the elements in a sequence that satisfy a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> , die Elemente in einer Sequenz zu zählen, die eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Elemente in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist größer als <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the elements in a sequence or a default valued singleton collection if the sequence is empty.</source>
          <target state="translated">Gibt die Elemente in einer Sequenz zurück, oder eine Standardwert-Singletonauflistung, wenn die Sequenz leer ist.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return a default value for if empty.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, für das ein Standardwert zurückgegeben soll, wenn die Sequenz leer ist.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Gibt die Elemente der angegebenen Sequenz oder den Standardwert des Typparameters in einer Singletonauflistung zurück, wenn die Sequenz leer ist</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see langword="default" /&gt;</ph>(<ph id="ph3">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph4">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph5">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das <ph id="ph2">&lt;see langword="default" /&gt;</ph>(<ph id="ph3">&lt;paramref name="TSource" /&gt;</ph>) enthält, wenn <ph id="ph4">&lt;paramref name="source" /&gt;</ph> leer ist, andernfalls <ph id="ph5">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns <ph id="ph1">`source`</ph> if it is not empty.</source>
          <target state="translated">Das erwartete Verhalten gibt es zurück <ph id="ph1">`source`</ph> , wenn er nicht leer ist.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>Otherwise, it returns an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that contains <ph id="ph2">`default(TSource)`</ph>.</source>
          <target state="translated">Andernfalls gibt es eine <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> enthält <ph id="ph2">`default(TSource)`</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to provide a default value in case the source sequence is empty.</source>
          <target state="translated">Die folgenden Codebeispiele veranschaulichen <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> um einen Standardwert anzugeben, für den Fall, dass die Quellsequenz leer ist.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the specified value for if empty.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, für das der angegebene Wert zurückgegeben soll, wenn die Sequenz leer ist.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The value to return if the sequence is empty.</source>
          <target state="translated">Der Wert, der zurückgegeben werden soll, wenn die Sequenz leer ist.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Gibt die Elemente der angegebenen Sequenz oder den angegebenen Wert in einer Singletonauflistung zurück, wenn die Sequenz leer ist.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> enthält, wenn <ph id="ph3">&lt;paramref name="source" /&gt;</ph> leer ist, andernfalls <ph id="ph4">&lt;paramref name="source" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The expected behavior is that it returns <ph id="ph1">`source`</ph> if it is not empty.</source>
          <target state="translated">Das erwartete Verhalten gibt es zurück <ph id="ph1">`source`</ph> , wenn er nicht leer ist.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>Otherwise, it returns an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that contains <ph id="ph2">`defaultValue`</ph>.</source>
          <target state="translated">Andernfalls gibt es eine <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> enthält <ph id="ph2">`defaultValue`</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The following code example shows a situation in which it is useful to call <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> in a <ph id="ph2">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query.</source>
          <target state="translated">Das folgende Codebeispiel zeigt eine Situation, in denen es sinnvoll ist, rufen Sie <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> in einer <ph id="ph2">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> Abfrage.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>A default value is passed to <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> in this example.</source>
          <target state="translated">Ein Default-Wert übergeben wird, um <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> in diesem Beispiel.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns distinct elements from a sequence.</source>
          <target state="translated">Gibt unterschiedliche Elemente aus einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to remove duplicates from.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem Duplikate entfernt werden sollen.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>Returns distinct elements from a sequence by using the default equality comparer to compare values.</source>
          <target state="translated">Gibt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains distinct elements from <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das unterschiedliche Elemente aus <ph id="ph2">&lt;paramref name="source" /&gt;</ph> enthält.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns an unordered sequence of the unique items in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass eine ungeordnete Sequenz der eindeutigen Elemente in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to return distinct elements from a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> unterschiedliche Elemente aus einer Sequenz zurückgegeben.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to remove duplicates from.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem Duplikate entfernt werden sollen.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Returns distinct elements from a sequence by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Gibt mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains distinct elements from <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das unterschiedliche Elemente aus <ph id="ph2">&lt;paramref name="source" /&gt;</ph> enthält.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that it returns an unordered sequence of the unique items in <ph id="ph1">`source`</ph> by using <ph id="ph2">`comparer`</ph> to compare values.</source>
          <target state="translated">Das erwartete Verhalten ist, dass eine ungeordnete Sequenz der eindeutigen Elemente in zurückgegeben <ph id="ph1">`source`</ph> mit <ph id="ph2">`comparer`</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">Der auf 0 (null) basierende Index des abzurufenden Elements.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence.</source>
          <target state="translated">Gibt das Element an einem angegebenen Index in einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The element at the specified position in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Das Element an der angegebenen Position in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The expected behavior is that it returns the item at position <ph id="ph1">`index`</ph> in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass das Element an der Position zurückgegeben <ph id="ph1">`index`</ph> in <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> to return an element at a specific position in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> um ein Element an einer bestimmten Position in einer Sequenz zurückzugeben.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist kleiner als Null.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">Der auf 0 (null) basierende Index des abzurufenden Elements.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence or a default value if the index is out of range.</source>
          <target state="translated">Gibt das Element an einem angegebenen Index in einer Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="index" /&gt;</ph> is outside the bounds of <ph id="ph3">&lt;paramref name="source" /&gt;</ph>; otherwise, the element at the specified position in <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>), wenn <ph id="ph2">&lt;paramref name="index" /&gt;</ph> außerhalb der Begrenzungen von <ph id="ph3">&lt;paramref name="source" /&gt;</ph> liegt, andernfalls das Element an der angegebenen Position in <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The expected behavior is that it returns the item at position <ph id="ph1">`index`</ph> in <ph id="ph2">`source`</ph>, or <ph id="ph3">`default(TSource)`</ph> if <ph id="ph4">`index`</ph> is outside the bounds of <ph id="ph5">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass das Element an der Position zurückgegeben <ph id="ph1">`index`</ph> in <ph id="ph2">`source`</ph>, oder <ph id="ph3">`default(TSource)`</ph> Wenn <ph id="ph4">`index`</ph> liegt außerhalb des Bereichs der <ph id="ph5">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph>.</source>
          <target state="translated">Das folgende Codebeispiel zeigt die Verwendung von <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>This example uses a value for <ph id="ph1">`index`</ph> that is outside the bounds of the source sequence.</source>
          <target state="translated">Dieses Beispiel verwendet einen Wert für <ph id="ph1">`index`</ph> ist außerhalb der Begrenzungen der Quellsequenz.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Produces the set difference of two sequences.</source>
          <target state="translated">Erzeugt die Differenzmenge von zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Es wird eine <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>-Schnittstelle zurückgegeben, deren Elemente nicht auch in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> enthalten sind.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will not appear in the returned sequence.</source>
          <target state="translated">Die Rückgabesequenz enthält kein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente auch in der ersten Sequenz vorhanden sind.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set difference of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Erzeugt die Differenzmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the set difference of the two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die Differenzmenge der beiden Sequenzen enthält.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the<ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der<ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of  the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that all the elements in <ph id="ph1">`source1`</ph> are returned except for those that are also in <ph id="ph2">`source2`</ph>.</source>
          <target state="translated">Es wird erwartet, die alle Elemente im <ph id="ph1">`source1`</ph> werden zurückgegeben, außer denen, die auch in <ph id="ph2">`source2`</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return those elements that only appear in the first source sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> die Elemente, die nur in der ersten Quellsequenz zurückgegeben.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Es wird eine <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>-Schnittstelle zurückgegeben, deren Elemente nicht auch in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> enthalten sind.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will not appear in the returned sequence.</source>
          <target state="translated">Die Rückgabesequenz enthält kein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente auch in der ersten Sequenz vorhanden sind.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set difference of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Erzeugt mithilfe des angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> die Differenzmenge zweier Sequenzen zum Vergleichen von Werten</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the set difference of the two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die Differenzmenge der beiden Sequenzen enthält.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the<ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der<ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that all the elements in <ph id="ph1">`source1`</ph> are returned except for those that are also in <ph id="ph2">`source2`</ph>, and <ph id="ph3">`comparer`</ph> is used to compare values.</source>
          <target state="translated">Es wird erwartet, die alle Elemente im <ph id="ph1">`source1`</ph> werden zurückgegeben, außer denen, die auch in <ph id="ph2">`source2`</ph>, und <ph id="ph3">`comparer`</ph> wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Gibt das erste Element einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen erstes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Gibt das erste Element einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The first element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Das erste Element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the first element in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass das erste Element im zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to return the first element in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> auf das erste Element in einer Sequenz zurückzugeben.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the first element of a sequence that satisfies a specified condition.</source>
          <target state="translated">Gibt das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The first element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> that passes the test in <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Das erste Element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, das in <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> erfolgreich überprüft wird.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the first element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Es wird erwartet, dass das erste Element im zurückgegeben <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllt <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to return the first element of a sequence that satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> um das erste Element einer Sequenz zurückzugeben, die eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Kein Element erfüllt die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the first element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn kein Element gefunden wird</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen erstes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Returns the first element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, the first element in <ph id="ph3">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>), wenn <ph id="ph2">&lt;paramref name="source" /&gt;</ph> leer ist, andernfalls das erste Element in <ph id="ph3">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the first element in <ph id="ph1">`source`</ph>, or a default value if <ph id="ph2">`source`</ph> is empty.</source>
          <target state="translated">Es wird erwartet, dass das erste Element im zurückgegeben <ph id="ph1">`source`</ph>, oder ein Standardwert, wenn <ph id="ph2">`source`</ph> ist leer.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify the default value to return if <ph id="ph2">`source`</ph> is empty.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%2A&gt;</ph> Methode bietet eine Möglichkeit zum Angeben der Standardwert wird zurückgegeben, wenn keine <ph id="ph2">`source`</ph> ist leer.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Wenn Sie einen Standardwert außer angeben möchten <ph id="ph1">`default(TSource)`</ph>, verwenden Sie die <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode wie im Beispielabschnitt beschrieben.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> on an empty sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> auf eine leere Sequenz.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In einigen Fällen den Wert des <ph id="ph1">`default(TSource)`</ph> ist nicht der Standardwert, die Sie verwenden, wenn die Auflistung keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Statt überprüft das Ergebnis für das unbeabsichtigten Standardwert, und ändern diese bei Bedarf, können Sie die <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode, um den Standardwert angeben, die Sie verwenden, wenn die Auflistung leer ist.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to obtain the first element.</source>
          <target state="translated">Rufen Sie dann <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> auf das erste Element abzurufen.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</source>
          <target state="translated">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von numerischen Monate leer ist.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</source>
          <target state="translated">Da der Standardwert für eine ganze Zahl 0 (null) das keine Monat entspricht ist, muss der Standardwert stattdessen mit 1 angegeben.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query is completed.</source>
          <target state="translated">Die erste Ergebnisvariable wird nach Abschluss der Abfrage das unbeabsichtigten Standardwert überprüft.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The second result variable is obtained by calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">Die zweite Ergebnisvariable wird durch Aufrufen von <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> an den Standardwert 1.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</source>
          <target state="translated">Gibt das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="source" /&gt;</ph> is empty or if no element passes the test specified by <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph>; otherwise, the first element in <ph id="ph4">&lt;paramref name="source" /&gt;</ph> that passes the test specified by <ph id="ph5">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>), wenn <ph id="ph2">&lt;paramref name="source" /&gt;</ph> leer ist oder wenn kein Element die von <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung besteht. Andernfalls das erste Element in <ph id="ph4">&lt;paramref name="source" /&gt;</ph>, das die von <ph id="ph5">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung besteht.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the first element in <ph id="ph1">`source`</ph> that satisfies the condition in <ph id="ph2">`predicate`</ph>, or a default value if no element satisfies the condition.</source>
          <target state="translated">Es wird erwartet, dass das erste Element im zurückgegeben <ph id="ph1">`source`</ph> erfüllt die Bedingung in <ph id="ph2">`predicate`</ph>, oder einen Standardwert, wenn kein Element die Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> durch die Übergabe in einem Prädikat.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>In the second query, there is no element in the sequence that satisfies the condition.</source>
          <target state="translated">In der zweiten Abfrage ist gibt es kein Element in der Sequenz, die die Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Groups the elements of a sequence.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellt im zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Groups the elements of a sequence according to a specified key selector function.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a sequence of objects and a key.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder eine <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, wobei jede <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>-Schnittstelle eine Sequenz von Objekten und einen Schlüssel enthält.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value that is obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Es wird erwartet, dass die Elemente gruppiert <ph id="ph1">`source`</ph> durch ein Schlüssel-Wert, der durch den Aufruf abgerufen wird <ph id="ph2">`keySelector`</ph> für jedes Element.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to group the elements of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> zum Gruppieren der Elemente einer Sequenz.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellt im zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und vergleicht die Schlüssel mithilfe eines angegebenen Vergleichs</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contains a sequence of objects and a key.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder eine <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, wobei jede <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>-Schnittstelle eine Sequenz von Objekten und einen Schlüssel enthält.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value.</source>
          <target state="translated">Es wird erwartet, dass die Elemente gruppiert <ph id="ph1">`source`</ph> von Schlüssel-Wert.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The key value is obtained by invoking <ph id="ph1">`keySelector`</ph> on each element, and key values are compared by using <ph id="ph2">`comparer`</ph>.</source>
          <target state="translated">Der Schlüsselwert wird durch den Aufruf ermittelt <ph id="ph1">`keySelector`</ph> für jedes Element und Schlüsselwerte verglichen werden, mithilfe von <ph id="ph2">`comparer`</ph>.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellt im zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente in jedem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Eine Funktion, mit der jedes Quellelement einem Element in einem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> zugeordnet wird.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und projiziert die Elemente für jede Gruppe mithilfe einer angegebenen Funktion</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contains a sequence of objects of type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder eine <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, wobei jede <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>-Schnittstelle eine Sequenz von Objekten vom Typ <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> und einen Schlüssel enthält.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value that is obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Es wird erwartet, dass die Elemente gruppiert <ph id="ph1">`source`</ph> durch ein Schlüssel-Wert, der durch den Aufruf abgerufen wird <ph id="ph2">`keySelector`</ph> für jedes Element.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>It invokes <ph id="ph1">`elementSelector`</ph> on each element to obtain a result element.</source>
          <target state="translated">Er ruft <ph id="ph1">`elementSelector`</ph> für jedes Element, ein Ergebniselement abzurufen.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> to group the elements of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> zum Gruppieren der Elemente einer Sequenz.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellt im zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente in jedem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Eine Funktion, mit der jedes Quellelement einem Element in einem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> zugeordnet wird.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence and projects the elements for each group by using a specified function.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz und projiziert die Elemente jeder Gruppe mithilfe einer angegebenen Funktion.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Key values are compared by using a specified comparer.</source>
          <target state="translated">Schlüsselwerte werden mithilfe eines angegebenen Vergleichs verglichen.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contains a sequence of objects of type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder eine <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, wobei jede <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>-Schnittstelle eine Sequenz von Objekten vom Typ <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> und einen Schlüssel enthält.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value that is obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Es wird erwartet, dass die Elemente gruppiert <ph id="ph1">`source`</ph> durch ein Schlüssel-Wert, der durch den Aufruf abgerufen wird <ph id="ph2">`keySelector`</ph> für jedes Element.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Key values are compared by using <ph id="ph1">`comparer`</ph>.</source>
          <target state="translated">Schlüsselwerte werden verglichen mit <ph id="ph1">`comparer`</ph>.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">`elementSelector`</ph> parameter is invoked on each element to obtain a result element.</source>
          <target state="translated">Die <ph id="ph1">`elementSelector`</ph> Parameter wird aufgerufen, für jedes Element, ein Ergebniselement abzurufen.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> oder <ph id="ph4">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellt im zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebniswerts zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>ResultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> that has a type argument of <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> and where each element represents a projection over a group and its key.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle, die über das Typargument <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> verfügt und in der jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value that is obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Es wird erwartet, dass die Elemente gruppiert <ph id="ph1">`source`</ph> durch ein Schlüssel-Wert, der durch den Aufruf abgerufen wird <ph id="ph2">`keySelector`</ph> für jedes Element.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The <ph id="ph1">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.</source>
          <target state="translated">Die <ph id="ph1">`resultSelector`</ph> Parameter wird verwendet, um aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert zu erhalten.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> to group the elements of a sequence and project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> zum Gruppieren der Elemente einer Sequenz und eine Sequenz von Ergebnissen vom Typ projizieren <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellt im zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebniswerts zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>ResultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Keys are compared by using a specified comparer.</source>
          <target state="translated">Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> that has a type argument of <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> and where each element represents a projection over a group and its key.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle, die über das Typargument <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> verfügt und in der jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by key values that are obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Es wird erwartet, dass die Elemente gruppiert <ph id="ph1">`source`</ph> anhand von Schlüsselwerten, die durch den Aufruf abgerufen werden <ph id="ph2">`keySelector`</ph> für jedes Element.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare keys and the <ph id="ph2">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.</source>
          <target state="translated">Die <ph id="ph1">`comparer`</ph> Parameter zum Vergleichen von Schlüsseln verwendet wird und die <ph id="ph2">`resultSelector`</ph> Parameter wird verwendet, um aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert zu erhalten.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> oder <ph id="ph4">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellt im zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente in jedem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebniswerts zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>ResultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Eine Funktion, mit der jedes Quellelement einem Element in einem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> zugeordnet wird.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The elements of each group are projected by using a specified function.</source>
          <target state="translated">Die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> that has a type argument of <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> and where each element represents a projection over a group and its key.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle, die über das Typargument <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> verfügt und in der jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by key values that are obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Es wird erwartet, dass die Elemente gruppiert <ph id="ph1">`source`</ph> anhand von Schlüsselwerten, die durch den Aufruf abgerufen werden <ph id="ph2">`keySelector`</ph> für jedes Element.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The <ph id="ph1">`elementSelector`</ph> parameter is used to project the elements of each group, and the <ph id="ph2">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.</source>
          <target state="translated">Die <ph id="ph1">`elementSelector`</ph> Parameter wird verwendet, um die Elemente der Gruppe "Jeder", Projekt und die <ph id="ph2">`resultSelector`</ph> Parameter wird verwendet, um aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert zu erhalten.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> to group the elements of a sequence and project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> zum Gruppieren der Elemente einer Sequenz und eine Sequenz von Ergebnissen vom Typ projizieren <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> oder <ph id="ph4">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellt im zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente in jedem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebniswerts zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>ResultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Eine Funktion, mit der jedes Quellelement einem Element in einem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> zugeordnet wird.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</source>
          <target state="translated">Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> that has a type argument of <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> and where each element represents a projection over a group and its key.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept>-Schnittstelle, die über das Typargument <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> verfügt und in der jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by key values that are obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Es wird erwartet, dass die Elemente gruppiert <ph id="ph1">`source`</ph> anhand von Schlüsselwerten, die durch den Aufruf abgerufen werden <ph id="ph2">`keySelector`</ph> für jedes Element.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare key values.</source>
          <target state="translated">Die <ph id="ph1">`comparer`</ph> Parameter wird verwendet, um Schlüsselwerte verglichen werden soll.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">`elementSelector`</ph> parameter is used to project the elements of each group, and the <ph id="ph2">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.</source>
          <target state="translated">Die <ph id="ph1">`elementSelector`</ph> Parameter wird verwendet, um die Elemente der Gruppe "Jeder", Projekt und die <ph id="ph2">`resultSelector`</ph> Parameter wird verwendet, um aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert zu erhalten.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="resultSelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph>, <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph>, <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="resultSelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The type of the result elements.</source>
          <target state="translated">Der Typ der Ergebniselemente.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The first sequence to join.</source>
          <target state="translated">Die erste zu verknüpfende Sequenz.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtained by performing a grouped join on two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das Elemente vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> enthält, die durch Ausführen eines Gruppenjoins von zwei Sequenzen ermittelt werden.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`outer`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`outer`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`outer`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`outer`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The expected behavior is that the <ph id="ph1">`outerKeySelector`</ph> and <ph id="ph2">`innerKeySelector`</ph> functions are used to extract keys from <ph id="ph3">`outer`</ph> and <ph id="ph4">`inner`</ph>, respectively.</source>
          <target state="translated">Es wird erwartet, die die <ph id="ph1">`outerKeySelector`</ph> und <ph id="ph2">`innerKeySelector`</ph> Funktionen dienen zum Extrahieren der Schlüssel aus <ph id="ph3">`outer`</ph> und <ph id="ph4">`inner`</ph>bzw..</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>These keys are compared for equality to match each element in <ph id="ph1">`outer`</ph> with zero or more elements from <ph id="ph2">`inner`</ph>.</source>
          <target state="translated">Diese Schlüssel werden Gleichheit entsprechend jedes Element im <ph id="ph1">`outer`</ph> mit keinem oder mehreren Elementen aus <ph id="ph2">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>Then the <ph id="ph1">`resultSelector`</ph> function is invoked to project a result object from each group of correlated elements.</source>
          <target state="translated">Die <ph id="ph1">`resultSelector`</ph> Funktion wird aufgerufen, um ein Ergebnisobjekt aus jeder Gruppe korrelierter Elemente zu projizieren.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> to perform a grouped join on two sequences.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> zum Ausführen eines Group Joins von zwei Sequenzen.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inner" /&gt;</ph>, <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">Der Typ der Ergebniselemente.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">Die erste zu verknüpfende Sequenz.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A comparer to hash and compare keys.</source>
          <target state="translated">Ein Vergleich zum Hashen und Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Schlüssel werden mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> verglichen.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtained by performing a grouped join on two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das Elemente vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> enthält, die durch Ausführen eines Gruppenjoins von zwei Sequenzen ermittelt werden.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`outer`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`outer`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`outer`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`outer`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The expected behavior is that the <ph id="ph1">`outerKeySelector`</ph> and <ph id="ph2">`innerKeySelector`</ph> functions are used to extract keys from <ph id="ph3">`outer`</ph> and <ph id="ph4">`inner`</ph>, respectively.</source>
          <target state="translated">Es wird erwartet, die die <ph id="ph1">`outerKeySelector`</ph> und <ph id="ph2">`innerKeySelector`</ph> Funktionen dienen zum Extrahieren der Schlüssel aus <ph id="ph3">`outer`</ph> und <ph id="ph4">`inner`</ph>bzw..</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>These keys are compared for equality by using <ph id="ph1">`comparer`</ph>.</source>
          <target state="translated">Diese Schlüssel auf Gleichheit verglichen werden, mithilfe von <ph id="ph1">`comparer`</ph>.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The outcome of the comparisons is used to match each element in <ph id="ph1">`outer`</ph> with zero or more elements from <ph id="ph2">`inner`</ph>.</source>
          <target state="translated">Das Ergebnis der Vergleiche wird verwendet, um jedes Element im <ph id="ph1">`outer`</ph> mit keinem oder mehreren Elementen aus <ph id="ph2">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Then the <ph id="ph1">`resultSelector`</ph> function is invoked to project a result object from each group of correlated elements.</source>
          <target state="translated">Die <ph id="ph1">`resultSelector`</ph> Funktion wird aufgerufen, um ein Ergebnisobjekt aus jeder Gruppe korrelierter Elemente zu projizieren.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inner" /&gt;</ph>, <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Produces the set intersection of two sequences.</source>
          <target state="translated">Erzeugt die Schnittmenge zweier Sequenzen</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> are returned.</source>
          <target state="translated">Eine Sequenz, deren unterschiedliche Elemente, die auch in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> vorhanden sind, zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose distinct elements that also appear in the first sequence are returned.</source>
          <target state="translated">Eine Sequenz, deren unterschiedliche Elemente, die auch in der ersten Sequenz vorhanden sind, zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set intersection of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Erzeugt die Schnittmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the set intersection of the two sequences.</source>
          <target state="translated">Eine Sequenz, die die Schnittmenge der beiden Sequenzen enthält.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that all the elements in <ph id="ph1">`source1`</ph> that are also in <ph id="ph2">`source2`</ph> are returned.</source>
          <target state="translated">Es wird erwartet, die alle Elemente im <ph id="ph1">`source1`</ph> , sind auch in <ph id="ph2">`source2`</ph> zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the elements that appear in each of two sequences.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> um die Elemente, die angezeigt werden in zwei Sequenzen zurückzugeben.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> are returned.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>-Schnittstelle, deren unterschiedliche Elemente, die auch in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> vorhanden sind, zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence are returned.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente, die auch in der ersten Sequenz vorhanden sind, zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set intersection of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Erzeugt mithilfe des angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten die Schnittmenge von zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the set intersection of the two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die Schnittmenge der beiden Sequenzen enthält.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that all the elements in <ph id="ph1">`source1`</ph> that are also in <ph id="ph2">`source2`</ph> are returned.</source>
          <target state="translated">Es wird erwartet, die alle Elemente im <ph id="ph1">`source1`</ph> , sind auch in <ph id="ph2">`source2`</ph> zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare elements.</source>
          <target state="translated">Die <ph id="ph1">`comparer`</ph> Parameter zum Vergleichen von Elementen verwendet wird.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The type of the result elements.</source>
          <target state="translated">Der Typ der Ergebniselemente.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The first sequence to join.</source>
          <target state="translated">Die erste zu verknüpfende Sequenz.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtained by performing an inner join on two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, für das Elemente vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`outer`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`outer`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`outer`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`outer`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The expected behavior is that of an inner join.</source>
          <target state="translated">Das erwartete Verhalten ist, die einen inneren Join.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The <ph id="ph1">`outerKeySelector`</ph> and <ph id="ph2">`innerKeySelector`</ph> functions are used to extract keys from <ph id="ph3">`outer`</ph> and <ph id="ph4">`inner`</ph>, respectively.</source>
          <target state="translated">Die <ph id="ph1">`outerKeySelector`</ph> und <ph id="ph2">`innerKeySelector`</ph> Funktionen dienen zum Extrahieren der Schlüssel von <ph id="ph3">`outer`</ph> und <ph id="ph4">`inner`</ph>zugeordnet.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>These keys are compared for equality to match elements from each sequence.</source>
          <target state="translated">Diese Schlüssel werden zum Abgleichen von Elementen aus jeder Sequenz Gleichheit.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>A pair of elements is stored for each element in <ph id="ph1">`inner`</ph> that matches an element in <ph id="ph2">`outer`</ph>.</source>
          <target state="translated">Für jedes Element in ein Paar von Elementen gespeichert <ph id="ph1">`inner`</ph> , entspricht ein Element in <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>Then the <ph id="ph1">`resultSelector`</ph> function is invoked to project a result object from each pair of matching elements.</source>
          <target state="translated">Die <ph id="ph1">`resultSelector`</ph> Funktion wird aufgerufen, um das Projekt ein Ergebnisobjekt aus jedem Paar von übereinstimmenden Elementen.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> to perform an inner join of two sequences based on a common key.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> eine innere Verknüpfung zweier Sequenzen basierend auf einem gemeinsamen Schlüssel ausführen.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inner" /&gt;</ph>, <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">Der Typ der Ergebniselemente.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">Die erste zu verknüpfende Sequenz.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Hashen und Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Schlüssel werden mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> verglichen.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtained by performing an inner join on two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, für das Elemente vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`outer`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`outer`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`outer`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`outer`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The expected behavior is that of an inner join.</source>
          <target state="translated">Das erwartete Verhalten ist, die einen inneren Join.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">`outerKeySelector`</ph> and <ph id="ph2">`innerKeySelector`</ph> functions are used to extract keys from <ph id="ph3">`outer`</ph> and <ph id="ph4">`inner`</ph>, respectively.</source>
          <target state="translated">Die <ph id="ph1">`outerKeySelector`</ph> und <ph id="ph2">`innerKeySelector`</ph> Funktionen dienen zum Extrahieren der Schlüssel von <ph id="ph3">`outer`</ph> und <ph id="ph4">`inner`</ph>zugeordnet.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>These keys are compared for equality by using <ph id="ph1">`comparer`</ph>.</source>
          <target state="translated">Diese Schlüssel auf Gleichheit verglichen werden, mithilfe von <ph id="ph1">`comparer`</ph>.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The outcome of the comparisons is used to create a matching pair for each element in <ph id="ph1">`inner`</ph> that matches an element in <ph id="ph2">`outer`</ph>.</source>
          <target state="translated">Das Ergebnis der Vergleiche wird verwendet, erstellen Sie ein übereinstimmendes Paar für jedes Element im <ph id="ph1">`inner`</ph> , entspricht ein Element in <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Then the <ph id="ph1">`resultSelector`</ph> function is invoked to project a result object from each pair of matching elements.</source>
          <target state="translated">Die <ph id="ph1">`resultSelector`</ph> Funktion wird aufgerufen, um das Projekt ein Ergebnisobjekt aus jedem Paar von übereinstimmenden Elementen.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inner" /&gt;</ph>, <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the last element in a sequence.</source>
          <target state="translated">Gibt das letzte Element in einer Sequenz zurück.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen letztes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>Returns the last element in a sequence.</source>
          <target state="translated">Gibt das letzte Element in einer Sequenz zurück.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The value at the last position in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Der Wert an der letzten Position <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the last element in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass das letzte Element im zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to return the last element of an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> auf das letzte Element eines Arrays zurück.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the last element of a sequence that satisfies a specified condition.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The last element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> that passes the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Das letzte Element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, das die von <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung besteht.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the last element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Es wird erwartet, dass das letzte Element im zurückgegeben <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllt <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to return the last element of an array that satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> auf das letzte Element eines Arrays zurück, das eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Kein Element erfüllt die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the last element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn kein Element gefunden wird</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen letztes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Returns the last element in a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Gibt das letzte Element in einer Sequenz zurück, oder einen Standardwert, wenn die Sequenz keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, the last element in <ph id="ph3">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>), wenn <ph id="ph2">&lt;paramref name="source" /&gt;</ph> leer ist, andernfalls das letzte Element in <ph id="ph3">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the last element in <ph id="ph1">`source`</ph>, or a default value if <ph id="ph2">`source`</ph> is empty.</source>
          <target state="translated">Es wird erwartet, dass das letzte Element im zurückgegeben <ph id="ph1">`source`</ph>, oder ein Standardwert, wenn <ph id="ph2">`source`</ph> ist leer.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%2A&gt;</ph> Methode bietet keine Möglichkeit, einen Standardwert anzugeben.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Wenn Sie einen Standardwert außer angeben möchten <ph id="ph1">`default(TSource)`</ph>, verwenden Sie die <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode wie im Beispielabschnitt beschrieben.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> auf ein leeres Array.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In einigen Fällen den Wert des <ph id="ph1">`default(TSource)`</ph> ist nicht der Standardwert, die Sie verwenden, wenn die Auflistung keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Statt überprüft das Ergebnis für das unbeabsichtigten Standardwert, und ändern diese bei Bedarf, können Sie die <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode, um den Standardwert angeben, die Sie verwenden, wenn die Auflistung leer ist.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to obtain the last element.</source>
          <target state="translated">Rufen Sie dann <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> auf das letzte Element abzurufen.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</source>
          <target state="translated">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von numerischen Tage des Monats leer ist.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</source>
          <target state="translated">Da der Standardwert für eine ganze Zahl 0 (null) das nicht zu einem beliebigen Tag des Monats entspricht ist, muss der Standardwert stattdessen mit 1 angegeben.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query is completed.</source>
          <target state="translated">Die erste Ergebnisvariable wird nach Abschluss der Abfrage das unbeabsichtigten Standardwert überprüft.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The second result variable is obtained by calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">Die zweite Ergebnisvariable wird durch Aufrufen von <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> an den Standardwert 1.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz, das eine Bedingung erfüllt, oder einen Standardwert zurück, wenn ein solches Element nicht gefunden wird.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="source" /&gt;</ph> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> that passes the test in the predicate function.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>), wenn <ph id="ph2">&lt;paramref name="source" /&gt;</ph> leer ist oder wenn keine Elemente von der Prädikatfunktion erfolgreich überprüft werden. Andernfalls das letzte Element von <ph id="ph3">&lt;paramref name="source" /&gt;</ph>, das von der Prädikatfunktion erfolgreich überprüft wird.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the last element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Es wird erwartet, dass das letzte Element im zurückgegeben <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllt <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It returns a default value if there is no such element in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es gibt einen Standardwert zurück, wenn es kein solches Element im ist <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> durch die Übergabe in einem Prädikat.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>In the second call to the method, there is no element in the sequence that satisfies the condition.</source>
          <target state="translated">Im zweiten Aufruf der Methode ist gibt es kein Element in der Sequenz, die die Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the number of elements in sequence.</source>
          <target state="translated">Gibt ein <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> zurück, das die Anzahl der Elemente in einer Sequenz darstellt.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die zu zählenden Elemente enthält</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the total number of elements in a sequence.</source>
          <target state="translated">Gibt ein <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> zurück, das die Gesamtanzahl der Elemente in einer Sequenz darstellt</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl von Elementen in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it counts the number of items in <ph id="ph1">`source`</ph> and returns an <ph id="ph2">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass die Anzahl der Elemente im gezählt <ph id="ph1">`source`</ph> und gibt eine <ph id="ph2">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> zum zählen der Elemente in einem Array.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The number of elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Elemente überschreitet <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die zu zählenden Elemente enthält</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the number of elements in a sequence that satisfy a condition.</source>
          <target state="translated">Gibt ein <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> zurück, das die Anzahl der Elemente in einer Sequenz darstellt, die eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> that satisfy the condition in the predicate function.</source>
          <target state="translated">Die Anzahl der Elemente in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, die die Bedingung in der Prädikatfunktion erfüllen.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it counts the number of items in <ph id="ph1">`source`</ph> that satisfy the condition specified by <ph id="ph2">`predicate`</ph> and returns an <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass die Anzahl der Elemente im gezählt <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllen <ph id="ph2">`predicate`</ph> und gibt ein <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> , die Elemente in einem Array zu zählen, die eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The number of matching elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der übereinstimmenden Elemente überschreitet <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>A sequence of values to determine the maximum of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>Returns the maximum value in a generic <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Gibt den Höchstwert in einem generischen <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> zurück.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the maximum value in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass den maximalen Wert in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the value returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des von der Funktion dargestellte zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to determine the maximum of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Invokes a projection function on each element of a generic <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> and returns the maximum resulting value.</source>
          <target state="translated">Ruft für jedes Element eines generischen <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> eine Projektionsfunktion auf und gibt den höchsten Ergebniswert zurück.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element in <ph id="ph2">`source`</ph> and returns the maximum value.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element in <ph id="ph2">`source`</ph> und gibt den Höchstwert zurück.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>A sequence of values to determine the minimum of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>Returns the minimum value of a generic <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Gibt den Mindestwert eines generischen <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> zurück.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the minimum value in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, den kleinsten Wert in gibt <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the value returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des von der Funktion dargestellte zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to determine the minimum of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Invokes a projection function on each element of a generic <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> and returns the minimum resulting value.</source>
          <target state="translated">Ruft für jedes Element eines generischen <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> eine Projektionsfunktion auf und gibt den niedrigsten Ergebniswert zurück.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element in <ph id="ph2">`source`</ph> and returns the minimum value.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element im <ph id="ph2">`source`</ph> und gibt den Mindestwert zurück.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The type to filter the elements of the sequence on.</source>
          <target state="translated">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> whose elements to filter.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>, dessen Elemente gefiltert werden sollen.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>Filters the elements of an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> based on a specified type.</source>
          <target state="translated">Filtert die Elemente eines <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> anhand eines angegebenen Typs</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>A collection that contains the elements from <ph id="ph1">&lt;paramref name="source" /&gt;</ph> that have type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Eine Auflistung, die die Elemente aus <ph id="ph1">&lt;paramref name="source" /&gt;</ph> mit dem Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> enthält.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The <ph id="ph1">`OfType`</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">`OfType`</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">`OfType`</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">`OfType`</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">`OfType`</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">`OfType`</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The expected behavior is that it filters out any elements in <ph id="ph1">`source`</ph> that are not of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Es wird erwartet, dass dadurch herausgefiltert werden alle Elemente in <ph id="ph1">`source`</ph> , die nicht vom Typ sind <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The following code example demonstrates how to use <ph id="ph1">`OfType`</ph> to filter out elements that are not of type <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> from a list of elements of type <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">`OfType`</ph> Elemente herausfiltern, die nicht vom Typ <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> aus einer Liste von Elementen des Typs <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Sorts the elements of a sequence in ascending order.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function that is represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion, die von dargestellte zurückgegeben <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to order.</source>
          <target state="translated">Eine Sequenz von anzuordnenden Werten.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Sorts the elements of a sequence in ascending order according to a key.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph>, dessen Elemente nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Das Ergebnis des Aufrufs <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Typ umgewandelt wird <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it sorts the elements of <ph id="ph1">`source`</ph> based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass die Elemente eines sortiert <ph id="ph1">`source`</ph> anhand des Schlüssels, der durch den Aufruf ermittelt <ph id="ph2">`keySelector`</ph> für jedes Element der <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to sort the elements of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> die Elemente einer Sequenz sortiert.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by the function that is represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion, die von dargestellte zurückgegeben <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Eine Sequenz von anzuordnenden Werten.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in aufsteigender Reihenfolge</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph>, dessen Elemente nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Das Ergebnis des Aufrufs <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Typ umgewandelt wird <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The expected behavior is that it sorts the elements of <ph id="ph1">`source`</ph> based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass die Elemente eines sortiert <ph id="ph1">`source`</ph> anhand des Schlüssels, der durch den Aufruf ermittelt <ph id="ph2">`keySelector`</ph> für jedes Element der <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare keys.</source>
          <target state="translated">Die <ph id="ph1">`comparer`</ph> Parameter zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Sorts the elements of a sequence in descending order.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz in absteigender Reihenfolge.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function that is represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion, die von dargestellte zurückgegeben <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to order.</source>
          <target state="translated">Eine Sequenz von anzuordnenden Werten.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Sorts the elements of a sequence in descending order according to a key.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz in absteigender Reihenfolge nach einem Schlüssel</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph>, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Das Ergebnis des Aufrufs <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Typ umgewandelt wird <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it sorts the elements of <ph id="ph1">`source`</ph> in descending order, based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass die Elemente eines sortiert <ph id="ph1">`source`</ph> in absteigender Reihenfolge anhand des Schlüssels, der durch den Aufruf <ph id="ph2">`keySelector`</ph> für jedes Element der <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by the function that is represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion, die von dargestellte zurückgegeben <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Eine Sequenz von anzuordnenden Werten.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in absteigender Reihenfolge.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph>, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Das Ergebnis des Aufrufs <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Typ umgewandelt wird <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The expected behavior is that it sorts the elements of <ph id="ph1">`source`</ph> in descending order, based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass die Elemente eines sortiert <ph id="ph1">`source`</ph> in absteigender Reihenfolge anhand des Schlüssels, der durch den Aufruf <ph id="ph2">`keySelector`</ph> für jedes Element der <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare keys.</source>
          <target state="translated">Die <ph id="ph1">`comparer`</ph> Parameter zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to sort the elements of a sequence in descending order by using a custom comparer.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> zum Sortieren der Elemente einer Sequenz in absteigender Reihenfolge mit einem benutzerdefinierten Vergleich.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>A sequence of values to reverse.</source>
          <target state="translated">Eine umzukehrende Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>Inverts the order of the elements in a sequence.</source>
          <target state="translated">Kehrt die Reihenfolge der Elemente in einer Sequenz um</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements correspond to those of the input sequence in reverse order.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente den Elementen der Eingabesequenz in umgekehrter Reihenfolge entsprechen.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it reverses the order of the elements in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, die Reihenfolge der Elemente im kehrt <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to reverse the order of elements in an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> die Reihenfolge der Elemente in einem Array Reihenfolge umgekehrt werden soll.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein neues Format.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The type of the value returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des von der Funktion dargestellte zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>Projects each element of a sequence into a new form by incorporating the element's index.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein neues Format, indem der Index des Elements integriert wird</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking a projection function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente das Ergebnis des Aufrufs einer Projektionsfunktion für jedes Element von <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> depend on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> hängen von der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into a different form.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> , in einer anderen Form zu projizieren.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> to project over a sequence of values and use the index of each element in the projected form.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> projizieren auf eine Sequenz von Werten und der Index jedes Elements im projizierten Format verwenden.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the value returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des von der Funktion dargestellte zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein neues Format.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking a projection function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente das Ergebnis des Aufrufs einer Projektionsfunktion für jedes Element von <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into a different form.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> , in einer anderen Form zu projizieren.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to project over a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Projekt über eine Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and combines the resulting sequences into one sequence of type <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> und fasst die resultierenden Sequenzen in einer einzigen Sequenz vom Typ <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> zusammen.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The type of the elements of the sequence returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente der Sequenz, die von der Funktion dargestellte zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and combines the resulting sequences into one sequence.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente das Ergebnis des Aufrufs einer 1:n-Projektionsfunktion für jedes Element der Eingabesequenz sind.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into an enumerable form.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> es in eine enumerable-Form projizieren.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>It then concatenates the enumerable results into a single, one-dimensional sequence.</source>
          <target state="translated">Anschließend wird die enumerable-Ergebnisse in einer einzelnen eindimensionalen Sequenz verkettet.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> eine 1: n-Projektion über einem Array ausgeführt.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The type of the elements of the sequence returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente der Sequenz, die von der Funktion dargestellte zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>A projection function to apply to each element; the second parameter of this function represents the index of the source element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and combines the resulting sequences into one sequence.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The index of each source element is used in the projected form of that element.</source>
          <target state="translated">Der Index jedes Quellelements wird im projizierten Format des jeweiligen Elements verwendet.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente das Ergebnis des Aufrufs einer 1:n-Projektionsfunktion für jedes Element der Eingabesequenz sind.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into an enumerable form.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> es in eine enumerable-Form projizieren.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>Each enumerable result incorporates the index of the source element.</source>
          <target state="translated">Jedes auflistbare Ergebnis umfasst den Index des Quellelements.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>It then concatenates the enumerable results into a single, one-dimensional sequence.</source>
          <target state="translated">Anschließend wird die enumerable-Ergebnisse in einer einzelnen eindimensionalen Sequenz verkettet.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array and use the index of each source element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> eine 1: n-Projektion über ein Array ausführen und den Index jedes Quellelements verwenden.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the intermediate elements collected by the function represented by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Zwischenelemente erfasst, von der Funktion dargestellte <bpt id="p1">&lt;c&gt;</bpt>CollectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">Der Typ der Elemente in der resultierenden Sequenz.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A projection function to apply to each element of the input sequence.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A projection function to apply to each element of each intermediate sequence.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element jeder Zwischensequenz angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and invokes a result selector function on each element therein.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> und ruft für jedes Element darin eine Ergebnisauswahlfunktion auf.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</source>
          <target state="translated">Die Ergebniswerte aus jeder Zwischensequenz werden zu einer einzigen eindimensionalen Sequenz zusammengefasst und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many projection function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding <ph id="ph4">&lt;paramref name="source" /&gt;</ph> element to a result element.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente erzeugt werden, indem für jedes Element von <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> die 1:n-Projektionsfunktion <ph id="ph3">&lt;paramref name="source" /&gt;</ph> aufgerufen wird und dann jedes so erzeugte Element der Sequenz und sein entsprechendes <ph id="ph4">&lt;paramref name="source" /&gt;</ph>-Element einem Ergebniselement zugeordnet werden.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`collectionSelector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into an enumerable form.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`collectionSelector`</ph> für jedes Element der <ph id="ph2">`source`</ph> es in eine enumerable-Form projizieren.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Then the function represented by <ph id="ph1">`resultSelector`</ph> is invoked on each element in each intermediate sequence.</source>
          <target state="translated">Und dann die Funktion szenariobeschreibungen <ph id="ph1">`resultSelector`</ph> für jedes Element in jeder intermediate Sequenz aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The resulting values are concatenated into a single, one-dimensional sequence.</source>
          <target state="translated">Die resultierenden Werte werden in einer einzelnen eindimensionalen Sequenz verkettet.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> eine 1: n-Projektion über einem Array ausgeführt.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>This example uses a result selector function to keep the source element that corresponds to each intermediate sequence in scope for the final call to <ph id="ph1">`Select`</ph>.</source>
          <target state="translated">In diesem Beispiel verwendet eine Ergebnisauswahlfunktion, um das Quellelement beizubehalten, die jeder intermediate Sequenz im Bereich für den letzten Aufruf von entspricht <ph id="ph1">`Select`</ph>.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the intermediate elements collected by the function represented by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Zwischenelemente erfasst, von der Funktion dargestellte <bpt id="p1">&lt;c&gt;</bpt>CollectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">Der Typ der Elemente in der resultierenden Sequenz.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A projection function to apply to each element of each intermediate sequence.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element jeder Zwischensequenz angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that incorporates the index of the source element that produced it.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das den Index des Quellelements enthält, von dem es erzeugt wurde.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</source>
          <target state="translated">Für jedes Element jeder Zwischensequenz wird eine Ergebnisauswahlfunktion aufgerufen, und die Ergebniswerte werden zu einer einzigen eindimensionale Sequenz zusammengefasst und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many projection function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding <ph id="ph4">&lt;paramref name="source" /&gt;</ph> element to a result element.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen Elemente erzeugt werden, indem für jedes Element von <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> die 1:n-Projektionsfunktion <ph id="ph3">&lt;paramref name="source" /&gt;</ph> aufgerufen wird und dann jedes so erzeugte Element der Sequenz und sein entsprechendes <ph id="ph4">&lt;paramref name="source" /&gt;</ph>-Element einem Ergebniselement zugeordnet werden.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`collectionSelector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into an enumerable form.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`collectionSelector`</ph> für jedes Element der <ph id="ph2">`source`</ph> es in eine enumerable-Form projizieren.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Each enumerable result incorporates the source element's index.</source>
          <target state="translated">Jedes auflistbare Ergebnis umfasst die der Index des Quellelements.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Then the function represented by <ph id="ph1">`resultSelector`</ph> is invoked on each element in each intermediate sequence.</source>
          <target state="translated">Und dann die Funktion szenariobeschreibungen <ph id="ph1">`resultSelector`</ph> für jedes Element in jeder intermediate Sequenz aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The resulting values are concatenated into a single, one-dimensional sequence.</source>
          <target state="translated">Die resultierenden Werte werden in einer einzelnen eindimensionalen Sequenz verkettet.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Determines whether two sequences are equal.</source>
          <target state="translated">Bestimmt, ob zwei Sequenzen gleich sind.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to compare to those of <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>-Schnittstelle, deren Elemente mit den Elementen von <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> verglichen werden sollen.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to compare to those of the first sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente mit den Elementen der ersten Sequenz verglichen werden sollen.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether two sequences are equal by using the default equality comparer to compare elements.</source>
          <target state="translated">Bestimmt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Elementen, ob zwei Sequenzen gleich sind.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente als gleich gelten, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that it determines if the two source sequences are equal.</source>
          <target state="translated">Das erwartete Verhalten ist, dass er ermittelt, ob die zwei Quellsequenzen gleich sind.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine whether two sequences are equal.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> zu bestimmen, ob zwei Sequenzen gleich sind.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In this example the sequences are equal.</source>
          <target state="translated">In diesem Beispiel wird sind die Sequenzen gleich.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example compares two sequences that are not equal.</source>
          <target state="translated">Im folgenden Codebeispiel wird vergleicht zwei Sequenzen, die nicht gleich sind.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to compare to those of <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>-Schnittstelle, deren Elemente mit den Elementen von <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> verglichen werden sollen.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to compare to those of the first sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente mit den Elementen der ersten Sequenz verglichen werden sollen.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to use to compare elements.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>, der zum Vergleichen von Elementen verwendet werden soll.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether two sequences are equal by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare elements.</source>
          <target state="translated">Bestimmt mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Elementen, ob zwei Sequenzen gleich sind.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente als gleich gelten, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that it determines if the two source sequences are equal by using <ph id="ph1">`comparer`</ph> to compare elements.</source>
          <target state="translated">Das erwartete Verhalten bestimmt wird, ob zwei Sequenzen gleich sind, indem mit <ph id="ph1">`comparer`</ph> zum Vergleichen von Elementen.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns a single, specific element of a sequence.</source>
          <target state="translated">Gibt ein einzelnes spezifisches Element einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen einziges Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</source>
          <target state="translated">Gibt das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The single element of the input sequence.</source>
          <target state="translated">Das einzige Element der Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the only element in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass es das einzige Element im zurückgibt <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> das einzige Element eines Arrays auswählen.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> has more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> hat mehr als ein Element.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem ein einzelnes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</source>
          <target state="translated">Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The single element of the input sequence that satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Das einzige Element der Eingabesequenz, das die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> erfüllt.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the only element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Es wird erwartet, dass es das einzige Element im zurückgibt <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllt <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> das einzige Element eines Arrays auswählen, die eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Kein Element erfüllt die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> wird von mehreren Elementen erfüllt.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns a single, specific element of a sequence, or a default value if no such element is found.</source>
          <target state="translated">Gibt ein einzelnes spezifisches Element einer Sequenz zurück, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, dessen einziges Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</source>
          <target state="translated">Gibt das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The single element of the input sequence, or <bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if the sequence contains no elements.</source>
          <target state="translated">Das einzige Element der Eingabesequenz oder <bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>), wenn die Sequenz keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the only element in <ph id="ph1">`source`</ph>, or a default value if <ph id="ph2">`source`</ph> is empty.</source>
          <target state="translated">Es wird erwartet, dass es das einzige Element im zurückgibt <ph id="ph1">`source`</ph>, oder ein Standardwert, wenn <ph id="ph2">`source`</ph> ist leer.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%2A&gt;</ph> Methode bietet keine Möglichkeit, einen Standardwert anzugeben.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Wenn Sie einen Standardwert außer angeben möchten <ph id="ph1">`default(TSource)`</ph>, verwenden Sie die <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode wie im Beispielabschnitt beschrieben.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> das einzige Element eines Arrays auswählen.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The second query demonstrates that <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element.</source>
          <target state="translated">Die zweite Abfrage veranschaulicht, dass <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> gibt einen Standardwert zurück, wenn die Sequenz nicht genau ein Element enthält.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In einigen Fällen den Wert des <ph id="ph1">`default(TSource)`</ph> ist nicht der Standardwert, die Sie verwenden, wenn die Auflistung keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Statt überprüft das Ergebnis für das unbeabsichtigten Standardwert, und ändern diese bei Bedarf, können Sie die <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode, um den Standardwert angeben, die Sie verwenden, wenn die Auflistung leer ist.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to obtain the element.</source>
          <target state="translated">Rufen Sie dann <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> um das Element abzurufen.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</source>
          <target state="translated">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von Seitenzahlen leer ist.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</source>
          <target state="translated">Da der Standardwert für eine ganze Zahl 0 (null), die nicht in der Regel eine gültige Seitenzahl ist, muss der Standardwert stattdessen mit 1 angegeben.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query is completed.</source>
          <target state="translated">Die erste Ergebnisvariable wird nach Abschluss der Abfrage das unbeabsichtigten Standardwert überprüft.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The second result variable is obtained by calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">Die zweite Ergebnisvariable wird durch Aufrufen von <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> an den Standardwert 1.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> has more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> hat mehr als ein Element.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem ein einzelnes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</source>
          <target state="translated">Gibt das einzige Element einer Sequenz, das eine angegebene Bedingung erfüllt, oder einen Standardwert zurück, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The single element of the input sequence that satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>, or <bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if no such element is found.</source>
          <target state="translated">Gibt das einzige Element der Eingabesequenz zurück, das die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> erfüllt, oder <bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>), wenn ein solches Element nicht gefunden wird.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the only element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>, or a default value if no such element exists.</source>
          <target state="translated">Es wird erwartet, dass es das einzige Element im zurückgibt <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllt <ph id="ph2">`predicate`</ph>, oder einen Standardwert, wenn kein solches Element vorhanden ist.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> das einzige Element eines Arrays auswählen, die eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The second query demonstrates that <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">Die zweite Abfrage veranschaulicht, dass <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> gibt einen Standardwert zurück, wenn die Sequenz nicht genau ein Element enthält, das die Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> wird von mehreren Elementen erfüllt.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem Elemente zurückgegeben werden sollen</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The number of elements to skip before returning the remaining elements.</source>
          <target state="translated">Die Anzahl der Elemente, die übersprungen werden sollen, bevor die übrigen Elemente zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</source>
          <target state="translated">Umgeht eine festgelegte Anzahl von Elementen in einer Sequenz und gibt dann die übrigen Elemente zurück</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements that occur after the specified index in the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das Elemente enthält, die nach dem angegebenen Index in der Eingabesequenz auftreten.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The expected behavior is that it skips the first <ph id="ph1">`count`</ph> elements in <ph id="ph2">`source`</ph> and returns the remaining elements.</source>
          <target state="translated">Das erwartete Verhalten ist, dass es das erste überspringt <ph id="ph1">`count`</ph> Elemente im <ph id="ph2">`source`</ph> und gibt die übrigen Elemente zurück.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> to skip a specified number of elements in a sorted array and return the remaining elements.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> auf eine angegebene Anzahl von Elementen in einem sortierten Array übersprungen und die übrigen Elemente zurück.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem Elemente zurückgegeben werden sollen</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from <ph id="ph2">&lt;paramref name="source" /&gt;</ph> starting at the first element in the linear series that does not pass the test specified by <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das Elemente aus <ph id="ph2">&lt;paramref name="source" /&gt;</ph> ab dem ersten Element in der linearen Reihe enthält, das die in <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung nicht besteht.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it applies <ph id="ph1">`predicate`</ph> to each element in <ph id="ph2">`source`</ph> until it finds an element for which <ph id="ph3">`predicate`</ph> returns false.</source>
          <target state="translated">Das erwartete Verhalten ist er bezieht sich <ph id="ph1">`predicate`</ph> auf jedes Element in <ph id="ph2">`source`</ph> bis zu einem Element für die <ph id="ph3">`predicate`</ph> "false" zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>That element and all the remaining elements are returned.</source>
          <target state="translated">Dieses Element und alle übrigen Elemente werden zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to skip elements of an array as long as a condition is true.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Elemente eines Arrays zu überspringen, solange eine Bedingung true ist.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, aus dem Elemente zurückgegeben werden sollen</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>A function to test each element for a condition; the second parameter of this function represents the index of the source element.</source>
          <target state="translated">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from <ph id="ph2">&lt;paramref name="source" /&gt;</ph> starting at the first element in the linear series that does not pass the test specified by <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das Elemente aus <ph id="ph2">&lt;paramref name="source" /&gt;</ph> ab dem ersten Element in der linearen Reihe enthält, das die in <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung nicht besteht.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The expected behavior is that it applies <ph id="ph1">`predicate`</ph> to each element in <ph id="ph2">`source`</ph> until it finds an element for which <ph id="ph3">`predicate`</ph> returns false.</source>
          <target state="translated">Das erwartete Verhalten ist er bezieht sich <ph id="ph1">`predicate`</ph> auf jedes Element in <ph id="ph2">`source`</ph> bis zu einem Element für die <ph id="ph3">`predicate`</ph> "false" zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>That element and all the remaining elements are returned.</source>
          <target state="translated">Dieses Element und alle übrigen Elemente werden zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The index of each source element is provided as the second argument to <ph id="ph1">`predicate`</ph>.</source>
          <target state="translated">Der Index jedes Quellelements wird bereitgestellt, als das zweite Argument <ph id="ph1">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> to skip elements of an array as long as a condition that depends on the element's index is true.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> Elemente eines Arrays zu überspringen, solange eine Bedingung, die abhängig von der Index des Elements "true" ist.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Computes the sum of a sequence of numeric values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von numerischen Werten.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Summe der Werte in zurückgegeben <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of he <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs des er <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Eine Sequenz von Werten des Typs <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Das erwartete Verhalten ist, ruft es die <ph id="ph1">`selector`</ph> für jedes Element der <ph id="ph2">`source`</ph> und gibt die Summe der resultierenden Werte zurück.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The sequence to return elements from.</source>
          <target state="translated">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The number of elements to return.</source>
          <target state="translated">Die Anzahl der zurückzugebenden Elemente.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>Returns a specified number of contiguous elements from the start of a sequence.</source>
          <target state="translated">Gibt eine angegebene Anzahl von zusammenhängenden Elementen ab dem Anfang einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the specified number of elements from the start of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die angegebene Anzahl von Elementen ab dem Anfang von <ph id="ph2">&lt;paramref name="source" /&gt;</ph> enthält.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The expected behavior is that it takes the first <ph id="ph1">`count`</ph> elements from the start of <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die ersten <ph id="ph1">`count`</ph> Elemente vom Beginn des <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> to return elements from the start of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> Elemente vom Anfang einer Sequenz zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</source>
          <target state="translated">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist, und überspringt dann die übrigen Elemente</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The sequence to return elements from.</source>
          <target state="translated">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from the input sequence occurring before the element at which the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> no longer passes.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die von <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung nicht mehr erfolgreich ist.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it applies <ph id="ph1">`predicate`</ph> to each element in <ph id="ph2">`source`</ph> until it finds an element for which <ph id="ph3">`predicate`</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Das erwartete Verhalten, dass es angewendet wird <ph id="ph1">`predicate`</ph> auf jedes Element in <ph id="ph2">`source`</ph> bis zu einem Element für die <ph id="ph3">`predicate`</ph> gibt <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It returns all the elements up until that point.</source>
          <target state="translated">Es gibt alle Elemente zurück, bis zu diesem Zeitpunkt.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition is true.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Elemente vom Anfang einer Sequenz zurückgegeben werden, solange eine Bedingung true ist.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The sequence to return elements from.</source>
          <target state="translated">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</source>
          <target state="translated">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Elements in der Quellsequenz dar.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from the input sequence occurring before the element at which the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> no longer passes.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die von <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung nicht mehr erfolgreich ist.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The expected behavior is that it applies <ph id="ph1">`predicate`</ph> to each element in <ph id="ph2">`source`</ph> until it finds an element for which <ph id="ph3">`predicate`</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Das erwartete Verhalten, dass es angewendet wird <ph id="ph1">`predicate`</ph> auf jedes Element in <ph id="ph2">`source`</ph> bis zu einem Element für die <ph id="ph3">`predicate`</ph> gibt <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>It returns all the elements up until that point.</source>
          <target state="translated">Es gibt alle Elemente zurück, bis zu diesem Zeitpunkt.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The index of each source element is provided as the second argument to <ph id="ph1">`predicate`</ph>.</source>
          <target state="translated">Der Index jedes Quellelements wird bereitgestellt, als das zweite Argument <ph id="ph1">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition that uses the index of the element is true.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> zurückzugebenden Elemente vom Anfang einer Sequenz, solange eine Bedingung, die für den Index des Elements wird "true" ist.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order.</source>
          <target state="translated">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellte zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> mit den zu sortierenden Elementen.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</source>
          <target state="translated">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel durch</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph>, dessen Elemente nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Das Ergebnis des Aufrufs <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Typ umgewandelt wird <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it performs a secondary sort of the elements of <ph id="ph1">`source`</ph> based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass sie eine sekundäre Sortierung der Elemente des führt <ph id="ph1">`source`</ph> anhand des Schlüssels, der durch den Aufruf ermittelt <ph id="ph2">`keySelector`</ph> für jedes Element der <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>All previously established sort orders are preserved.</source>
          <target state="translated">Alle zuvor festgelegten Sortierreihenfolgen beibehalten werden.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> um eine nachfolgende Sortierung der Elemente in einer Sequenz durchführen.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellte zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> mit den zu sortierenden Elementen.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph>, dessen Elemente nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Das Ergebnis des Aufrufs <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Typ umgewandelt wird <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The expected behavior is that it performs a secondary sort of the elements of <ph id="ph1">`source`</ph> based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass sie eine sekundäre Sortierung der Elemente des führt <ph id="ph1">`source`</ph> anhand des Schlüssels, der durch den Aufruf ermittelt <ph id="ph2">`keySelector`</ph> für jedes Element der <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>All previously established sort orders are preserved.</source>
          <target state="translated">Alle zuvor festgelegten Sortierreihenfolgen beibehalten werden.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare key values.</source>
          <target state="translated">Die <ph id="ph1">`comparer`</ph> Parameter wird verwendet, um Schlüsselwerte verglichen werden soll.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order.</source>
          <target state="translated">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels, der von der Funktion dargestellte zurückgegebenen <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> mit den zu sortierenden Elementen.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</source>
          <target state="translated">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge nach einem Schlüssel durch</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph>, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Das Ergebnis des Aufrufs <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Typ umgewandelt wird <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it performs a secondary sort of the elements of <ph id="ph1">`source`</ph> in descending order, based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass sie eine sekundäre Sortierung der Elemente des führt <ph id="ph1">`source`</ph> in absteigender Reihenfolge anhand des Schlüssels, der durch den Aufruf <ph id="ph2">`keySelector`</ph> für jedes Element der <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>All previously established sort orders are preserved.</source>
          <target state="translated">Alle zuvor festgelegten Sortierreihenfolgen beibehalten werden.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key that is returned by the <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept> function.</source>
          <target state="translated">Der Typ des Schlüssels, der von zurückgegeben wird das <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept> Funktion.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> mit den zu sortierenden Elementen.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A collection whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Eine Auflistung, deren Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Das Ergebnis des Aufrufs <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Typ umgewandelt wird <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> und zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The expected behavior is that it performs a secondary sort of the elements of <ph id="ph1">`source`</ph> in descending order, based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Das erwartete Verhalten ist, dass sie eine sekundäre Sortierung der Elemente des führt <ph id="ph1">`source`</ph> in absteigender Reihenfolge anhand des Schlüssels, der durch den Aufruf <ph id="ph2">`keySelector`</ph> für jedes Element der <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>All previously established sort orders are preserved.</source>
          <target state="translated">Alle zuvor festgelegten Sortierreihenfolgen beibehalten werden.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare key values.</source>
          <target state="translated">Die <ph id="ph1">`comparer`</ph> Parameter wird verwendet, um Schlüsselwerte verglichen werden soll.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> um eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge mit einem benutzerdefinierten Vergleich durchführen.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Produces the set union of two sequences.</source>
          <target state="translated">Erzeugt die Vereinigungsmenge von zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose distinct elements form the first set for the union operation.</source>
          <target state="translated">Eine Sequenz, deren unterschiedliche Elemente den ersten Satz für die Gesamtmengenbildung darstellen.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose distinct elements form the second set for the union operation.</source>
          <target state="translated">Eine Sequenz, deren unterschiedliche Elemente den zweiten Satz für die Gesamtmengenbildung darstellen.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set union of two sequences by using the default equality comparer.</source>
          <target state="translated">Erzeugt die Vereinigungsmenge von zwei Sequenzen mithilfe des Standardgleichheitsvergleichs</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that the set union of the elements in <ph id="ph1">`source1`</ph> and <ph id="ph2">`source2`</ph> is returned.</source>
          <target state="translated">Das erwartete Verhalten ist, die die Vereinigungsmenge der Elemente im <ph id="ph1">`source1`</ph> und <ph id="ph2">`source2`</ph> wird zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the set union of two sequences.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> um die Vereinigungsmenge von zwei Sequenzen zu erhalten.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence whose distinct elements form the first set for the union operation.</source>
          <target state="translated">Eine Sequenz, deren unterschiedliche Elemente den ersten Satz für die Gesamtmengenbildung darstellen.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence whose distinct elements form the second set for the union operation.</source>
          <target state="translated">Eine Sequenz, deren unterschiedliche Elemente den zweiten Satz für die Gesamtmengenbildung darstellen.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set union of two sequences by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Erzeugt mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> die Vereinigungsmenge von zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that the set union of the elements in <ph id="ph1">`source1`</ph> and <ph id="ph2">`source2`</ph> is returned.</source>
          <target state="translated">Das erwartete Verhalten ist, die die Vereinigungsmenge der Elemente im <ph id="ph1">`source1`</ph> und <ph id="ph2">`source2`</ph> wird zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare values.</source>
          <target state="translated">Die <ph id="ph1">`comparer`</ph> Parameter wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to filter.</source>
          <target state="translated">Ein zu filterndes <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> mit Elementen aus der Eingabesequenz, die die von <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> angegebene Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the elements from <ph id="ph1">`source`</ph> that satisfy the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Elemente von zurückgegeben <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllen <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to filter a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> um eine Sequenz zu filtern.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to filter.</source>
          <target state="translated">Ein zu filterndes <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</source>
          <target state="translated">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Elements in der Quellsequenz dar.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>Each element's index is used in the logic of the predicate function.</source>
          <target state="translated">In der Logik der Prädikatfunktion wird der Index der einzelnen Elemente verwendet.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> mit Elementen aus der Eingabesequenz, die die von <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> angegebene Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Diese Methode verfügt über mindestens einen Parameter vom Typ <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> , deren Typargument ist eines der <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> Typen.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Für diese Parameter können Sie einen Lambda-Ausdruck übergeben, und es wird kompiliert werden, um eine <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Das Abfrageverhalten aufgrund der Ausführung einer Ausdrucksbaumstruktur dar, das Aufrufen von darstellt, <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> richtet sich nach der Implementierung des Typs von der <ph id="ph2">`source`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The expected behavior is that it returns the elements from <ph id="ph1">`source`</ph> that satisfy the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Es wird erwartet, dass die Elemente von zurückgegeben <ph id="ph1">`source`</ph> , die die angegebene Bedingung erfüllen <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The index of each source element is provided as the second argument to <ph id="ph1">`predicate`</ph>.</source>
          <target state="translated">Der Index jedes Quellelements wird bereitgestellt, als das zweite Argument <ph id="ph1">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> to filter a sequence based on a predicate that incorporates the index of each element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> zum Filtern einer Sequenz basierend auf ein Prädikat, das den Index der einzelnen Elemente enthält.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the first input sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the second input sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the result sequence.</source>
          <target state="translated">Der Typ der Elemente in der Ergebnissequenz.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The first sequence to merge.</source>
          <target state="translated">Die erste Sequenz, die zusammengeführt werden soll</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The second sequence to merge.</source>
          <target state="translated">Die zweite Sequenz, die zusammengeführt werden soll</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A function that specifies how to merge the elements from the two sequences.</source>
          <target state="translated">Eine Funktion, die angibt, wie die Elemente der zwei Sequenzen zusammengeführt werden sollen</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Merges two sequences by using the specified predicate function.</source>
          <target state="translated">Führt zwei Sequenzen mit der angegebenen Prädikatfunktion zusammen.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains merged elements of two input sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>, das die zusammengeführten Elemente der beiden Eingabesequenzen enthält</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> Methode generiert eine <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> , Aufruf darstellt <ph id="ph3">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> sich selbst als konstruierte generische Methode.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Übergibt dann die <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> auf der <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> dargestellte der <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> Eigenschaft von der <ph id="ph5">`source1`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The method merges each element of the first sequence with an element that has the same index in the second sequence.</source>
          <target state="translated">Die Methode führt jedes Element der ersten Sequenz mit einem Element mit dem gleichen Index in der zweiten Sequenz zusammen.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</source>
          <target state="translated">Wenn die Sequenzen nicht die gleiche Anzahl von Elementen verfügen, führt die Methode Sequenzen zusammen, bis das Ende eines dieser Elemente erreicht.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.</source>
          <target state="translated">Z. B. wenn eine Sequenz verfügt über drei Elemente und die andere vier hat, müssen die resultierende Sequenz nur drei Elemente.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> method to merge two sequences.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> Methode, um zwei Sequenzen zusammenzuführen.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Enumerable.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7f1cae80cb1b945b1cd247a58e1afdb6cf00c93ee5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cae80cb1b945b1cd247a58e1afdb6cf00c93ee5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Provides a set of <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) methods for querying objects that implement <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Stellt eine Reihe von <ph id="ph1">&lt;see langword="static" /&gt;</ph>-Methoden (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph>-Methoden in Visual Basic) zum Abfragen von Objekten bereit, die <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> implementieren</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The methods in this class provide an implementation of the standard query operators for querying data sources that implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Die Methoden in dieser Klasse geben Sie eine Implementierung der Standardabfrageoperatoren zum Abfragen von implementiert Datenquellen, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The standard query operators are general purpose methods that follow the <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</source>
          <target state="translated">Die Standardabfrageoperatoren sind allgemeine Methoden, die Folgen der <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> Muster und ermöglichen es Ihnen, Durchlauf, Filter- und projektionsvorgänge Vorgänge in einer express. NET-basierte Programmiersprache Ihrer Wahl.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The majority of the methods in this class are defined as extension methods that extend <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Der Großteil der Methoden in dieser Klasse werden als Erweiterungsmethoden, mit denen erweitern definiert <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>This means they can be called like an instance method on any object that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Dies bedeutet, sie können aufgerufen werden, wie eine Instanzmethode für jedes Objekt, das implementiert <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</source>
          <target state="translated">Methoden, die in einer Abfrage verwendet werden, die eine Sequenz von Werten zurückgibt belegen keine die Zieldaten, bis das Abfrageobjekt aufgelistet wird.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>This is known as deferred execution.</source>
          <target state="translated">Dies wird als verzögerte Ausführung bezeichnet.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</source>
          <target state="translated">Methoden, die in einer Abfrage verwendet werden, die einen Singletonwert zurückgibt, ausführen und die Zieldaten sofort nutzen.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das aggregiert werden soll</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Wendet eine Akkumulatorfunktion auf eine Sequenz an</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The final accumulator value.</source>
          <target state="translated">Der letzte Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> Methode vereinfacht die Ausführen einer Berechnung auf eine Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph> except the first one.</source>
          <target state="translated">Diese Methode funktioniert durch Aufrufen von <ph id="ph1">`func`</ph> einmal für jedes Element im <ph id="ph2">`source`</ph> Ausnahme der ersten.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Jedes Mal <ph id="ph1">`func`</ph> aufgerufen wird, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> übergibt Sie sowohl das Element aus der Sequenz und einen Aggregatwert (als erstes Argument für <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The first element of <ph id="ph1">`source`</ph> is used as the initial aggregate value.</source>
          <target state="translated">Das erste Element der <ph id="ph1">`source`</ph> wird als erster Aggregatwert verwendet.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">Das Ergebnis des <ph id="ph1">`func`</ph> ersetzt den vorherigen aggregierten Wert.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> Gibt das endgültige Ergebnis <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> method isn't suitable for all cases because it uses the first element of <ph id="ph2">`source`</ph> as the initial aggregate value.</source>
          <target state="translated">Diese Überladung von der <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> Methode nicht für alle Fälle geeignet, da das erste Element der verwendet wird, <ph id="ph2">`source`</ph> als Anfangswert aggregieren.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>You should choose another overload if the return value should include only the elements of <ph id="ph1">`source`</ph> that meet a certain condition.</source>
          <target state="translated">Wählen Sie eine andere Überladung, wenn der Rückgabewert nur die Elemente enthalten soll <ph id="ph1">`source`</ph> , die eine bestimmte Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>For example, this overload isn't reliable if you want to calculate the sum of the even numbers in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Diese Überladung ist z. B. nicht zuverlässige, wenn Sie zum Berechnen der Summe der geraden Zahlen in möchten <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The result will be incorrect if the first element is odd instead of even.</source>
          <target state="translated">Das Ergebnis wird sein falsch, wenn das erste Element anstelle sogar ungerade ist.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Zur Vereinfachung der allgemeinen Aggregationsvorgänge Standardabfrageoperatoren auch allgemeine Zählmethode einschließen <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, und vier numerische Aggregationsmethoden, nämlich <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The following code example demonstrates how to reverse the order of words in a string by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die Reihenfolge von Wörtern in einer Zeichenfolge mit umkehren <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="func" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The type of the accumulator value.</source>
          <target state="translated">Der Typ des Akkumulatorwerts.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das aggregiert werden soll</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The initial accumulator value.</source>
          <target state="translated">Der erste Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Wendet eine Akkumulatorfunktion auf eine Sequenz an</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The specified seed value is used as the initial accumulator value.</source>
          <target state="translated">Der angegebene Startwert wird als erster Akkumulatorwert verwendet.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The final accumulator value.</source>
          <target state="translated">Der letzte Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> Methode vereinfacht die Ausführen einer Berechnung auf eine Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Diese Methode funktioniert durch Aufrufen von <ph id="ph1">`func`</ph> einmal für jedes Element im <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Jedes Mal <ph id="ph1">`func`</ph> aufgerufen wird, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> übergibt Sie sowohl das Element aus der Sequenz und einen Aggregatwert (als erstes Argument für <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
          <target state="translated">Der Wert, der die <ph id="ph1">`seed`</ph> Parameter wird als erster Aggregatwert verwendet.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">Das Ergebnis des <ph id="ph1">`func`</ph> ersetzt den vorherigen aggregierten Wert.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> Gibt das endgültige Ergebnis <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Zur Vereinfachung der allgemeinen Aggregationsvorgänge Standardabfrageoperatoren auch allgemeine Zählmethode einschließen <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, und vier numerische Aggregationsmethoden, nämlich <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> to apply an accumulator function and use a seed value.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> eine Akkumulatorfunktion angewendet, und verwenden einen Ausgangswert.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="func" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the accumulator value.</source>
          <target state="translated">Der Typ des Akkumulatorwerts.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the resulting value.</source>
          <target state="translated">Der Typ des Ergebniswerts.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das aggregiert werden soll</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The initial accumulator value.</source>
          <target state="translated">Der erste Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>A function to transform the final accumulator value into the result value.</source>
          <target state="translated">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Wendet eine Akkumulatorfunktion auf eine Sequenz an</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</source>
          <target state="translated">Der angegebene Startwert wird als erster Akkumulatorwert verwendet, und der Ergebniswert wird mit der angegebenen Funktion ausgewählt.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The transformed final accumulator value.</source>
          <target state="translated">Der transformierte letzte Akkumulatorwert.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> Methode vereinfacht die Ausführen einer Berechnung auf eine Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Diese Methode funktioniert durch Aufrufen von <ph id="ph1">`func`</ph> einmal für jedes Element im <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Jedes Mal <ph id="ph1">`func`</ph> aufgerufen wird, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> übergibt Sie sowohl das Element aus der Sequenz und einen Aggregatwert (als erstes Argument für <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
          <target state="translated">Der Wert, der die <ph id="ph1">`seed`</ph> Parameter wird als erster Aggregatwert verwendet.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">Das Ergebnis des <ph id="ph1">`func`</ph> ersetzt den vorherigen aggregierten Wert.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The final result of <ph id="ph1">`func`</ph> is passed to <ph id="ph2">`resultSelector`</ph> to obtain the final result of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Das endgültige Ergebnis <ph id="ph1">`func`</ph> übergeben <ph id="ph2">`resultSelector`</ph> das endgültige Ergebnis des abzurufenden <ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Zur Vereinfachung der allgemeinen Aggregationsvorgänge Standardabfrageoperatoren auch allgemeine Zählmethode einschließen <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, und vier numerische Aggregationsmethoden, nämlich <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, und <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> to apply an accumulator function and a result selector.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> eine Akkumulatorfunktion und eine Ergebnisauswahl angewendet.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="func" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to apply the predicate to.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die Elemente enthält, auf die das Prädikat angewendet werden soll</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Determines whether all elements of a sequence satisfy a condition.</source>
          <target state="translated">Bestimmt, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn jedes Element der Quellsequenz im angegebenen Prädikat erfolgreich überprüft wird oder wenn die Sequenz leer ist, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method does not return all the elements of a collection.</source>
          <target state="translated">Diese Methode gibt keinen alle Elemente einer Auflistung zurück.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Instead, it determines whether all the elements of a collection satisfy a condition.</source>
          <target state="translated">Stattdessen bestimmt, ob alle Elemente einer Auflistung eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">Die Enumeration von <ph id="ph1">`source`</ph> wird beendet, sobald das Ergebnis bestimmt werden kann.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into All()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into All()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> to determine whether all the elements in a sequence satisfy a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> zu bestimmen, ob alle Elemente in einer Sequenz eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Variable <ph id="ph1">`allStartWithB`</ph> is true if all the pet names start with "B" or if the <ph id="ph2">`pets`</ph> array is empty.</source>
          <target state="translated">Variable <ph id="ph1">`allStartWithB`</ph> ist "true", wenn alle Pet-Namen mit "B" beginnen oder das <ph id="ph2">`pets`</ph> Array ist leer.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in Visual Basic) or a direct call to the <ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method.</source>
          <target state="translated">Der boolesche Wert, der die <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> Methodenrückgabe wird im Prädikat in der Regel verwendet eine <ph id="ph2">`where`</ph> -Klausel (<ph id="ph3">`Where`</ph> -Klausel in Visual Basic) oder ein direkter Aufruf der <ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following example demonstrates this use of the <ph id="ph1">`All`</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt diese Verwendung von der <ph id="ph1">`All`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether any element of a sequence exists or satisfies a condition.</source>
          <target state="translated">Bestimmt, ob ein Element einer Sequenz vorhanden ist oder eine Bedingung erfüllt</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to check for emptiness.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, bei dem überprüft werden soll, ob es leer ist.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether a sequence contains any elements.</source>
          <target state="translated">Bestimmt, ob eine Sequenz Elemente enthält.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains any elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Quellsequenz Elemente enthält, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method does not return any one element of a collection.</source>
          <target state="translated">Diese Methode gibt keinen Element einer Auflistung zurück.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead, it determines whether the collection contains any elements.</source>
          <target state="translated">Stattdessen bestimmt, ob die Auflistung Elemente enthält.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">Die Enumeration von <ph id="ph1">`source`</ph> wird beendet, sobald das Ergebnis bestimmt werden kann.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Any()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> to determine whether a sequence contains any elements.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> zu bestimmen, ob eine Sequenz Elemente enthält.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in Visual Basic) or a direct call to the <ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method.</source>
          <target state="translated">Der boolesche Wert, der die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methodenrückgabe wird im Prädikat in der Regel verwendet eine <ph id="ph2">`where`</ph> -Klausel (<ph id="ph3">`Where`</ph> -Klausel in Visual Basic) oder ein direkter Aufruf der <ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following example demonstrates this use of the <ph id="ph1">`Any`</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt diese Verwendung von der <ph id="ph1">`Any`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to apply the predicate to.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, auf dessen Elemente das Prädikat angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Determines whether any element of a sequence satisfies a condition.</source>
          <target state="translated">Bestimmt, ob ein Element einer Sequenz eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn Elemente der Quellsequenz im angegebenen Prädikat erfolgreich überprüft werden, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method does not return any one element of a collection.</source>
          <target state="translated">Diese Methode gibt keinen Element einer Auflistung zurück.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Instead, it determines whether any elements of a collection satisfy a condition.</source>
          <target state="translated">Stattdessen bestimmt, ob alle Elemente einer Auflistung eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">Die Enumeration von <ph id="ph1">`source`</ph> wird beendet, sobald das Ergebnis bestimmt werden kann.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Any()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> to determine whether any element in a sequence satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> zu bestimmen, ob ein Element in einer Sequenz eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente von <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence of values.</source>
          <target state="translated">Eine Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to append to <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Der an <ph id="ph1">&lt;paramref name="source" /&gt;</ph> anzufügende Wert.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Appends a value to the end of the sequence.</source>
          <target state="translated">Fügt einen Wert an das Ende der Sequenz an.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A new sequence that ends with <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</source>
          <target state="translated">Eine neue Sequenz, die mit <ph id="ph1">&lt;paramref name="element" /&gt;</ph> endet.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to type as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Die Sequenz, die als <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> typisiert werden soll.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the input typed as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Gibt die Eingabe als <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> typisiert zurück</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence typed as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Die als <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> typisierte Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method has no effect other than to change the compile-time type of <ph id="ph2">`source`</ph> from a type that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> to <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> itself.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode hat keine Auswirkungen außer so ändern Sie den Typ der Zeitpunkt der Kompilierung des <ph id="ph2">`source`</ph> von einem Typ, der implementiert <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> zu <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> can be used to choose between query implementations when a sequence implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> but also has a different set of public query methods available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> kann verwendet werden, um die Auswahl zwischen abfrageimplementierungen, wenn eine Sequenz implementiert <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> aber verfügt auch über einen anderen Satz von öffentlichen Abfragemethoden zur Verfügung.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For example, given a generic class <ph id="ph1">`Table`</ph> that implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and has its own methods such as <ph id="ph3">`Where`</ph>, <ph id="ph4">`Select`</ph>, and <ph id="ph5">`SelectMany`</ph>, a call to <ph id="ph6">`Where`</ph> would invoke the public <ph id="ph7">`Where`</ph> method of <ph id="ph8">`Table`</ph>.</source>
          <target state="translated">Angenommen, eine generische Klasse <ph id="ph1">`Table`</ph> implementiert <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> und verfügt über eigene Methoden wie <ph id="ph3">`Where`</ph>, <ph id="ph4">`Select`</ph>, und <ph id="ph5">`SelectMany`</ph>, einen Aufruf von <ph id="ph6">`Where`</ph> würde die öffentliche Aufrufen <ph id="ph7">`Where`</ph> Methode <ph id="ph8">`Table`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">`Table`</ph> type that represents a database table could have a <ph id="ph2">`Where`</ph> method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</source>
          <target state="translated">Ein <ph id="ph1">`Table`</ph> Typ, der eine Datenbanktabelle steht möglicherweise eine <ph id="ph2">`Where`</ph> Methode, die das Prädikatargument als einer Ausdrucksbaumstruktur dar und die Struktur für die Remoteausführung in SQL konvertiert.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If remote execution is not desired, for example because the predicate invokes a local method, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> method can be used to hide the custom methods and instead make the standard query operators available.</source>
          <target state="translated">Wenn Remoteausführung nicht, z. B. erwünscht ist, da das Prädikat eine lokale Methode ruft die <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> Methode kann verwendet werden, um die benutzerdefinierten Methoden ausblenden und stattdessen die Standardabfrageoperatoren verfügbar machen.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to hide a type's custom <ph id="ph2">`Where`</ph> method when the standard query operator implementation is desired.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> einen Ausblenden des benutzerdefinierten <ph id="ph2">`Where`</ph> Methode, wenn die Implementierung der Standardabfrageoperator-Operator gewünscht wird.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Computes the average of a sequence of numeric values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von numerischen Werten.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> berechnen den Durchschnitt einer Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
          <target state="translated">Wenn die Summe der Elemente zu groß für die Darstellung als eine <ph id="ph1">&lt;xref:System.Double&gt;</ph>, Methodenrückgabe positiv oder minus unendlich.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe der Elemente in der Sequenz ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
          <target state="translated">Wenn die Summe der Elemente zu groß für die Darstellung als eine <ph id="ph1">&lt;xref:System.Double&gt;</ph>, Methodenrückgabe positiv oder minus unendlich.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe der Elemente in der Sequenz ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe der Elemente in der Sequenz ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL sein können.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, deren Durchschnitt berechnet werden soll.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values that are used to calculate an average.</source>
          <target state="translated">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe der Elemente in der Sequenz ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe der Elemente in der Sequenz ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of source.</source>
          <target state="translated">Der Typ der Elemente der Quelle.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe der Elemente in der Sequenz ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe der Elemente in der Sequenz ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe der Elemente in der Sequenz ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten, oder <ph id="ph1">&lt;see langword="null" /&gt;</ph>, wenn die Quellsequenz leer ist oder nur Werte enthält, die <ph id="ph2">&lt;see langword="null" /&gt;</ph> sind.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet den Durchschnitt einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Der Durchschnitt der Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Average()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> einen Durchschnittswert berechnet.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The type to cast the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">Der Typ, der die Elemente eines umgewandelt <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept> an.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> that contains the elements to be cast to type <bpt id="p1">&lt;c&gt;</bpt>TResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>, das die in Typ <bpt id="p1">&lt;c&gt;</bpt>TResult<ept id="p1">&lt;/c&gt;</ept> umzuwandelnden Elemente enthält</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Casts the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> to the specified type.</source>
          <target state="translated">Wandelt die Elemente eines <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> in den angegebenen Typ um</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains each element of the source sequence cast to the specified type.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das jedes Element der Quellsequenz enthält, das in den angegebenen Typ umgewandelt wird</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> Methode ermöglicht die Standardabfrageoperatoren, die für nicht generische Auflistungen aufgerufen werden soll, indem Sie die erforderlichen Informationen angeben.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>For example, <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not implement <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, but by calling <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> on the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> object, the standard query operators can then be used to query the sequence.</source>
          <target state="translated">Z. B. <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> implementiert nicht <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, aber durch Aufrufen von <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> auf die <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> -Objekt Standardabfrageoperatoren können dann die Sequenz verwendet werden.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>If an element cannot be converted to type <ph id="ph1">`TResult`</ph>, this method throws a <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">Wenn ein Element konvertiert werden kann, um geben <ph id="ph1">`TResult`</ph>, löst diese Methode eine <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The source sequence for this method is <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, which means the elements have the compile-time static type of <ph id="ph2">`object`</ph>.</source>
          <target state="translated">Die Quellsequenz für diese Methode ist <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, dies bedeutet, dass die Elemente über den Zeitpunkt der Kompilierung statischen Typ des <ph id="ph2">`object`</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The only type conversions that are performed by this method are reference conversions and unboxing conversions.</source>
          <target state="translated">Die einzige typkonvertierungen, die von dieser Methode ausgeführt werden werden verweiskonvertierungen und unboxing-Konvertierungen.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</source>
          <target state="translated">Die Common Language Runtime-Typ der Elemente in der Auflistung muss den Zieltyp überein, oder bei Werttypen, muss der Common Language Runtime-Typ der Elemente das Ergebnis einer Boxing-Konvertierung des Zieltyps übereinstimmen.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Other conversion types, such as those between different numeric types, are not allowed.</source>
          <target state="translated">Andere umrechnungstypen, z. B. solche zwischen unterschiedlichen numerischen Typen sind nicht zulässig.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>To obtain only those elements that can be converted to type <ph id="ph1">`TResult`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> method instead of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">Um nur die Elemente abzurufen, die in den Typ konvertiert werden können <ph id="ph1">`TResult`</ph>, verwenden Sie die <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> Methode anstelle von <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>In a query expression, an explicitly typed iteration variable translates to an invocation of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">In einem Abfrageausdruck übersetzt eine explizit typisierte Iterationsvariable in einen Aufruf von <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>This example shows the syntax for an explicitly typed range variable.</source>
          <target state="translated">Dieses Beispiel zeigt die Syntax für eine explizit typisierte Bereichsvariable.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Use the <ph id="ph1">`select`</ph> clause of a query to perform other conversion types, like the implicit numeric conversions.</source>
          <target state="translated">Verwenden der <ph id="ph1">`select`</ph> -Klausel einer Abfrage andere Konvertierungstypen, z. B. den impliziten numerischen Konvertierungen ausführen.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The following example uses both the <ph id="ph1">`Cast`</ph> method and a <ph id="ph2">`select`</ph> statement to convert a sequence of boxed integers to a sequence of doubles.</source>
          <target state="translated">Im folgenden Beispiel wird sowohl die <ph id="ph1">`Cast`</ph> Methode und eine <ph id="ph2">`select`</ph> Anweisung, um eine Sequenz von geschachtelten ganzen Zahlen in eine Sequenz von Double-Werte zu konvertieren.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> to enable the use of the standard query operators on an <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> So aktivieren Sie die Verwendung von Standardabfrageoperatoren auf eine <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>An element in the sequence cannot be cast to type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Ein Element in der Sequenz kann nicht in den Typ <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> umgewandelt werden.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The first sequence to concatenate.</source>
          <target state="translated">Die erste zu verkettende Sequenz.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to concatenate to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verkettet werden soll.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Concatenates two sequences.</source>
          <target state="translated">Verkettet zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the concatenated elements of the two input sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die verketteten Elemente der beiden Eingabesequenzen enthält.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns all the original elements in the input sequences.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> -Methode unterscheidet sich von der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> Methode da die <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methodenrückgabe die ursprünglichen Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method returns only unique elements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> Methodenrückgabe nur eindeutige Elemente.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to concatenate two sequences.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> um zwei Sequenzen zu verketten.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method, passing it the identity selector function.</source>
          <target state="translated">Eine alternative Möglichkeit zum Verketten zweier Sequenzen wird zum Erstellen einer Auflistung, z. B. ein Array von Sequenzen an, und wenden Sie dann die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> -Methode, und übergeben sie die Identity-Selektor-Funktion.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following example demonstrates this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">Das folgende Beispiel zeigt diese Verwendung von <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether a sequence contains a specified element.</source>
          <target state="translated">Bestimmt, ob eine Sequenz ein angegebenes Element enthält.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence in which to locate a value.</source>
          <target state="translated">Eine Sequenz, in der ein Wert gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to locate in the sequence.</source>
          <target state="translated">Der Wert, der in der Sequenz gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Determines whether a sequence contains a specified element by using the default equality comparer.</source>
          <target state="translated">Bestimmt mithilfe des Standardgleichheitsvergleichs, ob eine Sequenz ein angegebenes Element enthält</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Quellsequenz ein Element mit dem angegebenen Wert enthält, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, the <ph id="ph3">`Contains`</ph> method in that implementation is invoked to obtain the result.</source>
          <target state="translated">Wenn der Typ des <ph id="ph1">`source`</ph> implementiert <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>die <ph id="ph3">`Contains`</ph> -Methode in dieser Implementierung wird aufgerufen, um das Resultset zu erzielen.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Otherwise, this method determines whether <ph id="ph1">`source`</ph> contains the specified element.</source>
          <target state="translated">Andernfalls wird diese Methode bestimmt, ob <ph id="ph1">`source`</ph> das angegebene Element enthält.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
          <target state="translated">Die Enumeration wird beendet, sobald ein übereinstimmendes Element gefunden wird.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Elements are compared to the specified value by using the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Elemente werden auf den angegebenen Wert mithilfe des Standardgleichheitsvergleichs verglichen <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to determine whether an array contains a specific element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> bestimmt, ob ein Array ein bestimmtes Element enthält.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence in which to locate a value.</source>
          <target state="translated">Eine Sequenz, in der ein Wert gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The value to locate in the sequence.</source>
          <target state="translated">Der Wert, der in der Sequenz gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>An equality comparer to compare values.</source>
          <target state="translated">Ein Gleichheitsvergleich zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether a sequence contains a specified element by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Bestimmt mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>, ob eine Sequenz ein angegebenes Element enthält</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Quellsequenz ein Element mit dem angegebenen Wert enthält, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
          <target state="translated">Die Enumeration wird beendet, sobald ein übereinstimmendes Element gefunden wird.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements to the specified value.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird zum Vergleichen von Elementen mit dem angegebenen Wert verwendet.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie dieses Vergleichs implementiert haben, können Sie eine Sequenz von <ph id="ph1">`Product`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Gibt die Anzahl der Elemente in einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains elements to be counted.</source>
          <target state="translated">Eine Sequenz, die zu zählende Elemente enthält.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Gibt die Anzahl der Elemente in einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in the input sequence.</source>
          <target state="translated">Die Anzahl der Elemente in der Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
          <target state="translated">Wenn der Typ des <ph id="ph1">`source`</ph> implementiert <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, diese Implementierung verwendet, um die Anzahl von Elementen abzurufen.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, this method determines the count.</source>
          <target state="translated">Andernfalls wird diese Methode bestimmt die Anzahl.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> Methode, wenn Sie erwarten, und das Ergebnis größer als zulässig sein soll <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Count()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> zum zählen der Elemente in einem Array.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Elemente in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist größer als <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A sequence that contains elements to be tested and counted.</source>
          <target state="translated">Eine Sequenz, die Elemente enthält, die überprüft und gezählt werden sollen</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns a number that represents how many elements in the specified sequence satisfy a condition.</source>
          <target state="translated">Gibt eine Zahl zurück, die die Anzahl der Elemente in der angegebenen Sequenz angibt, die eine Bedingung erfüllen</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
          <target state="translated">Eine Zahl, die die Anzahl der Elemente in der Sequenz darstellt, die die Bedingung in der Prädikatfunktion erfüllen.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
          <target state="translated">Wenn der Typ des <ph id="ph1">`source`</ph> implementiert <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, diese Implementierung verwendet, um die Anzahl von Elementen abzurufen.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Otherwise, this method determines the count.</source>
          <target state="translated">Andernfalls wird diese Methode bestimmt die Anzahl.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>You should use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Verwenden Sie die <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> Methode, wenn Sie erwarten, und das Ergebnis größer als zulässig sein soll <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Count()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> , die Elemente in einem Array zu zählen, die eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Elemente in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist größer als <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, or a default valued singleton collection if the sequence is empty.</source>
          <target state="translated">Gibt die Elemente eines <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> oder eine Standardwert-Singletonauflistung zurück, wenn die Sequenz leer ist</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to return a default value for if it is empty.</source>
          <target state="translated">Die Sequenz, für die ein Standardwert zurückgegeben werden soll, wenn sie leer ist.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Gibt die Elemente der angegebenen Sequenz oder den Standardwert des Typparameters in einer Singletonauflistung zurück, wenn die Sequenz leer ist</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> object that contains the default value for the <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> type if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>-Objekt, das den Standardwert für den <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>-Typ enthält, wenn <ph id="ph3">&lt;paramref name="source" /&gt;</ph> leer ist, andernfalls <ph id="ph4">&lt;paramref name="source" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Der Standardwert für Referenztypen und Typen ist <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
          <target state="translated">Diese Methode kann verwendet werden, um einen linken äußeren Join zu erzeugen, zusammen mit den <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) Methode.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to provide a default value in case the source sequence is empty.</source>
          <target state="translated">Die folgenden Codebeispiele veranschaulichen <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> um einen Standardwert anzugeben, für den Fall, dass die Quellsequenz leer ist.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This example uses a non-empty sequence.</source>
          <target state="translated">Dieses Beispiel verwendet eine nicht leere Sequenz.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This example uses an empty sequence.</source>
          <target state="translated">In diesem Beispiel wird eine leere Sequenz verwendet.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The sequence to return the specified value for if it is empty.</source>
          <target state="translated">Die Sequenz, für die der angegebene Wert zurückgegeben werden soll, wenn sie leer ist.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to return if the sequence is empty.</source>
          <target state="translated">Der Wert, der zurückgegeben werden soll, wenn die Sequenz leer ist.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Gibt die Elemente der angegebenen Sequenz oder den angegebenen Wert in einer Singletonauflistung zurück, wenn die Sequenz leer ist.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> enthält, wenn <ph id="ph3">&lt;paramref name="source" /&gt;</ph> leer ist, andernfalls <ph id="ph4">&lt;paramref name="source" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
          <target state="translated">Diese Methode kann verwendet werden, um einen linken äußeren Join zu erzeugen, zusammen mit den <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) Methode.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method and specify a default value.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode und einen Standardwert angeben.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The first sequence is not empty and the second sequence is empty.</source>
          <target state="translated">Die erste Sequenz nicht leer ist, und die zweite Sequenz leer ist.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns distinct elements from a sequence.</source>
          <target state="translated">Gibt unterschiedliche Elemente aus einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The result sequence is unordered.</source>
          <target state="translated">Die Ergebnissequenz ist nicht sortiert.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to remove duplicate elements from.</source>
          <target state="translated">Die Sequenz, aus der doppelte Elemente entfernt werden sollen.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns distinct elements from a sequence by using the default equality comparer to compare values.</source>
          <target state="translated">Gibt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains distinct elements from the source sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das unterschiedliche Elemente aus der Quellsequenz enthält</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methodenrückgabe eine ungeordnete Sequenz, die keine doppelten Werte enthält.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>It uses the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, to compare values.</source>
          <target state="translated">Er verwendet den Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Distinct`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax für Visual Basic einer <ph id="ph1">`Distinct`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generische Schnittstelle.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie eigene <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden für den Typ.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For an example that uses <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> to define a custom comparer, see <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.</source>
          <target state="translated">Ein Beispiel, verwendet <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> zum Definieren eines benutzerdefinierten Vergleichs finden Sie unter <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return distinct elements from a sequence of integers.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> unterschiedliche Elemente aus einer Sequenz von ganzen Zahlen zurückgegeben.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> generic interface in the class.</source>
          <target state="translated">Wenn Sie unterschiedliche Elemente aus einer Sequenz von Objekten eines benutzerdefinierten Datentyps zurückgeben möchten, müssen Sie implementieren die <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> generische Schnittstelle in der Klasse.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in einem benutzerdefinierten Datentyp aus, und geben Sie <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie diese Schnittstelle implementiert haben, können Sie eine Sequenz von <ph id="ph1">`Product`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The sequence to remove duplicate elements from.</source>
          <target state="translated">Die Sequenz, aus der doppelte Elemente entfernt werden sollen.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Returns distinct elements from a sequence by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Gibt mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains distinct elements from the source sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das unterschiedliche Elemente aus der Quellsequenz enthält</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methodenrückgabe eine ungeordnete Sequenz, die keine doppelten Werte enthält.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Wenn c<ph id="ph1">`omparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie dieses Vergleichs implementiert haben, können Sie eine Sequenz von <ph id="ph1">`Product`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">Der auf 0 (null) basierende Index des abzurufenden Elements.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence.</source>
          <target state="translated">Gibt das Element an einem angegebenen Index in einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The element at the specified position in the source sequence.</source>
          <target state="translated">Das Element an der angegebenen Position in der Quellsequenz.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
          <target state="translated">Wenn der Typ des <ph id="ph1">`source`</ph> implementiert <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, diese Implementierung wird verwendet, um das Element am angegebenen Index abzurufen.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Otherwise, this method obtains the specified element.</source>
          <target state="translated">Andernfalls ruft diese Methode das angegebene Element ab.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method throws an exception if <ph id="ph1">`index`</ph> is out of range.</source>
          <target state="translated">Diese Methode löst eine Ausnahme aus, wenn <ph id="ph1">`index`</ph> liegt außerhalb des gültigen Bereichs.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>To instead return a default value when the specified index is out of range, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Um stattdessen einen Standardwert zurückgeben, wenn der angegebene Index außerhalb des gültigen Bereichs ist, verwenden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph> to return an element at a specific position.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph> auf ein Element an einer bestimmten Position zurück.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than or equal to the number of elements in <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist kleiner als 0 bzw. größer oder gleich der Anzahl der Elemente in <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">Der auf 0 (null) basierende Index des abzurufenden Elements.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence or a default value if the index is out of range.</source>
          <target state="translated">Gibt das Element an einem angegebenen Index in einer Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>), wenn der Index außerhalb der Begrenzungen der Quellsequenz liegt, andernfalls das Element an der angegebenen Position in der Quellsequenz</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
          <target state="translated">Wenn der Typ des <ph id="ph1">`source`</ph> implementiert <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, diese Implementierung wird verwendet, um das Element am angegebenen Index abzurufen.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Otherwise, this method obtains the specified element.</source>
          <target state="translated">Andernfalls ruft diese Methode das angegebene Element ab.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Der Standardwert für Referenztypen und Typen ist <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>.</source>
          <target state="translated">Das folgende Codebeispiel zeigt die Verwendung von <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This example uses an index that is outside the bounds of the array.</source>
          <target state="translated">Dieses Beispiel verwendet einen Index, der außerhalb der Grenzen des Arrays ist.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The type to assign to the type parameter of the returned generic <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Der Typ, der dem Typparameter des zurückgegebenen generischen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> zugewiesen werden soll.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Empty``1">
          <source>Returns an empty <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has the specified type argument.</source>
          <target state="translated">Gibt ein leeres <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> zurück, das über das angegebene Typargument verfügt</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Empty``1">
          <source>An empty <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose type argument is <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Ein leeres <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Typargument <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> ist</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method caches an empty sequence of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> Methode speichert eine leere Sequenz vom Typ <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>When the object it returns is enumerated, it yields no elements.</source>
          <target state="translated">Wenn das zurückgegebene Objekt aufgezählt wird, führt er keine Elemente.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">In einigen Fällen diese Methode eignet sich für einer leeren Sequenz an eine benutzerdefinierte Methode übergeben, akzeptiert eine <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>It can also be used to generate a neutral element for methods such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.</source>
          <target state="translated">Kann auch ein neutrales Element für Methoden generieren, wie z. B. verwendet werden <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>See the Example section for an example of this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.</source>
          <target state="translated">Finden Sie im Beispielabschnitt für ein Beispiel für diese Verwendung von <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> to generate an empty <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> zum Generieren eines leeren <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The following code example demonstrates a possible application of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method.</source>
          <target state="translated">Das folgende Codebeispiel veranschaulicht eine mögliche Anwendung der der <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> method is applied to a collection of string arrays.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> Methode auf eine Auflistung von Zeichenfolgenarrays angewendet wird.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The elements of each array in the collection are added to the resulting <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> only if that array contains four or more elements.</source>
          <target state="translated">Die Elemente der einzelnen Arrays in der Auflistung werden hinzugefügt, auf das resultierende <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> nur, wenn das Array mit vier oder mehr Elemente enthält.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%2A&gt;</ph> is used to generate the seed value for <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> because if no array in the collection has four or more elements, only the empty sequence is returned.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%2A&gt;</ph> wird verwendet, um den Startwert für generieren <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> da Wenn kein Array in der Auflistung vier oder mehr Elemente enthält, die nur die leere Sequenz zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set difference of two sequences.</source>
          <target state="translated">Erzeugt die Differenzmenge von zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Es wird ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> zurückgegeben, dessen Elemente nicht auch in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> enthalten sind.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
          <target state="translated">Wenn ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Elemente enthält, die auch in der ersten Sequenz vorhanden sind, werden diese Elemente aus der zurückgegebenen Sequenz entfernt.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set difference of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Erzeugt die Differenzmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
          <target state="translated">Eine Sequenz, die die Differenzmenge der Elemente von zwei Sequenzen enthält.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The set difference of two sets is defined as the members of the first set that do not appear in the second set.</source>
          <target state="translated">Die Differenzmenge zweier Mengen ist definiert als die Elemente der ersten Menge, die in der zweiten Menge nicht angezeigt werden.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method returns those elements in <ph id="ph1">`first`</ph> that do not appear in <ph id="ph2">`second`</ph>.</source>
          <target state="translated">Diese Methode gibt die Elemente in <ph id="ph1">`first`</ph> , die erscheinen nicht im <ph id="ph2">`second`</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It does not also return those elements in <ph id="ph1">`second`</ph> that do not appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Es ist auch nicht zurückgeben dieser Elemente im <ph id="ph1">`second`</ph> , die erscheinen nicht im <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generische Schnittstelle.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie eigene <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden für den Typ.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method to compare two sequences of numbers and return elements that appear only in the first sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode zum Vergleichen von zwei Sequenzen von Zahlen und Elemente zurückgegeben, die nur in der ersten Sequenz angezeigt werden.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of some custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helperclass.</source>
          <target state="translated">Wenn Sie die Sequenzen von Objekten eines benutzerdefinierten Datentyps vergleichen möchten, müssen Sie implementieren die <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generische Schnittstelle in einem Helperclass.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in einem benutzerdefinierten Datentyp aus, und geben Sie <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie diese Schnittstelle implementiert haben, können Sie Sequenzen von <ph id="ph1">`ProductA`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Es wird ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> zurückgegeben, dessen Elemente nicht auch in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> enthalten sind.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
          <target state="translated">Wenn ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> Elemente enthält, die auch in der ersten Sequenz vorhanden sind, werden diese Elemente aus der zurückgegebenen Sequenz entfernt.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set difference of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Erzeugt mithilfe des angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> die Differenzmenge zweier Sequenzen zum Vergleichen von Werten</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
          <target state="translated">Eine Sequenz, die die Differenzmenge der Elemente von zwei Sequenzen enthält.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Wenn c<ph id="ph1">`omparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie dieses Vergleichs implementiert haben, können Sie Sequenzen von <ph id="ph1">`Product`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Gibt das erste Element einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen erstes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Gibt das erste Element einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first element in the specified sequence.</source>
          <target state="translated">Das erste Element in der angegebenen Sequenz.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode löst eine Ausnahme aus, wenn <ph id="ph2">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Um stattdessen einen Standardwert zurückgeben, wenn die Quellsequenz leer ist, verwenden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the first element of an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> auf das erste Element eines Arrays zurück.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the first element in a sequence that satisfies a specified condition.</source>
          <target state="translated">Gibt das erste Element in einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The first element in the sequence that passes the test in the specified predicate function.</source>
          <target state="translated">Das erste Element in der Sequenz, das mit der angegebenen Prädikatfunktion erfolgreich überprüft wird.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> Methode löst eine Ausnahme aus, wenn kein übereinstimmendes Element, in gefunden wird <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Um stattdessen einen Standardwert zurück, wenn kein übereinstimmendes Element gefunden wird, verwenden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return the first element of an array that satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> auf das erste Element eines Arrays zurück, das eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Kein Element erfüllt die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the first element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn kein Element gefunden wird</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen erstes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the first element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, the first element in <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>), wenn <ph id="ph3">&lt;paramref name="source" /&gt;</ph> leer ist, andernfalls das erste Element in <ph id="ph4">&lt;paramref name="source" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Der Standardwert für Referenztypen und Typen ist <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> Methode bietet keine Möglichkeit, einen Standardwert anzugeben.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Wenn Sie einen Standardwert außer angeben möchten <ph id="ph1">`default(TSource)`</ph>, verwenden Sie die <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode wie im Beispielabschnitt beschrieben.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> auf ein leeres Array.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In einigen Fällen den Wert des <ph id="ph1">`default(TSource)`</ph> ist nicht der Standardwert, die Sie verwenden, wenn die Auflistung keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Statt überprüft das Ergebnis für das unbeabsichtigten Standardwert, und ändern diese bei Bedarf, können Sie die <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode, um den Standardwert angeben, die Sie verwenden, wenn die Auflistung leer ist.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the first element.</source>
          <target state="translated">Rufen Sie dann <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> auf das erste Element abzurufen.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</source>
          <target state="translated">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von numerischen Monate leer ist.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</source>
          <target state="translated">Da der Standardwert für eine ganze Zahl 0 (null) das keine Monat entspricht ist, muss der Standardwert stattdessen mit 1 angegeben.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">Nach Ausführung die Abfrage beendet wurde, wird das erste Ergebnisvariable für das unbeabsichtigten Standardwert überprüft.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">Die zweite Ergebnisvariable wird mithilfe von <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> an den Standardwert 1.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">Gibt das erste Element der Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty or if no element passes the test specified by <ph id="ph4">&lt;paramref name="predicate" /&gt;</ph>; otherwise, the first element in <ph id="ph5">&lt;paramref name="source" /&gt;</ph> that passes the test specified by <ph id="ph6">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>), wenn <ph id="ph3">&lt;paramref name="source" /&gt;</ph> leer ist oder wenn kein Element die von <ph id="ph4">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung besteht. Andernfalls das erste Element in <ph id="ph5">&lt;paramref name="source" /&gt;</ph>, das die von <ph id="ph6">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung besteht.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Der Standardwert für Referenztypen und Typen ist <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> durch die Übergabe in einem Prädikat.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In the second call to the method, there is no element in the array that satisfies the condition.</source>
          <target state="translated">Im zweiten Aufruf der Methode ist gibt es kein Element im Array, das die Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Groups the elements of a sequence.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Groups the elements of a sequence according to a specified key selector function.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic where each <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a sequence of objects and a key.</source>
          <target state="translated">Ein <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder ein <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, wobei jedes <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>-Objekt eine Sequenz von Objekten und einen Schlüssel enthält</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Beispiele für <ph id="ph1">`GroupBy`</ph>, finden Sie unter den folgenden Themen.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> -Methode gibt eine Auflistung von <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> Objekten, eines für jedes distinct-Schlüssel, der aufgetreten ist.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> ist eine <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> , die verfügt auch über einen Schlüssel, der seine Elemente zugeordnet.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> Objekte werden in einer Reihenfolge entsprechend der Reihenfolge der Elemente im ergab <ph id="ph2">`source`</ph> , die den ersten Schlüssel für jede erstellte <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elemente in einer Gruppierung werden in der Reihenfolge zurückgegeben, dass <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`group by`</ph> (Visual c#) oder <ph id="ph2">`Group By Into`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Weitere Informationen und Verwendungsbeispiele finden Sie unter <bpt id="p1">[</bpt>Gruppenklausel<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> und <bpt id="p2">[</bpt>Group By-Klausel<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und vergleicht die Schlüssel mithilfe eines angegebenen Vergleichs</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic where each <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects and a key.</source>
          <target state="translated">Ein <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder ein <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, wobei jedes <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>-Objekt eine Auflistung von Objekten und einen Schlüssel enthält</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Beispiele für <ph id="ph1">`GroupBy`</ph>, finden Sie unter den folgenden Themen.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> -Methode gibt eine Auflistung von <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> Objekten, eines für jedes distinct-Schlüssel, der aufgetreten ist.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> ist eine <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> , die verfügt auch über einen Schlüssel, der seine Elemente zugeordnet.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> Objekte werden in einer Reihenfolge entsprechend der Reihenfolge der Elemente im ergab <ph id="ph2">`source`</ph> , die den ersten Schlüssel für jede erstellte <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elemente in einer Gruppierung werden in der Reihenfolge zurückgegeben, dass <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
          <target state="translated">Wenn zwei Schlüssel gleich gemäß ausmachen <ph id="ph1">`comparer`</ph>, der erste Schlüssel wird als Schlüssel für die Gruppierung ausgewählt.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`group by`</ph> (Visual c#) oder <ph id="ph2">`Group By Into`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Weitere Informationen und Verwendungsbeispiele finden Sie unter <bpt id="p1">[</bpt>Gruppenklausel<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> und <bpt id="p2">[</bpt>Group By-Klausel<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente im <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to map each source element to an element in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Eine Funktion, mit der jedes Quellelement einem Element in <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> zugeordnet wird</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und projiziert die Elemente für jede Gruppe mithilfe einer angegebenen Funktion</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic where each <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects of type <ph id="ph6">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">Ein <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder ein <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, wobei jedes <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>-Objekt eine Auflistung von Objekten des Typs <ph id="ph6">&lt;paramref name="TElement" /&gt;</ph> und einen Schlüssel enthält</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> -Methode gibt eine Auflistung von <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> Objekten, eines für jedes distinct-Schlüssel, der aufgetreten ist.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> ist eine <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> , die verfügt auch über einen Schlüssel, der seine Elemente zugeordnet.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> Objekte werden in einer Reihenfolge entsprechend der Reihenfolge der Elemente im ergab <ph id="ph2">`source`</ph> , die den ersten Schlüssel für jede erstellte <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elemente in einer Gruppierung werden zurückgegeben, in der angegebenen Reihenfolge an, die Elemente, die sie erstellt <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> to group the elements of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> zum Gruppieren der Elemente einer Sequenz.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`group by`</ph> (Visual c#) oder <ph id="ph2">`Group By Into`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The translation of the query expression in the following example is equivalent to the query in the example above.</source>
          <target state="translated">Die Übersetzung des Abfrageausdrucks im folgenden Beispiel wird die Abfrage im obigen Beispiel entspricht.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method.</source>
          <target state="translated">In einem Visual c# oder Visual Basic-Abfrageausdruck, die Element- und Auswahl Ausdrücke auftreten, in umgekehrter Reihenfolge Positionen ihrer Argumente in einem Aufruf der <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente im <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Eine Funktion, mit der jedes Quellelement einem Element in einem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> zugeordnet wird.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a key selector function.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer Schlüsselauswahlfunktion</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The keys are compared by using a comparer and each group's elements are projected by using a specified function.</source>
          <target state="translated">Die Schlüssel werden mithilfe eines Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic where each <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects of type <ph id="ph6">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">Ein <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder ein <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, wobei jedes <ph id="ph5">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>-Objekt eine Auflistung von Objekten des Typs <ph id="ph6">&lt;paramref name="TElement" /&gt;</ph> und einen Schlüssel enthält</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Beispiele für <ph id="ph1">`GroupBy`</ph>, finden Sie unter den folgenden Themen.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> -Methode gibt eine Auflistung von <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> Objekten, eines für jedes distinct-Schlüssel, der aufgetreten ist.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> ist eine <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> , die verfügt auch über einen Schlüssel, der seine Elemente zugeordnet.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> Objekte werden in einer Reihenfolge entsprechend der Reihenfolge der Elemente im ergab <ph id="ph2">`source`</ph> , die den ersten Schlüssel für jede erstellte <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elemente in einer Gruppierung werden zurückgegeben, in der angegebenen Reihenfolge an, die Elemente, die sie erstellt <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
          <target state="translated">Wenn zwei Schlüssel gleich gemäß ausmachen <ph id="ph1">`comparer`</ph>, der erste Schlüssel wird als Schlüssel für die Gruppierung ausgewählt.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`group by`</ph> (Visual c#) oder <ph id="ph2">`Group By Into`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Weitere Informationen und Verwendungsbeispiele finden Sie unter <bpt id="p1">[</bpt>Gruppenklausel<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> und <bpt id="p2">[</bpt>Group By-Klausel<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebniswerts zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>ResultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Eine Auflistung von Elementen vom Typ <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`group by`</ph> (Visual c#) oder <ph id="ph2">`Group By Into`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29&gt;</ph> to group the elements of a sequence and project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29&gt;</ph> zum Gruppieren der Elemente einer Sequenz und eine Sequenz von Ergebnissen vom Typ projizieren <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebniswerts zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>ResultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys with.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The keys are compared by using a specified comparer.</source>
          <target state="translated">Die Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Eine Auflistung von Elementen vom Typ <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente in jedem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebniswerts zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>ResultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Eine Funktion, mit der jedes Quellelement einem Element in einem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> zugeordnet wird.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The elements of each group are projected by using a specified function.</source>
          <target state="translated">Die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Eine Auflistung von Elementen vom Typ <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`group by`</ph> (Visual c#) oder <ph id="ph2">`Group By Into`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29&gt;</ph> to group the projected elements of a sequence and then project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29&gt;</ph> die projizierten Elemente einer Sequenz gruppieren und dann eine Sequenz von Ergebnissen vom Typ projizieren <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente in jedem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebniswerts zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>ResultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente gruppiert werden sollen</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Eine Funktion, mit der jedes Quellelement einem Element in einem <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> zugeordnet wird.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys with.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</source>
          <target state="translated">Schlüsselwerte werden mithilfe eines angegebenen Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Eine Auflistung von Elementen vom Typ <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Correlates the elements of two sequences based on key equality, and groups the results.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the result elements.</source>
          <target state="translated">Der Typ der Ergebniselemente.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The first sequence to join.</source>
          <target state="translated">Die erste zu verknüpfende Sequenz.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>Correlates the elements of two sequences based on equality of keys and groups the results.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing a grouped join on two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das Elemente vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> enthält, die durch Ausführen einer Gruppenverknüpfung von zwei Sequenzen ermittelt werden</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, zum Hashen und Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> erzeugt hierarchische Ergebnisse, dies bedeutet, dass Elemente aus <ph id="ph2">`outer`</ph> mit Auflistungen von übereinstimmenden Elementen aus gekoppelt sind <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> ermöglicht es Ihnen, Ihre Ergebnisse als Grundlage für eine ganze Gruppe von Übereinstimmungen für jedes Element der <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
          <target state="translated">Wenn es keine zugehörigen Elemente in sind <ph id="ph1">`inner`</ph> für ein angegebenes Element der <ph id="ph2">`outer`</ph>, die Abfolge der Übereinstimmungen für dieses Element leer, werden jedoch weiterhin in den Ergebnissen angezeigt wird.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
          <target state="translated">Die <ph id="ph1">`resultSelector`</ph> Funktion wird nur jeweils einmal für jeden <ph id="ph2">`outer`</ph> -Element zusammen mit der eine Auflistung aller der <ph id="ph3">`inner`</ph> die entsprechenden Elemente der <ph id="ph4">`outer`</ph> Element.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method, in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated">Dies unterscheidet sich von der <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> Methode, in dem die Ergebnisauswahlfunktion aufgerufen wird, auf-Paaren, die ein Element aus enthalten <ph id="ph2">`outer`</ph> und ein Element aus <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> behält die Reihenfolge der Elemente des <ph id="ph2">`outer`</ph>, und für jedes Element der <ph id="ph3">`outer`</ph>, die Reihenfolge der übereinstimmenden Elemente aus <ph id="ph4">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> verfügt über keine direkte Entsprechung herkömmliche relationale Datenbanken bedeutet.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
          <target state="translated">Diese Methode implementiert jedoch eine übergeordnete Menge innerer und linker äußerer Verknüpfungen.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>Both of these operations can be written in terms of a grouped join.</source>
          <target state="translated">Beide dieser Vorgänge können im Hinblick auf eines Group Joins geschrieben werden.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Finden Sie unter <bpt id="p1">[</bpt>Joinvorgängen<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>In query expression syntax, a <ph id="ph1">`join … into`</ph> (Visual C#) or <ph id="ph2">`Group Join`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`join … into`</ph> (Visual c#) oder <ph id="ph2">`Group Join`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29&gt;</ph> to perform a grouped join on two sequences.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29&gt;</ph> zum Ausführen eines Group Joins von zwei Sequenzen.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inner" /&gt;</ph>, <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">Der Typ der Ergebniselemente.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">Die erste zu verknüpfende Sequenz.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Hashen und Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Schlüssel werden mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> verglichen.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing a grouped join on two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das Elemente vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> enthält, die durch Ausführen einer Gruppenverknüpfung von zwei Sequenzen ermittelt werden</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, zum Hashen und Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> erzeugt hierarchische Ergebnisse, dies bedeutet, dass Elemente aus <ph id="ph2">`outer`</ph> mit Auflistungen von übereinstimmenden Elementen aus gekoppelt sind <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> ermöglicht es Ihnen, Ihre Ergebnisse als Grundlage für eine ganze Gruppe von Übereinstimmungen für jedes Element der <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
          <target state="translated">Wenn es keine zugehörigen Elemente in sind <ph id="ph1">`inner`</ph> für ein angegebenes Element der <ph id="ph2">`outer`</ph>, die Abfolge der Übereinstimmungen für dieses Element leer, werden jedoch weiterhin in den Ergebnissen angezeigt wird.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
          <target state="translated">Die <ph id="ph1">`resultSelector`</ph> Funktion wird nur jeweils einmal für jeden <ph id="ph2">`outer`</ph> -Element zusammen mit der eine Auflistung aller der <ph id="ph3">`inner`</ph> die entsprechenden Elemente der <ph id="ph4">`outer`</ph> Element.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated">Dies unterscheidet sich von der <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> Methode in der die Ergebnisauswahlfunktion aufgerufen wird, auf-Paaren, die ein Element aus enthalten <ph id="ph2">`outer`</ph> und ein Element aus <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> behält die Reihenfolge der Elemente des <ph id="ph2">`outer`</ph>, und für jedes Element der <ph id="ph3">`outer`</ph>, die Reihenfolge der übereinstimmenden Elemente aus <ph id="ph4">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> verfügt über keine direkte Entsprechung herkömmliche relationale Datenbanken bedeutet.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
          <target state="translated">Diese Methode implementiert jedoch eine übergeordnete Menge innerer und linker äußerer Verknüpfungen.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Both of these operations can be written in terms of a grouped join.</source>
          <target state="translated">Beide dieser Vorgänge können im Hinblick auf eines Group Joins geschrieben werden.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Finden Sie unter <bpt id="p1">[</bpt>Joinvorgängen<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inner" /&gt;</ph>, <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set intersection of two sequences.</source>
          <target state="translated">Erzeugt die Schnittmenge zweier Sequenzen</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente auch in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> vorhanden sind, wird zurückgegeben.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente auch in der ersten Sequenz vorhanden sind, wird zurückgegeben.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set intersection of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Erzeugt die Schnittmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
          <target state="translated">Eine Sequenz, die die Elemente enthält, die die Schnittmenge von zwei Sequenzen bilden.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
          <target state="translated">Die Schnittmenge zweier Mengen A und B ist als die Gruppe definiert, die alle Elemente von A, die auch in B vorhanden, aber keine anderen Elemente enthält.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Wenn das Objekt, das von dieser Methode zurückgegebene aufgelistet, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> ergibt unterschiedliche Elemente, die in beiden Sequenzen in der Reihenfolge, in Reihenfolge, auftreten <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generische Schnittstelle.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie eigene <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden für den Typ.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the elements that appear in each of two sequences of integers.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> die Elemente, die angezeigt werden in beiden Sequenzen von ganzen Zahlen zurückgegeben.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of a custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helper class.</source>
          <target state="translated">Wenn Sie die Sequenzen von Objekten mit einem benutzerdefinierten Datentyp vergleichen möchten, müssen Sie implementieren die <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generische Schnittstelle in einer Hilfsklasse.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in einem benutzerdefinierten Datentyp aus, und geben Sie <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie diese Schnittstelle implementiert haben, können Sie Sequenzen von <ph id="ph1">`ProductA`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente auch in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> vorhanden sind, wird zurückgegeben.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente auch in der ersten Sequenz vorhanden sind, wird zurückgegeben.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set intersection of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Erzeugt mithilfe des angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten die Schnittmenge von zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
          <target state="translated">Eine Sequenz, die die Elemente enthält, die die Schnittmenge von zwei Sequenzen bilden.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
          <target state="translated">Die Schnittmenge zweier Mengen A und B ist als die Gruppe definiert, die alle Elemente von A, die auch in B vorhanden, aber keine anderen Elemente enthält.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Wenn das Objekt, das von dieser Methode zurückgegebene aufgelistet, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> ergibt unterschiedliche Elemente, die in beiden Sequenzen in der Reihenfolge, in Reihenfolge, auftreten <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie dieses Vergleichs implementiert haben, können Sie Sequenzen von <ph id="ph1">`Product`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the result elements.</source>
          <target state="translated">Der Typ der Ergebniselemente.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The first sequence to join.</source>
          <target state="translated">Die erste zu verknüpfende Sequenz.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing an inner join on two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das Elemente vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> enthält, die durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, zum Hashen und Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
          <target state="translated">Ein Join bezieht sich auf den Vorgang, der die Elemente von zwei Quellen mit Informationen, die auf Grundlage eines gemeinsamen Schlüssels korreliert.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> Schaltet die beiden Informationsquellen und die Schlüssel, mit denen sie zusammen in einem Methodenaufruf abgeglichen werden.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
          <target state="translated">Dies unterscheidet sich von der Verwendung von <ph id="ph1">`SelectMany`</ph>, wofür die mehr als ein Methodenaufruf an den gleichen Vorgang auszuführen.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> behält die Reihenfolge der Elemente des <ph id="ph2">`outer`</ph>, und für jedes dieser Elemente, die Reihenfolge der übereinstimmenden Elemente von <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>In query expression syntax, a <ph id="ph1">`join`</ph> (Visual C#) or <ph id="ph2">`Join`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`join`</ph> (Visual c#) oder <ph id="ph2">`Join`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
          <target state="translated">Bei relationalen Datenbanken die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> Methode implementiert einen inneren Equi-Join.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
          <target state="translated">"Innere" bedeutet, dass nur Elemente, die eine Übereinstimmung in die andere Sequenz in den Ergebnissen enthalten sind.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
          <target state="translated">' Equi-Join "ist eine Verknüpfung in die die Schlüssel auf Gleichheit verglichen werden.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
          <target state="translated">Ein linker äußerer Join-Vorgang hat keine dedizierte Standardabfrageoperator, kann aber mit ausgeführt werden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Finden Sie unter <bpt id="p1">[</bpt>Joinvorgängen<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29&gt;</ph> to perform an inner join of two sequences based on a common key.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29&gt;</ph> eine innere Verknüpfung zweier Sequenzen basierend auf einem gemeinsamen Schlüssel ausführen.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inner" /&gt;</ph>, <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">Der Typ der Ergebniselemente.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">Die erste zu verknüpfende Sequenz.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Hashen und Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Schlüssel werden mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> verglichen.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing an inner join on two sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das Elemente vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> enthält, die durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Wenn c<ph id="ph1">`omparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, zum Hashen und Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
          <target state="translated">Ein Join bezieht sich auf den Vorgang, der die Elemente von zwei Quellen mit Informationen, die auf Grundlage eines gemeinsamen Schlüssels korreliert.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> Schaltet die beiden Informationsquellen und die Schlüssel, mit denen sie zusammen in einem Methodenaufruf abgeglichen werden.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
          <target state="translated">Dies unterscheidet sich von der Verwendung von <ph id="ph1">`SelectMany`</ph>, wofür die mehr als ein Methodenaufruf an den gleichen Vorgang auszuführen.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> behält die Reihenfolge der Elemente des <ph id="ph2">`outer`</ph>, und für jedes dieser Elemente, die Reihenfolge der übereinstimmenden Elemente von <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
          <target state="translated">Bei relationalen Datenbanken die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> Methode implementiert einen inneren Equi-Join.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
          <target state="translated">"Innere" bedeutet, dass nur Elemente, die eine Übereinstimmung in die andere Sequenz in den Ergebnissen enthalten sind.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
          <target state="translated">' Equi-Join "ist eine Verknüpfung in die die Schlüssel auf Gleichheit verglichen werden.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
          <target state="translated">Ein linker äußerer Join-Vorgang hat keine dedizierte Standardabfrageoperator, kann aber mit ausgeführt werden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Finden Sie unter <bpt id="p1">[</bpt>Joinvorgängen<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph>, <ph id="ph2">&lt;paramref name="inner" /&gt;</ph>, <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph>, <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> oder <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the last element of a sequence.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen letztes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the last element of a sequence.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The value at the last position in the source sequence.</source>
          <target state="translated">Der Wert an der letzten Position in der Quellsequenz.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode löst eine Ausnahme aus, wenn <ph id="ph2">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Um stattdessen einen Standardwert zurückgeben, wenn die Quellsequenz leer ist, verwenden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the last element of an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> auf das letzte Element eines Arrays zurück.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the last element of a sequence that satisfies a specified condition.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The last element in the sequence that passes the test in the specified predicate function.</source>
          <target state="translated">Das letzte Element in der Sequenz, das mit der angegebenen Prädikatfunktion erfolgreich überprüft wird.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> Methode löst eine Ausnahme aus, wenn kein übereinstimmendes Element, in gefunden wird <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Um stattdessen einen Standardwert zurück, wenn kein übereinstimmendes Element gefunden wird, verwenden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return the last element of an array that satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> auf das letzte Element eines Arrays zurück, das eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Kein Element erfüllt die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the last element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn kein Element gefunden wird</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen letztes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the last element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the source sequence is empty; otherwise, the last element in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>), wenn die Quellsequenz leer ist; andernfalls das letzte Element in <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Der Standardwert für Referenztypen und Typen ist <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> Methode bietet keine Möglichkeit, einen Standardwert anzugeben.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Wenn Sie einen Standardwert außer angeben möchten <ph id="ph1">`default(TSource)`</ph>, verwenden Sie die <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode wie im Beispielabschnitt beschrieben.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> auf ein leeres Array.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In einigen Fällen den Wert des <ph id="ph1">`default(TSource)`</ph> ist nicht der Standardwert, die Sie verwenden, wenn die Auflistung keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Statt überprüft das Ergebnis für das unbeabsichtigten Standardwert, und ändern diese bei Bedarf, können Sie die <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode, um den Standardwert angeben, die Sie verwenden, wenn die Auflistung leer ist.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the last element.</source>
          <target state="translated">Rufen Sie dann <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> auf das letzte Element abzurufen.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</source>
          <target state="translated">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von numerischen Tage des Monats leer ist.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</source>
          <target state="translated">Da der Standardwert für eine ganze Zahl 0 (null) das nicht zu einem beliebigen Tag des Monats entspricht ist, muss der Standardwert stattdessen mit 1 angegeben.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">Nach Ausführung die Abfrage beendet wurde, wird das erste Ergebnisvariable für das unbeabsichtigten Standardwert überprüft.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">Die zweite Ergebnisvariable wird mithilfe von <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> an den Standardwert 1.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">Gibt das letzte Element einer Sequenz, das eine Bedingung erfüllt, oder einen Standardwert zurück, wenn ein solches Element nicht gefunden wird.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>), wenn die Sequenz leer ist oder wenn keine Elemente von der Prädikatfunktion erfolgreich überprüft werden. Andernfalls das letzte Element, das von der Prädikatfunktion erfolgreich überprüft wird.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Der Standardwert für Referenztypen und Typen ist <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> durch die Übergabe in einem Prädikat.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In the second call to the method, there is no element in the sequence that satisfies the condition.</source>
          <target state="translated">Im zweiten Aufruf der Methode ist gibt es kein Element in der Sequenz, die die Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the number of elements in a sequence.</source>
          <target state="translated">Gibt ein <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> zurück, das die Anzahl der Elemente in einer Sequenz darstellt</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die zu zählenden Elemente enthält</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the total number of elements in a sequence.</source>
          <target state="translated">Gibt ein <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> zurück, das die Gesamtanzahl der Elemente in einer Sequenz darstellt</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in the source sequence.</source>
          <target state="translated">Die Anzahl der Elemente in der Quellsequenz</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Verwenden Sie diese Methode statt <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> Wenn Sie erwarten, dass das Ergebnis größer als <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into LongCount()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> zum zählen der Elemente in einem Array.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Elemente überschreitet <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die zu zählenden Elemente enthält</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents how many elements in a sequence satisfy a condition.</source>
          <target state="translated">Gibt ein <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> zurück, das die Anzahl der Elemente in einer Sequenz darstellt, die eine Bedingung erfüllen</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
          <target state="translated">Eine Zahl, die die Anzahl der Elemente in der Sequenz darstellt, die die Bedingung in der Prädikatfunktion erfüllen.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Verwenden Sie diese Methode statt <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> Wenn Sie erwarten, dass das Ergebnis größer als <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into LongCount()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> , die Elemente in einem Array zu zählen, die eine Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The number of matching elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der übereinstimmenden Elemente überschreitet <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the maximum value in a sequence of values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von Werten zurück</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Double&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int32&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int64&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Ein Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Ein Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Double&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Ein Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int32&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Ein Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Studio, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int64&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Ein Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Single&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, deren Höchstwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Höchstwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Single&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the maximum value in a generic sequence.</source>
          <target state="translated">Gibt den Höchstwert in einer generischen Sequenz zurück</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method uses that implementation to compare values.</source>
          <target state="translated">Wenn Typ <ph id="ph1">`TSource`</ph> implementiert <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>die <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode, dass diese Implementierung verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">Andernfalls gilt: Wenn Typ <ph id="ph1">`TSource`</ph> implementiert <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, diese Implementierung wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this method returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Wenn <ph id="ph1">`TSource`</ph> einen Referenztyp darstellt und die Quellsequenz ist leer oder enthält nur die Werte, die <ph id="ph2">`null`</ph>, gibt diese Methode <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine the maximum value in a sequence of <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objects.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> zum Bestimmen des maximalen Werts in einer Sequenz von <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> Objekte.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Double&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int32&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int64&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Double&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int32&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Int32)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int64&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Der Wert des Typs <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Single&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Single&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des vom zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</source>
          <target state="translated">Ruft für jedes Element einer generischen Sequenz eine Transformationsfunktion auf, und gibt den höchsten Ergebniswert zurück</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Der Höchstwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Wenn Typ <ph id="ph1">`TResult`</ph> implementiert <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, diese Methode, dass diese Implementierung verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">Andernfalls gilt: Wenn Typ <ph id="ph1">`TResult`</ph> implementiert <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, diese Implementierung wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Max()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the minimum value in a sequence of values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von Werten zurück</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Double&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int32&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int64&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Ein Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Double&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Ein Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int32&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Ein Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int64&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten zurück, die NULL-Werte zulassen</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Der Wert des Typs <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Single&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die <ph id="ph1">`null`</ph>, gibt diese Funktion <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, deren Mindestwert bestimmt werden soll</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Gibt den Mindestwert in einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten zurück</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Single&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the minimum value in a generic sequence.</source>
          <target state="translated">Gibt den Mindestwert in einer generischen Sequenz zurück</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Wenn Typ <ph id="ph1">`TSource`</ph> implementiert <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, diese Methode, dass diese Implementierung verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">Andernfalls gilt: Wenn Typ <ph id="ph1">`TSource`</ph> implementiert <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, diese Implementierung wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this function returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Wenn <ph id="ph1">`TSource`</ph> einen Referenztyp darstellt und die Quellsequenz ist leer oder enthält nur die Werte, die <ph id="ph2">`null`</ph>, gibt diese Funktion <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine the minimum value in a sequence of <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objects.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> zum Bestimmen des minimalen Werts in einer Sequenz von <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> Objekte.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Double&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int32&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int64&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Double&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int32&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of source into a numeric type, specifically <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph3">`Nullable(Of Int32)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>, die projiziert die Elemente der Quelle in einen numerischen Typ, insbesondere <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> in c# oder <ph id="ph3">`Nullable(Of Int32)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Der Wert vom Typ <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Int64&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Wert zurück, der NULL-Werte zulässt</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Der Wert des Typs <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# oder <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Single&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Wert zurück</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> -Methode verwendet die <ph id="ph2">&lt;xref:System.Single&gt;</ph> Implementierung von <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> zum Vergleichen von Werten.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des vom zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</source>
          <target state="translated">Ruft für jedes Element einer generischen Sequenz eine Transformationsfunktion auf, und gibt den niedrigsten Ergebniswert zurück</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Der Mindestwert in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Wenn Typ <ph id="ph1">`TResult`</ph> implementiert <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, diese Methode, dass diese Implementierung verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">Andernfalls gilt: Wenn Typ <ph id="ph1">`TResult`</ph> implementiert <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, diese Implementierung wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Min()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The type to filter the elements of the sequence on.</source>
          <target state="translated">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> whose elements to filter.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>, dessen Elemente gefiltert werden sollen</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>Filters the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> based on a specified type.</source>
          <target state="translated">Filtert die Elemente eines <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> anhand eines angegebenen Typs</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das Elemente aus der Eingabesequenz vom Typ <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> enthält</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> method returns only those elements in <ph id="ph2">`source`</ph> that can be cast to type <ph id="ph3">`TResult`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> nur die Elemente in der Methodenrückgabe <ph id="ph2">`source`</ph> in den Typ umgewandelt werden kann <ph id="ph3">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>To instead receive an exception if an element cannot be cast to type <ph id="ph1">`TResult`</ph>, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">Stattdessen eine Ausnahme empfangen wird, wenn ein Element Typ umgewandelt werden kann <ph id="ph1">`TResult`</ph>, verwenden Sie <ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">Diese Methode ist eine der wenigen Standardabfrageoperator-Methoden, die für eine Sammlung angewendet werden können, deren nicht parametrisierten Typ, z. B. ein <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This is because <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> extends the type <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated">Grund hierfür ist, <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> erweitert den Typ <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> cannot only be applied to collections that are based on the parameterized <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type, but collections that are based on the non-parameterized <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> type also.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> nicht nur auf Sammlungen basierend auf angewendet werden auf den parametrisierten <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> aufweisen, aber Sammlungen basierend auf den nicht parametrisierten <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> auch geben.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>By applying <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to a collection that implements <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, you gain the ability to query the collection by using the standard query operators.</source>
          <target state="translated">Durch Anwenden von <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> für eine Sammlung, die implementiert <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, erhalten Sie die Möglichkeit, die die Auflistung mit den Standardabfrageoperatoren Abfragen.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>For example, specifying a type argument of <ph id="ph1">&lt;xref:System.Object&gt;</ph> to <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> would return an object of type <ph id="ph3">`IEnumerable&lt;Object&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Object)`</ph> in Visual Basic, to which the standard query operators can be applied.</source>
          <target state="translated">Z. B. ein Typargument angeben <ph id="ph1">&lt;xref:System.Object&gt;</ph> auf <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> würde ein Objekt des Typs zurückgeben <ph id="ph3">`IEnumerable&lt;Object&gt;`</ph> in c# oder <ph id="ph4">`IEnumerable(Of Object)`</ph> in Visual Basic auf die Standardabfrageoperatoren angewendet werden können.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to filter the elements of an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> zum Filtern der Elemente von einem <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Sorts the elements of a sequence in ascending order.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Eine Sequenz von anzuordnenden Werten.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Sorts the elements of a sequence in ascending order according to a key.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>, dessen Elemente nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (<ph id="ph1">`x =&gt; x`</ph> in Visual C#- oder <ph id="ph2">`Function(x) x`</ph> in Visual Basic) für <ph id="ph3">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Zwei Methoden definiert werden, um den Typ erweitern <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, dies ist der Rückgabetyp dieser Methode.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Diese zwei Methoden, nämlich <ph id="ph1">`ThenBy`</ph> und <ph id="ph2">`ThenByDescending`</ph>, können Sie zusätzliche Kriterien zum Sortieren einer Sequenz angeben.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> und <ph id="ph2">`ThenByDescending`</ph> auch Zurückgeben einer <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, was bedeutet, dass eine beliebige Anzahl von aufeinander folgende Aufrufe von <ph id="ph4">`ThenBy`</ph> oder <ph id="ph5">`ThenByDescending`</ph> vorgenommen werden können.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Da <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> erbt von <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, Sie können Aufrufen <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> oder <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> auf die Ergebnisse eines Aufrufs von <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Auf diese Weise führt eine neue primäre Sortierung, die zuvor festgelegte Sortierung ignoriert.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Diese Methode vergleicht die Schlüssel mithilfe des Standardvergleichs <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Diese Methode führt eine stabile Sortierung. Das heißt, ist die Schlüssel der zwei Elemente gleich sind, die Reihenfolge der Elemente beibehalten.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby`</ph> (Visual C#) or <ph id="ph2">`Order By`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`orderby`</ph> (Visual c#) oder <ph id="ph2">`Order By`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to sort the elements of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> die Elemente einer Sequenz sortiert.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Eine Sequenz von anzuordnenden Werten.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in aufsteigender Reihenfolge</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>, dessen Elemente nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (<ph id="ph1">`x =&gt; x`</ph> in Visual C#- oder <ph id="ph2">`Function(x) x`</ph> in Visual Basic) für <ph id="ph3">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Zwei Methoden definiert werden, um den Typ erweitern <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, dies ist der Rückgabetyp dieser Methode.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Diese zwei Methoden, nämlich <ph id="ph1">`ThenBy`</ph> und <ph id="ph2">`ThenByDescending`</ph>, können Sie zusätzliche Kriterien zum Sortieren einer Sequenz angeben.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> und <ph id="ph2">`ThenByDescending`</ph> auch Zurückgeben einer <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, was bedeutet, dass eine beliebige Anzahl von aufeinander folgende Aufrufe von <ph id="ph4">`ThenBy`</ph> oder <ph id="ph5">`ThenByDescending`</ph> vorgenommen werden können.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Da <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> erbt von <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, Sie können Aufrufen <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> oder <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> auf die Ergebnisse eines Aufrufs von <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Auf diese Weise führt eine neue primäre Sortierung, die zuvor festgelegte Sortierung ignoriert.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, die standardmäßige Vergleichsfunktion <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Diese Methode führt eine stabile Sortierung. Das heißt, ist die Schlüssel der zwei Elemente gleich sind, die Reihenfolge der Elemente beibehalten.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Sorts the elements of a sequence in descending order.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz in absteigender Reihenfolge.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Eine Sequenz von anzuordnenden Werten.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Sorts the elements of a sequence in descending order according to a key.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz in absteigender Reihenfolge nach einem Schlüssel</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (<ph id="ph1">`x =&gt; x`</ph> in Visual C#- oder <ph id="ph2">`Function(x) x`</ph> in Visual Basic) für <ph id="ph3">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For an example of this method, see <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.</source>
          <target state="translated">Ein Beispiel dieser Methode finden Sie unter <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Zwei Methoden definiert werden, um den Typ erweitern <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, dies ist der Rückgabetyp dieser Methode.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Diese zwei Methoden, nämlich <ph id="ph1">`ThenBy`</ph> und <ph id="ph2">`ThenByDescending`</ph>, können Sie zusätzliche Kriterien zum Sortieren einer Sequenz angeben.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> und <ph id="ph2">`ThenByDescending`</ph> auch Zurückgeben einer <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, was bedeutet, dass eine beliebige Anzahl von aufeinander folgende Aufrufe von <ph id="ph4">`ThenBy`</ph> oder <ph id="ph5">`ThenByDescending`</ph> vorgenommen werden können.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Da <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> erbt von <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, Sie können Aufrufen <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> oder <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> auf die Ergebnisse eines Aufrufs von <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Auf diese Weise führt eine neue primäre Sortierung, die zuvor festgelegte Sortierung ignoriert.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Diese Methode vergleicht die Schlüssel mithilfe des Standardvergleichs <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Diese Methode führt eine stabile Sortierung. Das heißt, ist die Schlüssel der zwei Elemente gleich sind, die Reihenfolge der Elemente beibehalten.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby descending`</ph> (Visual C#) or <ph id="ph2">`Order By Descending`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`orderby descending`</ph> (Visual c#) oder <ph id="ph2">`Order By Descending`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Eine Sequenz von anzuordnenden Werten.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in absteigender Reihenfolge.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (<ph id="ph1">`x =&gt; x`</ph> in Visual C#- oder <ph id="ph2">`Function(x) x`</ph> in Visual Basic) für <ph id="ph3">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Zwei Methoden definiert werden, um den Typ erweitern <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, dies ist der Rückgabetyp dieser Methode.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Diese zwei Methoden, nämlich <ph id="ph1">`ThenBy`</ph> und <ph id="ph2">`ThenByDescending`</ph>, können Sie zusätzliche Kriterien zum Sortieren einer Sequenz angeben.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> und <ph id="ph2">`ThenByDescending`</ph> auch Zurückgeben einer <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, was bedeutet, dass eine beliebige Anzahl von aufeinander folgende Aufrufe von <ph id="ph4">`ThenBy`</ph> oder <ph id="ph5">`ThenByDescending`</ph> vorgenommen werden können.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Da <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> erbt von <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, Sie können Aufrufen <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> oder <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> auf die Ergebnisse eines Aufrufs von <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Auf diese Weise führt eine neue primäre Sortierung, die zuvor festgelegte Sortierung ignoriert.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, die standardmäßige Vergleichsfunktion <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Diese Methode führt eine stabile Sortierung. Das heißt, ist die Schlüssel der zwei Elemente gleich sind, die Reihenfolge der Elemente beibehalten.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> zum Sortieren der Elemente einer Sequenz in absteigender Reihenfolge nach einer Transform-Funktion mit einem benutzerdefinierten Vergleich.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Der Typ der Elemente von <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence of values.</source>
          <target state="translated">Eine Wertesequenz.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to prepend to <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Der <ph id="ph1">&lt;paramref name="source" /&gt;</ph> voranzustellende Wert.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Adds a value to the beginning of the sequence.</source>
          <target state="translated">Fügt einen Wert am Anfang der Sequenz ein.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A new sequence that begins with <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</source>
          <target state="translated">Eine neue Sequenz, die mit <ph id="ph1">&lt;paramref name="element" /&gt;</ph> beginnt.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The value of the first integer in the sequence.</source>
          <target state="translated">Der Wert der ersten ganzen Zahl in der Sequenz.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The number of sequential integers to generate.</source>
          <target state="translated">Die Anzahl der aufeinander folgenden ganzen Zahlen, die generiert werden sollen.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>Generates a sequence of integral numbers within a specified range.</source>
          <target state="translated">Generiert eine Sequenz von ganzen Zahlen in einem angegebenen Bereich</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic that contains a range of sequential integral numbers.</source>
          <target state="translated">Eine <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept>-Schnittstelle in C# oder <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in Visual Basic, die einen Bereich sequenzieller ganzer Zahlen enthält.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Range%2A&gt;</ph> to generate a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Range%2A&gt;</ph> um eine Sequenz von Werten zu generieren.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="start" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> -1 is larger than <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="start" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> -1 ist größer als <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The type of the value to be repeated in the result sequence.</source>
          <target state="translated">Der Typ des Werts, der in der Ergebnissequenz wiederholt werden soll.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The value to be repeated.</source>
          <target state="translated">Der zu wiederholende Wert.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The number of times to repeat the value in the generated sequence.</source>
          <target state="translated">Die gewünschte Anzahl der Wiederholungen des Werts in der generierten Sequenz.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>Generates a sequence that contains one repeated value.</source>
          <target state="translated">Generiert eine Sequenz, die einen Wert mehrfach enthält</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains a repeated value.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das einen wiederholten Wert enthält</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Repeat%2A&gt;</ph> to generate a sequence of a repeated value.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Repeat%2A&gt;</ph> um eine Sequenz von einen wiederholten Wert zu generieren.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to reverse.</source>
          <target state="translated">Eine umzukehrende Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Inverts the order of the elements in a sequence.</source>
          <target state="translated">Kehrt die Reihenfolge der Elemente in einer Sequenz um</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose elements correspond to those of the input sequence in reverse order.</source>
          <target state="translated">Eine Sequenz , deren Elemente den Elementen der Eingabesequenz in umgekehrter Reihenfolge entsprechen.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Unlike <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, this sorting method does not consider the actual values themselves in determining the order.</source>
          <target state="translated">Im Gegensatz zu <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, gibt diese Methode Sortierung berücksichtigt nicht die tatsächlichen Werte selbst die Reihenfolge.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</source>
          <target state="translated">Stattdessen gibt es nur die Elemente in umgekehrter Reihenfolge aus dem sie erstellt wurden von der zugrunde liegenden Datenquelle.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph> to reverse the order of elements in an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie <ph id="ph1">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph> die Reihenfolge der Elemente in einem Array Reihenfolge umgekehrt werden soll.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein neues Format.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des vom zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>A sequence of values to invoke a transform function on.</source>
          <target state="translated">Eine Sequenz von Werten, für die eine Transformationsfunktion aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Eine Transformierenfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>Projects each element of a sequence into a new form by incorporating the element's index.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein neues Format, indem der Index des Elements integriert wird</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the transform function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente das Ergebnis des Aufrufs einer Transformationsfunktion für jedes Element von <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sind</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
          <target state="translated">Das erste Argument für <ph id="ph1">`selector`</ph> stellt das Element zu verarbeiten.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
          <target state="translated">Das zweite Argument <ph id="ph1">`selector`</ph> den nullbasierten Index des Elements in der Quellsequenz darstellt.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
          <target state="translated">Dies kann nützlich sein, wenn die Elemente in einer bekannten Reihenfolge und Sie ein Element mit einem Element an einem bestimmten Index z. B. tun möchten.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
          <target state="translated">Es kann auch nützlich sein, wenn der Index von einem oder mehreren Elementen abgerufen werden sollen.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Bei dieser Projektionsmethode muss die Transformationsfunktion <ph id="ph1">`selector`</ph>, um einen Wert für jeden Wert in der Quellsequenz erzeugen <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
          <target state="translated">Wenn <ph id="ph1">`selector`</ph> gibt einen Wert, der selbst eine Auflistung zurück, es liegt im Ermessen der Consumer die Untersequenzen manuell durchlaufen.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
          <target state="translated">In einem solchen Fall kann es besser für Ihre Abfrage zurückgeben eine einzelne zusammengeführte Sequenz von Werten sein.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">Um dies zu erreichen, verwenden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> Methode anstelle von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
          <target state="translated">Obwohl <ph id="ph1">`SelectMany`</ph> funktioniert ähnlich wie <ph id="ph2">`Select`</ph>, es unterscheidet sich darin, dass die Transformationsfunktion eine Auflistung, die zurückgegeben von erweitert wird, <ph id="ph3">`SelectMany`</ph> vor der Rückgabe.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29&gt;</ph> to project over a sequence of values and use the index of each element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29&gt;</ph> projizieren auf eine Sequenz von Werten und der Index jedes Elements verwenden.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des vom zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to invoke a transform function on.</source>
          <target state="translated">Eine Sequenz von Werten, für die eine Transformationsfunktion aufgerufen werden soll.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein neues Format.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the transform function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente das Ergebnis des Aufrufs einer Transformationsfunktion für jedes Element von <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sind</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Bei dieser Projektionsmethode muss die Transformationsfunktion <ph id="ph1">`selector`</ph>, um einen Wert für jeden Wert in der Quellsequenz erzeugen <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
          <target state="translated">Wenn <ph id="ph1">`selector`</ph> gibt einen Wert, der selbst eine Auflistung zurück, es liegt im Ermessen der Consumer die Untersequenzen manuell durchlaufen.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
          <target state="translated">In einem solchen Fall kann es besser für Ihre Abfrage zurückgeben eine einzelne zusammengeführte Sequenz von Werten sein.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">Um dies zu erreichen, verwenden die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> Methode anstelle von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
          <target state="translated">Obwohl <ph id="ph1">`SelectMany`</ph> funktioniert ähnlich wie <ph id="ph2">`Select`</ph>, es unterscheidet sich darin, dass die Transformationsfunktion eine Auflistung, die zurückgegeben von erweitert wird, <ph id="ph3">`SelectMany`</ph> vor der Rückgabe.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, a <ph id="ph1">`select`</ph> (Visual C#) or <ph id="ph2">`Select`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`select`</ph> (Visual c#) oder <ph id="ph2">`Select`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to project over a sequence of values.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> Projekt über eine Sequenz von Werten.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente der Sequenz zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion für jedes Element der Eingabesequenz sind</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> Methode zählt die Eingabesequenz, mithilfe einer Transformationsfunktion zum Zuordnen der einzelnen Elemente in einer <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, und listet auf, und die Elemente jeder solcher ergibt <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
          <target state="translated">D. h. für jedes Element der <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> wird aufgerufen, und es wird eine Sequenz von Werten zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> fasst dann diese zweidimensionale Auflistung von Auflistungen in einem eindimensionalen <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> und gibt ihn zurück.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in Visual Basic.</source>
          <target state="translated">Wenn eine Abfrage verwendet beispielsweise <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> die Aufträge abgerufen (des Typs <ph id="ph2">`Order`</ph>) für jeden Kunden in einer Datenbank, ist das Ergebnis vom Typ <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in c# oder <ph id="ph4">`IEnumerable(Of Order)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in Visual Basic.</source>
          <target state="translated">Stattdessen verwendet die Abfrage <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> um die Aufträge zu erhalten, wird die Auflistung von Auflistungen von Aufträgen nicht kombiniert und das Ergebnis ist vom Typ <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in c# oder <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (Visual C#) or <ph id="ph2">`From`</ph> clause (Visual Basic) after the initial one translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax jede <ph id="ph1">`from`</ph> -Klausel (Visual c#) oder <ph id="ph2">`From`</ph> -Klausel (Visual Basic) nach der Erstkonfiguration übersetzt auf einen Aufruf von <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> eine 1: n-Projektion über einem Array ausgeführt.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente der Sequenz zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>Selektor<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Eine Transformierenfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, und fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The index of each source element is used in the projected form of that element.</source>
          <target state="translated">Der Index jedes Quellelements wird im projizierten Format des jeweiligen Elements verwendet.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion für jedes Element einer Eingabesequenz sind</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> Methode zählt die Eingabesequenz, mithilfe einer Transformationsfunktion zum Zuordnen der einzelnen Elemente in einer <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, und listet auf, und die Elemente jeder solcher ergibt <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
          <target state="translated">D. h. für jedes Element der <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> wird aufgerufen, und es wird eine Sequenz von Werten zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> fasst dann diese zweidimensionale Auflistung von Auflistungen in einem eindimensionalen <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> und gibt ihn zurück.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in Visual Basic.</source>
          <target state="translated">Wenn eine Abfrage verwendet beispielsweise <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> die Aufträge abgerufen (des Typs <ph id="ph2">`Order`</ph>) für jeden Kunden in einer Datenbank, ist das Ergebnis vom Typ <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in c# oder <ph id="ph4">`IEnumerable(Of Order)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in Visual Basic.</source>
          <target state="translated">Stattdessen verwendet die Abfrage <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> um die Aufträge zu erhalten, wird die Auflistung von Auflistungen von Aufträgen nicht kombiniert und das Ergebnis ist vom Typ <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in c# oder <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
          <target state="translated">Das erste Argument für <ph id="ph1">`selector`</ph> stellt das Element zu verarbeiten.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
          <target state="translated">Das zweite Argument <ph id="ph1">`selector`</ph> den nullbasierten Index des Elements in der Quellsequenz darstellt.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
          <target state="translated">Dies kann nützlich sein, wenn die Elemente in einer bekannten Reihenfolge und Sie ein Element mit einem Element an einem bestimmten Index z. B. tun möchten.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
          <target state="translated">Es kann auch nützlich sein, wenn der Index von einem oder mehreren Elementen abgerufen werden sollen.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array and use the index of each outer element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> eine 1: n-Projektion über ein Array ausführen und den Index jedes äußeren Elements verwenden.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Zwischenelemente erhobene <bpt id="p1">&lt;c&gt;</bpt>CollectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">Der Typ der Elemente in der resultierenden Sequenz.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the input sequence.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element der Zwischensequenz angewendet werden soll</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente erzeugt werden, indem für jedes Element von <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> die 1:n-Transformationsfunktion <ph id="ph3">&lt;paramref name="source" /&gt;</ph> aufgerufen wird, und anschließend jedes Element der Sequenz und sein entsprechendes Quellelement einem Ergebniselement zugeordnet werden</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> Methode ist nützlich, wenn Sie keine behalten Sie die Elemente eines <ph id="ph2">`source`</ph> innerhalb des Bereichs für Abfragelogik, die auftritt, nachdem der Aufruf von <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>See the Example section for a code example.</source>
          <target state="translated">Ein Codebeispiel hierfür finden Sie im Beispielabschnitt.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Liegt eine bidirektionale Beziehung zwischen Objekten des Typs <ph id="ph1">`TSource`</ph> und Objekte des Typs <ph id="ph2">`TCollection`</ph>, d. h. wenn ein Objekt des Typs <ph id="ph3">`TCollection`</ph> enthält eine Eigenschaft zum Abrufen der <ph id="ph4">`TSource`</ph> Objekt ab, die es erstellt wurde, Sie ist dies nicht erforderlich Überladen von <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
          <target state="translated">Stattdessen können Sie <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> und navigieren Sie zurück zu den <ph id="ph2">`TSource`</ph> -Objekt über die <ph id="ph3">`TCollection`</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (Visual C#) or <ph id="ph2">`From`</ph> clause (Visual Basic) after the initial one translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax jede <ph id="ph1">`from`</ph> -Klausel (Visual c#) oder <ph id="ph2">`From`</ph> -Klausel (Visual Basic) nach der Erstkonfiguration übersetzt auf einen Aufruf von <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to <ph id="ph2">`Select`</ph>.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> eine 1: n-Projektion über ein Array ausführen und verwenden eine Ergebnisauswahlfunktion entsprechenden Elemente der Quellsequenz im Bereich für den letzten Aufruf von beibehalten <ph id="ph2">`Select`</ph>.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Zwischenelemente erhobene <bpt id="p1">&lt;c&gt;</bpt>CollectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">Der Typ der Elemente in der resultierenden Sequenz.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A sequence of values to project.</source>
          <target state="translated">Eine Sequenz von zu projizierenden Werten.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Eine Transformierenfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element der Zwischensequenz angewendet werden soll</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
          <target state="translated">Projiziert jedes Element einer Sequenz in ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The index of each source element is used in the intermediate projected form of that element.</source>
          <target state="translated">Der Index jedes Quellelements wird im projizierten Zwischenformat des jeweiligen Elements verwendet.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen Elemente erzeugt werden, indem für jedes Element von <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> die 1:n-Transformationsfunktion <ph id="ph3">&lt;paramref name="source" /&gt;</ph> aufgerufen wird, und anschließend jedes Element der Sequenz und sein entsprechendes Quellelement einem Ergebniselement zugeordnet werden</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> Methode ist nützlich, wenn Sie keine behalten Sie die Elemente eines <ph id="ph2">`source`</ph> innerhalb des Bereichs für Abfragelogik, die auftritt, nachdem der Aufruf von <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>See the Example section for a code example.</source>
          <target state="translated">Ein Codebeispiel hierfür finden Sie im Beispielabschnitt.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Liegt eine bidirektionale Beziehung zwischen Objekten des Typs <ph id="ph1">`TSource`</ph> und Objekte des Typs <ph id="ph2">`TCollection`</ph>, d. h. wenn ein Objekt des Typs <ph id="ph3">`TCollection`</ph> enthält eine Eigenschaft zum Abrufen der <ph id="ph4">`TSource`</ph> Objekt ab, die es erstellt wurde, Sie ist dies nicht erforderlich Überladen von <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
          <target state="translated">Stattdessen können Sie <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> und navigieren Sie zurück zu den <ph id="ph2">`TSource`</ph> -Objekt über die <ph id="ph3">`TCollection`</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether two sequences are equal according to an equality comparer.</source>
          <target state="translated">Bestimmt, ob zwei Sequenzen durch einen Gleichheitsvergleich als gleich bestimmt werden.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das mit <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> verglichen werden soll</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to the first sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das mit der ersten Sequenz verglichen werden soll</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</source>
          <target state="translated">Bestimmt, ob zwei Sequenzen gleich sind, indem die Elemente mithilfe des Standardgleichheitsvergleichs für ihren Typ verglichen werden</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente durch den Standardgleichheitsvergleich für ihren Typ als gleich bestimmt werden, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for <ph id="ph2">`TSource`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode zählt die zwei Quellsequenzen parallel und vergleicht entsprechende Elemente mithilfe des Standardgleichheitsvergleichs für <ph id="ph2">`TSource`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generische Schnittstelle.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie eigene <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden für den Typ.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine whether two sequences are equal.</source>
          <target state="translated">Die folgenden Codebeispiele veranschaulichen <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> zu bestimmen, ob zwei Sequenzen gleich sind.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In the first two examples, the method determines whether the compared sequences contain references to the same objects.</source>
          <target state="translated">In den ersten beiden Beispielen bestimmt die Methode an, ob die verglichenen Sequenzen Verweise auf dieselben Objekte enthalten.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In the third and fourth examples, the method compares the actual data of the objects within the sequences.</source>
          <target state="translated">Im dritten und vierten Beispiel vergleicht die Methode die tatsächlichen Daten der Objekte innerhalb der Sequenzen.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In this example the sequences are equal.</source>
          <target state="translated">In diesem Beispiel wird sind die Sequenzen gleich.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example compares two sequences that are not equal.</source>
          <target state="translated">Im folgenden Codebeispiel wird vergleicht zwei Sequenzen, die nicht gleich sind.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</source>
          <target state="translated">Beachten Sie, dass die Sequenzen identische Daten enthalten, aber da die Objekte, die sie enthalten andere Verweise verfügen, die Sequenzen sind nicht als gleich betrachtet.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in your class.</source>
          <target state="translated">Wenn Sie die eigentlichen Daten der Objekte in den Sequenzen nicht nur die Verweise vergleichen möchten, müssen Sie implementieren die <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generische Schnittstelle in der Klasse.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a helper class and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in eine Hilfsklasse, und geben Sie <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie diese Schnittstelle implementiert haben, können Sie Sequenzen von <ph id="ph1">`ProductA`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das mit <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> verglichen werden soll</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to the first sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das mit der ersten Sequenz verglichen werden soll</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to use to compare elements.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>, der zum Vergleichen von Elementen verwendet werden soll.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether two sequences are equal by comparing their elements by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Bestimmt, ob zwei Sequenzen gleich sind, indem ihre Elemente mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> verglichen werden</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements compare equal according to <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente gemäß <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph> als gleich gelten, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode zählt die zwei Quellsequenzen parallel und vergleicht entsprechende Elemente mithilfe des angegebenen <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements.</source>
          <target state="translated">Wenn c<ph id="ph1">`omparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, zum Vergleichen von Elementen verwendet wird.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie dieses Vergleichs implementiert haben, können Sie Sequenzen von <ph id="ph1">`Product`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns a single, specific element of a sequence.</source>
          <target state="translated">Gibt ein einzelnes spezifisches Element einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen einziges Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</source>
          <target state="translated">Gibt das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The single element of the input sequence.</source>
          <target state="translated">Das einzige Element der Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if the input sequence is empty.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode löst eine Ausnahme aus, wenn die Eingabesequenz leer ist.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return <ph id="ph1">`null`</ph> when the input sequence is empty, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
          <target state="translated">Die stattdessen zurückgegeben <ph id="ph1">`null`</ph> verwenden, wenn die Eingabesequenz leer ist, <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> das einzige Element eines Arrays auswählen.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> throws an exception when the sequence does not contain exactly one element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, dass <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> löst eine Ausnahme aus, wenn die Sequenz nicht genau ein Element enthält.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence contains more than one element.</source>
          <target state="translated">Die Eingabesequenz enthält mehr als ein Element.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence is empty.</source>
          <target state="translated">Die Eingabesequenz ist leer.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein einzelnes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</source>
          <target state="translated">Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The single element of the input sequence that satisfies a condition.</source>
          <target state="translated">Das einzige Element der Eingabesequenz, das eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if the input sequence contains no matching element.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> Methode löst eine Ausnahme aus, wenn die Eingabesequenz kein übereinstimmendes Element enthält.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return <ph id="ph1">`null`</ph> when no matching element is found, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
          <target state="translated">Die stattdessen zurückgegeben <ph id="ph1">`null`</ph> verwenden, wenn kein übereinstimmendes Element gefunden wird, <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> das einzige Element eines Arrays auswählen, die eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, dass <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> löst eine Ausnahme aus, wenn die Sequenz nicht genau ein Element enthält, das die Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Kein Element erfüllt die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> wird von mehreren Elementen erfüllt.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">Die Quellsequenz ist leer.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns a single, specific element of a sequence, or a default value if that element is not found.</source>
          <target state="translated">Gibt ein einzelnes spezifisches Element einer Sequenz oder einen Standardwert zurück, wenn dieses Element nicht gefunden wird</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen einziges Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</source>
          <target state="translated">Gibt das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The single element of the input sequence, or <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the sequence contains no elements.</source>
          <target state="translated">Das einzige Element der Eingabesequenz oder <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>), wenn die Sequenz keine Elemente enthält</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Der Standardwert für Referenztypen und Typen ist <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> Methode bietet keine Möglichkeit, einen Standardwert anzugeben.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Wenn Sie einen Standardwert außer angeben möchten <ph id="ph1">`default(TSource)`</ph>, verwenden Sie die <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode wie im Beispielabschnitt beschrieben.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> das einzige Element eines Arrays auswählen.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, dass <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> gibt einen Standardwert zurück, wenn die Sequenz nicht genau ein Element enthält.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In einigen Fällen den Wert des <ph id="ph1">`default(TSource)`</ph> ist nicht der Standardwert, die Sie verwenden, wenn die Auflistung keine Elemente enthält.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Statt überprüft das Ergebnis für das unbeabsichtigten Standardwert, und ändern diese bei Bedarf, können Sie die <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> Methode, um den Standardwert angeben, die Sie verwenden, wenn die Auflistung leer ist.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the element.</source>
          <target state="translated">Rufen Sie dann <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> um das Element abzurufen.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</source>
          <target state="translated">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von Seitenzahlen leer ist.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</source>
          <target state="translated">Da der Standardwert für eine ganze Zahl 0 (null), die nicht in der Regel eine gültige Seitenzahl ist, muss der Standardwert stattdessen mit 1 angegeben.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">Nach Ausführung die Abfrage beendet wurde, wird das erste Ergebnisvariable für das unbeabsichtigten Standardwert überprüft.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">Die zweite Ergebnisvariable wird mithilfe von <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> an den Standardwert 1.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence contains more than one element.</source>
          <target state="translated">Die Eingabesequenz enthält mehr als ein Element.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein einzelnes Element zurückgegeben werden soll</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</source>
          <target state="translated">Gibt das einzige Element einer Sequenz, das eine angegebene Bedingung erfüllt, oder einen Standardwert zurück, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The single element of the input sequence that satisfies the condition, or <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if no such element is found.</source>
          <target state="translated">Gibt das einzige Element der Eingabesequenz, das die Bedingung erfüllt, oder <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) zurück, wenn ein solches Element nicht gefunden wird.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Der Standardwert für Referenztypen und Typen ist <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> das einzige Element eines Arrays auswählen, die eine Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, dass <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> gibt einen Standardwert zurück, wenn die Sequenz nicht genau ein Element enthält, das die Bedingung erfüllt.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Die Bedingung in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> wird von mehreren Elementen erfüllt.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem Elemente zurückgegeben werden sollen</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The number of elements to skip before returning the remaining elements.</source>
          <target state="translated">Die Anzahl der Elemente, die übersprungen werden sollen, bevor die übrigen Elemente zurückgegeben werden.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</source>
          <target state="translated">Umgeht eine festgelegte Anzahl von Elementen in einer Sequenz und gibt dann die übrigen Elemente zurück</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements that occur after the specified index in the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die Elemente enthält, die nach dem angegebenen Index in der Eingabesequenz auftreten</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`source`</ph> contains fewer than <ph id="ph2">`count`</ph> elements, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Wenn <ph id="ph1">`source`</ph> enthält weniger als <ph id="ph2">`count`</ph> Elemente, die eine leere <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, all elements of <ph id="ph2">`source`</ph> are yielded.</source>
          <target state="translated">Wenn <ph id="ph1">`count`</ph> ist kleiner oder gleich 0 (null), alle Elemente des <ph id="ph2">`source`</ph> werden zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> Methoden sind funktionale ergänzt.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Erhält eine Sequenz <ph id="ph1">`coll`</ph> und einer ganzen Zahl <ph id="ph2">`n`</ph>, verketten die Ergebnisse der <ph id="ph3">`coll.Take(n)`</ph> und <ph id="ph4">`coll.Skip(n)`</ph> ergibt die gleiche Sequenz wie <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Skip`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax für Visual Basic einer <ph id="ph1">`Skip`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> to skip a specified number of elements in a sorted array and return the remaining elements.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> auf eine angegebene Anzahl von Elementen in einem sortierten Array übersprungen und die übrigen Elemente zurück.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem Elemente zurückgegeben werden sollen</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die Elemente aus der Eingabesequenz ab dem ersten Element in der linearen Reihe enthält, das die in <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung nicht besteht</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method is implemented by using deferred execution.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> Methode mit verzögerter Ausführung implementiert wird.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method tests each element of <ph id="ph1">`source`</ph> by using <ph id="ph2">`predicate`</ph> and skips the element if the result is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Diese Methode überprüft jedes Element von <ph id="ph1">`source`</ph> mit <ph id="ph2">`predicate`</ph> und überspringt das Element, wenn das Ergebnis ist <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
          <target state="translated">Nach der Rückkehr der Prädikatfunktion <ph id="ph1">`false`</ph> nach einem Element, das dieses Element und die übrigen Elemente in <ph id="ph2">`source`</ph> werden zurückgegeben, und es sind keine weiteren Aufrufe von <ph id="ph3">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Wenn <ph id="ph1">`predicate`</ph> gibt <ph id="ph2">`true`</ph> für alle Elemente in der Sequenz, ein leeres <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> Methoden sind funktionale ergänzt.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Erhält eine Sequenz <ph id="ph1">`coll`</ph> einer reinen Funktion <ph id="ph2">`p`</ph>, verketten die Ergebnisse der <ph id="ph3">`coll.TakeWhile(p)`</ph> und <ph id="ph4">`coll.SkipWhile(p)`</ph> ergibt die gleiche Sequenz wie <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Skip While`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax für Visual Basic einer <ph id="ph1">`Skip While`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to skip elements of an array as long as a condition is true.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> Elemente eines Arrays zu überspringen, solange eine Bedingung true ist.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem Elemente zurückgegeben werden sollen</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die Elemente aus der Eingabesequenz ab dem ersten Element in der linearen Reihe enthält, das die in <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> angegebene Überprüfung nicht besteht</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and skips the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> Methode überprüft jedes Element von <ph id="ph2">`source`</ph> mit <ph id="ph3">`predicate`</ph> und überspringt das Element, wenn das Ergebnis ist <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
          <target state="translated">Nach der Rückkehr der Prädikatfunktion <ph id="ph1">`false`</ph> nach einem Element, das dieses Element und die übrigen Elemente in <ph id="ph2">`source`</ph> werden zurückgegeben, und es sind keine weiteren Aufrufe von <ph id="ph3">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Wenn <ph id="ph1">`predicate`</ph> gibt <ph id="ph2">`true`</ph> für alle Elemente in der Sequenz, ein leeres <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">Das erste Argument der <ph id="ph1">`predicate`</ph> stellt das zu testende Element.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Das zweite Argument stellt den nullbasierten Index des Elements in <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> Methoden sind funktionale ergänzt.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Erhält eine Sequenz <ph id="ph1">`coll`</ph> einer reinen Funktion <ph id="ph2">`p`</ph>, verketten die Ergebnisse der <ph id="ph3">`coll.TakeWhile(p)`</ph> und <ph id="ph4">`coll.SkipWhile(p)`</ph> ergibt die gleiche Sequenz wie <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Skip While`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax für Visual Basic einer <ph id="ph1">`Skip While`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to skip elements of an array as long as a condition that depends on the element's index is true.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> Elemente eines Arrays zu überspringen, solange eine Bedingung, die abhängig von der Index des Elements "true" ist.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Computes the sum of a sequence of numeric values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von numerischen Werten.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> NULL, wenn der Methodenrückgabe <ph id="ph2">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The result doesnot include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis für den Wiederherstellungsdienst enthalten Werte, die sind <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis enthält keine Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis enthält keine Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis enthält keine Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL zulassen, und deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL zulassen</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis enthält keine Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Eine Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, deren Summe berechnet werden soll</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Die Summe der Werte in der Sequenz</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> Summe der Werte einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The result does not included values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis ist nicht enthalten Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Decimal)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis enthält keine Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Double)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis enthält keine Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Int32)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis enthält keine Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Int64)`</ph> in Visual Basic</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Die Summe ist größer als <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Diese Methode gibt NULL, wenn <ph id="ph1">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Das Ergebnis enthält keine Werte, die <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ speziell <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in c# oder <ph id="ph4">`Nullable(Of Single)`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Berechnet die Summe einer Sequenz von <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The sum of the projected values.</source>
          <target state="translated">Die Summe der projizierten Werte</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> NULL, wenn der Methodenrückgabe <ph id="ph2">`source`</ph> enthält keine Elemente.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Sie können diese Methode auf eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion bereitstellen <ph id="ph1">`selector`</ph>,-Projekten die Mitglieder der <ph id="ph2">`source`</ph> in einen numerischen Typ, insbesondere <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Aggregate Into Sum()`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> Summe der projizierten Werte in einer Sequenz.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The sequence to return elements from.</source>
          <target state="translated">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The number of elements to return.</source>
          <target state="translated">Die Anzahl der zurückzugebenden Elemente.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns a specified number of contiguous elements from the start of a sequence.</source>
          <target state="translated">Gibt eine angegebene Anzahl von zusammenhängenden Elementen ab dem Anfang einer Sequenz zurück</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the specified number of elements from the start of the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die angegebene Anzahl von Elementen ab dem Anfang der Eingabesequenz enthält</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> enumerates <ph id="ph2">`source`</ph> and yields elements until <ph id="ph3">`count`</ph> elements have been yielded or <ph id="ph4">`source`</ph> contains no more elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> Listet <ph id="ph2">`source`</ph> und Elemente bis ergibt <ph id="ph3">`count`</ph> Elemente zurückgegeben wurden oder <ph id="ph4">`source`</ph> keine Elemente mehr enthält.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> exceeds the number of elements in <ph id="ph2">`source`</ph>, all elements of <ph id="ph3">`source`</ph> are returned.</source>
          <target state="translated">Wenn <ph id="ph1">`count`</ph> überschreitet die Anzahl der Elemente im <ph id="ph2">`source`</ph>, alle Elemente des <ph id="ph3">`source`</ph> werden zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, <ph id="ph2">`source`</ph> is not enumerated and an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Wenn <ph id="ph1">`count`</ph> ist kleiner oder gleich 0 (null), <ph id="ph2">`source`</ph> ist nicht aufgelistet, und es wird eine leere <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> Methoden sind funktionale ergänzt.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Erhält eine Sequenz <ph id="ph1">`coll`</ph> und einer ganzen Zahl <ph id="ph2">`n`</ph>, verketten die Ergebnisse der <ph id="ph3">`coll.Take(n)`</ph> und <ph id="ph4">`coll.Skip(n)`</ph> ergibt die gleiche Sequenz wie <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Take`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax für Visual Basic einer <ph id="ph1">`Take`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> to return elements from the start of a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> Elemente vom Anfang einer Sequenz zurückgegeben.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</source>
          <target state="translated">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist, und überspringt dann die übrigen Elemente</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A sequence to return elements from.</source>
          <target state="translated">Eine Sequenz, aus der Elemente zurückgegeben werden sollen</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die Überprüfung nicht mehr erfolgreich ist</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> Methode überprüft jedes Element von <ph id="ph2">`source`</ph> mit <ph id="ph3">`predicate`</ph> und gibt das Element aus, wenn das Ergebnis ist <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
          <target state="translated">Enumeration wird beendet, wenn die Prädikatfunktion zurückgibt <ph id="ph1">`false`</ph> nach einem Element oder wenn <ph id="ph2">`source`</ph> keine Elemente mehr enthält.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> Methoden sind funktionale ergänzt.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Erhält eine Sequenz <ph id="ph1">`coll`</ph> einer reinen Funktion <ph id="ph2">`p`</ph>, verketten die Ergebnisse der <ph id="ph3">`coll.TakeWhile(p)`</ph> und <ph id="ph4">`coll.SkipWhile(p)`</ph> ergibt die gleiche Sequenz wie <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Take While`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax für Visual Basic einer <ph id="ph1">`Take While`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition is true.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> Elemente vom Anfang einer Sequenz zurückgegeben werden, solange eine Bedingung true ist.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The sequence to return elements from.</source>
          <target state="translated">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that occur before the element at which the test no longer passes.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die Überprüfung nicht mehr erfolgreich ist</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> Methode überprüft jedes Element von <ph id="ph2">`source`</ph> mit <ph id="ph3">`predicate`</ph> und gibt das Element aus, wenn das Ergebnis ist <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
          <target state="translated">Enumeration wird beendet, wenn die Prädikatfunktion zurückgibt <ph id="ph1">`false`</ph> nach einem Element oder wenn <ph id="ph2">`source`</ph> keine Elemente mehr enthält.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">Das erste Argument der <ph id="ph1">`predicate`</ph> stellt das zu testende Element.</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Das zweite Argument stellt den nullbasierten Index des Elements in <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> Methoden sind funktionale ergänzt.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Erhält eine Sequenz <ph id="ph1">`coll`</ph> einer reinen Funktion <ph id="ph2">`p`</ph>, verketten die Ergebnisse der <ph id="ph3">`coll.TakeWhile(p)`</ph> und <ph id="ph4">`coll.SkipWhile(p)`</ph> ergibt die gleiche Sequenz wie <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>In Visual Basic query expression syntax, a <ph id="ph1">`Take While`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
          <target state="translated">Abfrageausdruckssyntax für Visual Basic einer <ph id="ph1">`Take While`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> zurückzugebenden Elemente vom Anfang einer Sequenz, solange eine Bedingung, der Index des Elements verwendet "true" ist.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order.</source>
          <target state="translated">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> mit den zu sortierenden Elementen.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</source>
          <target state="translated">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel durch</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>, dessen Elemente nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (<ph id="ph1">`x =&gt; x`</ph> in Visual C#- oder <ph id="ph2">`Function(x) x`</ph> in Visual Basic) für <ph id="ph3">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> werden definiert, um den Typ erweitern <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, also auch den Rückgabetyp dieser Methoden.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Dieser Entwurf ermöglicht es Ihnen, mehrere Sortierkriterien angeben, indem Sie eine beliebige Anzahl von anwenden <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Da <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> erbt von <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, Sie können Aufrufen <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> oder <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> auf die Ergebnisse eines Aufrufs von <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Auf diese Weise führt eine neue primäre Sortierung, die zuvor festgelegte Sortierung ignoriert.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Diese Methode vergleicht die Schlüssel mithilfe des Standardvergleichs <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Diese Methode führt eine stabile Sortierung. Das heißt, ist die Schlüssel der zwei Elemente gleich sind, die Reihenfolge der Elemente beibehalten.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (Visual C#) or <ph id="ph2">`Order By [first criterion], [second criterion]`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (Visual c#) oder <ph id="ph2">`Order By [first criterion], [second criterion]`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> um eine nachfolgende Sortierung der Elemente in einer Sequenz durchführen.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> mit den zu sortierenden Elementen.</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>, dessen Elemente nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (<ph id="ph1">`x =&gt; x`</ph> in Visual C#- oder <ph id="ph2">`Function(x) x`</ph> in Visual Basic) für <ph id="ph3">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> werden definiert, um den Typ erweitern <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, also auch den Rückgabetyp dieser Methoden.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Dieser Entwurf ermöglicht es Ihnen, mehrere Sortierkriterien angeben, indem Sie eine beliebige Anzahl von anwenden <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Da <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> erbt von <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, Sie können Aufrufen <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> oder <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> auf die Ergebnisse eines Aufrufs von <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Auf diese Weise führt eine neue primäre Sortierung, die zuvor festgelegte Sortierung ignoriert.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, die standardmäßige Vergleichsfunktion <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Diese Methode führt eine stabile Sortierung. Das heißt, ist die Schlüssel der zwei Elemente gleich sind, die Reihenfolge der Elemente beibehalten.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order.</source>
          <target state="translated">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> mit den zu sortierenden Elementen.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</source>
          <target state="translated">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge nach einem Schlüssel durch</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (<ph id="ph1">`x =&gt; x`</ph> in Visual C#- oder <ph id="ph2">`Function(x) x`</ph> in Visual Basic) für <ph id="ph3">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> werden definiert, um den Typ erweitern <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, also auch den Rückgabetyp dieser Methoden.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Dieser Entwurf ermöglicht es Ihnen, mehrere Sortierkriterien angeben, indem Sie eine beliebige Anzahl von anwenden <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Da <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> erbt von <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, Sie können Aufrufen <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> oder <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> auf die Ergebnisse eines Aufrufs von <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Auf diese Weise führt eine neue primäre Sortierung, die zuvor festgelegte Sortierung ignoriert.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This sorting method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Diese Sortiermethode vergleicht Schlüssel mithilfe des Standardvergleichs <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Diese Methode führt eine stabile Sortierung. Das heißt, ist die Schlüssel der zwei Elemente gleich sind, die Reihenfolge der Elemente beibehalten.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual C# query expression syntax, an <ph id="ph1">`orderby [first criterion], [second criterion] descending`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Visual C#-Abfrageausdruckssyntax ein <ph id="ph1">`orderby [first criterion], [second criterion] descending`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual Basic query expression syntax, an <ph id="ph1">`Order By [first criterion], [second criterion] Descending`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">In Visual Basic-Ausdruck Abfragesyntax ein <ph id="ph1">`Order By [first criterion], [second criterion] Descending`</ph> -Klausel übersetzt werden, auf einen Aufruf von <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> mit den zu sortierenden Elementen.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph>, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in Visual Basic) for <ph id="ph3">`keySelector`</ph>.</source>
          <target state="translated">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (<ph id="ph1">`x =&gt; x`</ph> in Visual C#- oder <ph id="ph2">`Function(x) x`</ph> in Visual Basic) für <ph id="ph3">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> werden definiert, um den Typ erweitern <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, also auch den Rückgabetyp dieser Methoden.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Dieser Entwurf ermöglicht es Ihnen, mehrere Sortierkriterien angeben, indem Sie eine beliebige Anzahl von anwenden <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Da <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> erbt von <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, Sie können Aufrufen <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> oder <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> auf die Ergebnisse eines Aufrufs von <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> oder <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">Auf diese Weise führt eine neue primäre Sortierung, die zuvor festgelegte Sortierung ignoriert.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, die standardmäßige Vergleichsfunktion <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Diese Methode führt eine stabile Sortierung. Das heißt, ist die Schlüssel der zwei Elemente gleich sind, die Reihenfolge der Elemente beibehalten.</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> um eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge mit einem benutzerdefinierten Vergleich durchführen.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create an array from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein Array erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates an array from a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Erstellt ein Array aus einem <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An array that contains the elements from the input sequence.</source>
          <target state="translated">Ein Array, das die Elemente aus der Eingabesequenz enthält.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns an array that contains the query results.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode erzwingt die sofortige abfrageauswertung und gibt ein Array, das die Ergebnisse der Abfrage enthält.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
          <target state="translated">Sie können diese Methode der Abfrage anfügen, um eine zwischengespeicherte Kopie der Abfrageergebnisse zu erhalten.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> has similar behavior but returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> instead of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> verhält sich ähnlich, gibt jedoch eine <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> anstelle eines Arrays.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> to force immediate query evaluation and return an array of results.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> zum Erzwingen der unmittelbaren abfrageauswertung und ein Array von Ergebnissen zurück.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> gemäß einer angegebenen Schlüsselauswahlfunktion</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>, das Schlüssel und Werte enthält.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> Methode verwendet den Standardgleichheitsvergleich <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to create a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> by using a key selector.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> zum Erstellen einer <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> mithilfe einer Schlüsselauswahlfunktion.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> erzeugt einen Schlüssel, der <ph id="ph2">&lt;see langword="null" /&gt;</ph> ist.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> erzeugt für zwei Elemente doppelte Schlüssel.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the keys returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der zurückgegebene Schlüssel <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function and key comparer.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> gemäß einer angegebenen Schlüsselauswahlfunktion und eines angegebenen Schlüsselvergleichs</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>, das Schlüssel und Werte enthält.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> erzeugt einen Schlüssel, der <ph id="ph2">&lt;see langword="null" /&gt;</ph> ist.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> erzeugt für zwei Elemente doppelte Schlüssel.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des vom zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>ElementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Eine Transformierenfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to specified key selector and element selector functions.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> entsprechend der angegebenen Schlüsselauswahlfunktion und Elementauswahlfunktion</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>, das Werte vom Typ <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> enthält, die aus der Eingabesequenz ausgewählt werden.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> Methode verwendet den Standardgleichheitsvergleich <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> erzeugt einen Schlüssel, der <ph id="ph2">&lt;see langword="null" /&gt;</ph> ist.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> erzeugt für zwei Elemente doppelte Schlüssel.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des vom zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>ElementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Eine Transformierenfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function, a comparer, and an element selector function.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> entsprechend einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>, das Werte vom Typ <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> enthält, die aus der Eingabesequenz ausgewählt werden.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> erzeugt einen Schlüssel, der <ph id="ph2">&lt;see langword="null" /&gt;</ph> ist.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> erzeugt für zwei Elemente doppelte Schlüssel.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> that contains values of type TSource selected from the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph>, das aus der Eingabesequenz ausgewählte Werte vom Typ TSource enthält.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem ein <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> using the <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> to compare keys</source>
          <target state="translated">Erstellt einen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> aus einer <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> mithilfe der <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> zum Vergleichen von Schlüsseln</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph>, das Werte vom Typ <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> enthält, die aus der Eingabesequenz ausgewählt werden.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> from.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem eine <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains elements from the input sequence.</source>
          <target state="translated">Eine <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>, die Elemente aus der Eingabesequenz enthält</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode erzwingt die sofortige abfrageauswertung und gibt eine <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> , die die Ergebnisse der Abfrage enthält.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
          <target state="translated">Sie können diese Methode der Abfrage anfügen, um eine zwischengespeicherte Kopie der Abfrageergebnisse zu erhalten.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> has similar behavior but returns an array instead of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> Gibt ein Array anstelle eines jedoch verhält sich ähnlich wie eine <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> to force immediate query evaluation and return a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> zum Erzwingen der unmittelbaren abfrageauswertung und Zurückgeben einer <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> , die die Ergebnisse der Abfrage enthält.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Creates a generic <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Erstellt ein generisches <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem eine <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> gemäß einer angegebenen Schlüsselauswahlfunktion</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>, das Schlüssel und Werte enthält.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> Methode gibt ein <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, ein 1: n-Wörterbuch, das für eine Sammlung von Werten Schlüssel zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> unterscheidet sich von einem <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, die eine 1: 1-Zuordnung von Schlüsseln in einzelne Werte durchführt.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem eine <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function and key comparer.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> gemäß einer angegebenen Schlüsselauswahlfunktion und eines angegebenen Schlüsselvergleichs</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>, das Schlüssel und Werte enthält.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> Methode gibt ein <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, ein 1: n-Wörterbuch, das für eine Sammlung von Werten Schlüssel zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> is different to a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> unterscheidet sich von der eine <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, die eine 1: 1-Zuordnung von Schlüsseln in einzelne Werte durchführt.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des vom zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>ElementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem eine <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Eine Transformierenfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to specified key selector and element selector functions.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> entsprechend der angegebenen Schlüsselauswahlfunktion und Elementauswahlfunktion</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>, das Werte vom Typ <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> enthält, die aus der Eingabesequenz ausgewählt werden.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> Methode gibt ein <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, ein 1: n-Wörterbuch, das für eine Sammlung von Werten Schlüssel zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> unterscheidet sich von einem <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, die eine 1: 1-Zuordnung von Schlüsseln in einzelne Werte durchführt.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> to create a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> by using a key selector function and an element selector function.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> zum Erstellen einer <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> mithilfe einer Schlüsselauswahlfunktion und einer Elementauswahlfunktion.</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Schlüssels zurückgegebenes <bpt id="p1">&lt;c&gt;</bpt>KeySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des vom zurückgegebenen Werts <bpt id="p1">&lt;c&gt;</bpt>ElementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">Das <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, aus dem eine <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> erstellt werden soll</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Eine Transformierenfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Schlüsseln.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function, a comparer and an element selector function.</source>
          <target state="translated">Erstellt ein <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> aus einem <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> entsprechend einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>, das Werte vom Typ <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> enthält, die aus der Eingabesequenz ausgewählt werden.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> Methode gibt ein <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, ein 1: n-Wörterbuch, das für eine Sammlung von Werten Schlüssel zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> unterscheidet sich von einem <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, die eine 1: 1-Zuordnung von Schlüsseln in einzelne Werte durchführt.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Wenn <ph id="ph1">`comparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> zum Vergleichen von Schlüsseln verwendet wird.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ist <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set union of two sequences.</source>
          <target state="translated">Erzeugt die Vereinigungsmenge von zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the first set for the union.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente die erste Menge für die Gesamtmenge bilden</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the second set for the union.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente die zweite Menge für die Gesamtmenge bilden</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set union of two sequences by using the default equality comparer.</source>
          <target state="translated">Erzeugt die Vereinigungsmenge von zwei Sequenzen mithilfe des Standardgleichheitsvergleichs</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method excludes duplicates from the return set.</source>
          <target state="translated">Diese Methode schließt Duplikate aus der zurückgegebenen Menge.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This is different behavior to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method, which returns all the elements in the input sequences including duplicates.</source>
          <target state="translated">Dies ist ein unterschiedliches Verhalten zur die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> Methode, die alle Elemente in den Eingabesequenzen, einschließlich der doppelten zurückgibt.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">Der Standardgleichheitsvergleich <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generische Schnittstelle.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie eigene <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden für den Typ.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
          <target state="translated">Wenn das Objekt, das von dieser Methode zurückgegebene aufgelistet, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> listet <ph id="ph2">`first`</ph> und <ph id="ph3">`second`</ph> in dieser Reihenfolge und jedes Element, das noch nicht zurückgegeben wurde.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the union of two sequences of integers.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> zum Abrufen der Union von zwei Sequenzen von ganzen Zahlen.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of a custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helperclass.</source>
          <target state="translated">Wenn Sie die Sequenzen von Objekten mit einem benutzerdefinierten Datentyp vergleichen möchten, müssen Sie implementieren die <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generische Schnittstelle in einem Helperclass.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in einem benutzerdefinierten Datentyp aus, und geben Sie <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> Methoden.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie diese Schnittstelle implementiert haben, können Sie Sequenzen von <ph id="ph1">`ProductA`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Der Typ der Elemente der Eingabesequenzen.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the first set for the union.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente die erste Menge für die Gesamtmenge bilden</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the second set for the union.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, dessen unterschiedliche Elemente die zweite Menge für die Gesamtmenge bilden</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> zum Vergleichen von Werten</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set union of two sequences by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Erzeugt mithilfe eines angegebenen <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> die Vereinigungsmenge von zwei Sequenzen</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Wenn c<ph id="ph1">`omparer`</ph> ist <ph id="ph2">`null`</ph>, den Standardgleichheitsvergleich <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, wird verwendet, um Werte zu vergleichen.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
          <target state="translated">Wenn das Objekt, das von dieser Methode zurückgegebene aufgelistet, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> listet <ph id="ph2">`first`</ph> und <ph id="ph3">`second`</ph> in dieser Reihenfolge und jedes Element, das noch nicht zurückgegeben wurde.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method returns all the elements in the input sequences including duplicates, whereas <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> returns only unique values.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> -Methode unterscheidet sich von der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> Methode da die <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> Methode gibt alle Elemente in den Eingabesequenzen Duplikate, einschließlich zurück, wohingegen <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> nur eindeutige Werte zurückgegeben.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Nachdem Sie dieses Vergleichs implementiert haben, können Sie Sequenzen von <ph id="ph1">`Product`</ph> Objekte in der <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> Methode, wie im folgenden Beispiel gezeigt.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to filter.</source>
          <target state="translated">Ein zu filterndes <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das Elemente aus der Eingabesequenz enthält, die die Bedingung erfüllen</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In query expression syntax, a <ph id="ph1">`where`</ph> (Visual C#) or <ph id="ph2">`Where`</ph> (Visual Basic) clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.</source>
          <target state="translated">In der Abfrageausdruckssyntax ein <ph id="ph1">`where`</ph> (Visual c#) oder <ph id="ph2">`Where`</ph> (Visual Basic)-Klausel auf einen Aufruf übersetzt <ph id="ph3">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to filter a sequence.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> um eine Sequenz zu filtern.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ der Elemente des <bpt id="p1">&lt;c&gt;</bpt>Quelle<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to filter.</source>
          <target state="translated">Ein zu filterndes <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Each element's index is used in the logic of the predicate function.</source>
          <target state="translated">In der Logik der Prädikatfunktion wird der Index der einzelnen Elemente verwendet.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das Elemente aus der Eingabesequenz enthält, die die Bedingung erfüllen</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">Das erste Argument der <ph id="ph1">`predicate`</ph> stellt das zu testende Element.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Das zweite Argument stellt den nullbasierten Index des Elements in <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to filter a sequence based on a predicate that involves the index of each element.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie mit <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> zum Filtern einer Sequenz basierend auf ein Prädikat, das den Index der einzelnen Elemente umfasst.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the first input sequence.</source>
          <target state="translated">Der Typ der Elemente der ersten Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the second input sequence.</source>
          <target state="translated">Der Typ der Elemente der zweiten Eingabesequenz.</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the result sequence.</source>
          <target state="translated">Der Typ der Elemente in der Ergebnissequenz.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The first sequence to merge.</source>
          <target state="translated">Die erste Sequenz, die zusammengeführt werden soll</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The second sequence to merge.</source>
          <target state="translated">Die zweite Sequenz, die zusammengeführt werden soll</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>A function that specifies how to merge the elements from the two sequences.</source>
          <target state="translated">Eine Funktion, die angibt, wie die Elemente der zwei Sequenzen zusammengeführt werden sollen</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</source>
          <target state="translated">Wendet eine Funktion auf die entsprechenden Elemente von zwei Sequenzen an, und erzeugt eine Sequenz der Ergebnisse</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains merged elements of two input sequences.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, das die zusammengeführten Elemente der beiden Eingabesequenzen enthält</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Diese Methode wird mit verzögerter Ausführung implementiert.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in Visual Basic.</source>
          <target state="translated">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen seiner <ph id="ph1">`GetEnumerator`</ph> Methode direkt oder mithilfe von <ph id="ph2">`foreach`</ph> in Visual C#- oder <ph id="ph3">`For Each`</ph> in Visual Basic.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The method merges each element of the first sequence with an element that has the same index in the second sequence.</source>
          <target state="translated">Die Methode führt jedes Element der ersten Sequenz mit einem Element mit dem gleichen Index in der zweiten Sequenz zusammen.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</source>
          <target state="translated">Wenn die Sequenzen nicht die gleiche Anzahl von Elementen verfügen, führt die Methode Sequenzen zusammen, bis das Ende eines dieser Elemente erreicht.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</source>
          <target state="translated">Z. B. wenn eine Sequenz verfügt über drei Elemente und die andere vier hat, müssen der Ergebnissequenz nur drei Elemente.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Zip%2A&gt;</ph> method to merge two sequences.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Linq.Enumerable.Zip%2A&gt;</ph> Methode, um zwei Sequenzen zusammenzuführen.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="second" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
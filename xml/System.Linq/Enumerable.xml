<Type Name="Enumerable" FullName="System.Linq.Enumerable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d784f7085ee5c91b69f527975ecebf8715b7afc6" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52231342" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Enumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Enumerable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Enumerable" />
  <TypeSignature Language="VB.NET" Value="Public Module Enumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enumerable abstract sealed" />
  <TypeSignature Language="F#" Value="type Enumerable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="5e343-101">Stellt eine Reihe von <see langword="static" />-Methoden (<see langword="Shared" />-Methoden in Visual Basic) zum Abfragen von Objekten bereit, die <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementieren</span>
      <span class="sxs-lookup">
        <span data-stu-id="5e343-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-102">Die Methoden in dieser Klasse stellen eine Implementierung der Standardabfrageoperatoren aus, für Abfragen, Implementieren von Datenquellen <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="5e343-102">The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="5e343-103">Die Standardabfrageoperatoren sind allgemeine-Methoden, die Folgen der [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] Muster und ermöglichen es Ihnen, durchlaufen, Filter- und projektionsvorgänge in jeder beliebigen. NET-basierte Programmiersprache.</span><span class="sxs-lookup"><span data-stu-id="5e343-103">The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</span></span>  
  
 <span data-ttu-id="5e343-104">Die meisten Methoden in dieser Klasse werden als Erweiterungsmethoden, die Erweiterung definiert <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="5e343-104">The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="5e343-105">Dies bedeutet, sie können auf jedes Objekt, das implementiert wie eine Instanzmethode aufgerufen werden <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="5e343-105">This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="5e343-106">Methoden, die in einer Abfrage verwendet werden, die eine Sequenz von Werten zurückgibt führen Sie die Zieldaten nicht nutzen, bis das Abfrageobjekt aufgelistet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-106">Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</span></span> <span data-ttu-id="5e343-107">Dies wird als verzögerte Ausführung bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-107">This is known as deferred execution.</span></span> <span data-ttu-id="5e343-108">Methoden, die in einer Abfrage verwendet werden, die einen Singleton-Wert zurückgibt, ausführen und die Zieldaten sofort nutzen.</span><span class="sxs-lookup"><span data-stu-id="5e343-108">Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2">
      <span data-ttu-id="5e343-109">Übersicht über Standardabfrageoperatoren</span>
      <span class="sxs-lookup">
        <span data-stu-id="5e343-109">Standard Query Operators Overview</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/175ce3ff-9bbf-4e64-8421-faeb81a0bb51">
      <span data-ttu-id="5e343-110">Erweiterungsmethoden (C#-Programmierhandbuch)</span>
      <span class="sxs-lookup">
        <span data-stu-id="5e343-110">Extension Methods (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/b8020aae-374d-46a9-bcb7-8cc2390b93b6">
      <span data-ttu-id="5e343-111">Erweiterungsmethoden (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="5e343-111">Extension Methods (Visual Basic)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource) (source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TSource, TSource&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * Func&lt;'Source, 'Source, 'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Aggregate (source, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-112">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-112">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-113">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das aggregiert werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-113">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="5e343-114">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-114">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-115">Wendet eine Akkumulatorfunktion auf eine Sequenz an</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-115">Applies an accumulator function over a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-116">Der letzte Akkumulatorwert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-116">The final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-117">Die <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> Methode können sie ganz einfach eine Berechnung für eine Sequenz von Werten durchführen.</span><span class="sxs-lookup"><span data-stu-id="5e343-117">The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="5e343-118">Diese Methode kann durch Aufrufen von `func` einmal für jedes Element im `source` Ausnahme der ersten.</span><span class="sxs-lookup"><span data-stu-id="5e343-118">This method works by calling `func` one time for each element in `source` except the first one.</span></span> <span data-ttu-id="5e343-119">Jedes Mal `func` aufgerufen wird, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> übergibt Sie sowohl das Element aus der Sequenz und einen aggregierten Wert (als das erste Argument für `func`).</span><span class="sxs-lookup"><span data-stu-id="5e343-119">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="5e343-120">Das erste Element der `source` als erster Aggregatwert verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-120">The first element of `source` is used as the initial aggregate value.</span></span> <span data-ttu-id="5e343-121">Das Ergebnis des `func` ersetzt den vorherigen aggregierten Wert.</span><span class="sxs-lookup"><span data-stu-id="5e343-121">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="5e343-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> Gibt das endgültige Ergebnis `func`.</span><span class="sxs-lookup"><span data-stu-id="5e343-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="5e343-123">Diese Überladung von der <xref:System.Linq.Enumerable.Aggregate%2A> Methode nicht für alle Fälle geeignet, da es sich um das erste Element des verwendet `source` als Anfangswert aggregieren.</span><span class="sxs-lookup"><span data-stu-id="5e343-123">This overload of the <xref:System.Linq.Enumerable.Aggregate%2A> method isn't suitable for all cases because it uses the first element of `source` as the initial aggregate value.</span></span> <span data-ttu-id="5e343-124">Wählen Sie eine andere Überladung, wenn der Rückgabewert nur die Elemente von aufzunehmen `source` , die eine bestimmte Bedingung erfüllen.</span><span class="sxs-lookup"><span data-stu-id="5e343-124">You should choose another overload if the return value should include only the elements of `source` that meet a certain condition.</span></span> <span data-ttu-id="5e343-125">Diese Überladung ist z. B. nicht zuverlässig, wenn Sie zum Berechnen der Summe der geraden Zahlen in möchten `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-125">For example, this overload isn't reliable if you want to calculate the sum of the even numbers in `source`.</span></span> <span data-ttu-id="5e343-126">Das Ergebnis werden als fehlerhaft, wenn das erste Element selbst ungerade ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-126">The result will be incorrect if the first element is odd instead of even.</span></span>  
  
 <span data-ttu-id="5e343-127">Um allgemeine Aggregationsvorgänge zu vereinfachen, die Standardabfrageoperatoren auch enthalten eine allgemeine Count-Methode, <xref:System.Linq.Enumerable.Count%2A>, und vier numerischen Aggregationsmethoden, nämlich <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, und <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-127">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-128">Im folgenden Codebeispiel wird veranschaulicht, wie die Reihenfolge der Wörter in einer Zeichenfolge mit Reverse <xref:System.Linq.Enumerable.Aggregate%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-128">The following code example demonstrates how to reverse the order of words in a string by using <xref:System.Linq.Enumerable.Aggregate%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#1)]
 [!code-vb[System.Linq.Enumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-129">
            <paramref name="source" /> oder <paramref name="func" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-129">
              <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-130">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-130">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; -&gt; 'Accumulate" Usage="System.Linq.Enumerable.Aggregate (source, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-131">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-131">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TAccumulate">
          <span data-ttu-id="5e343-132">Der Typ des Akkumulatorwerts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-132">The type of the accumulator value.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-133">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das aggregiert werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="seed">
          <span data-ttu-id="5e343-134">Der erste Akkumulatorwert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-134">The initial accumulator value.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="5e343-135">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-135">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-136">Wendet eine Akkumulatorfunktion auf eine Sequenz an</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-136">Applies an accumulator function over a sequence.</span>
          </span>
          <span data-ttu-id="5e343-137">Der angegebene Startwert wird als erster Akkumulatorwert verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-137">The specified seed value is used as the initial accumulator value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-138">Der letzte Akkumulatorwert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-138">The final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-139">Die <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> Methode können sie ganz einfach eine Berechnung für eine Sequenz von Werten durchführen.</span><span class="sxs-lookup"><span data-stu-id="5e343-139">The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="5e343-140">Diese Methode kann durch Aufrufen von `func` einmal für jedes Element im `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-140">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="5e343-141">Jedes Mal `func` aufgerufen wird, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> übergibt Sie sowohl das Element aus der Sequenz und einen aggregierten Wert (als das erste Argument für `func`).</span><span class="sxs-lookup"><span data-stu-id="5e343-141">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="5e343-142">Der Wert des der `seed` Parameter wird als erster Aggregatwert verwendet.</span><span class="sxs-lookup"><span data-stu-id="5e343-142">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="5e343-143">Das Ergebnis des `func` ersetzt den vorherigen aggregierten Wert.</span><span class="sxs-lookup"><span data-stu-id="5e343-143">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="5e343-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> Gibt das endgültige Ergebnis `func`.</span><span class="sxs-lookup"><span data-stu-id="5e343-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="5e343-145">Um allgemeine Aggregationsvorgänge zu vereinfachen, die Standardabfrageoperatoren auch enthalten eine allgemeine Count-Methode, <xref:System.Linq.Enumerable.Count%2A>, und vier numerischen Aggregationsmethoden, nämlich <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, und <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-145">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-146">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Aggregate%2A> eine Akkumulatorfunktion angewendet, und verwenden einen Ausgangswert.</span><span class="sxs-lookup"><span data-stu-id="5e343-146">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and use a seed value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#2)]
 [!code-vb[System.Linq.Enumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-147">
            <paramref name="source" /> oder <paramref name="func" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-147">
              <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate, TResult) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func, Func&lt;TAccumulate, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Aggregate (source, seed, func, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-148">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-148">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TAccumulate">
          <span data-ttu-id="5e343-149">Der Typ des Akkumulatorwerts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-149">The type of the accumulator value.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-150">Der Typ des Ergebniswerts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-150">The type of the resulting value.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-151">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das aggregiert werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="seed">
          <span data-ttu-id="5e343-152">Der erste Akkumulatorwert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-152">The initial accumulator value.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="5e343-153">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-153">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-154">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-154">A function to transform the final accumulator value into the result value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-155">Wendet eine Akkumulatorfunktion auf eine Sequenz an</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-155">Applies an accumulator function over a sequence.</span>
          </span>
          <span data-ttu-id="5e343-156">Der angegebene Startwert wird als erster Akkumulatorwert verwendet, und der Ergebniswert wird mit der angegebenen Funktion ausgewählt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-156">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-157">Der transformierte letzte Akkumulatorwert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-157">The transformed final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-158">Die <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> Methode können sie ganz einfach eine Berechnung für eine Sequenz von Werten durchführen.</span><span class="sxs-lookup"><span data-stu-id="5e343-158">The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="5e343-159">Diese Methode kann durch Aufrufen von `func` einmal für jedes Element im `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-159">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="5e343-160">Jedes Mal `func` aufgerufen wird, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> übergibt Sie sowohl das Element aus der Sequenz und einen aggregierten Wert (als das erste Argument für `func`).</span><span class="sxs-lookup"><span data-stu-id="5e343-160">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="5e343-161">Der Wert des der `seed` Parameter wird als erster Aggregatwert verwendet.</span><span class="sxs-lookup"><span data-stu-id="5e343-161">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="5e343-162">Das Ergebnis des `func` ersetzt den vorherigen aggregierten Wert.</span><span class="sxs-lookup"><span data-stu-id="5e343-162">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="5e343-163">Das endgültige Ergebnis `func` übergeben wird, um `resultSelector` das Endergebnis der abzurufenden <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-163">The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span></span>  
  
 <span data-ttu-id="5e343-164">Um allgemeine Aggregationsvorgänge zu vereinfachen, die Standardabfrageoperatoren auch enthalten eine allgemeine Count-Methode, <xref:System.Linq.Enumerable.Count%2A>, und vier numerischen Aggregationsmethoden, nämlich <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, und <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-164">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-165">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Aggregate%2A> eine Akkumulatorfunktion und eine Ergebnisauswahl anwenden.</span><span class="sxs-lookup"><span data-stu-id="5e343-165">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and a result selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#3)]
 [!code-vb[System.Linq.Enumerable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-166">
            <paramref name="source" /> oder <paramref name="func" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-166">
              <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="All&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-167">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-167">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-168">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente enthält, auf die das Prädikat angewendet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-168">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-169">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-169">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-170">Bestimmt, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-170">Determines whether all elements of a sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-171">
            <see langword="true" />, wenn jedes Element der Quellsequenz im angegebenen Prädikat erfolgreich überprüft wird oder wenn die Sequenz leer ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-171">
              <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5e343-172">Diese Methode gibt nicht alle Elemente einer Auflistung zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-172">This method does not return all the elements of a collection.</span></span> <span data-ttu-id="5e343-173">Stattdessen bestimmt er, ob alle Elemente einer Auflistung auf eine Bedingung erfüllen.</span><span class="sxs-lookup"><span data-stu-id="5e343-173">Instead, it determines whether all the elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="5e343-174">Die Enumeration von `source` wird beendet, sobald das Ergebnis bestimmt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5e343-174">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="5e343-175">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into All()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.All%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-175">In Visual Basic query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-176">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.All%2A> zu bestimmen, ob alle Elemente in einer Sequenz eine Bedingung erfüllen.</span><span class="sxs-lookup"><span data-stu-id="5e343-176">The following code example demonstrates how to use <xref:System.Linq.Enumerable.All%2A> to determine whether all the elements in a sequence satisfy a condition.</span></span> <span data-ttu-id="5e343-177">Variable `allStartWithB` ist "true", wenn alle Pet-Namen mit "B" beginnen oder die `pets` Array ist leer.</span><span class="sxs-lookup"><span data-stu-id="5e343-177">Variable `allStartWithB` is true if all the pet names start with "B" or if the `pets` array is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#4)]
 [!code-vb[System.Linq.Enumerable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#4)]  
  
 <span data-ttu-id="5e343-178">Der boolesche Wert, der die <xref:System.Linq.Enumerable.All%2A> Methodenrückgabe wird im Prädikat des in der Regel verwendet eine `where` Klausel (`Where` -Klausel in Visual Basic) oder einen direkten Aufruf der <xref:System.Linq.Enumerable.Where%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-178">The Boolean value that the <xref:System.Linq.Enumerable.All%2A> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%2A> method.</span></span> <span data-ttu-id="5e343-179">Das folgende Beispiel zeigt diese Verwendung von der `All` Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-179">The following example demonstrates this use of the `All` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#129](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#129)]
 [!code-vb[System.Linq.Enumerable#129](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#129)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-180">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-180">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-181">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-181">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Any&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-182">Bestimmt, ob ein Element einer Sequenz vorhanden ist oder eine Bedingung erfüllt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-182">Determines whether any element of a sequence exists or satisfies a condition.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-183">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-183">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-184">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, bei dem überprüft werden soll, ob es leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-184">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-185">Bestimmt, ob eine Sequenz Elemente enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-185">Determines whether a sequence contains any elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-186">
            <see langword="true" />, wenn die Quellsequenz Elemente enthält, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-186">
              <see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5e343-187">Diese Methode gibt keiner ein Element einer Auflistung zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-187">This method does not return any one element of a collection.</span></span> <span data-ttu-id="5e343-188">Stattdessen bestimmt er, ob die Auflistung keine Elemente enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-188">Instead, it determines whether the collection contains any elements.</span></span>  
  
 <span data-ttu-id="5e343-189">Die Enumeration von `source` wird beendet, sobald das Ergebnis bestimmt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5e343-189">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="5e343-190">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Any()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Any%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-190">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-191">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Any%2A> zu bestimmen, ob eine Sequenz Elemente enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-191">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether a sequence contains any elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#5)]
 [!code-vb[System.Linq.Enumerable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#5)]  
  
 <span data-ttu-id="5e343-192">Der boolesche Wert, der die <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methodenrückgabe wird im Prädikat des in der Regel verwendet eine `where` Klausel (`Where` -Klausel in Visual Basic) oder einen direkten Aufruf der <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-192">The Boolean value that the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method.</span></span> <span data-ttu-id="5e343-193">Das folgende Beispiel zeigt diese Verwendung von der `Any` Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-193">The following example demonstrates this use of the `Any` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#130)]
 [!code-vb[System.Linq.Enumerable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#130)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-194">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-194">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-195">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-195">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-196">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-196">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-197">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, auf dessen Elemente das Prädikat angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-197">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-198">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-198">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-199">Bestimmt, ob ein Element einer Sequenz eine Bedingung erfüllt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-199">Determines whether any element of a sequence satisfies a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-200">
            <see langword="true" />, wenn Elemente der Quellsequenz im angegebenen Prädikat erfolgreich überprüft werden, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-200">
              <see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5e343-201">Diese Methode gibt keiner ein Element einer Auflistung zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-201">This method does not return any one element of a collection.</span></span> <span data-ttu-id="5e343-202">Stattdessen bestimmt er, ob alle Elemente einer Auflistung auf eine Bedingung erfüllen.</span><span class="sxs-lookup"><span data-stu-id="5e343-202">Instead, it determines whether any elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="5e343-203">Die Enumeration von `source` wird beendet, sobald das Ergebnis bestimmt werden kann.</span><span class="sxs-lookup"><span data-stu-id="5e343-203">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="5e343-204">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Any()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Any%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-204">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-205">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Any%2A> zu bestimmen, ob ein Element in einer Sequenz eine Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-205">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether any element in a sequence satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#6)]
 [!code-vb[System.Linq.Enumerable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-206">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-206">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-207">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-207">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Append(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Append : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Append (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-208">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-208">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-209">Eine Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-209">A sequence of values.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="5e343-210">Der an <paramref name="source" /> anzufügende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-210">The value to append to <paramref name="source" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-211">Fügt einen Wert an das Ende der Sequenz an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-211">Appends a value to the end of the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-212">Eine neue Sequenz, die mit <paramref name="element" /> endet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-212">A new sequence that ends with <paramref name="element" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5e343-213">Diese Methode ändert nicht die Elemente der Auflistung.</span><span class="sxs-lookup"><span data-stu-id="5e343-213">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="5e343-214">Stattdessen wird eine Kopie der Auflistung durch das neue Element erstellt.</span><span class="sxs-lookup"><span data-stu-id="5e343-214">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="5e343-215">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Append%2A> , einen Wert an das Ende der Sequenz angefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="5e343-215">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Append%2A> to append a value to the end of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#201](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#201)]
 [!code-vb[System.Linq.Enumerable#201](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#201)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-216">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-216">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ AsEnumerable(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-217">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-217">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-218">Die Sequenz, die als <see cref="T:System.Collections.Generic.IEnumerable`1" /> typisiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-218">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-219">Gibt die Eingabe als <see cref="T:System.Collections.Generic.IEnumerable`1" /> typisiert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-219">Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-220">Die als <see cref="T:System.Collections.Generic.IEnumerable`1" /> typisierte Eingabesequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-220">The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-221">Die <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode hat keine Auswirkungen nicht so ändern Sie den Kompilierzeittyp des `source` von einem Typ, der implementiert <xref:System.Collections.Generic.IEnumerable%601> zu <xref:System.Collections.Generic.IEnumerable%601> selbst.</span><span class="sxs-lookup"><span data-stu-id="5e343-221">The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.</span></span>  
  
 <span data-ttu-id="5e343-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> kann verwendet werden, um entscheiden abfrageimplementierungen, wenn eine Sequenz implementiert <xref:System.Collections.Generic.IEnumerable%601> aber auch einen anderen Satz von öffentlichen Abfragemethoden verfügbar.</span><span class="sxs-lookup"><span data-stu-id="5e343-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available.</span></span> <span data-ttu-id="5e343-223">Angenommen, eine generische Klasse `Table` implementiert <xref:System.Collections.Generic.IEnumerable%601> und verfügt über eigene Methoden wie z. B. `Where`, `Select`, und `SelectMany`, einen Aufruf von `Where` würde rufen Sie die öffentliche `Where` -Methode der `Table`.</span><span class="sxs-lookup"><span data-stu-id="5e343-223">For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`.</span></span> <span data-ttu-id="5e343-224">Ein `Table` Typ, der eine Datenbanktabelle darstellt, möglicherweise eine `Where` -Methode, die das Prädikatargument als eine Ausdrucksbaumstruktur und die Struktur in SQL für die Remoteausführung konvertiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-224">A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</span></span> <span data-ttu-id="5e343-225">Wenn nicht, z. B. Remoteausführung ist da das Prädikat mit eine lokale Methode, ruft der <xref:System.Linq.Enumerable.AsEnumerable%2A> Methode kann verwendet werden, um die benutzerdefinierten Methoden ausblenden und stattdessen die Standardabfrageoperatoren verfügbar gemacht.</span><span class="sxs-lookup"><span data-stu-id="5e343-225">If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-226">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> an, um einen ausblenden, die benutzerdefinierte `Where` Methode, wenn die standardmäßige Implementierung des Standardabfrageoperators ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-226">The following code example demonstrates how to use <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to hide a type's custom `Where` method when the standard query operator implementation is desired.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#108](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#108)]
 [!code-vb[System.Linq.Enumerable#108](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Average">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-227">Berechnet den Durchschnitt einer Sequenz von numerischen Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-227">Computes the average of a sequence of numeric values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-228">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Durchschnitt berechnet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-228">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-229">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-229">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-230">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-230">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-231">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-231">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-232">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> um den Durchschnitt einer Sequenz von Werten zu berechnen.</span><span class="sxs-lookup"><span data-stu-id="5e343-232">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-233">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-233">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-234">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-234">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-235">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-235">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-236">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Durchschnitt berechnet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-236">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-237">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-237">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-238">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-238">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-239">Wenn die Summe der Elemente zu groß, um die Darstellung als eine <xref:System.Double>, diese Methode gibt zurück, Plus oder minus unendlich.</span><span class="sxs-lookup"><span data-stu-id="5e343-239">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="5e343-240">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-240">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-241">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-241">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-242">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-242">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-243">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-243">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-244">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-244">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-245">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Durchschnitt berechnet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-245">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-246">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-246">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-247">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-247">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-248">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-248">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-249">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-250">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-250">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-251">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-251">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-252">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-252">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-253">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Durchschnitt berechnet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-253">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-254">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-254">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-255">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-255">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-256">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-256">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-257">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-257">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-258">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-258">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-259">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-259">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-260">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-260">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-261">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-261">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-262">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL sein können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-262">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-263">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-263">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-264">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-264">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-265">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-265">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-266">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-266">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-267">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-267">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-268">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-268">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-269">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-269">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-270">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL sein können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-270">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-271">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-271">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-272">Wenn die Summe der Elemente zu groß, um die Darstellung als eine <xref:System.Double>, diese Methode gibt zurück, Plus oder minus unendlich.</span><span class="sxs-lookup"><span data-stu-id="5e343-272">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="5e343-273">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-273">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-274">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-274">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-275">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-275">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-276">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-276">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-277">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-277">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-278">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL sein können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-278">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-279">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-279">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-280">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-280">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-281">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-282">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-282">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-283">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-283">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-284">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-284">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-285">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-285">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-286">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL sein können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-286">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-287">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-287">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-288">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-288">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-289">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-289">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-290">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-290">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-291">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-291">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-292">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-292">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-293">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-293">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-294">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL sein können.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-294">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-295">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-295">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-296">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-296">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-297">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-297">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-298">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-298">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-299">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-299">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-300">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Durchschnitt berechnet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-300">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-301">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-301">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-302">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-302">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-303">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-303">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-304">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-304">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-305">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-305">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-306">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-306">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-307">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-307">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-308">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-308">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-309">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-309">A sequence of values that are used to calculate an average.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-310">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-310">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-311">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-311">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-312">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-312">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-313">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-313">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-314">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-314">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-315">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-315">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-316">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-316">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-317">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-317">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-318">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-318">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-319">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-319">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-320">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-320">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-321">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-321">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-322">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-322">Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-323">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-323">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-324">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-324">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-325">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-325">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-326">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-326">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-327">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-327">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-328">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-328">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-329">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-329">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-330">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-330">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-331">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-331">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-332">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-332">Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-333">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-333">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-334">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-334">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-335">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-335">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-336">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-336">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-337">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-337">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-338">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-338">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-339">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-339">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-340">Der Typ der Elemente der Quelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-340">The type of the elements of source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-341">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-341">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-342">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-342">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-343">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-343">Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-344">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-344">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-345">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-345">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-346">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-346">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-347">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-347">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-348">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-348">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-349">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-349">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-350">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-350">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-351">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-351">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-352">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-352">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-353">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-353">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-354">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-354">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-355">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-355">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-356">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-356">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-357">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-357">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-358">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-358">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-359">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-359">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-360">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-360">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-361">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-361">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-362">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-362">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-363">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-363">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-364">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-364">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-365">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-365">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-366">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-366">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-367">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-367">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-368">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-368">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-369">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-369">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-370">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-370">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-371">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-371">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-372">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-372">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-373">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-373">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-374">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-374">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-375">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-375">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-376">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-377">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-377">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-378">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-378">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-379">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-379">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-380">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-380">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-381">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-381">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-382">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-382">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-383">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-383">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-384">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-384">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-385">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-385">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-386">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-386">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-387">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-387">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-388">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-388">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-389">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-389">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-390">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-390">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-391">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-391">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-392">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur Werte enthält, die <see langword="null" /> sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-392">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-393">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-393">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-394">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-394">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-395">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-395">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-396">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-396">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-397">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-397">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-398">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-398">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-399">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-399">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-400">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-400">Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-401">Der Durchschnitt der Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-401">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-402">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Average()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-402">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-403">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> einen Durchschnittswert berechnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-403">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-404">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-404">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-405">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-405">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-406">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-406">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Cast(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member Cast : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Cast source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-407">Der Typ, an den die Elemente von <paramref name="source" /> übergeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-407">The type to cast the elements of <paramref name="source" /> to.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-408">Das <see cref="T:System.Collections.IEnumerable" />, das die in Typ <c>TResult</c> umzuwandelnden Elemente enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-408">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <c>TResult</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-409">Wandelt die Elemente eines <see cref="T:System.Collections.IEnumerable" /> in den angegebenen Typ um</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-409">Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-410">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das jedes Element der Quellsequenz enthält, das in den angegebenen Typ umgewandelt wird</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-410">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-411">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-411">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-412">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-412">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-413">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-413">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-414">Die <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> Methode ermöglicht die Standardabfrageoperatoren auf nicht generische Auflistungen aufgerufen werden, indem Sie die erforderlichen Informationen angeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-414">The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</span></span> <span data-ttu-id="5e343-415">Z. B. <xref:System.Collections.ArrayList> implementiert nicht <xref:System.Collections.Generic.IEnumerable%601>, sondern durch den Aufruf <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> auf die <xref:System.Collections.ArrayList> Objekt ist, wird die Standardabfrageoperatoren können dann die Sequenz verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-415">For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.</span></span>  
  
 <span data-ttu-id="5e343-416">Wenn ein Element konvertiert werden kann, Typ `TResult`, löst diese Methode eine <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="5e343-416">If an element cannot be converted to type `TResult`, this method throws a <xref:System.InvalidCastException>.</span></span>

 <span data-ttu-id="5e343-417">Die Quellsequenz für diese Methode ist <xref:System.Collections.IEnumerable>, d. h. die Elemente, die während der Kompilierung statischen Typ des verfügen `object`.</span><span class="sxs-lookup"><span data-stu-id="5e343-417">The source sequence for this method is <xref:System.Collections.IEnumerable>, which means the elements have the compile-time static type of `object`.</span></span> <span data-ttu-id="5e343-418">Die einzige typkonvertierungen, die von dieser Methode durchgeführt werden, sind Verweis- und unboxing-Konvertierungen.</span><span class="sxs-lookup"><span data-stu-id="5e343-418">The only type conversions that are performed by this method are reference conversions and unboxing conversions.</span></span> <span data-ttu-id="5e343-419">Die Common Language Runtime-Typ der Elemente in der Auflistung muss den Typ des übereinstimmen, oder im Fall von Werttypen, muss des Common Language Runtime-Typs der Elemente das Ergebnis einer Boxing-Konvertierung des Zieltyps.</span><span class="sxs-lookup"><span data-stu-id="5e343-419">The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</span></span> <span data-ttu-id="5e343-420">Andere Konvertierungstypen wie die zwischen verschiedenen numerischen Typen sind nicht zulässig.</span><span class="sxs-lookup"><span data-stu-id="5e343-420">Other conversion types, such as those between different numeric types, are not allowed.</span></span> 
 
 <span data-ttu-id="5e343-421">Um nur die Elemente abzurufen, die in den Typ konvertiert werden können `TResult`, verwenden Sie die <xref:System.Linq.Enumerable.OfType%2A> Methode anstelle von <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-421">To obtain only those elements that can be converted to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="5e343-422">In einem Abfrageausdruck, der eine explizit typisierte Iterationsvariable übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-422">In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span> <span data-ttu-id="5e343-423">Dieses Beispiel zeigt die Syntax für eine explizit typisierte Bereichsvariable.</span><span class="sxs-lookup"><span data-stu-id="5e343-423">This example shows the syntax for an explicitly typed range variable.</span></span>  
  
```csharp  
from int i in objects  
```  
  
```vb  
From i As Integer In objects  
```  

<span data-ttu-id="5e343-424">Verwenden der `select` -Klausel einer Abfrage andere Konvertierung, z. B. den impliziten numerischen Konvertierungen ausführen.</span><span class="sxs-lookup"><span data-stu-id="5e343-424">Use the `select` clause of a query to perform other conversion types, like the implicit numeric conversions.</span></span> <span data-ttu-id="5e343-425">Im folgenden Beispiel wird sowohl die `Cast` Methode und eine `select` Anweisung, um eine Sequenz von geschachtelten ganzen Zahlen in eine Sequenz von Double-Werte zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="5e343-425">The following example uses both the `Cast` method and a `select` statement to convert a sequence of boxed integers to a sequence of doubles.</span></span>

```csharp
IEnumerable sequence = Enumerable.Range(0, 10);
var doubles = from int item in sequence
                select (double)item;
``` 

```vb
Dim sequence As IEnumerable = Enumerable.Range(0, 10)
Dim doubles = From item As Integer In sequence
                Select CType(item, Double)
```

## Examples  
 <span data-ttu-id="5e343-426">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> So aktivieren Sie die Verwendung der standardmäßigen Abfrageoperatoren auf eine <xref:System.Collections.ArrayList>.</span><span class="sxs-lookup"><span data-stu-id="5e343-426">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> to enable the use of the standard query operators on an <xref:System.Collections.ArrayList>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#19)]
 [!code-vb[System.Linq.Enumerable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-427">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-427">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="5e343-428">Ein Element in der Sequenz kann nicht in den Typ <paramref name="TResult" /> umgewandelt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-428">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="5e343-429">from-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-429">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="5e343-430">From-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-430">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Concat(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Concat (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-431">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-431">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-432">Die erste zu verkettende Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-432">The first sequence to concatenate.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-433">Die Sequenz, die mit der ersten Sequenz verkettet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-433">The sequence to concatenate to the first sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-434">Verkettet zwei Sequenzen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-434">Concatenates two sequences.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-435">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die verketteten Elemente der beiden Eingabesequenzen enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-435">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-436">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-436">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-437">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-437">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-438">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-438">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-439">Die <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode unterscheidet sich von der <xref:System.Linq.Enumerable.Union%2A> Methode da die <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methodenrückgabe alle ursprünglichen Elemente in den Eingabesequenzen.</span><span class="sxs-lookup"><span data-stu-id="5e343-439">The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences.</span></span> <span data-ttu-id="5e343-440">Die <xref:System.Linq.Enumerable.Union%2A> Methodenrückgabe nur eindeutige Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-440">The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-441">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> zum Verketten von zwei Sequenzen.</span><span class="sxs-lookup"><span data-stu-id="5e343-441">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#20)]
 [!code-vb[System.Linq.Enumerable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#20)]  
  
 <span data-ttu-id="5e343-442">Eine alternative Möglichkeit der Verkettung von zwei Sequenzen wird zum Erstellen einer Auflistung, z. B. ein Array von Sequenzen und wenden Sie dann die <xref:System.Linq.Enumerable.SelectMany%2A> Methode und übergeben es mit der Identity Selector-Funktion.</span><span class="sxs-lookup"><span data-stu-id="5e343-442">An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref:System.Linq.Enumerable.SelectMany%2A> method, passing it the identity selector function.</span></span> <span data-ttu-id="5e343-443">Das folgende Beispiel zeigt diese Verwendung von <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-443">The following example demonstrates this use of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#112](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#112)]
 [!code-vb[System.Linq.Enumerable#112](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-444">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-444">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-445">Bestimmt, ob eine Sequenz ein angegebenes Element enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-445">Determines whether a sequence contains a specified element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-446">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-446">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-447">Eine Sequenz, in der ein Wert gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-447">A sequence in which to locate a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="5e343-448">Der Wert, der in der Sequenz gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-448">The value to locate in the sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-449">Bestimmt mithilfe des Standardgleichheitsvergleichs, ob eine Sequenz ein angegebenes Element enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-449">Determines whether a sequence contains a specified element by using the default equality comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-450">
            <see langword="true" />, wenn die Quellsequenz ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-450">
              <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-451">Wenn der Typ des `source` implementiert <xref:System.Collections.Generic.ICollection%601>, `Contains` -Methode in der, dass diese Implementierung wird aufgerufen, um das Resultset zu erzielen.</span><span class="sxs-lookup"><span data-stu-id="5e343-451">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result.</span></span> <span data-ttu-id="5e343-452">Andernfalls wird diese Methode bestimmt, ob `source` das angegebene Element enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-452">Otherwise, this method determines whether `source` contains the specified element.</span></span>  
  
 <span data-ttu-id="5e343-453">Die Enumeration wird beendet, sobald ein übereinstimmendes Element gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-453">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="5e343-454">Elemente werden auf den angegebenen Wert verglichen, mithilfe des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-454">Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-455">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> bestimmt, ob ein Array ein bestimmtes Elements enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-455">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to determine whether an array contains a specific element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#21)]
 [!code-vb[System.Linq.Enumerable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-456">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-456">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-457">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-457">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-458">Eine Sequenz, in der ein Wert gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-458">A sequence in which to locate a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="5e343-459">Der Wert, der in der Sequenz gesucht werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-459">The value to locate in the sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-460">Ein Gleichheitsvergleich zum Vergleichen von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-460">An equality comparer to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-461">Bestimmt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, ob eine Sequenz ein angegebenes Element enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-461">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-462">
            <see langword="true" />, wenn die Quellsequenz ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-462">
              <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-463">Die Enumeration wird beendet, sobald ein übereinstimmendes Element gefunden wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-463">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="5e343-464">Wenn `comparer` ist `null`, des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um die Elemente mit dem angegebenen Wert zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-464">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-465">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <xref:System.Linq.Enumerable.Contains%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-465">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Contains%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="5e343-466">Nachdem Sie dieses Vergleichs implementiert haben, können Sie eine Sequenz von `Product` Objekte in der <xref:System.Linq.Enumerable.Contains%2A> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-466">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Contains%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#6)]
 [!code-vb[CSLINQCustomComparer#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-467">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-467">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Count&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-468">Gibt die Anzahl der Elemente in einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-468">Returns the number of elements in a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; -&gt; int" Usage="System.Linq.Enumerable.Count source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-469">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-469">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-470">Eine Sequenz, die zu zählende Elemente enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-470">A sequence that contains elements to be counted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-471">Gibt die Anzahl der Elemente in einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-471">Returns the number of elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-472">Die Anzahl der Elemente in der Eingabesequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-472">The number of elements in the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-473">Wenn der Typ des `source` implementiert <xref:System.Collections.Generic.ICollection%601>, diese Implementierung wird verwendet, um die Anzahl der Elemente abzurufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-473">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="5e343-474">Andernfalls wird diese Methode bestimmt die Anzahl die.</span><span class="sxs-lookup"><span data-stu-id="5e343-474">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="5e343-475">Verwenden der <xref:System.Linq.Enumerable.LongCount%2A> Methode, wenn Sie erwarten, und das Ergebnis größer als zulassen möchten <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="5e343-475">Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="5e343-476">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Count()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-476">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-477">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zum zählen der Elemente in einem Array.</span><span class="sxs-lookup"><span data-stu-id="5e343-477">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#22)]
 [!code-vb[System.Linq.Enumerable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-478">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-478">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-479">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-479">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-480">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-480">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int" Usage="System.Linq.Enumerable.Count (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-481">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-481">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-482">Eine Sequenz, die Elemente enthält, die überprüft und gezählt werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-482">A sequence that contains elements to be tested and counted.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-483">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-483">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-484">Gibt eine Zahl zurück, die die Anzahl der Elemente in der angegebenen Sequenz angibt, die eine Bedingung erfüllen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-484">Returns a number that represents how many elements in the specified sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-485">Eine Zahl, die die Anzahl der Elemente in der Sequenz darstellt, die die Bedingung in der Prädikatfunktion erfüllen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-485">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-486">Wenn der Typ des `source` implementiert <xref:System.Collections.Generic.ICollection%601>, diese Implementierung wird verwendet, um die Anzahl der Elemente abzurufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-486">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="5e343-487">Andernfalls wird diese Methode bestimmt die Anzahl die.</span><span class="sxs-lookup"><span data-stu-id="5e343-487">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="5e343-488">Verwenden Sie die <xref:System.Linq.Enumerable.LongCount%2A> Methode, wenn Sie erwarten, und das Ergebnis größer als zulassen möchten <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="5e343-488">You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="5e343-489">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Count()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-489">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-490">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> der Elemente in einem Array zu zählen, die eine Bedingung erfüllen.</span><span class="sxs-lookup"><span data-stu-id="5e343-490">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#23)]
 [!code-vb[System.Linq.Enumerable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-491">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-491">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-492">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-492">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-493">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-493">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-494">Gibt die Elemente eines <see cref="T:System.Collections.Generic.IEnumerable`1" /> oder eine Standardwert-Singletonauflistung zurück, wenn die Sequenz leer ist</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-494">Returns the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, or a default valued singleton collection if the sequence is empty.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-495">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-495">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-496">Die Sequenz, für die ein Standardwert zurückgegeben werden soll, wenn sie leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-496">The sequence to return a default value for if it is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-497">Gibt die Elemente der angegebenen Sequenz oder den Standardwert des Typparameters in einer Singletonauflistung zurück, wenn die Sequenz leer ist</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-497">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-498">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />-Objekt, das den Standardwert für den <paramref name="TSource" />-Typ enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-499">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-500">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-501">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-502">Der Standardwert für den Referenz- und auf NULL festlegbare Typen ist `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-502">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="5e343-503">Diese Methode kann verwendet werden, um eine linke äußere Verknüpfung zu erzeugen, zusammen mit den <xref:System.Linq.Enumerable.GroupJoin%2A>) Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-503">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-504">Die folgenden Codebeispielen wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> um einen Standardwert anzugeben, für den Fall, dass die Quellsequenz leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-504">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.</span></span>  
  
 <span data-ttu-id="5e343-505">Dieses Beispiel verwendet eine nicht leere Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-505">This example uses a non-empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#24)]
 [!code-vb[System.Linq.Enumerable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#24)]  
  
 <span data-ttu-id="5e343-506">Dieses Beispiel verwendet eine leere Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-506">This example uses an empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#25)]
 [!code-vb[System.Linq.Enumerable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-507">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-507">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="5e343-508">Verknüpfen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-508">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-509">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-509">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-510">Die Sequenz, für die der angegebene Wert zurückgegeben werden soll, wenn sie leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-510">The sequence to return the specified value for if it is empty.</span>
          </span>
        </param>
        <param name="defaultValue">
          <span data-ttu-id="5e343-511">Der Wert, der zurückgegeben werden soll, wenn die Sequenz leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-511">The value to return if the sequence is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-512">Gibt die Elemente der angegebenen Sequenz oder den angegebenen Wert in einer Singletonauflistung zurück, wenn die Sequenz leer ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-512">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-513">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <paramref name="defaultValue" /> enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-513">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-514">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-514">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-515">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-515">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-516">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-516">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-517">Diese Methode kann verwendet werden, um eine linke äußere Verknüpfung zu erzeugen, zusammen mit den <xref:System.Linq.Enumerable.GroupJoin%2A>) Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-517">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-518">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Methode, und geben Sie einen Standardwert.</span><span class="sxs-lookup"><span data-stu-id="5e343-518">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method and specify a default value.</span></span> <span data-ttu-id="5e343-519">Die erste Sequenz ist nicht leer, und die zweite Sequenz leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-519">The first sequence is not empty and the second sequence is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#26)]
 [!code-vb[System.Linq.Enumerable#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#26)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="5e343-520">Verknüpfen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-520">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Distinct&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-521">Gibt unterschiedliche Elemente aus einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-521">Returns distinct elements from a sequence.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-522">Die Ergebnissequenz ist nicht sortiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-522">The result sequence is unordered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-523">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-523">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-524">Die Sequenz, aus der doppelte Elemente entfernt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-524">The sequence to remove duplicate elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-525">Gibt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-525">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-526">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das unterschiedliche Elemente aus der Quellsequenz enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-526">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-527">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-527">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-528">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-528">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-529">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-529">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-530">Die <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode gibt eine nicht geordnete Sequenz, die keine doppelten Werte enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-530">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="5e343-531">Er verwendet den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-531">It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.</span></span>  
  
 <span data-ttu-id="5e343-532">In Visual Basic-Abfrageausdruckssyntax eine `Distinct` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Distinct%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-532">In Visual Basic query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.</span></span>  
  
 <span data-ttu-id="5e343-533">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <xref:System.IEquatable%601> generische Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="5e343-533">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="5e343-534">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie Ihre eigenen <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden für den Typ.</span><span class="sxs-lookup"><span data-stu-id="5e343-534">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="5e343-535">Ein Beispiel für die Verwendung <xref:System.Collections.Generic.IEqualityComparer%601> zum Definieren eines benutzerdefinierten Vergleichs finden Sie unter <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-535">For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601> to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-536">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> unterschiedliche Elemente aus einer Sequenz von ganzen Zahlen zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-536">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return distinct elements from a sequence of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#27)]
 [!code-vb[System.Linq.Enumerable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#27)]  
  
 <span data-ttu-id="5e343-537">Wenn Sie unterschiedliche Elemente aus Sequenzen von Objekten von einem benutzerdefinierten Datentyp zurückgeben möchten, müssen Sie implementieren die <xref:System.IEquatable%601> generische Schnittstelle in der Klasse.</span><span class="sxs-lookup"><span data-stu-id="5e343-537">If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in the class.</span></span> <span data-ttu-id="5e343-538">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in einem benutzerdefinierten Datentyp aus, und geben Sie <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-538">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#1)]
 [!code-vb[CSLINQEncapsulatedComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#1)]  
  
 <span data-ttu-id="5e343-539">Nachdem Sie diese Schnittstelle implementiert haben, können Sie eine Sequenz von `Product` Objekte in der <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-539">After you implement this interface, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#5)]
 [!code-vb[CSLINQEncapsulatedComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-540">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-540">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/86f42614-0d8f-4ffc-b888-ce8a37a8d36a">
          <span data-ttu-id="5e343-541">Distinct-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-541">Distinct Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-542">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-542">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-543">Die Sequenz, aus der doppelte Elemente entfernt werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-543">The sequence to remove duplicate elements from.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-544">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-544">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-545">Gibt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-545">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-546">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das unterschiedliche Elemente aus der Quellsequenz enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-546">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-547">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-547">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-548">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-548">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-549">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-549">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-550">Die <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> Methode gibt eine nicht geordnete Sequenz, die keine doppelten Werte enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-550">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="5e343-551">Wenn `comparer` ist `null`, des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-551">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-552">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <xref:System.Linq.Enumerable.Distinct%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-552">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="5e343-553">Nachdem Sie dieses Vergleichs implementiert haben, können Sie eine Sequenz von `Product` Objekte in der <xref:System.Linq.Enumerable.Distinct%2A> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-553">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#5)]
 [!code-vb[CSLINQCustomComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-554">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-554">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAt(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAt (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-555">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-555">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-556">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-556">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="5e343-557">Der auf 0 (null) basierende Index des abzurufenden Elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-557">The zero-based index of the element to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-558">Gibt das Element an einem angegebenen Index in einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-558">Returns the element at a specified index in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-559">Das Element an der angegebenen Position in der Quellsequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-559">The element at the specified position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-560">Wenn der Typ des `source` implementiert <xref:System.Collections.Generic.IList%601>, diese Implementierung verwendet, um das Element am angegebenen Index abzurufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-560">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="5e343-561">Andernfalls ruft diese Methode das angegebene Element ab.</span><span class="sxs-lookup"><span data-stu-id="5e343-561">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="5e343-562">Diese Methode löst eine Ausnahme aus, wenn `index` liegt außerhalb des Bereichs.</span><span class="sxs-lookup"><span data-stu-id="5e343-562">This method throws an exception if `index` is out of range.</span></span> <span data-ttu-id="5e343-563">Um stattdessen einen Standardwert zurückzugeben, wenn der angegebene Index außerhalb des gültigen Bereichs befindet, verwenden Sie die <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-563">To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-564">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.ElementAt%2A> auf ein Element an einer bestimmten Position zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-564">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAt%2A> to return an element at a specific position.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#28)]
 [!code-vb[System.Linq.Enumerable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-565">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-565">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5e343-566">
            <paramref name="index" /> ist kleiner als 0 bzw. größer oder gleich der Anzahl der Elemente in <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-566">
              <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAtOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAtOrDefault (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-567">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-567">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-568">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-568">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="5e343-569">Der auf 0 (null) basierende Index des abzurufenden Elements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-569">The zero-based index of the element to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-570">Gibt das Element an einem angegebenen Index in einer Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-570">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-571">
            <see langword="default" />(<paramref name="TSource" />), wenn der Index außerhalb der Begrenzungen der Quellsequenz liegt, andernfalls das Element an der angegebenen Position in der Quellsequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-571">
              <see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-572">Wenn der Typ des `source` implementiert <xref:System.Collections.Generic.IList%601>, diese Implementierung verwendet, um das Element am angegebenen Index abzurufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-572">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="5e343-573">Andernfalls ruft diese Methode das angegebene Element ab.</span><span class="sxs-lookup"><span data-stu-id="5e343-573">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="5e343-574">Der Standardwert für den Referenz- und auf NULL festlegbare Typen ist `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-574">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-575">Das folgende Codebeispiel zeigt die Verwendung von <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-575">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span></span> <span data-ttu-id="5e343-576">Dieses Beispiel verwendet einen Index, der außerhalb der Grenzen des Arrays ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-576">This example uses an index that is outside the bounds of the array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#29)]
 [!code-vb[System.Linq.Enumerable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-577">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-577">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Empty&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Empty(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-578">Der Typ, der dem Typparameter des zurückgegebenen generischen <see cref="T:System.Collections.Generic.IEnumerable`1" /> zugewiesen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-578">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="5e343-579">Gibt ein leeres <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurück, das über das angegebene Typargument verfügt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-579">Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-580">Ein leeres <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Typargument <paramref name="TResult" /> ist</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-580">An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-581">Die <xref:System.Linq.Enumerable.Empty%60%601> Methode speichert eine leere Sequenz vom Typ `TResult`.</span><span class="sxs-lookup"><span data-stu-id="5e343-581">The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`.</span></span> <span data-ttu-id="5e343-582">Wenn das zurückgegebene Objekt aufgezählt wird, gibt es keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-582">When the object it returns is enumerated, it yields no elements.</span></span>  
  
 <span data-ttu-id="5e343-583">In einigen Fällen diese Methode eignet sich für einer leeren Sequenz an eine benutzerdefinierte Methode übergeben, wird ein <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="5e343-583">In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="5e343-584">Es kann auch ein neutrales Element für Methoden generieren, wie z. B. verwendet werden <xref:System.Linq.Enumerable.Union%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-584">It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>.</span></span> <span data-ttu-id="5e343-585">Finden Sie im Abschnitt "Beispiel" ein Beispiel für diese Verwendung von <xref:System.Linq.Enumerable.Empty%60%601>.</span><span class="sxs-lookup"><span data-stu-id="5e343-585">See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-586">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Empty%60%601> zum Generieren eines leeren <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="5e343-586">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Empty%60%601> to generate an empty <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#30)]
 [!code-vb[System.Linq.Enumerable#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#30)]  
  
 <span data-ttu-id="5e343-587">Das folgende Codebeispiel veranschaulicht eine mögliche Anwendung der der <xref:System.Linq.Enumerable.Empty%60%601> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-587">The following code example demonstrates a possible application of the <xref:System.Linq.Enumerable.Empty%60%601> method.</span></span> <span data-ttu-id="5e343-588">Die <xref:System.Linq.Enumerable.Aggregate%2A> Methode wird auf eine Auflistung von Zeichenfolgen-Arrays angewendet.</span><span class="sxs-lookup"><span data-stu-id="5e343-588">The <xref:System.Linq.Enumerable.Aggregate%2A> method is applied to a collection of string arrays.</span></span> <span data-ttu-id="5e343-589">Die Elemente der einzelnen Arrays in der Auflistung werden hinzugefügt, auf die resultierende <xref:System.Collections.Generic.IEnumerable%601> nur dann, wenn dieses Array mit vier oder mehr Elemente enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-589">The elements of each array in the collection are added to the resulting <xref:System.Collections.Generic.IEnumerable%601> only if that array contains four or more elements.</span></span> <span data-ttu-id="5e343-590"><xref:System.Linq.Enumerable.Empty%2A> Dient zum Generieren des Startwert für <xref:System.Linq.Enumerable.Aggregate%2A> da Wenn kein Array in der Auflistung vier oder mehr Elemente enthält, die nur die leere Sequenz zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-590"><xref:System.Linq.Enumerable.Empty%2A> is used to generate the seed value for <xref:System.Linq.Enumerable.Aggregate%2A> because if no array in the collection has four or more elements, only the empty sequence is returned.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#31)]
 [!code-vb[System.Linq.Enumerable#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Except&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-591">Erzeugt die Differenzmenge von zwei Sequenzen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-591">Produces the set difference of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-592">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-592">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-593">Es wird ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurückgegeben, dessen Elemente nicht auch in <paramref name="second" /> enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-593">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-594">Wenn ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> Elemente enthält, die auch in der ersten Sequenz vorhanden sind, werden diese Elemente aus der zurückgegebenen Sequenz entfernt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-594">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-595">Erzeugt die Differenzmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-595">Produces the set difference of two sequences by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-596">Eine Sequenz, die die Differenzmenge der Elemente von zwei Sequenzen enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-596">A sequence that contains the set difference of the elements of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-597">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-597">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-598">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-598">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-599">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-599">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-600">Die Differenzmenge zweier Mengen ist definiert als die Elemente der ersten Menge, die in der zweiten Menge nicht angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-600">The set difference of two sets is defined as the members of the first set that do not appear in the second set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-601">Diese Methode gibt die Elemente in `first` , die erscheinen nicht im `second`.</span><span class="sxs-lookup"><span data-stu-id="5e343-601">This method returns those elements in `first` that do not appear in `second`.</span></span> <span data-ttu-id="5e343-602">Es ist auch nicht zurückgeben dieser Elemente im `second` , die erscheinen nicht im `first`.</span><span class="sxs-lookup"><span data-stu-id="5e343-602">It does not also return those elements in `second` that do not appear in `first`.</span></span>  
  
 <span data-ttu-id="5e343-603">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <xref:System.Collections.Generic.IEqualityComparer%601> generische Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="5e343-603">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="5e343-604">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie Ihre eigenen <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden für den Typ.</span><span class="sxs-lookup"><span data-stu-id="5e343-604">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-605">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode zum Vergleichen von zwei Sequenzen von Zahlen und Elemente werden zurückgegeben, die nur in der ersten Sequenz angezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-605">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method to compare two sequences of numbers and return elements that appear only in the first sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#34)]
 [!code-vb[System.Linq.Enumerable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#34)]  
  
 <span data-ttu-id="5e343-606">Wenn Sie die Sequenzen von Objekten vom Typ benutzerdefinierte Daten vergleichen möchten, müssen Sie implementieren die <xref:System.Collections.Generic.IEqualityComparer%601> generische Schnittstelle in einem Helperclass.</span><span class="sxs-lookup"><span data-stu-id="5e343-606">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass.</span></span> <span data-ttu-id="5e343-607">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in einem benutzerdefinierten Datentyp aus, und geben Sie <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-607">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="5e343-608">Nachdem Sie diese Schnittstelle implementiert haben, können Sie Sequenzen von `ProductA` Objekte in der <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-608">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#7)]
 [!code-vb[CSLINQEncapsulatedComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-609">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-609">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-610">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-610">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-611">Es wird ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurückgegeben, dessen Elemente nicht auch in <paramref name="second" /> enthalten sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-611">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-612">Wenn ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> Elemente enthält, die auch in der ersten Sequenz vorhanden sind, werden diese Elemente aus der zurückgegebenen Sequenz entfernt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-612">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-613">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-613">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-614">Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> die Differenzmenge zweier Sequenzen zum Vergleichen von Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-614">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-615">Eine Sequenz, die die Differenzmenge der Elemente von zwei Sequenzen enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-615">A sequence that contains the set difference of the elements of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-616">Wenn `comparer` ist `null`, des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-616">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-617">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <xref:System.Linq.Enumerable.Except%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-617">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Except%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="5e343-618">Nachdem Sie dieses Vergleichs implementiert haben, können Sie Sequenzen von `Product` Objekte in der <xref:System.Linq.Enumerable.Except%2A> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-618">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Except%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#7)]
 [!code-vb[CSLINQCustomComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-619">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-619">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="First&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-620">Gibt das erste Element einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-620">Returns the first element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-621">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-621">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-622">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen erstes Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-622">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-623">Gibt das erste Element einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-623">Returns the first element of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-624">Das erste Element in der angegebenen Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-624">The first element in the specified sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-625">Die <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode löst eine Ausnahme aus, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-625">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="5e343-626">Um stattdessen einen Standardwert zurückzugeben, wenn die Quellsequenz leer ist, verwenden Sie die <xref:System.Linq.Enumerable.FirstOrDefault%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-626">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-627">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> auf das erste Element eines Arrays zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-627">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the first element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#35)]
 [!code-vb[System.Linq.Enumerable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-628">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-628">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-629">Die Quellsequenz ist leer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-629">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-630">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-630">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-631">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-631">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-632">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-632">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-633">Gibt das erste Element in einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-633">Returns the first element in a sequence that satisfies a specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-634">Das erste Element in der Sequenz, das mit der angegebenen Prädikatfunktion erfolgreich überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-634">The first element in the sequence that passes the test in the specified predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-635">Die <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Methode löst eine Ausnahme aus, wenn kein übereinstimmendes Element, im gefunden wird `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-635">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="5e343-636">Um stattdessen einen Standardwert zurückzugeben, wenn kein übereinstimmendes Element gefunden wird, verwenden Sie die <xref:System.Linq.Enumerable.FirstOrDefault%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-636">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-637">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> auf das erste Element eines Arrays zurück, die eine Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-637">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the first element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#36)]
 [!code-vb[System.Linq.Enumerable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-638">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-638">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-639">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-639">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="5e343-640">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-640">-or-</span>
          </span>
          <span data-ttu-id="5e343-641">Die Quellsequenz ist leer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-641">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FirstOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-642">Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn kein Element gefunden wird</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-642">Returns the first element of a sequence, or a default value if no element is found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-643">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-643">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-644">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen erstes Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-644">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-645">Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-645">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-646">
            <see langword="default" />(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist, andernfalls das erste Element in <paramref name="source" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-646">
              <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-647">Der Standardwert für den Referenz- und auf NULL festlegbare Typen ist `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-647">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="5e343-648">Die <xref:System.Linq.Enumerable.FirstOrDefault%2A> Methode bietet keine Möglichkeit, einen Standardwert anzugeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-648">The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="5e343-649">Wenn Sie einen Standardwert außer angeben möchten `default(TSource)`, verwenden die <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Methode, wie im Beispiel beschrieben.</span><span class="sxs-lookup"><span data-stu-id="5e343-649">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-650">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> auf ein leeres Array.</span><span class="sxs-lookup"><span data-stu-id="5e343-650">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#37)]
 [!code-vb[System.Linq.Enumerable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#37)]  
  
 <span data-ttu-id="5e343-651">Der Wert von `default(TSource)` ist nicht der Standardwert, Sie möchten, verwenden, wenn die Auflistung keine Elemente enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-651">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="5e343-652">Anstatt im Ergebnis der unerwünschte Standardwert, und klicken Sie dann bei Bedarf ändern, können Sie die <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Methode, um den Standardwert angeben, die Sie möchten, verwenden, wenn die Auflistung leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-652">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="5e343-653">Rufen Sie dann die <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> auf das erste Element abzurufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-653">Then, call <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the first element.</span></span> <span data-ttu-id="5e343-654">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von numerischen Monate leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-654">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</span></span> <span data-ttu-id="5e343-655">Da der Standardwert für eine ganze Zahl über 0 (null), auf die nicht zu einem bestimmten Monat entspricht ist, muss der Standardwert stattdessen als 1 angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-655">Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="5e343-656">Die erste Ergebnisvariable wird auf den unerwünschten Standardwert überprüft, nach der Ausführung die Abfrage abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-656">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="5e343-657">Die zweite Ergebnisvariable wird mithilfe von <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> an den Standardwert 1.</span><span class="sxs-lookup"><span data-stu-id="5e343-657">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#126](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#126)]
 [!code-vb[System.Linq.Enumerable#126](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#126)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-658">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-658">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-659">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-659">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-660">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-660">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-661">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-661">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-662">Gibt das erste Element der Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-662">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-663">
            <see langword="default" />(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist oder wenn kein Element die von <paramref name="predicate" /> angegebene Überprüfung besteht. Andernfalls das erste Element in <paramref name="source" />, das die von <paramref name="predicate" /> angegebene Überprüfung besteht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-663">
              <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-664">Der Standardwert für den Referenz- und auf NULL festlegbare Typen ist `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-664">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-665">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> durch Übergabe in einem Prädikat.</span><span class="sxs-lookup"><span data-stu-id="5e343-665">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="5e343-666">Im zweiten Aufruf der Methode ist gibt es kein Element im Array, das die Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-666">In the second call to the method, there is no element in the array that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#38)]
 [!code-vb[System.Linq.Enumerable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-667">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-667">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-668">Gruppiert die Elemente einer Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-668">Groups the elements of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-669">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-669">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-670">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-670">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-671">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-671">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-672">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-672">A function to extract the key for each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-673">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-673">Groups the elements of a sequence according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-674">Ein <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# oder ein <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Sequenz von Objekten und einen Schlüssel enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-674">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-675">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-675">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-676">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-676">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-677">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-677">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-678">Beispiele für `GroupBy`, finden Sie unter den folgenden Themen.</span><span class="sxs-lookup"><span data-stu-id="5e343-678">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="5e343-679">Die <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Methode gibt eine Auflistung von <xref:System.Linq.IGrouping%602> Objekten, jeweils eines für jedes distinct-Schlüssel, der aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-679">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="5e343-680">Ein <xref:System.Linq.IGrouping%602> ist ein <xref:System.Collections.Generic.IEnumerable%601> verfügt, die auch über einen Schlüssel, der die Elemente zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-680">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="5e343-681">Die <xref:System.Linq.IGrouping%602> -Objekte zurückgegeben werden, die in einer Reihenfolge entsprechend der Reihenfolge der Elemente in `source` , erstellt den ersten Schlüssel der einzelnen <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="5e343-681">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="5e343-682">Elemente in einer Gruppierung werden in der Reihenfolge zurückgegeben, wenn `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-682">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="5e343-683">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-683">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="5e343-684">In der Abfrageausdruckssyntax ein `group by` (Visual c#) oder `Group By Into` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-684">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="5e343-685">Weitere Informationen und Beispiele zur Verwendung finden Sie unter [Group-Klausel](~/docs/csharp/language-reference/keywords/group-clause.md) und [Group By-Klausel](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="5e343-685">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-686">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-686">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="5e343-687">group-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-687">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="5e343-688">GROUP BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-688">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-689">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-689">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-690">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-690">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-691">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-691">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-692">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-692">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-693">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-693">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-694">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und vergleicht die Schlüssel mithilfe eines angegebenen Vergleichs</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-694">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-695">Ein <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# oder ein <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Auflistung von Objekten und einen Schlüssel enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-695">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-696">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-696">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-697">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-697">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-698">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-698">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-699">Beispiele für `GroupBy`, finden Sie unter den folgenden Themen.</span><span class="sxs-lookup"><span data-stu-id="5e343-699">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="5e343-700">Die <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Methode gibt eine Auflistung von <xref:System.Linq.IGrouping%602> Objekten, jeweils eines für jedes distinct-Schlüssel, der aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-700">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="5e343-701">Ein <xref:System.Linq.IGrouping%602> ist ein <xref:System.Collections.Generic.IEnumerable%601> verfügt, die auch über einen Schlüssel, der die Elemente zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-701">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="5e343-702">Die <xref:System.Linq.IGrouping%602> -Objekte zurückgegeben werden, die in einer Reihenfolge entsprechend der Reihenfolge der Elemente in `source` , erstellt den ersten Schlüssel der einzelnen <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="5e343-702">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="5e343-703">Elemente in einer Gruppierung werden in der Reihenfolge zurückgegeben, wenn `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-703">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="5e343-704">Wenn `comparer` ist `null`, den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-704">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="5e343-705">Wenn zwei Schlüssel gleich bestimmt als werden `comparer`, der erste Schlüssel wird als Schlüssel für die Gruppierung ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="5e343-705">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="5e343-706">In der Abfrageausdruckssyntax ein `group by` (Visual c#) oder `Group By Into` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-706">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="5e343-707">Weitere Informationen und Beispiele zur Verwendung finden Sie unter [Group-Klausel](~/docs/csharp/language-reference/keywords/group-clause.md) und [Group By-Klausel](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="5e343-707">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-708">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-708">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="5e343-709">group-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-709">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="5e343-710">GROUP BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-710">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-711">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-711">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-712">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-712">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="5e343-713">Der Typ der Elemente im <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-713">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-714">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-715">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-715">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="5e343-716">Eine Funktion, mit der jedes Quellelement einem Element in <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-716">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-717">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und projiziert die Elemente für jede Gruppe mithilfe einer angegebenen Funktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-717">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-718">Ein <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# oder ein <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Auflistung von Objekten des Typs <paramref name="TElement" /> und einen Schlüssel enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-718">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-719">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-719">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-720">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-720">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-721">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-721">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-722">Die <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> Methode gibt eine Auflistung von <xref:System.Linq.IGrouping%602> Objekten, jeweils eines für jedes distinct-Schlüssel, der aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-722">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="5e343-723">Ein <xref:System.Linq.IGrouping%602> ist ein <xref:System.Collections.Generic.IEnumerable%601> verfügt, die auch über einen Schlüssel, der die Elemente zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-723">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="5e343-724">Die <xref:System.Linq.IGrouping%602> -Objekte zurückgegeben werden, die in einer Reihenfolge entsprechend der Reihenfolge der Elemente in `source` , erstellt den ersten Schlüssel der einzelnen <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="5e343-724">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="5e343-725">Elemente in einem Gruppierungskonstrukt werden zurückgegeben, in der angegebenen Reihenfolge an, die Elemente, die sie erzeugt `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-725">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="5e343-726">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-726">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-727">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> zum Gruppieren der Elemente einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-727">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#39)]
 [!code-vb[System.Linq.Enumerable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#39)]  
  
 <span data-ttu-id="5e343-728">In der Abfrageausdruckssyntax ein `group by` (Visual c#) oder `Group By Into` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-728">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="5e343-729">Die Übersetzung des Abfrageausdrucks im folgenden Beispiel ist die Abfrage im obigen Beispiel entspricht.</span><span class="sxs-lookup"><span data-stu-id="5e343-729">The translation of the query expression in the following example is equivalent to the query in the example above.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#122](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#122)]
 [!code-vb[System.Linq.Enumerable#122](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#122)]  
  
> [!NOTE]
>  <span data-ttu-id="5e343-730">In einem Visual c# oder Visual Basic-Abfrageausdruck, Ausdrücke für das Element und auftreten, in umgekehrter Reihenfolge die Positionen ihrer Argumente in einem Aufruf der <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-730">In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-731">
            <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-731">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="5e343-732">group-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-732">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="5e343-733">GROUP BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-733">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-734">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-734">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-735">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-735">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="5e343-736">Der Typ der Elemente im <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-736">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-737">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-737">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-738">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-738">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="5e343-739">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-739">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-740">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-740">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-741">Gruppiert die Elemente einer Sequenz entsprechend einer Schlüsselauswahlfunktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-741">Groups the elements of a sequence according to a key selector function.</span>
          </span>
          <span data-ttu-id="5e343-742">Die Schlüssel werden mithilfe eines Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-742">The keys are compared by using a comparer and each group's elements are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-743">Ein <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# oder ein <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Auflistung von Objekten des Typs <paramref name="TElement" /> und einen Schlüssel enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-743">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-744">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-744">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-745">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-745">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-746">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-746">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-747">Beispiele für `GroupBy`, finden Sie unter den folgenden Themen.</span><span class="sxs-lookup"><span data-stu-id="5e343-747">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="5e343-748">Die <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Methode gibt eine Auflistung von <xref:System.Linq.IGrouping%602> Objekten, jeweils eines für jedes distinct-Schlüssel, der aufgetreten ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-748">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="5e343-749">Ein <xref:System.Linq.IGrouping%602> ist ein <xref:System.Collections.Generic.IEnumerable%601> verfügt, die auch über einen Schlüssel, der die Elemente zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="5e343-749">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="5e343-750">Die <xref:System.Linq.IGrouping%602> -Objekte zurückgegeben werden, die in einer Reihenfolge entsprechend der Reihenfolge der Elemente in `source` , erstellt den ersten Schlüssel der einzelnen <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="5e343-750">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="5e343-751">Elemente in einem Gruppierungskonstrukt werden zurückgegeben, in der angegebenen Reihenfolge an, die Elemente, die sie erzeugt `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-751">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="5e343-752">Wenn `comparer` ist `null`, den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-752">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="5e343-753">Wenn zwei Schlüssel gleich bestimmt als werden `comparer`, der erste Schlüssel wird als Schlüssel für die Gruppierung ausgewählt.</span><span class="sxs-lookup"><span data-stu-id="5e343-753">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="5e343-754">In der Abfrageausdruckssyntax ein `group by` (Visual c#) oder `Group By Into` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-754">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="5e343-755">Weitere Informationen und Beispiele zur Verwendung finden Sie unter [Group-Klausel](~/docs/csharp/language-reference/keywords/group-clause.md) und [Group By-Klausel](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="5e343-755">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-756">
            <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-756">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="5e343-757">group-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-757">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="5e343-758">GROUP BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-758">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-759">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-759">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-760">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-760">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-761">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-761">The type of the result value returned by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-762">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-762">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-763">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-763">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-764">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-764">A function to create a result value from each group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-765">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-765">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-766">Eine Auflistung von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-766">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-767">In der Abfrageausdruckssyntax ein `group by` (Visual c#) oder `Group By Into` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-767">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-768">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> zum Gruppieren der Elemente einer Sequenz und eine Sequenz von Ergebnissen vom Typ projizieren `TResult`.</span><span class="sxs-lookup"><span data-stu-id="5e343-768">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#15)]
 [!code-vb[System.Linq.Enumerable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="5e343-769">group-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-769">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="5e343-770">GROUP BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-770">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-771">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-771">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-772">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-772">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-773">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-773">The type of the result value returned by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-774">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-774">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-775">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-775">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-776">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-776">A function to create a result value from each group.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-777">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-777">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-778">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-778">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="5e343-779">Die Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-779">The keys are compared by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-780">Eine Auflistung von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-780">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="5e343-781">group-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-781">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="5e343-782">GROUP BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-782">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-783">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-783">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-784">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-784">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="5e343-785">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-785">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-786">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-786">The type of the result value returned by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-787">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-787">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-788">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-788">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="5e343-789">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-789">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-790">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-790">A function to create a result value from each group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-791">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-791">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="5e343-792">Die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-792">The elements of each group are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-793">Eine Auflistung von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-793">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-794">In der Abfrageausdruckssyntax ein `group by` (Visual c#) oder `Group By Into` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-794">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-795">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> die projizierten Elemente einer Sequenz gruppieren und dann eine Sequenz von Ergebnissen vom Typ projizieren `TResult`.</span><span class="sxs-lookup"><span data-stu-id="5e343-795">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> to group the projected elements of a sequence and then project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#125)]
 [!code-vb[System.Linq.Enumerable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#125)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="5e343-796">group-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-796">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="5e343-797">GROUP BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-797">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-798">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-798">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-799">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-799">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="5e343-800">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-800">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-801">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-801">The type of the result value returned by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-802">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-802">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-803">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-803">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="5e343-804">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-804">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-805">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-805">A function to create a result value from each group.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-806">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-806">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-807">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-807">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="5e343-808">Schlüsselwerte werden mithilfe eines angegebenen Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-808">Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-809">Eine Auflistung von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-809">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="5e343-810">group-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-810">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="5e343-811">GROUP BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-811">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-812">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-812">Correlates the elements of two sequences based on key equality, and groups the results.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="5e343-813">Der Typ der Elemente der ersten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-813">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="5e343-814">Der Typ der Elemente der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-814">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-815">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-815">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-816">Der Typ der Ergebniselemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-816">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="5e343-817">Die erste zu verknüpfende Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-817">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="5e343-818">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-818">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="5e343-819">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-819">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="5e343-820">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-820">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-821">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-821">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-822">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-822">Correlates the elements of two sequences based on equality of keys and groups the results.</span>
          </span>
          <span data-ttu-id="5e343-823">Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-823">The default equality comparer is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-824">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen einer Gruppenverknüpfung von zwei Sequenzen ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-824">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-825">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-825">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-826">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-826">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-827">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-827">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-828">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, zu hashen und Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-828">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="5e343-829"><xref:System.Linq.Enumerable.GroupJoin%2A> erzeugt hierarchische Ergebnisse, dies bedeutet, dass Elemente aus `outer` werden zusammen mit Auflistungen von übereinstimmenden Elementen aus `inner`.</span><span class="sxs-lookup"><span data-stu-id="5e343-829"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="5e343-830">`GroupJoin` ermöglicht es Ihnen, Ihre Ergebnisse als Grundlage für eine ganze Gruppe von Übereinstimmungen für jedes Element der `outer`.</span><span class="sxs-lookup"><span data-stu-id="5e343-830">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-831">Wenn es keine entsprechenden Elemente im sind `inner` für ein angegebenes Element der `outer`, die Reihenfolge der Übereinstimmungen für dieses Element leer, aber immer noch in den Ergebnissen angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-831">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="5e343-832">Die `resultSelector` Funktion heißt nur einmal für jede `outer` -Element zusammen mit der eine Auflistung aller der `inner` die entsprechenden Elemente der `outer` Element.</span><span class="sxs-lookup"><span data-stu-id="5e343-832">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="5e343-833">Dies unterscheidet sich von der <xref:System.Linq.Enumerable.Join%2A> Methode, in dem die Ergebnisauswahlfunktion aufgerufen wird, auf, die ein Element aus enthalten `outer` und ein Element aus `inner`.</span><span class="sxs-lookup"><span data-stu-id="5e343-833">This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="5e343-834">`GroupJoin` behält die Reihenfolge der Elemente des `outer`, und für jedes Element der `outer`, die Reihenfolge der übereinstimmenden Elemente aus `inner`.</span><span class="sxs-lookup"><span data-stu-id="5e343-834">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="5e343-835"><xref:System.Linq.Enumerable.GroupJoin%2A> hat keine direkte Entsprechung in herkömmlichen relationalen Datenbanken.</span><span class="sxs-lookup"><span data-stu-id="5e343-835"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="5e343-836">Diese Methode implementiert jedoch eine übergeordnete Menge innerer und linker äußerer Verknüpfungen.</span><span class="sxs-lookup"><span data-stu-id="5e343-836">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="5e343-837">Beide dieser Vorgänge können in Bezug auf ein gruppiertes Verknüpfen geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-837">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="5e343-838">Finden Sie unter [Verknüpfungsvorgänge](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="5e343-838">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 <span data-ttu-id="5e343-839">In der Abfrageausdruckssyntax ein `join … into` (Visual c#) oder `Group Join` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.GroupJoin%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-839">In query expression syntax, a `join … into` (Visual C#) or `Group Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-840">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> zum Ausführen eines Group Joins von zwei Sequenzen.</span><span class="sxs-lookup"><span data-stu-id="5e343-840">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> to perform a grouped join on two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#40)]
 [!code-vb[System.Linq.Enumerable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-841">
            <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-841">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="5e343-842">Verknüpfungsvorgänge</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-842">Join Operations</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/76e9df84-092c-41a6-9537-c3f1cbd7f0fb">
          <span data-ttu-id="5e343-843">join-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-843">join clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/37dbf79c-7b5c-421b-bbb7-dadfd2b92a1c">
          <span data-ttu-id="5e343-844">Group Join-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-844">Group Join Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="5e343-845">Der Typ der Elemente der ersten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-845">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="5e343-846">Der Typ der Elemente der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-846">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-847">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-847">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-848">Der Typ der Ergebniselemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-848">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="5e343-849">Die erste zu verknüpfende Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-849">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="5e343-850">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-850">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="5e343-851">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-851">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="5e343-852">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-852">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-853">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-853">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-854">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Hashen und Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-854">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-855">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-855">Correlates the elements of two sequences based on key equality and groups the results.</span>
          </span>
          <span data-ttu-id="5e343-856">Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-856">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-857">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen einer Gruppenverknüpfung von zwei Sequenzen ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-857">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-858">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-858">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-859">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-859">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-860">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-860">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-861">Wenn `comparer` ist `null`, des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, zu hashen und Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-861">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="5e343-862"><xref:System.Linq.Enumerable.GroupJoin%2A> erzeugt hierarchische Ergebnisse, dies bedeutet, dass Elemente aus `outer` werden zusammen mit Auflistungen von übereinstimmenden Elementen aus `inner`.</span><span class="sxs-lookup"><span data-stu-id="5e343-862"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="5e343-863">`GroupJoin` ermöglicht es Ihnen, Ihre Ergebnisse als Grundlage für eine ganze Gruppe von Übereinstimmungen für jedes Element der `outer`.</span><span class="sxs-lookup"><span data-stu-id="5e343-863">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-864">Wenn es keine entsprechenden Elemente im sind `inner` für ein angegebenes Element der `outer`, die Reihenfolge der Übereinstimmungen für dieses Element leer, aber immer noch in den Ergebnissen angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-864">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="5e343-865">Die `resultSelector` Funktion heißt nur einmal für jede `outer` -Element zusammen mit der eine Auflistung aller der `inner` die entsprechenden Elemente der `outer` Element.</span><span class="sxs-lookup"><span data-stu-id="5e343-865">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="5e343-866">Dies unterscheidet sich von der <xref:System.Linq.Enumerable.Join%2A> Methode, die in der die Ergebnisauswahlfunktion aufgerufen wird, auf, die ein Element aus enthalten `outer` und ein Element aus `inner`.</span><span class="sxs-lookup"><span data-stu-id="5e343-866">This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="5e343-867">`GroupJoin` behält die Reihenfolge der Elemente des `outer`, und für jedes Element der `outer`, die Reihenfolge der übereinstimmenden Elemente aus `inner`.</span><span class="sxs-lookup"><span data-stu-id="5e343-867">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="5e343-868"><xref:System.Linq.Enumerable.GroupJoin%2A> hat keine direkte Entsprechung in herkömmlichen relationalen Datenbanken.</span><span class="sxs-lookup"><span data-stu-id="5e343-868"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="5e343-869">Diese Methode implementiert jedoch eine übergeordnete Menge innerer und linker äußerer Verknüpfungen.</span><span class="sxs-lookup"><span data-stu-id="5e343-869">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="5e343-870">Beide dieser Vorgänge können in Bezug auf ein gruppiertes Verknüpfen geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-870">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="5e343-871">Finden Sie unter [Verknüpfungsvorgänge](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="5e343-871">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-872">
            <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-872">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="5e343-873">Join-Vorgänge</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-873">Performing Join Operations</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-874">Erzeugt die Schnittmenge zweier Sequenzen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-874">Produces the set intersection of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-875">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-875">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-876">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente auch in <paramref name="second" /> vorhanden sind, wird zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-876">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-877">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente auch in der ersten Sequenz vorhanden sind, wird zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-877">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-878">Erzeugt die Schnittmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-878">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-879">Eine Sequenz, die die Elemente enthält, die die Schnittmenge von zwei Sequenzen bilden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-879">A sequence that contains the elements that form the set intersection of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-880">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-880">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-881">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-881">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-882">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-882">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-883">Die Schnittmenge zweier Mengen A und B ist als die Gruppe definiert, die alle Elemente ein, die auch in B, aber keine anderen Elemente enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-883">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="5e343-884">Wenn die von dieser Methode zurückgegebene Objekt auflistbar ist, <xref:System.Linq.Enumerable.Intersect%2A> gibt unterschiedliche Elemente, die in beiden Sequenzen in der Reihenfolge, in der sie angezeigt werden, die auftreten `first`.</span><span class="sxs-lookup"><span data-stu-id="5e343-884">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="5e343-885">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <xref:System.Collections.Generic.IEqualityComparer%601> generische Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="5e343-885">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="5e343-886">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie Ihre eigenen <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden für den Typ.</span><span class="sxs-lookup"><span data-stu-id="5e343-886">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-887">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> zurück, die Elemente, die in beiden Sequenzen von ganzen Zahlen.</span><span class="sxs-lookup"><span data-stu-id="5e343-887">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the elements that appear in each of two sequences of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#41)]
 [!code-vb[System.Linq.Enumerable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#41)]  
  
 <span data-ttu-id="5e343-888">Wenn Sie die Sequenzen von Objekten eines benutzerdefinierten Datentyps vergleichen möchten, müssen Sie implementieren die <xref:System.Collections.Generic.IEqualityComparer%601> generische Schnittstelle in einer Hilfsklasse.</span><span class="sxs-lookup"><span data-stu-id="5e343-888">If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helper class.</span></span> <span data-ttu-id="5e343-889">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in einem benutzerdefinierten Datentyp aus, und geben Sie <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-889">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="5e343-890">Nachdem Sie diese Schnittstelle implementiert haben, können Sie Sequenzen von `ProductA` Objekte in der <xref:System.Linq.Enumerable.Intersect%2A> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-890">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-csharp[CSLINQEncapsulatedComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#3)]
[!code-vb[CSLINQEncapsulatedComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-891">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-891">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-892">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-892">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-893">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente auch in <paramref name="second" /> vorhanden sind, wird zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-893">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-894">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente auch in der ersten Sequenz vorhanden sind, wird zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-894">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-895">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-895">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-896">Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten die Schnittmenge von zwei Sequenzen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-896">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-897">Eine Sequenz, die die Elemente enthält, die die Schnittmenge von zwei Sequenzen bilden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-897">A sequence that contains the elements that form the set intersection of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-898">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-898">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-899">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-899">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-900">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-900">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-901">Die Schnittmenge zweier Mengen A und B ist als die Gruppe definiert, die alle Elemente ein, die auch in B, aber keine anderen Elemente enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-901">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="5e343-902">Wenn die von dieser Methode zurückgegebene Objekt auflistbar ist, <xref:System.Linq.Enumerable.Intersect%2A> gibt unterschiedliche Elemente, die in beiden Sequenzen in der Reihenfolge, in der sie angezeigt werden, die auftreten `first`.</span><span class="sxs-lookup"><span data-stu-id="5e343-902">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="5e343-903">Wenn `comparer` ist `null`, des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-903">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-904">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <xref:System.Linq.Enumerable.Intersect%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-904">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Intersect%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="5e343-905">Nachdem Sie dieses Vergleichs implementiert haben, können Sie Sequenzen von `Product` Objekte in der <xref:System.Linq.Enumerable.Intersect%2A> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-905">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#3)]
[!code-vb[CSLINQCustomComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-906">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-906">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-907">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-907">Correlates the elements of two sequences based on matching keys.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="5e343-908">Der Typ der Elemente der ersten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-908">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="5e343-909">Der Typ der Elemente der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-909">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-910">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-910">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-911">Der Typ der Ergebniselemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-911">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="5e343-912">Die erste zu verknüpfende Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-912">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="5e343-913">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-913">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="5e343-914">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-914">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="5e343-915">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-915">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-916">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-916">A function to create a result element from two matching elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-917">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-917">Correlates the elements of two sequences based on matching keys.</span>
          </span>
          <span data-ttu-id="5e343-918">Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-918">The default equality comparer is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-919">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-919">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-920">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-920">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-921">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-921">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-922">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-922">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-923">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, zu hashen und Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-923">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="5e343-924">Ein Join bezieht sich auf den Vorgang, der die Elemente von zwei Quellen mit Informationen, die basierend auf einem gemeinsamen Schlüssel korreliert.</span><span class="sxs-lookup"><span data-stu-id="5e343-924">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="5e343-925"><xref:System.Linq.Enumerable.Join%2A> bringt die beiden Informationsquellen und die Schlüssel, die über die sie zusammen in einem Methodenaufruf zugeordnet sind.</span><span class="sxs-lookup"><span data-stu-id="5e343-925"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="5e343-926">Dies unterscheidet sich von der Verwendung von `SelectMany`, erfordert mehr als ein Methodenaufruf, den gleichen Vorgang auszuführen.</span><span class="sxs-lookup"><span data-stu-id="5e343-926">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="5e343-927"><xref:System.Linq.Enumerable.Join%2A> behält die Reihenfolge der Elemente des `outer`, und für jedes dieser Elemente, die Reihenfolge der übereinstimmenden Elemente von `inner`.</span><span class="sxs-lookup"><span data-stu-id="5e343-927"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="5e343-928">In der Abfrageausdruckssyntax ein `join` (Visual c#) oder `Join` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.Join%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-928">In query expression syntax, a `join` (Visual C#) or `Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.</span></span>  
  
 <span data-ttu-id="5e343-929">Bei relationalen Datenbanken die <xref:System.Linq.Enumerable.Join%2A> -Methode implementiert eine innere gleichheitsverknüpfung.</span><span class="sxs-lookup"><span data-stu-id="5e343-929">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="5e343-930">"Innere" bedeutet, dass nur Elemente, die eine Übereinstimmung in der anderen Sequenz in den Ergebnissen enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="5e343-930">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="5e343-931">Ein ' Equi-Join "ist eine Verknüpfung in die die Schlüssel auf Gleichheit verglichen werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-931">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="5e343-932">Ein linker äußerer Join-Vorgang hat keine dedizierten Standardabfrageoperator, kann aber mithilfe von erfolgen die <xref:System.Linq.Enumerable.GroupJoin%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-932">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="5e343-933">Finden Sie unter [Verknüpfungsvorgänge](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="5e343-933">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-934">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> eine innere Verknüpfung zweier Sequenzen basierend auf einem gemeinsamen Schlüssel ausführen.</span><span class="sxs-lookup"><span data-stu-id="5e343-934">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> to perform an inner join of two sequences based on a common key.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#42)]
 [!code-vb[System.Linq.Enumerable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-935">
            <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-935">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="5e343-936">Verknüpfen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-936">Joining</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/76e9df84-092c-41a6-9537-c3f1cbd7f0fb">
          <span data-ttu-id="5e343-937">join-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-937">join clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/6dd37936-b27c-4e00-98ad-154b23f4de64">
          <span data-ttu-id="5e343-938">Join-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-938">Join Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="5e343-939">Der Typ der Elemente der ersten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-939">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="5e343-940">Der Typ der Elemente der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-940">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-941">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-941">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-942">Der Typ der Ergebniselemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-942">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="5e343-943">Die erste zu verknüpfende Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-943">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="5e343-944">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-944">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="5e343-945">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-945">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="5e343-946">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-946">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-947">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-947">A function to create a result element from two matching elements.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-948">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Hashen und Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-948">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-949">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-949">Correlates the elements of two sequences based on matching keys.</span>
          </span>
          <span data-ttu-id="5e343-950">Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-950">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-951">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-951">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-952">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-952">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-953">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-953">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-954">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-954">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-955">Wenn `comparer` ist `null`, des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, zu hashen und Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-955">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="5e343-956">Ein Join bezieht sich auf den Vorgang, der die Elemente von zwei Quellen mit Informationen, die basierend auf einem gemeinsamen Schlüssel korreliert.</span><span class="sxs-lookup"><span data-stu-id="5e343-956">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="5e343-957"><xref:System.Linq.Enumerable.Join%2A> bringt die beiden Informationsquellen und die Schlüssel, die über die sie zusammen in einem Methodenaufruf zugeordnet sind.</span><span class="sxs-lookup"><span data-stu-id="5e343-957"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="5e343-958">Dies unterscheidet sich von der Verwendung von `SelectMany`, erfordert mehr als ein Methodenaufruf, den gleichen Vorgang auszuführen.</span><span class="sxs-lookup"><span data-stu-id="5e343-958">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="5e343-959"><xref:System.Linq.Enumerable.Join%2A> behält die Reihenfolge der Elemente des `outer`, und für jedes dieser Elemente, die Reihenfolge der übereinstimmenden Elemente von `inner`.</span><span class="sxs-lookup"><span data-stu-id="5e343-959"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="5e343-960">Bei relationalen Datenbanken die <xref:System.Linq.Enumerable.Join%2A> -Methode implementiert eine innere gleichheitsverknüpfung.</span><span class="sxs-lookup"><span data-stu-id="5e343-960">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="5e343-961">"Innere" bedeutet, dass nur Elemente, die eine Übereinstimmung in der anderen Sequenz in den Ergebnissen enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="5e343-961">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="5e343-962">Ein ' Equi-Join "ist eine Verknüpfung in die die Schlüssel auf Gleichheit verglichen werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-962">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="5e343-963">Ein linker äußerer Join-Vorgang hat keine dedizierten Standardabfrageoperator, kann aber mithilfe von erfolgen die <xref:System.Linq.Enumerable.GroupJoin%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-963">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="5e343-964">Finden Sie unter [Verknüpfungsvorgänge](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="5e343-964">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-965">
            <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-965">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="5e343-966">Verknüpfen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-966">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Last&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-967">Gibt das letzte Element einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-967">Returns the last element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-968">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-968">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-969">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen letztes Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-969">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-970">Gibt das letzte Element einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-970">Returns the last element of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-971">Der Wert an der letzten Position in der Quellsequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-971">The value at the last position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-972">Die <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode löst eine Ausnahme aus, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-972">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="5e343-973">Um stattdessen einen Standardwert zurückzugeben, wenn die Quellsequenz leer ist, verwenden Sie die <xref:System.Linq.Enumerable.LastOrDefault%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-973">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-974">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> auf das letzte Element eines Arrays zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-974">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the last element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#43)]
 [!code-vb[System.Linq.Enumerable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-975">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-975">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-976">Die Quellsequenz ist leer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-976">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-977">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-977">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-978">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-978">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-979">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-979">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-980">Gibt das letzte Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-980">Returns the last element of a sequence that satisfies a specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-981">Das letzte Element in der Sequenz, das mit der angegebenen Prädikatfunktion erfolgreich überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-981">The last element in the sequence that passes the test in the specified predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-982">Die <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Methode löst eine Ausnahme aus, wenn kein übereinstimmendes Element, im gefunden wird `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-982">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="5e343-983">Um stattdessen einen Standardwert zurückzugeben, wenn kein übereinstimmendes Element gefunden wird, verwenden Sie die <xref:System.Linq.Enumerable.LastOrDefault%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-983">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-984">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> auf das letzte Element eines Arrays zurück, die eine Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-984">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the last element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#44)]
 [!code-vb[System.Linq.Enumerable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-985">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-985">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-986">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-986">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="5e343-987">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-987">-or-</span>
          </span>
          <span data-ttu-id="5e343-988">Die Quellsequenz ist leer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-988">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-989">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn kein Element gefunden wird</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-989">Returns the last element of a sequence, or a default value if no element is found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-990">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-990">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-991">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen letztes Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-991">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-992">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-992">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-993">
            <see langword="default" />(<paramref name="TSource" />), wenn die Quellsequenz leer ist; andernfalls das letzte Element in <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-993">
              <see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-994">Der Standardwert für den Referenz- und auf NULL festlegbare Typen ist `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-994">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="5e343-995">Die <xref:System.Linq.Enumerable.LastOrDefault%2A> Methode bietet keine Möglichkeit, einen Standardwert anzugeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-995">The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="5e343-996">Wenn Sie einen Standardwert außer angeben möchten `default(TSource)`, verwenden die <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Methode, wie im Beispiel beschrieben.</span><span class="sxs-lookup"><span data-stu-id="5e343-996">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-997">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> auf ein leeres Array.</span><span class="sxs-lookup"><span data-stu-id="5e343-997">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#45)]
 [!code-vb[System.Linq.Enumerable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#45)]  
  
 <span data-ttu-id="5e343-998">Der Wert von `default(TSource)` ist nicht der Standardwert, Sie möchten, verwenden, wenn die Auflistung keine Elemente enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-998">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="5e343-999">Anstatt im Ergebnis der unerwünschte Standardwert, und klicken Sie dann bei Bedarf ändern, können Sie die <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Methode, um den Standardwert angeben, die Sie möchten, verwenden, wenn die Auflistung leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-999">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="5e343-1000">Rufen Sie dann die <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> auf das letzte Element abzurufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1000">Then, call <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the last element.</span></span> <span data-ttu-id="5e343-1001">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von numerischen Tage des Monats leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1001">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</span></span> <span data-ttu-id="5e343-1002">Da der Standardwert für eine ganze Zahl über 0 (null), auf die nicht zu einem beliebigen Tag des Monats entspricht ist, muss der Standardwert stattdessen als 1 angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-1002">Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="5e343-1003">Die erste Ergebnisvariable wird auf den unerwünschten Standardwert überprüft, nach der Ausführung die Abfrage abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1003">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="5e343-1004">Die zweite Ergebnisvariable wird mithilfe von <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> an den Standardwert 1.</span><span class="sxs-lookup"><span data-stu-id="5e343-1004">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#127](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#127)]
 [!code-vb[System.Linq.Enumerable#127](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#127)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1005">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1005">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1006">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1006">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1007">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1007">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-1008">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1008">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1009">Gibt das letzte Element einer Sequenz, das eine Bedingung erfüllt, oder einen Standardwert zurück, wenn ein solches Element nicht gefunden wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1009">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1010">
            <see langword="default" />(<paramref name="TSource" />), wenn die Sequenz leer ist oder wenn keine Elemente von der Prädikatfunktion erfolgreich überprüft werden. Andernfalls das letzte Element, das von der Prädikatfunktion erfolgreich überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1010">
              <see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1011">Der Standardwert für den Referenz- und auf NULL festlegbare Typen ist `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1011">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1012">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> durch Übergabe in einem Prädikat.</span><span class="sxs-lookup"><span data-stu-id="5e343-1012">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="5e343-1013">Im zweiten Aufruf der Methode ist gibt es kein Element in der Sequenz, die die Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1013">In the second call to the method, there is no element in the sequence that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#46)]
 [!code-vb[System.Linq.Enumerable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1014">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1014">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LongCount&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1015">Gibt ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in einer Sequenz darstellt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1015">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1016">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1016">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1017">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die zu zählenden Elemente enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1017">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1018">Gibt ein <see cref="T:System.Int64" /> zurück, das die Gesamtanzahl der Elemente in einer Sequenz darstellt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1018">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1019">Die Anzahl der Elemente in der Quellsequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1019">The number of elements in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1020">Verwenden Sie diese Methode statt <xref:System.Linq.Enumerable.Count%2A> Wenn Sie erwarten, dass das Ergebnis größer als <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1020">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="5e343-1021">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into LongCount()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.LongCount%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1021">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1022">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zum zählen der Elemente in einem Array.</span><span class="sxs-lookup"><span data-stu-id="5e343-1022">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#47)]
 [!code-vb[System.Linq.Enumerable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1023">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1023">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-1024">Die Anzahl der Elemente überschreitet <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1024">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1025">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1025">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1026">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1026">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1027">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die zu zählenden Elemente enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1027">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-1028">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1028">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1029">Gibt ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in einer Sequenz darstellt, die eine Bedingung erfüllen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1029">Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1030">Eine Zahl, die die Anzahl der Elemente in der Sequenz darstellt, die die Bedingung in der Prädikatfunktion erfüllen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1030">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1031">Verwenden Sie diese Methode statt <xref:System.Linq.Enumerable.Count%2A> Wenn Sie erwarten, dass das Ergebnis größer als <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1031">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="5e343-1032">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into LongCount()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.LongCount%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1032">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1033">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> der Elemente in einem Array zu zählen, die eine Bedingung erfüllen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1033">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#48)]
 [!code-vb[System.Linq.Enumerable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1034">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1034">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-1035">Die Anzahl der übereinstimmenden Elemente überschreitet <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1035">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1036">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1036">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1037">Gibt den Höchstwert in einer Sequenz von Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1037">Returns the maximum value in a sequence of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1038">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1038">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1039">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Decimal" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1039">Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1040">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1040">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1041">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> -Methode verwendet die <xref:System.Decimal> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1041">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1042">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1042">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1043">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1043">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1044">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1044">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1045">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1045">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1046">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1046">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1047">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1047">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1048">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Double" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1048">Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1049">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1049">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1050">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> -Methode verwendet die <xref:System.Double> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1050">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1051">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1051">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1052">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1052">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1053">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1053">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1054">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1054">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1055">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1055">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1056">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1056">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1057">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Int32" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1057">Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1058">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1058">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1059">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> -Methode verwendet die <xref:System.Int32> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1059">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1060">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1060">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1061">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1061">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1062">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1062">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1063">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1063">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1064">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1064">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1065">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1065">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1066">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Int64" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1066">Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1067">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1067">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1068">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> -Methode verwendet die <xref:System.Int64> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1068">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1069">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1069">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1070">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1070">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1071">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1071">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1072">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1072">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1073">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1073">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1074">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1074">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1075">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Decimal" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1075">Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1076">Ein Wert vom Typ <c>Nullable&lt;Decimal&gt;</c> in C# oder <c>Nullable(Of Decimal)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1076">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1077">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> -Methode verwendet die <xref:System.Decimal> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1077">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1078">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1078">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1079">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1079">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1080">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1080">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1081">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1081">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1082">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1082">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1083">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1083">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1084">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Double" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1084">Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1085">Ein Wert vom Typ <c>Nullable&lt;Double&gt;</c> in C# oder <c>Nullable(Of Double)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1085">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1086">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> -Methode verwendet die <xref:System.Double> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1086">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1087">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1087">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1088">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1088">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1089">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1089">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1090">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1090">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1091">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1091">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1092">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1092">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1093">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Int32" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1093">Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1094">Ein Wert vom Typ <c>Nullable&lt;Int32&gt;</c> in C# oder <c>Nullable(Of Int32)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1094">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1095">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> -Methode verwendet die <xref:System.Int32> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1095">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1096">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1096">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1097">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1097">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1098">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1098">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1099">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1099">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1100">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1100">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1101">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1101">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1102">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Int64" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1102">Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1103">Ein Wert vom Typ <c>Nullable&lt;Int64&gt;</c> in C# oder <c>Nullable(Of Int64)</c> in Visual Studio, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1103">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1104">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> -Methode verwendet die <xref:System.Int64> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1104">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1105">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1105">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1106">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1106">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1107">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1107">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1108">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1108">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1109">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1109">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1110">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1110">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1111">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Single" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1111">Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1112">Ein Wert vom Typ <c>Nullable&lt;Single&gt;</c> in C# oder <c>Nullable(Of Single)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1112">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1113">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> -Methode verwendet die <xref:System.Single> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1113">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1114">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1114">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1115">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1115">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1116">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1116">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1117">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1117">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1118">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1118">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1119">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Höchstwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1119">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1120">Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Single" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1120">Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1121">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1121">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1122">Die <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> -Methode verwendet die <xref:System.Single> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1122">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1123">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1123">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1124">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> auf den Höchstwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1124">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1125">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1125">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1126">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1126">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1127">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1127">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1128">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1128">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1129">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1129">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1130">Gibt den Höchstwert in einer generischen Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1130">Returns the maximum value in a generic sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1131">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1131">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1132">Wenn Typ `TSource` implementiert <xref:System.IComparable%601>, <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode, dass diese Implementierung verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1132">If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values.</span></span> <span data-ttu-id="5e343-1133">Andernfalls gilt: Wenn Typ `TSource` implementiert <xref:System.IComparable>, diese Implementierung verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1133">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1134">Wenn `TSource` ein Verweistyp ist, und die Quellsequenz ist leer oder enthält nur die Werte, die `null`, gibt diese Methode `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1134">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1135">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1135">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1136">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zum Bestimmen des maximalen Werts in einer Sequenz von <xref:System.IComparable%601> Objekte.</span><span class="sxs-lookup"><span data-stu-id="5e343-1136">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the maximum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#57](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#57)]
 [!code-vb[System.Linq.Enumerable#57](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1137">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1137">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1138">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1138">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1139">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1139">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1140">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1140">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1141">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1141">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1142">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Decimal" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1142">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1143">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1143">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1144">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> -Methode verwendet die <xref:System.Decimal> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1144">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1145">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1145">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="5e343-1146">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1146">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1147">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1147">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1148">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1148">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1149">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1149">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1150">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1150">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1151">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1151">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1152">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1152">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1153">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1153">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1154">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Double" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1154">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1155">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1155">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1156">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> -Methode verwendet die <xref:System.Double> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1156">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1157">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1157">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="5e343-1158">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1158">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1159">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1159">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1160">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1160">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1161">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1161">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1162">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1162">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1163">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1163">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1164">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1164">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1165">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1165">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1166">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Int32" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1166">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1167">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1167">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1168">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> -Methode verwendet die <xref:System.Int32> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1168">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1169">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1169">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="5e343-1170">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1170">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1171">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1171">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1172">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1172">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1173">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1173">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1174">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1174">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1175">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1175">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1176">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1176">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1177">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1177">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1178">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Int64" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1178">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1179">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1179">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1180">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> -Methode verwendet die <xref:System.Int64> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1180">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1181">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1181">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="5e343-1182">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1182">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1183">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1183">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1184">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1184">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1185">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1185">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1186">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1186">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1187">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1187">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1188">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1188">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1189">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1189">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1190">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Decimal" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1190">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1191">Der Wert vom Typ <c>Nullable&lt;Decimal&gt;</c> in C# oder <c>Nullable(Of Decimal)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1191">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1192">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> -Methode verwendet die <xref:System.Decimal> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1192">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1193">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Decimal>` in c# oder `Nullable(Of Decimal)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1193">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1194">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1194">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1195">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1195">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1196">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1196">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1197">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1197">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1198">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1198">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1199">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1199">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1200">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1200">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1201">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Double" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1201">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1202">Der Wert vom Typ <c>Nullable&lt;Double&gt;</c> in C# oder <c>Nullable(Of Double)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1202">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1203">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> -Methode verwendet die <xref:System.Double> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1203">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1204">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Double>` in c# oder `Nullable(Of Double)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1204">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1205">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1205">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1206">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1206">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1207">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1207">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1208">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1208">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1209">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1209">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1210">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1210">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1211">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1211">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1212">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Int32" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1212">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1213">Der Wert vom Typ <c>Nullable&lt;Int32&gt;</c> in C# oder <c>Nullable(Of Int32)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1213">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1214">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> -Methode verwendet die <xref:System.Int32> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1214">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1215">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Int32>` in c# oder `Nullable(Of Int32)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1215">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1216">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1216">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1217">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1217">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1218">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1218">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1219">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1219">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1220">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1220">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1221">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1221">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1222">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1222">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1223">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Int64" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1223">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1224">Der Wert vom Typ <c>Nullable&lt;Int64&gt;</c> in C# oder <c>Nullable(Of Int64)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1224">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1225">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> -Methode verwendet die <xref:System.Int64> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1225">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1226">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Int64>` in c# oder `Nullable(Of Int64)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1226">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1227">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1227">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1228">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1228">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1229">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1229">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1230">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1230">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1231">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1231">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1232">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1232">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1233">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1233">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1234">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Single" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1234">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1235">Der Wert des Typs <c>Nullable&lt;Single&gt;</c> in C# oder <c>Nullable(Of Single)</c> in Visual Basic, der dem Höchstwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1235">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1236">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> -Methode verwendet die <xref:System.Single> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1236">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1237">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Single>` in c# oder `Nullable(Of Single)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1237">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1238">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1238">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1239">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1239">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1240">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1240">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1241">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1241">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1242">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1242">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1243">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1243">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1244">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1244">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1245">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den maximalen <see cref="T:System.Single" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1245">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1246">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1246">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1247">Die <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> -Methode verwendet die <xref:System.Single> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1247">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1248">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1248">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="5e343-1249">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1249">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1250">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1250">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1251">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1251">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1252">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1252">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1253">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1253">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1254">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1254">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1255">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1255">The type of the value returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1256">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1256">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1257">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1257">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1258">Ruft für jedes Element einer generischen Sequenz eine Transformationsfunktion auf, und gibt den höchsten Ergebniswert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1258">Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1259">Der Höchstwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1259">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1260">Wenn Typ `TResult` implementiert <xref:System.IComparable%601>, diese Methode, dass diese Implementierung verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1260">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="5e343-1261">Andernfalls gilt: Wenn Typ `TResult` implementiert <xref:System.IComparable>, diese Implementierung verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1261">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1262">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Max()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1262">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1263">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Höchstwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1263">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1264">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1264">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1265">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1265">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1266">Gibt den Mindestwert in einer Sequenz von Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1266">Returns the minimum value in a sequence of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1267">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1267">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1268">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Decimal" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1268">Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1269">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1269">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1270">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> -Methode verwendet die <xref:System.Decimal> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1270">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1271">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1271">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1272">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1272">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1273">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1273">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1274">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1274">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1275">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1275">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1276">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1276">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1277">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Double" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1277">Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1278">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1278">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1279">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> -Methode verwendet die <xref:System.Double> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1279">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1280">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1280">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1281">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1282">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1282">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1283">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1283">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1284">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1284">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1285">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1285">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1286">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Int32" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1286">Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1287">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1287">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1288">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> -Methode verwendet die <xref:System.Int32> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1288">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1289">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1289">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1290">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1290">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1291">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1291">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1292">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1292">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1293">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1293">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1294">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1294">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1295">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Int64" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1295">Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1296">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1296">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1297">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> -Methode verwendet die <xref:System.Int64> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1297">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1298">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1298">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1299">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1299">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1300">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1300">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1301">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1301">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1302">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1302">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1303">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1303">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1304">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Decimal" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1304">Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1305">Ein Wert vom Typ <c>Nullable&lt;Decimal&gt;</c> in C# oder <c>Nullable(Of Decimal)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1305">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1306">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> -Methode verwendet die <xref:System.Decimal> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1306">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1307">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1307">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1308">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1308">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1309">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1309">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1310">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1310">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1311">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1311">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1312">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1312">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1313">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Double" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1313">Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1314">Der Wert vom Typ <c>Nullable&lt;Double&gt;</c> in C# oder <c>Nullable(Of Double)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1314">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1315">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> -Methode verwendet die <xref:System.Double> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1315">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1316">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1316">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1317">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1317">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1318">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1318">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1319">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1319">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1320">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1320">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1321">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1321">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1322">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Int32" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1322">Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1323">Ein Wert vom Typ <c>Nullable&lt;Int32&gt;</c> in C# oder <c>Nullable(Of Int32)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1323">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1324">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> -Methode verwendet die <xref:System.Int32> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1324">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1325">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1325">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1326">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1326">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1327">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1327">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1328">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1328">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1329">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1329">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1330">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1330">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1331">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Int64" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1331">Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1332">Ein Wert vom Typ <c>Nullable&lt;Int64&gt;</c> in C# oder <c>Nullable(Of Int64)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1332">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1333">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> -Methode verwendet die <xref:System.Int64> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1333">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1334">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1334">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1335">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1335">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1336">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1336">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1337">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1337">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1338">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1338">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1339">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1339">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1340">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Single" />-Werten zurück, die NULL-Werte zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1340">Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1341">Der Wert des Typs <c>Nullable&lt;Single&gt;</c> in C# oder <c>Nullable(Of Single)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1341">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1342">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> -Methode verwendet die <xref:System.Single> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1342">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1343">Wenn die Quellsequenz leer ist oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1343">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1344">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1344">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1345">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1345">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1346">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1346">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1347">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1347">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1348">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Mindestwert bestimmt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1348">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1349">Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Single" />-Werten zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1349">Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1350">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1350">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1351">Die <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> -Methode verwendet die <xref:System.Single> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1351">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1352">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1352">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1353">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> auf den Mindestwert in einer Sequenz zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1353">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1354">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1354">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1355">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1355">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1356">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1356">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1357">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1357">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1358">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1358">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1359">Gibt den Mindestwert in einer generischen Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1359">Returns the minimum value in a generic sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1360">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1360">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1361">Wenn Typ `TSource` implementiert <xref:System.IComparable%601>, diese Methode, dass diese Implementierung verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1361">If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="5e343-1362">Andernfalls gilt: Wenn Typ `TSource` implementiert <xref:System.IComparable>, diese Implementierung verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1362">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1363">Wenn `TSource` ein Verweistyp ist, und die Quellsequenz ist leer oder enthält nur die Werte, die `null`, diese Funktion gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1363">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="5e343-1364">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1364">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1365">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> um zu bestimmen, den Mindestwert in einer Sequenz von <xref:System.IComparable%601> Objekte.</span><span class="sxs-lookup"><span data-stu-id="5e343-1365">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the minimum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#67](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#67)]
 [!code-vb[System.Linq.Enumerable#67](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1366">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1366">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1367">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1367">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1368">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1368">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1369">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1369">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1370">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1370">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1371">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Decimal" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1371">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1372">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1372">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1373">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> -Methode verwendet die <xref:System.Decimal> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1373">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1374">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1374">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="5e343-1375">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1375">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1376">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1377">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1377">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1378">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1378">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1379">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1379">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1380">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1380">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1381">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1381">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1382">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1382">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1383">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Double" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1383">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1384">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1384">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1385">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> -Methode verwendet die <xref:System.Double> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1385">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1386">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1386">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="5e343-1387">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1387">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1388">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1388">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1389">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1389">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1390">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1390">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1391">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1391">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1392">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1392">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1393">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1393">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1394">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1394">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1395">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Int32" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1395">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1396">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1396">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1397">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> -Methode verwendet die <xref:System.Int32> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1397">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1398">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1398">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="5e343-1399">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1399">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1400">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1400">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1401">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1401">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1402">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1402">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1403">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1403">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1404">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1404">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1405">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1405">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1406">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1406">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1407">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Int64" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1407">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1408">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1408">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1409">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> -Methode verwendet die <xref:System.Int64> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1409">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1410">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1410">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="5e343-1411">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1411">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1412">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1412">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1413">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1413">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1414">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1414">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1415">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1415">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1416">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1416">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1417">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1417">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1418">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1418">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1419">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Decimal" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1419">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1420">Der Wert vom Typ <c>Nullable&lt;Decimal&gt;</c> in C# oder <c>Nullable(Of Decimal)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1420">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1421">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> -Methode verwendet die <xref:System.Decimal> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1421">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1422">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Decimal>` in c# oder `Nullable(Of Decimal)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1422">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1423">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1423">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1424">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1424">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1425">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1425">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1426">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1426">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1427">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1427">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1428">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1428">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1429">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1429">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1430">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Double" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1430">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1431">Der Wert vom Typ <c>Nullable&lt;Double&gt;</c> in C# oder <c>Nullable(Of Double)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1431">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1432">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> -Methode verwendet die <xref:System.Double> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1432">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1433">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Double>` in c# oder `Nullable(Of Double)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1433">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1434">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1434">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1435">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1435">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1436">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1436">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1437">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1437">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1438">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1438">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1439">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1439">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1440">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1440">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1441">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Int32" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1441">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1442">Der Wert vom Typ <c>Nullable&lt;Int32&gt;</c> in C# oder <c>Nullable(Of Int32)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1442">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1443">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> -Methode verwendet die <xref:System.Int32> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1443">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1444">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, die projiziert die Elemente der Quelle in einen numerischen Typ, insbesondere `Nullable<Int32>` in c# oder `Nullable(Of Int32)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1444">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1445">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1445">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1446">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1446">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1447">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1447">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1448">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1448">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1449">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1449">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1450">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1450">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1451">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1451">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1452">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Int64" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1452">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1453">Der Wert vom Typ <c>Nullable&lt;Int64&gt;</c> in C# oder <c>Nullable(Of Int64)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1453">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1454">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> -Methode verwendet die <xref:System.Int64> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1454">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1455">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Int64>` in c# oder `Nullable(Of Int64)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1455">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1456">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1456">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1457">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1457">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1458">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1458">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1459">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1459">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1460">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1460">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1461">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1461">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1462">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1462">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1463">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Single" />-Wert zurück, der NULL-Werte zulässt</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1463">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1464">Der Wert des Typs <c>Nullable&lt;Single&gt;</c> in C# oder <c>Nullable(Of Single)</c> in Visual Basic, der dem Mindestwert in der Sequenz entspricht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1464">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1465">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> -Methode verwendet die <xref:System.Single> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1465">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1466">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Single>` in c# oder `Nullable(Of Single)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1466">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1467">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1467">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1468">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1468">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1469">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1469">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1470">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1470">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1471">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1471">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1472">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1472">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1473">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1473">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1474">Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf, und gibt den minimalen <see cref="T:System.Single" />-Wert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1474">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1475">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1475">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1476">Die <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> -Methode verwendet die <xref:System.Single> Implementierung <xref:System.IComparable%601> zum Vergleichen von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1476">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1477">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1477">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="5e343-1478">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1478">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1479">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1479">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1480">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1480">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1481">
            <paramref name="source" /> enthält keine Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1481">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1482">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1482">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1483">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1483">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1484">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1484">The type of the value returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1485">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1485">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1486">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1486">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1487">Ruft für jedes Element einer generischen Sequenz eine Transformationsfunktion auf, und gibt den niedrigsten Ergebniswert zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1487">Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1488">Der Mindestwert in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1488">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1489">Wenn Typ `TResult` implementiert <xref:System.IComparable%601>, diese Methode, dass diese Implementierung verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1489">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="5e343-1490">Andernfalls gilt: Wenn Typ `TResult` implementiert <xref:System.IComparable>, diese Implementierung verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1490">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="5e343-1491">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Min()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1491">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1492">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> auf den Mindestwert in einer Sequenz von projizierten Werte zu ermitteln.</span><span class="sxs-lookup"><span data-stu-id="5e343-1492">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1493">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1493">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1494">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1494">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member OfType : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.OfType source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1495">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1495">The type to filter the elements of the sequence on.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1496">Das <see cref="T:System.Collections.IEnumerable" />, dessen Elemente gefiltert werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1496">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1497">Filtert die Elemente eines <see cref="T:System.Collections.IEnumerable" /> anhand eines angegebenen Typs</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1497">Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1498">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente aus der Eingabesequenz vom Typ <paramref name="TResult" /> enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1499">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1500">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1501">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1502">Die <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> Methode gibt nur die Elemente in `source` Typ umgewandelt werden kann `TResult`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1502">The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`.</span></span> <span data-ttu-id="5e343-1503">Stattdessen eine Ausnahme empfangen wird, wenn ein Element kann nicht Typ umgewandelt werden `TResult`, verwenden Sie <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1503">To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="5e343-1504">Diese Methode ist eine von der einige Standardabfrageoperator-Methoden, die auf eine Auflistung angewendet werden können, die einen nicht parametrisierten Typ, z. B. eine <xref:System.Collections.ArrayList>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1504">This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>.</span></span> <span data-ttu-id="5e343-1505">Grund hierfür ist, <xref:System.Linq.Enumerable.OfType%2A> erweitert den Typ <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1505">This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>.</span></span> <span data-ttu-id="5e343-1506"><xref:System.Linq.Enumerable.OfType%2A> nicht nur auf Sammlungen, basieren angewendet werden auf parametrisierten <xref:System.Collections.Generic.IEnumerable%601> -Typ, sondern Sammlungen, die auf die nicht parametrisierten basieren <xref:System.Collections.IEnumerable> auch eingeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1506"><xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.</span></span>  
  
 <span data-ttu-id="5e343-1507">Durch Anwenden von <xref:System.Linq.Enumerable.OfType%2A> zu einer Auflistung mit Implementierung <xref:System.Collections.IEnumerable>, Sie erhalten die Möglichkeit, die die Auflistung zu Abfragen, indem Sie die standardmäßigen Abfrageoperatoren.</span><span class="sxs-lookup"><span data-stu-id="5e343-1507">By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators.</span></span> <span data-ttu-id="5e343-1508">Z. B. Angeben von Typargument <xref:System.Object> zu <xref:System.Linq.Enumerable.OfType%2A> würde ein Objekt des Typs zurückgeben `IEnumerable<Object>` in c# oder `IEnumerable(Of Object)` in Visual Basic, auf denen die Standardabfrageoperatoren angewendet werden können.</span><span class="sxs-lookup"><span data-stu-id="5e343-1508">For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in Visual Basic, to which the standard query operators can be applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1509">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.OfType%2A> zum Filtern der Elemente von einem <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1509">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OfType%2A> to filter the elements of an <xref:System.Collections.IEnumerable>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#69)]
 [!code-vb[System.Linq.Enumerable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1510">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1510">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1511">Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1511">Sorts the elements of a sequence in ascending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1512">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1512">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-1513">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1513">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1514">Eine Sequenz von anzuordnenden Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1514">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-1515">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1515">A function to extract a key from an element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1516">Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1516">Sorts the elements of a sequence in ascending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1517">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1517">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1518">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1518">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1519">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1519">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1520">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1520">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1521">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (`x => x` in Visual C#- oder `Function(x) x` in Visual Basic) für `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1521">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="5e343-1522">Sind zwei Methoden definiert, um den Typ erweitern <xref:System.Linq.IOrderedEnumerable%601>, dies ist der Rückgabetyp dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-1522">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="5e343-1523">Diese zwei Methoden, nämlich `ThenBy` und `ThenByDescending`, können Sie zusätzliche Kriterien zum Sortieren einer Sequenz angeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1523">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="5e343-1524">`ThenBy` und `ThenByDescending` auch Zurückgeben einer <xref:System.Linq.IOrderedEnumerable%601>, was bedeutet, dass eine beliebige Anzahl von aufeinander folgende Aufrufe von `ThenBy` oder `ThenByDescending` können vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-1524">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-1525">Da <xref:System.Linq.IOrderedEnumerable%601> erbt <xref:System.Collections.Generic.IEnumerable%601>, rufen Sie <xref:System.Linq.Enumerable.OrderBy%2A> oder <xref:System.Linq.Enumerable.OrderByDescending%2A> auf den Ergebnissen eines Aufrufs von <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1525">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="5e343-1526">Auf diese Weise führt eine neue primäre Sortierung, die die zuvor festgelegte Sortierung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1526">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="5e343-1527">Diese Methode vergleicht die Schlüssel mithilfe des Standardvergleichs <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1527">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="5e343-1528">Diese Methode führt eine stabile Sortierung. d.h., wenn der Schlüssel der zwei Elemente gleich sind, wird die Reihenfolge der Elemente beibehalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1528">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="5e343-1529">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1529">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="5e343-1530">In der Abfrageausdruckssyntax ein `orderby` (Visual c#) oder `Order By` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.OrderBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1530">In query expression syntax, an `orderby` (Visual C#) or `Order By` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1531">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Sortieren der Elemente einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1531">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to sort the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#70)]
 [!code-vb[System.Linq.Enumerable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1532">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1532">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="5e343-1533">orderby-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1533">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="5e343-1534">ORDER BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1534">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1535">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1535">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-1536">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1536">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1537">Eine Sequenz von anzuordnenden Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1537">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-1538">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1538">A function to extract a key from an element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-1539">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1539">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1540">Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in aufsteigender Reihenfolge</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1540">Sorts the elements of a sequence in ascending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1541">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1541">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1542">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1542">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1543">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1543">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1544">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1544">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1545">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (`x => x` in Visual C#- oder `Function(x) x` in Visual Basic) für `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1545">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="5e343-1546">Sind zwei Methoden definiert, um den Typ erweitern <xref:System.Linq.IOrderedEnumerable%601>, dies ist der Rückgabetyp dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-1546">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="5e343-1547">Diese zwei Methoden, nämlich `ThenBy` und `ThenByDescending`, können Sie zusätzliche Kriterien zum Sortieren einer Sequenz angeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1547">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="5e343-1548">`ThenBy` und `ThenByDescending` auch Zurückgeben einer <xref:System.Linq.IOrderedEnumerable%601>, was bedeutet, dass eine beliebige Anzahl von aufeinander folgende Aufrufe von `ThenBy` oder `ThenByDescending` können vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-1548">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-1549">Da <xref:System.Linq.IOrderedEnumerable%601> erbt <xref:System.Collections.Generic.IEnumerable%601>, rufen Sie <xref:System.Linq.Enumerable.OrderBy%2A> oder <xref:System.Linq.Enumerable.OrderByDescending%2A> auf den Ergebnissen eines Aufrufs von <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1549">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="5e343-1550">Auf diese Weise führt eine neue primäre Sortierung, die die zuvor festgelegte Sortierung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1550">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="5e343-1551">Wenn `comparer` ist `null`, die standardmäßige Vergleichsfunktion <xref:System.Collections.Generic.Comparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-1551">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="5e343-1552">Diese Methode führt eine stabile Sortierung. d.h., wenn der Schlüssel der zwei Elemente gleich sind, wird die Reihenfolge der Elemente beibehalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1552">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="5e343-1553">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1553">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1554">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1554">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1555">Sortiert die Elemente einer Sequenz in absteigender Reihenfolge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1555">Sorts the elements of a sequence in descending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1556">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1556">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-1557">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1557">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1558">Eine Sequenz von anzuordnenden Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1558">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-1559">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1559">A function to extract a key from an element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1560">Sortiert die Elemente einer Sequenz in absteigender Reihenfolge nach einem Schlüssel</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1560">Sorts the elements of a sequence in descending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1561">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1561">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1562">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1562">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1563">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1563">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1564">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1564">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1565">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (`x => x` in Visual C#- oder `Function(x) x` in Visual Basic) für `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1565">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="5e343-1566">Ein Beispiel dieser Methode finden Sie unter <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1566">For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span></span>  
  
 <span data-ttu-id="5e343-1567">Sind zwei Methoden definiert, um den Typ erweitern <xref:System.Linq.IOrderedEnumerable%601>, dies ist der Rückgabetyp dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-1567">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="5e343-1568">Diese zwei Methoden, nämlich `ThenBy` und `ThenByDescending`, können Sie zusätzliche Kriterien zum Sortieren einer Sequenz angeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1568">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="5e343-1569">`ThenBy` und `ThenByDescending` auch Zurückgeben einer <xref:System.Linq.IOrderedEnumerable%601>, was bedeutet, dass eine beliebige Anzahl von aufeinander folgende Aufrufe von `ThenBy` oder `ThenByDescending` können vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-1569">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-1570">Da <xref:System.Linq.IOrderedEnumerable%601> erbt <xref:System.Collections.Generic.IEnumerable%601>, rufen Sie <xref:System.Linq.Enumerable.OrderBy%2A> oder <xref:System.Linq.Enumerable.OrderByDescending%2A> auf den Ergebnissen eines Aufrufs von <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1570">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="5e343-1571">Auf diese Weise führt eine neue primäre Sortierung, die die zuvor festgelegte Sortierung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1571">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="5e343-1572">Diese Methode vergleicht die Schlüssel mithilfe des Standardvergleichs <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1572">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="5e343-1573">Diese Methode führt eine stabile Sortierung. d.h., wenn der Schlüssel der zwei Elemente gleich sind, wird die Reihenfolge der Elemente beibehalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1573">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="5e343-1574">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1574">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="5e343-1575">In der Abfrageausdruckssyntax ein `orderby descending` (Visual c#) oder `Order By Descending` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1575">In query expression syntax, an `orderby descending` (Visual C#) or `Order By Descending` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1576">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1576">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="5e343-1577">orderby-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1577">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="5e343-1578">ORDER BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1578">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1579">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1579">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-1580">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1580">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1581">Eine Sequenz von anzuordnenden Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1581">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-1582">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1582">A function to extract a key from an element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-1583">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1583">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1584">Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in absteigender Reihenfolge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1584">Sorts the elements of a sequence in descending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1585">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1585">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1586">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1586">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1587">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1587">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1588">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1588">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1589">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (`x => x` in Visual C#- oder `Function(x) x` in Visual Basic) für `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1589">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="5e343-1590">Sind zwei Methoden definiert, um den Typ erweitern <xref:System.Linq.IOrderedEnumerable%601>, dies ist der Rückgabetyp dieser Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-1590">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="5e343-1591">Diese zwei Methoden, nämlich `ThenBy` und `ThenByDescending`, können Sie zusätzliche Kriterien zum Sortieren einer Sequenz angeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1591">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="5e343-1592">`ThenBy` und `ThenByDescending` auch Zurückgeben einer <xref:System.Linq.IOrderedEnumerable%601>, was bedeutet, dass eine beliebige Anzahl von aufeinander folgende Aufrufe von `ThenBy` oder `ThenByDescending` können vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-1592">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-1593">Da <xref:System.Linq.IOrderedEnumerable%601> erbt <xref:System.Collections.Generic.IEnumerable%601>, rufen Sie <xref:System.Linq.Enumerable.OrderBy%2A> oder <xref:System.Linq.Enumerable.OrderByDescending%2A> auf den Ergebnissen eines Aufrufs von <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1593">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="5e343-1594">Auf diese Weise führt eine neue primäre Sortierung, die die zuvor festgelegte Sortierung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1594">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="5e343-1595">Wenn `comparer` ist `null`, die standardmäßige Vergleichsfunktion <xref:System.Collections.Generic.Comparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-1595">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="5e343-1596">Diese Methode führt eine stabile Sortierung. d.h., wenn der Schlüssel der zwei Elemente gleich sind, wird die Reihenfolge der Elemente beibehalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1596">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="5e343-1597">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1597">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1598">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> Sortieren der Elemente einer Sequenz in absteigender Reihenfolge nach einer Transform-Funktion mit einem benutzerdefinierten Vergleich.</span><span class="sxs-lookup"><span data-stu-id="5e343-1598">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#71)]
 [!code-vb[System.Linq.Enumerable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1599">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1599">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Prepend(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Prepend : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Prepend (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1600">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1600">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1601">Eine Wertesequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1601">A sequence of values.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="5e343-1602">Der <paramref name="source" /> voranzustellende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1602">The value to prepend to <paramref name="source" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1603">Fügt einen Wert am Anfang der Sequenz ein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1603">Adds a value to the beginning of the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1604">Eine neue Sequenz, die mit <paramref name="element" /> beginnt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1604">A new sequence that begins with <paramref name="element" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[    
          
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5e343-1605">Diese Methode ändert nicht die Elemente der Auflistung.</span><span class="sxs-lookup"><span data-stu-id="5e343-1605">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="5e343-1606">Stattdessen wird eine Kopie der Auflistung durch das neue Element erstellt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1606">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="5e343-1607">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Prepend%2A> einen Wert, der den Anfang der Sequenz vorangestellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="5e343-1607">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Prepend%2A> to prepend a value to the beginning of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#202](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#202)]
 [!code-vb[System.Linq.Enumerable#202](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1608">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1608">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Range (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;int32&gt; Range(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Range (start As Integer, count As Integer) As IEnumerable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;int&gt; ^ Range(int start, int count);" />
      <MemberSignature Language="F#" Value="static member Range : int * int -&gt; seq&lt;int&gt;" Usage="System.Linq.Enumerable.Range (start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="5e343-1609">Der Wert der ersten ganzen Zahl in der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1609">The value of the first integer in the sequence.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="5e343-1610">Die Anzahl der aufeinander folgenden ganzen Zahlen, die generiert werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1610">The number of sequential integers to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1611">Generiert eine Sequenz von ganzen Zahlen in einem angegebenen Bereich</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1611">Generates a sequence of integral numbers within a specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1612">Eine <c>IEnumerable&lt;Int32&gt;</c>-Schnittstelle in C# oder <c>IEnumerable(Of Int32)</c> in Visual Basic, die einen Bereich sequenzieller ganzer Zahlen enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1612">An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1613">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1613">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1614">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1614">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1615">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1615">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1616">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Range%2A> um eine Sequenz von Werten zu generieren.</span><span class="sxs-lookup"><span data-stu-id="5e343-1616">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Range%2A> to generate a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#72](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#72)]
 [!code-vb[System.Linq.Enumerable#72](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5e343-1617">
            <paramref name="count" /> ist kleiner als 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1617">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="5e343-1618">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1618">-or-</span>
          </span>
          <span data-ttu-id="5e343-1619">
            <paramref name="start" /> + <paramref name="count" /> -1 ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1619">
              <paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Repeat&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Repeat&lt;TResult&gt;(!!TResult element, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Repeat(Of TResult) (element As TResult, count As Integer) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Repeat(TResult element, int count);" />
      <MemberSignature Language="F#" Value="static member Repeat : 'Result * int -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Repeat (element, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1620">Der Typ des Werts, der in der Ergebnissequenz wiederholt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1620">The type of the value to be repeated in the result sequence.</span>
          </span>
        </typeparam>
        <param name="element">
          <span data-ttu-id="5e343-1621">Der zu wiederholende Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1621">The value to be repeated.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="5e343-1622">Die gewünschte Anzahl der Wiederholungen des Werts in der generierten Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1622">The number of times to repeat the value in the generated sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1623">Generiert eine Sequenz, die einen Wert mehrfach enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1623">Generates a sequence that contains one repeated value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1624">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das einen wiederholten Wert enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1624">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1625">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1625">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1626">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1626">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1627">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1627">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1628">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Repeat%2A> um eine Sequenz von einen wiederholten Wert zu generieren.</span><span class="sxs-lookup"><span data-stu-id="5e343-1628">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Repeat%2A> to generate a sequence of a repeated value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#73](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#73)]
 [!code-vb[System.Linq.Enumerable#73](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5e343-1629">
            <paramref name="count" /> ist kleiner als 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1629">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Reverse(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Reverse : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Reverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1630">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1630">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1631">Eine umzukehrende Sequenz von Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1631">A sequence of values to reverse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1632">Kehrt die Reihenfolge der Elemente in einer Sequenz um</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1632">Inverts the order of the elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1633">Eine Sequenz , deren Elemente den Elementen der Eingabesequenz in umgekehrter Reihenfolge entsprechen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1633">A sequence whose elements correspond to those of the input sequence in reverse order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1634">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1634">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1635">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1635">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1636">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1636">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1637">Im Gegensatz zu <xref:System.Linq.Enumerable.OrderBy%2A>dieser Sortierung Methode berücksichtigt nicht die eigentlichen Werte selbst bei der Bestimmung der Reihenfolge.</span><span class="sxs-lookup"><span data-stu-id="5e343-1637">Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order.</span></span> <span data-ttu-id="5e343-1638">Stattdessen wird zurückgegeben nur die Elemente in umgekehrter Reihenfolge aus dem sie erstellt werden, von der zugrunde liegenden Quelle.</span><span class="sxs-lookup"><span data-stu-id="5e343-1638">Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1639">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Reverse%2A> umkehren die Reihenfolge der Elemente in einem Array.</span><span class="sxs-lookup"><span data-stu-id="5e343-1639">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Reverse%2A> to reverse the order of elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#74)]
 [!code-vb[System.Linq.Enumerable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1640">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1640">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1641">Projiziert jedes Element einer Sequenz in ein neues Format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1641">Projects each element of a sequence into a new form.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, int, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1642">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1642">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1643">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1643">The type of the value returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1644">Eine Sequenz von Werten, für die eine Transformationsfunktion aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1644">A sequence of values to invoke a transform function on.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1645">Eine Transformierenfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1645">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1646">Projiziert jedes Element einer Sequenz in ein neues Format, indem der Index des Elements integriert wird</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1646">Projects each element of a sequence into a new form by incorporating the element's index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1647">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Transformationsfunktion für jedes Element von <paramref name="source" /> sind</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1647">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1648">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1648">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1649">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1649">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1650">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1650">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1651">Das erste Argument für `selector` stellt das Element verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1651">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="5e343-1652">Das zweite Argument für `selector` den nullbasierten Index dieses Elements in der Quellsequenz darstellt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1652">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="5e343-1653">Dies kann nützlich sein, wenn die Elemente in einer bestimmten Reihenfolge sind und etwas mit einem Element an einem bestimmten Index, z. B. erforderlich werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1653">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="5e343-1654">Es kann auch nützlich sein, wenn den Index, der eine oder mehrere Elemente abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1654">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
 <span data-ttu-id="5e343-1655">Diese Projektionsmethode erfordert die Transform-Funktion, `selector`, um einen Wert für jeden Wert in der Quellsequenz zu erzeugen `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1655">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="5e343-1656">Wenn `selector` gibt einen Wert an, die selbst eine Auflistung ist, es ist Aufgabe der Consumer die Untersequenzen manuell zu durchlaufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1656">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="5e343-1657">In diesem Fall kann es besser für Ihre Abfrage zurückgibt, eine einzelne, zusammengeführte Sequenz von Werten sein.</span><span class="sxs-lookup"><span data-stu-id="5e343-1657">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="5e343-1658">Um dies zu erreichen, verwenden Sie die <xref:System.Linq.Enumerable.SelectMany%2A> Methode anstelle von <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1658">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="5e343-1659">Obwohl `SelectMany` funktioniert ähnlich wie `Select`, es unterscheidet sich darin, dass die Transform-Funktion eine Auflistung, die zurückgegeben von erweitert wird, `SelectMany` vor der Rückgabe.</span><span class="sxs-lookup"><span data-stu-id="5e343-1659">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1660">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> projizieren auf eine Sequenz von Werten, und verwenden Sie den Index der einzelnen Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1660">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> to project over a sequence of values and use the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#76)]
 [!code-vb[System.Linq.Enumerable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1661">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1661">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1662">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1662">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1663">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1663">The type of the value returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1664">Eine Sequenz von Werten, für die eine Transformationsfunktion aufgerufen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1664">A sequence of values to invoke a transform function on.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1665">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1665">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1666">Projiziert jedes Element einer Sequenz in ein neues Format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1666">Projects each element of a sequence into a new form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1667">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Transformationsfunktion für jedes Element von <paramref name="source" /> sind</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1667">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1668">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1668">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1669">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1669">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1670">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1670">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1671">Diese Projektionsmethode erfordert die Transform-Funktion, `selector`, um einen Wert für jeden Wert in der Quellsequenz zu erzeugen `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1671">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="5e343-1672">Wenn `selector` gibt einen Wert an, die selbst eine Auflistung ist, es ist Aufgabe der Consumer die Untersequenzen manuell zu durchlaufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1672">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="5e343-1673">In diesem Fall kann es besser für Ihre Abfrage zurückgibt, eine einzelne, zusammengeführte Sequenz von Werten sein.</span><span class="sxs-lookup"><span data-stu-id="5e343-1673">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="5e343-1674">Um dies zu erreichen, verwenden Sie die <xref:System.Linq.Enumerable.SelectMany%2A> Methode anstelle von <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1674">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="5e343-1675">Obwohl `SelectMany` funktioniert ähnlich wie `Select`, es unterscheidet sich darin, dass die Transform-Funktion eine Auflistung, die zurückgegeben von erweitert wird, `SelectMany` vor der Rückgabe.</span><span class="sxs-lookup"><span data-stu-id="5e343-1675">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
 <span data-ttu-id="5e343-1676">In der Abfrageausdruckssyntax ein `select` (Visual c#) oder `Select` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1676">In query expression syntax, a `select` (Visual C#) or `Select` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1677">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Projekt über eine Sequenz von Werten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1677">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to project over a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#75)]
 [!code-vb[System.Linq.Enumerable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1678">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1678">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/df01e266-5781-4aaa-80c4-67cf28ea093f">
          <span data-ttu-id="5e343-1679">select-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1679">select clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/27a3f61c-5960-4692-9b91-4d0c4b6178fe">
          <span data-ttu-id="5e343-1680">Select-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1680">Select Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectMany&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1681">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1681">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1682">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1682">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1683">Der Typ der von <paramref name="selector" /> zurückgegebenen Elemente der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1683">The type of the elements of the sequence returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1684">Eine Sequenz von zu projizierenden Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1684">A sequence of values to project.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1685">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1685">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1686">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1686">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1687">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion für jedes Element der Eingabesequenz sind</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1687">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1688">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1688">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1689">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1689">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1690">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1690">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1691">Die <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> Methode listet die Eingabesequenz, die mithilfe einer Transformationsfunktion zum Zuordnen der einzelnen Elemente in einer <xref:System.Collections.Generic.IEnumerable%601>, listet auf und die Elemente der jedes dieser ergibt <xref:System.Collections.Generic.IEnumerable%601> Objekt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1691">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="5e343-1692">D. h. für jedes Element der `source`, `selector` wird aufgerufen, und es wird eine Sequenz von Werten zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1692">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="5e343-1693"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> Klicken Sie dann vereinfacht diese zweidimensionale Auflistung von Auflistungen in eine eindimensionale <xref:System.Collections.Generic.IEnumerable%601> und gibt ihn zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-1693"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="5e343-1694">Wenn eine Abfrage verwendet beispielsweise <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> Bestellungen abrufen (vom Typ `Order`) für jeden Kunden in einer Datenbank ist das Ergebnis vom Typ `IEnumerable<Order>` in C#- oder `IEnumerable(Of Order)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1694">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="5e343-1695">Wenn die Abfrage stattdessen verwendet <xref:System.Linq.Enumerable.Select%2A> um die Aufträge zu erhalten, der die Auflistung von Auflistungen von Aufträgen wird nicht kombiniert und das Ergebnis ist vom Typ `IEnumerable<List<Order>>` in c# oder `IEnumerable(Of List(Of Order))` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1695">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1696">In der Syntax jede `from` -Klausel (Visual c#) oder `From` -Klausel (Visual Basic) nach dem ersten übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1696">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1697">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> über ein Array eine 1: n Projektion ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1697">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#77)]
 [!code-vb[System.Linq.Enumerable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1698">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1698">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="5e343-1699">from-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1699">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="5e343-1700">From-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1700">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1701">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1701">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1702">Der Typ der von <paramref name="selector" /> zurückgegebenen Elemente der Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1702">The type of the elements of the sequence returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1703">Eine Sequenz von zu projizierenden Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1703">A sequence of values to project.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1704">Eine Transformierenfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1704">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1705">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, und fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1705">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence.</span>
          </span>
          <span data-ttu-id="5e343-1706">Der Index jedes Quellelements wird im projizierten Format des jeweiligen Elements verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1706">The index of each source element is used in the projected form of that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1707">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion für jedes Element einer Eingabesequenz sind</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1707">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1708">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1708">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1709">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1709">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1710">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1710">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1711">Die <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> Methode listet die Eingabesequenz, die mithilfe einer Transformationsfunktion zum Zuordnen der einzelnen Elemente in einer <xref:System.Collections.Generic.IEnumerable%601>, listet auf und die Elemente der jedes dieser ergibt <xref:System.Collections.Generic.IEnumerable%601> Objekt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1711">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="5e343-1712">D. h. für jedes Element der `source`, `selector` wird aufgerufen, und es wird eine Sequenz von Werten zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1712">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="5e343-1713"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> Klicken Sie dann vereinfacht diese zweidimensionale Auflistung von Auflistungen in eine eindimensionale <xref:System.Collections.Generic.IEnumerable%601> und gibt ihn zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-1713"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="5e343-1714">Wenn eine Abfrage verwendet beispielsweise <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> Bestellungen abrufen (vom Typ `Order`) für jeden Kunden in einer Datenbank ist das Ergebnis vom Typ `IEnumerable<Order>` in C#- oder `IEnumerable(Of Order)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1714">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="5e343-1715">Wenn die Abfrage stattdessen verwendet <xref:System.Linq.Enumerable.Select%2A> um die Aufträge zu erhalten, der die Auflistung von Auflistungen von Aufträgen wird nicht kombiniert und das Ergebnis ist vom Typ `IEnumerable<List<Order>>` in c# oder `IEnumerable(Of List(Of Order))` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1715">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1716">Das erste Argument für `selector` stellt das Element verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1716">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="5e343-1717">Das zweite Argument für `selector` den nullbasierten Index dieses Elements in der Quellsequenz darstellt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1717">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="5e343-1718">Dies kann nützlich sein, wenn die Elemente in einer bestimmten Reihenfolge sind und etwas mit einem Element an einem bestimmten Index, z. B. erforderlich werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1718">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="5e343-1719">Es kann auch nützlich sein, wenn den Index, der eine oder mehrere Elemente abgerufen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1719">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1720">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> eine 1: n Projektion über ein Array ausführen und verwenden Sie den Index jedes äußeren Elements.</span><span class="sxs-lookup"><span data-stu-id="5e343-1720">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array and use the index of each outer element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#78)]
 [!code-vb[System.Linq.Enumerable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1721">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1721">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1722">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1722">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TCollection">
          <span data-ttu-id="5e343-1723">Der Typ der Zwischenelemente, die von <paramref name="collectionSelector" /> erfasst werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1723">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1724">Der Typ der Elemente in der resultierenden Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1724">The type of the elements of the resulting sequence.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1725">Eine Sequenz von zu projizierenden Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1725">A sequence of values to project.</span>
          </span>
        </param>
        <param name="collectionSelector">
          <span data-ttu-id="5e343-1726">Eine Transformationsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1726">A transform function to apply to each element of the input sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-1727">Eine Transformationsfunktion, die auf jedes Element der Zwischensequenz angewendet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1727">A transform function to apply to each element of the intermediate sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1728">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1728">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1729">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente erzeugt werden, indem für jedes Element von <paramref name="collectionSelector" /> die 1:n-Transformationsfunktion <paramref name="source" /> aufgerufen wird, und anschließend jedes Element der Sequenz und sein entsprechendes Quellelement einem Ergebniselement zugeordnet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1729">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1730">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1730">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1731">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1731">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1732">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1732">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1733">Die <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> Methode ist hilfreich, wenn Sie die Elemente zu `source` im Bereich für die Abfragelogik, die nach dem Aufruf auftritt, <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1733">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="5e343-1734">Ein Codebeispiel hierfür finden Sie im Beispielabschnitt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1734">See the Example section for a code example.</span></span> <span data-ttu-id="5e343-1735">Bei eine bidirektionalen Beziehung zwischen Objekten des Typs `TSource` und Objekte des Typs `TCollection`, d. h. wenn ein Objekt des Typs `TCollection` enthält eine Eigenschaft zum Abrufen der `TSource` -Objekt, das es erzeugt wurde, nicht benötigten Überladen von <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1735">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="5e343-1736">Stattdessen können Sie <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> und navigieren Sie zurück zu den `TSource` -Objekt über die `TCollection` Objekt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1736">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 <span data-ttu-id="5e343-1737">In der Syntax jede `from` -Klausel (Visual c#) oder `From` -Klausel (Visual Basic) nach dem ersten übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1737">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1738">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> eine 1: n Projektion über ein Array ausführen, und verwenden eine Ergebnisauswahlfunktion zu jeweils zugehörigen Elemente aus der Quellsequenz im Bereich für den abschließenden Aufruf `Select`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1738">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to `Select`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#124)]
 [!code-vb[System.Linq.Enumerable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#124)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1739">
            <paramref name="source" /> oder <paramref name="collectionSelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1739">
              <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="5e343-1740">from-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1740">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="5e343-1741">From-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1741">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1742">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1742">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TCollection">
          <span data-ttu-id="5e343-1743">Der Typ der Zwischenelemente, die von <paramref name="collectionSelector" /> erfasst werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1743">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-1744">Der Typ der Elemente in der resultierenden Sequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1744">The type of the elements of the resulting sequence.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1745">Eine Sequenz von zu projizierenden Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1745">A sequence of values to project.</span>
          </span>
        </param>
        <param name="collectionSelector">
          <span data-ttu-id="5e343-1746">Eine Transformierenfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1746">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-1747">Eine Transformationsfunktion, die auf jedes Element der Zwischensequenz angewendet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1747">A transform function to apply to each element of the intermediate sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1748">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1748">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          </span>
          <span data-ttu-id="5e343-1749">Der Index jedes Quellelements wird im projizierten Zwischenformat des jeweiligen Elements verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1749">The index of each source element is used in the intermediate projected form of that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1750">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente erzeugt werden, indem für jedes Element von <paramref name="collectionSelector" /> die 1:n-Transformationsfunktion <paramref name="source" /> aufgerufen wird, und anschließend jedes Element der Sequenz und sein entsprechendes Quellelement einem Ergebniselement zugeordnet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1750">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1751">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1751">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1752">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1752">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1753">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1753">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1754">Die <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> Methode ist hilfreich, wenn Sie die Elemente zu `source` im Bereich für die Abfragelogik, die nach dem Aufruf auftritt, <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1754">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="5e343-1755">Ein Codebeispiel hierfür finden Sie im Beispielabschnitt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1755">See the Example section for a code example.</span></span> <span data-ttu-id="5e343-1756">Bei eine bidirektionalen Beziehung zwischen Objekten des Typs `TSource` und Objekte des Typs `TCollection`, d. h. wenn ein Objekt des Typs `TCollection` enthält eine Eigenschaft zum Abrufen der `TSource` -Objekt, das es erzeugt wurde, nicht benötigten Überladen von <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1756">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="5e343-1757">Stattdessen können Sie <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> und navigieren Sie zurück zu den `TSource` -Objekt über die `TCollection` Objekt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1757">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1758">
            <paramref name="source" /> oder <paramref name="collectionSelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1758">
              <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SequenceEqual&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1759">Bestimmt, ob zwei Sequenzen durch einen Gleichheitsvergleich als gleich bestimmt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1759">Determines whether two sequences are equal according to an equality comparer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1760">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1760">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-1761">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das mit <paramref name="second" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1761">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-1762">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das mit der ersten Sequenz verglichen werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1762">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1763">Bestimmt, ob zwei Sequenzen gleich sind, indem die Elemente mithilfe des Standardgleichheitsvergleichs für ihren Typ verglichen werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1763">Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1764">
            <see langword="true" />, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente durch den Standardgleichheitsvergleich für ihren Typ als gleich bestimmt werden, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1764">
              <see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1765">Die <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode zählt die zwei Quellsequenzen parallel auf und vergleicht Sie entsprechende Elemente mithilfe des Standardgleichheitsvergleichs für `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1765">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span> <span data-ttu-id="5e343-1766">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <xref:System.Collections.Generic.IEqualityComparer%601> generische Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="5e343-1766">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="5e343-1767">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie Ihre eigenen <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden für den Typ.</span><span class="sxs-lookup"><span data-stu-id="5e343-1767">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1768">Die folgenden Codebeispielen wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> zu bestimmen, ob zwei Sequenzen gleich sind.</span><span class="sxs-lookup"><span data-stu-id="5e343-1768">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine whether two sequences are equal.</span></span> <span data-ttu-id="5e343-1769">In den ersten beiden Beispielen bestimmt die Methode an, ob die verglichenen Sequenzen Verweise auf dieselben Objekte enthalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-1769">In the first two examples, the method determines whether the compared sequences contain references to the same objects.</span></span> <span data-ttu-id="5e343-1770">Im dritten und vierten Beispiel vergleicht die Methode die tatsächlichen Daten der Objekte innerhalb der Sequenzen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1770">In the third and fourth examples, the method compares the actual data of the objects within the sequences.</span></span>  
  
 <span data-ttu-id="5e343-1771">In diesem Beispiel sind die Sequenzen gleich.</span><span class="sxs-lookup"><span data-stu-id="5e343-1771">In this example the sequences are equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#32)]
 [!code-vb[System.Linq.Enumerable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#32)]  
  
 <span data-ttu-id="5e343-1772">Im folgenden Codebeispiel wird vergleicht zwei Sequenzen, die nicht gleich sind.</span><span class="sxs-lookup"><span data-stu-id="5e343-1772">The following code example compares two sequences that are not equal.</span></span> <span data-ttu-id="5e343-1773">Beachten Sie, dass die Sequenzen identische Daten enthalten, aber da die Objekte, die diese enthalten unterschiedliche Verweise aufweisen, die Sequenzen werden nicht als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="5e343-1773">Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#33)]
 [!code-vb[System.Linq.Enumerable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#33)]  
  
 <span data-ttu-id="5e343-1774">Wenn Sie die eigentlichen Daten der Objekte in den Sequenzen nicht nur die Verweise vergleichen möchten, müssen Sie implementieren die <xref:System.Collections.Generic.IEqualityComparer%601> generische Schnittstelle in Ihrer Klasse.</span><span class="sxs-lookup"><span data-stu-id="5e343-1774">If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in your class.</span></span> <span data-ttu-id="5e343-1775">Im folgenden Codebeispiel wird veranschaulicht, wie auf diese Schnittstelle in eine Hilfsklasse implementiert, und geben Sie <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-1775">The following code example shows how to implement this interface in a helper class and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="5e343-1776">Nachdem Sie diese Schnittstelle implementiert haben, können Sie Sequenzen von `ProductA` Objekte in der <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1776">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#8)]
 [!code-vb[CSLINQEncapsulatedComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1777">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1777">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1778">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1778">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-1779">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das mit <paramref name="second" /> verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-1780">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das mit der ersten Sequenz verglichen werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1780">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-1781">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, der zum Vergleichen von Elementen verwendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1781">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1782">Bestimmt, ob zwei Sequenzen gleich sind, indem ihre Elemente mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1782">Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1783">
            <see langword="true" />, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente gemäß <paramref name="comparer" /> als gleich gelten, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1783">
              <see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1784">Die <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> Methode zählt die zwei Quellsequenzen parallel auf und vergleicht Sie entsprechende Elemente mit dem angegebenen <xref:System.Collections.Generic.IEqualityComparer%601>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1784">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>.</span></span> <span data-ttu-id="5e343-1785">Wenn `comparer` ist `null`, des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, zum Vergleichen von Elementen verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-1785">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1786">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-1786">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="5e343-1787">Nachdem Sie dieses Vergleichs implementiert haben, können Sie Sequenzen von `Product` Objekte in der <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1787">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#8)]
 [!code-vb[CSLINQCustomComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1788">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1788">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Single&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1789">Gibt ein einzelnes spezifisches Element einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1789">Returns a single, specific element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1790">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1790">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1791">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen einziges Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1791">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1792">Gibt das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1792">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1793">Das einzige Element der Eingabesequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1793">The single element of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1794">Die <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode löst eine Ausnahme aus, wenn die Eingabesequenz leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1794">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty.</span></span> <span data-ttu-id="5e343-1795">Die stattdessen zurückgegeben `null` verwenden, wenn die Eingabesequenz leer ist, <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1795">To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1796">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> das einzige Element eines Arrays auswählen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1796">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#79)]
 [!code-vb[System.Linq.Enumerable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#79)]  
  
 <span data-ttu-id="5e343-1797">Im folgenden Codebeispiel wird veranschaulicht, dass <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> löst eine Ausnahme aus, wenn die Sequenz nicht genau ein Element enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-1797">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> throws an exception when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#80](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#80)]
 [!code-vb[System.Linq.Enumerable#80](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1798">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1798">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1799">Die Eingabesequenz enthält mehr als ein Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1799">The input sequence contains more than one element.</span>
          </span>
          <span data-ttu-id="5e343-1800">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1800">-or-</span>
          </span>
          <span data-ttu-id="5e343-1801">Die Eingabesequenz ist leer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1801">The input sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1802">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1802">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1803">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein einzelnes Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1803">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-1804">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1804">A function to test an element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1805">Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1805">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1806">Das einzige Element der Eingabesequenz, das eine Bedingung erfüllt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1806">The single element of the input sequence that satisfies a condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1807">Die <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Methode löst eine Ausnahme aus, wenn die Eingabesequenz kein übereinstimmendes Element enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-1807">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element.</span></span> <span data-ttu-id="5e343-1808">Die stattdessen zurückgegeben `null` verwenden, wenn kein übereinstimmendes Element gefunden wird, <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1808">To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1809">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> das einzige Element eines Arrays auswählen, die eine Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1809">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#81)]
 [!code-vb[System.Linq.Enumerable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#81)]  
  
 <span data-ttu-id="5e343-1810">Im folgenden Codebeispiel wird veranschaulicht, dass <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> löst eine Ausnahme aus, wenn die Sequenz nicht genau ein Element enthält, das die Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1810">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#82](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#82)]
 [!code-vb[System.Linq.Enumerable#82](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1811">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1811">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1812">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1812">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="5e343-1813">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1813">-or-</span>
          </span>
          <span data-ttu-id="5e343-1814">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1814">More than one element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="5e343-1815">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1815">-or-</span>
          </span>
          <span data-ttu-id="5e343-1816">Die Quellsequenz ist leer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1816">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SingleOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1817">Gibt ein einzelnes spezifisches Element einer Sequenz oder einen Standardwert zurück, wenn dieses Element nicht gefunden wird</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1817">Returns a single, specific element of a sequence, or a default value if that element is not found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1818">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1818">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1819">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen einziges Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1819">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1820">Gibt das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1820">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1821">Das einzige Element der Eingabesequenz oder <see langword="default" />(<paramref name="TSource" />), wenn die Sequenz keine Elemente enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1821">The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1822">Der Standardwert für den Referenz- und auf NULL festlegbare Typen ist `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1822">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="5e343-1823">Die <xref:System.Linq.Enumerable.SingleOrDefault%2A> Methode bietet keine Möglichkeit, einen Standardwert anzugeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1823">The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="5e343-1824">Wenn Sie einen Standardwert außer angeben möchten `default(TSource)`, verwenden die <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Methode, wie im Beispiel beschrieben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1824">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1825">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> das einzige Element eines Arrays auswählen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1825">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#83)]
 [!code-vb[System.Linq.Enumerable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#83)]  
  
 <span data-ttu-id="5e343-1826">Im folgenden Codebeispiel wird veranschaulicht, dass <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> gibt einen Standardwert zurück, wenn die Sequenz nicht genau ein Element enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-1826">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#84](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#84)]
 [!code-vb[System.Linq.Enumerable#84](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#84)]  
  
 <span data-ttu-id="5e343-1827">Der Wert von `default(TSource)` ist nicht der Standardwert, Sie möchten, verwenden, wenn die Auflistung keine Elemente enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-1827">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="5e343-1828">Anstatt im Ergebnis der unerwünschte Standardwert, und klicken Sie dann bei Bedarf ändern, können Sie die <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Methode, um den Standardwert angeben, die Sie möchten, verwenden, wenn die Auflistung leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1828">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="5e343-1829">Rufen Sie dann die <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> um das Element abzurufen.</span><span class="sxs-lookup"><span data-stu-id="5e343-1829">Then, call <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the element.</span></span> <span data-ttu-id="5e343-1830">Im folgenden Codebeispiel werden beide Verfahren verwendet, um einen Standardwert von 1 zu erhalten, wenn eine Auflistung von Seitenzahlen leer ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1830">The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</span></span> <span data-ttu-id="5e343-1831">Da der Standardwert für eine ganze Zahl 0 (null), handelt es sich nicht in der Regel eine gültige Seitennummer ist, muss der Standardwert stattdessen als 1 angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-1831">Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="5e343-1832">Die erste Ergebnisvariable wird auf den unerwünschten Standardwert überprüft, nach der Ausführung die Abfrage abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1832">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="5e343-1833">Die zweite Ergebnisvariable wird mithilfe von <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> an den Standardwert 1.</span><span class="sxs-lookup"><span data-stu-id="5e343-1833">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#128](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#128)]
 [!code-vb[System.Linq.Enumerable#128](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#128)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1834">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1834">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1835">Die Eingabesequenz enthält mehr als ein Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1835">The input sequence contains more than one element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1836">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1836">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1837">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein einzelnes Element zurückgegeben werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1837">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-1838">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1838">A function to test an element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1839">Gibt das einzige Element einer Sequenz, das eine angegebene Bedingung erfüllt, oder einen Standardwert zurück, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1839">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1840">Gibt das einzige Element der Eingabesequenz, das die Bedingung erfüllt, oder <see langword="default" />(<paramref name="TSource" />) zurück, wenn ein solches Element nicht gefunden wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1840">The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1841">Der Standardwert für den Referenz- und auf NULL festlegbare Typen ist `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1841">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1842">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> das einzige Element eines Arrays auswählen, die eine Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1842">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#85)]
 [!code-vb[System.Linq.Enumerable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#85)]  
  
 <span data-ttu-id="5e343-1843">Im folgenden Codebeispiel wird veranschaulicht, dass <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> gibt einen Standardwert zurück, wenn die Sequenz nicht genau ein Element enthält, das die Bedingung erfüllt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1843">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#86](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#86)]
 [!code-vb[System.Linq.Enumerable#86](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1844">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1844">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5e343-1845">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1845">More than one element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Skip(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Skip : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Skip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1846">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1846">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1847">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem Elemente zurückgegeben werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1847">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="5e343-1848">Die Anzahl der Elemente, die übersprungen werden sollen, bevor die übrigen Elemente zurückgegeben werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1848">The number of elements to skip before returning the remaining elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1849">Umgeht eine festgelegte Anzahl von Elementen in einer Sequenz und gibt dann die übrigen Elemente zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1849">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1850">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente enthält, die nach dem angegebenen Index in der Eingabesequenz auftreten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1850">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1851">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1851">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1852">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1852">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1853">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1853">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1854">Wenn `source` enthält weniger als `count` Elementen, wird ein leeres <xref:System.Collections.Generic.IEnumerable%601> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-1854">If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span> <span data-ttu-id="5e343-1855">Wenn `count` ist kleiner oder gleich 0 (null), alle Elemente des `source` werden zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1855">If `count` is less than or equal to zero, all elements of `source` are yielded.</span></span>  
  
 <span data-ttu-id="5e343-1856">Die <xref:System.Linq.Enumerable.Take%2A> und <xref:System.Linq.Enumerable.Skip%2A> Methoden sind funktionale ergänzt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1856">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="5e343-1857">Anhand einer Sequenz `coll` und einer ganzen Zahl `n`, verketten die Ergebnisse der `coll.Take(n)` und `coll.Skip(n)` ergibt die gleiche Sequenz wie `coll`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1857">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="5e343-1858">In Visual Basic-Abfrageausdruckssyntax eine `Skip` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Skip%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1858">In Visual Basic query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1859">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Skip%2A> eine angegebene Anzahl von Elementen in einem sortierten Array übersprungen und die übrigen Elemente zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-1859">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Skip%2A> to skip a specified number of elements in a sorted array and return the remaining elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#87)]
 [!code-vb[System.Linq.Enumerable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1860">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1860">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f00eb172-3907-4c43-9745-d8546ab86234">
          <span data-ttu-id="5e343-1861">Skip-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1861">Skip Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member SkipLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1862">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1862">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1863">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1863">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1864">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem Elemente zurückgegeben werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1864">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-1865">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1865">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1866">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1866">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1867">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus der Eingabesequenz ab dem ersten Element in der linearen Reihe enthält, das die in <paramref name="predicate" /> angegebene Überprüfung nicht besteht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1867">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1868">Die <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Methode mit verzögerter Ausführung implementiert wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-1868">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1869">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1869">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1870">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1870">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1871">Diese Methode überprüft jedes Element von `source` mit `predicate` und überspringt das Element aus, wenn das Ergebnis ist `true`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1871">This method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="5e343-1872">Nach der Rückkehr der Prädikatfunktion `false` für ein Element, das dieses Element und die übrigen Elemente in `source` werden zurückgegeben, und es sind keine weiteren Aufrufe von `predicate`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1872">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="5e343-1873">Wenn `predicate` gibt `true` für alle Elemente in der Sequenz, die eine leere <xref:System.Collections.Generic.IEnumerable%601> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-1873">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="5e343-1874">Die <xref:System.Linq.Enumerable.TakeWhile%2A> und <xref:System.Linq.Enumerable.SkipWhile%2A> Methoden sind funktionale ergänzt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1874">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="5e343-1875">Anhand einer Sequenz `coll` einer reinen Funktion `p`, verketten die Ergebnisse der `coll.TakeWhile(p)` und `coll.SkipWhile(p)` ergibt die gleiche Sequenz wie `coll`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1875">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="5e343-1876">In Visual Basic-Abfrageausdruckssyntax eine `Skip While` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.SkipWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1876">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1877">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Elemente eines Arrays zu überspringen, solange eine Bedingung erfüllt ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1877">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#88)]
 [!code-vb[System.Linq.Enumerable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1878">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1878">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/5dee8350-7520-4f1a-b00d-590cacd572d6">
          <span data-ttu-id="5e343-1879">Skip While-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1879">Skip While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1880">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1880">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1881">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem Elemente zurückgegeben werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1881">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-1882">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1882">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1883">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1883">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
          <span data-ttu-id="5e343-1884">In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1884">The element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1885">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus der Eingabesequenz ab dem ersten Element in der linearen Reihe enthält, das die in <paramref name="predicate" /> angegebene Überprüfung nicht besteht</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1885">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1886">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-1886">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-1887">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1887">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-1888">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-1888">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-1889">Die <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> Methode überprüft jedes Element von `source` mit `predicate` und überspringt das Element aus, wenn das Ergebnis ist `true`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1889">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="5e343-1890">Nach der Rückkehr der Prädikatfunktion `false` für ein Element, das dieses Element und die übrigen Elemente in `source` werden zurückgegeben, und es sind keine weiteren Aufrufe von `predicate`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1890">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="5e343-1891">Wenn `predicate` gibt `true` für alle Elemente in der Sequenz, die eine leere <xref:System.Collections.Generic.IEnumerable%601> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-1891">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="5e343-1892">Das erste Argument von `predicate` stellt dar, das zu testende Element.</span><span class="sxs-lookup"><span data-stu-id="5e343-1892">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="5e343-1893">Das zweite Argument darstellt, den nullbasierten Index des Elements in `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1893">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="5e343-1894">Die <xref:System.Linq.Enumerable.TakeWhile%2A> und <xref:System.Linq.Enumerable.SkipWhile%2A> Methoden sind funktionale ergänzt.</span><span class="sxs-lookup"><span data-stu-id="5e343-1894">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="5e343-1895">Anhand einer Sequenz `coll` einer reinen Funktion `p`, verketten die Ergebnisse der `coll.TakeWhile(p)` und `coll.SkipWhile(p)` ergibt die gleiche Sequenz wie `coll`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1895">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="5e343-1896">In Visual Basic-Abfrageausdruckssyntax eine `Skip While` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.SkipWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1896">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1897">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> Elemente eines Arrays zu überspringen, solange eine Bedingung, die abhängig von der Index des Elements auf "true" festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-1897">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#89)]
 [!code-vb[System.Linq.Enumerable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1898">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1898">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/5dee8350-7520-4f1a-b00d-590cacd572d6">
          <span data-ttu-id="5e343-1899">Skip While-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1899">Skip While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sum">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-1900">Berechnet die Summe einer Sequenz von numerischen Werten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1900">Computes the sum of a sequence of numeric values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1901">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1901">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1902">Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1902">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1903">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1903">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1904">Die <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> Methodenrückgabe NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1904">The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1905">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1905">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1906">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1906">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1907">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1907">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-1908">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1908">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1909">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1909">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1910">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1910">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1911">Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1911">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1912">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1912">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1913">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1913">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1914">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1914">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1915">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1915">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1916">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1916">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1917">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1917">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1918">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1918">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1919">Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1919">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1920">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1920">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1921">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1921">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1922">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1922">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1923">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1923">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1924">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1924">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-1925">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1925">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1926">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1926">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1927">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1927">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1928">Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1928">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1929">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1929">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1930">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1930">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1931">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1931">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1932">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1932">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1933">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1933">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-1934">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1934">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1935">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1935">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1936">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1936">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1937">Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1937">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1938">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1938">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1939">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1939">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1940">Das Ergebnis enthalten Werte, `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1940">The result doesnot include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-1941">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1941">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1942">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1942">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1943">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1943">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-1944">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1944">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1945">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1945">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1946">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1946">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1947">Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1947">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1948">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1948">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1949">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1949">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1950">Das Ergebnis enthält keine Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1950">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-1951">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1951">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1952">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1952">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1953">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1953">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1954">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1954">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1955">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1955">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1956">Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1956">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1957">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1957">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1958">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1958">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1959">Das Ergebnis enthält keine Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1959">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-1960">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1960">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1961">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1961">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1962">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1962">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-1963">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1963">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1964">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1964">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1965">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1965">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1966">Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1966">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1967">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1967">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1968">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1968">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1969">Das Ergebnis enthält keine Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1969">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-1970">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1970">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1971">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1971">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1972">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1972">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-1973">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1973">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1974">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1974">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1975">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1975">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1976">Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1976">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1977">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1977">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1978">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1978">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1979">Das Ergebnis enthält keine Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-1979">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-1980">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1980">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1981">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1981">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1982">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1982">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1983">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1983">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="5e343-1984">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Summe berechnet werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1984">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1985">Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1985">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1986">Die Summe der Werte in der Sequenz</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1986">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1987">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1987">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1988">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1988">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-1989">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Summe der Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-1989">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-1990">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1990">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-1991">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1991">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-1992">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1992">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-1993">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1993">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-1994">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1994">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-1995">Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1995">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-1996">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-1996">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-1997">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-1997">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-1998">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1998">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="5e343-1999">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-1999">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2000">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2000">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2001">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2001">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-2002">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2002">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2003">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2003">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2004">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2004">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2005">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2005">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2006">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2006">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2007">Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2007">Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2008">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2008">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2009">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2009">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2010">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2010">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="5e343-2011">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2011">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2012">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2012">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2013">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2013">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2014">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2014">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2015">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2015">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2016">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2016">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2017">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2017">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2018">Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2018">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2019">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2019">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2020">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2020">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2021">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2021">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="5e343-2022">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2022">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2023">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2023">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2024">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2024">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-2025">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2025">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2026">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2026">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2027">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2027">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2028">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2028">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2029">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2029">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2030">Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2030">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2031">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2031">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2032">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2032">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2033">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2033">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="5e343-2034">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2034">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2035">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2035">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2036">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2036">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-2037">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2037">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2038">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2038">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2039">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2039">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2040">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2040">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2041">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2041">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2042">Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2042">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2043">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2043">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2044">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2044">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2045">Das Ergebnis ist nicht enthalten Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2045">The result does not included values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-2046">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Decimal>` in c# oder `Nullable(Of Decimal)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2046">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2047">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2047">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2048">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2048">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2049">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2049">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-2050">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2050">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2051">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2051">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2052">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2052">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2053">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2053">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2054">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2054">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2055">Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2055">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2056">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2056">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2057">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2057">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2058">Das Ergebnis enthält keine Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2058">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-2059">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Double>` in c# oder `Nullable(Of Double)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2059">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2060">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2060">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2061">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2061">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2062">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2062">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2063">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2063">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2064">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2064">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2065">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2065">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2066">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2066">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2067">Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2067">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2068">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2068">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2069">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2069">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2070">Das Ergebnis enthält keine Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2070">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-2071">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Int32>` in c# oder `Nullable(Of Int32)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2071">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2072">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2072">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2073">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2073">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2074">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2074">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-2075">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2075">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2076">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2076">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2077">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2077">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2078">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2078">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2079">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2079">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2080">Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2080">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2081">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2081">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2082">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2082">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2083">Das Ergebnis enthält keine Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2083">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-2084">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Int64>` in c# oder `Nullable(Of Int64)` in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="5e343-2084">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic</span></span>  
  
 <span data-ttu-id="5e343-2085">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2085">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2086">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2086">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2087">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2087">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="5e343-2088">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2088">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2089">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2089">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2090">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2090">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2091">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2091">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2092">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2092">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2093">Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen, und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2093">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2094">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2094">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2095">Diese Methode gibt zurück, NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2095">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2096">Das Ergebnis enthält keine Werte, die `null`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2096">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="5e343-2097">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie angeben, dass eine Funktion, `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere `Nullable<Single>` in c# oder `Nullable(Of Single)` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2097">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2098">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2098">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2099">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2099">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2100">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2100">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2101">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2101">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2102">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2102">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2103">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2103">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="5e343-2104">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2104">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2105">Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2105">Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2106">Die Summe der projizierten Werte</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2106">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2107">Die <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> Methodenrückgabe NULL, wenn `source` enthält keine Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2107">The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="5e343-2108">Sie können diese Methode in eine Sequenz von beliebigen Werten anwenden, wenn Sie eine Funktion `selector`, projiziert die Elemente der `source` in einen numerischen Typ, insbesondere <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2108">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="5e343-2109">In Visual Basic-Abfrageausdruckssyntax ein `Aggregate Into Sum()` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2109">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2110">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Summe der projizierten Werte einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2110">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2111">
            <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2111">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="5e343-2112">Aggregate-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2112">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Take : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Take (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2113">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2113">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2114">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2114">The sequence to return elements from.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="5e343-2115">Die Anzahl der zurückzugebenden Elemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2115">The number of elements to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2116">Gibt eine angegebene Anzahl von zusammenhängenden Elementen ab dem Anfang einer Sequenz zurück</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2116">Returns a specified number of contiguous elements from the start of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2117">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die angegebene Anzahl von Elementen ab dem Anfang der Eingabesequenz enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2117">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2118">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2118">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2119">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2119">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2120">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2120">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2121"><xref:System.Linq.Enumerable.Take%2A> Listet die `source` und Elemente bis ergibt `count` -Elemente zurückgegeben wurden oder `source` keine Elemente mehr enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-2121"><xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements.</span></span> <span data-ttu-id="5e343-2122">Wenn `count` überschreitet die Anzahl der Elemente im `source`, alle Elemente des `source` zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2122">If `count` exceeds the number of elements in `source`, all elements of `source` are returned.</span></span>  
  
 <span data-ttu-id="5e343-2123">Wenn `count` ist kleiner als oder gleich 0 (null), `source` ist nicht aufgelistet, und es wird eine leere <xref:System.Collections.Generic.IEnumerable%601> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2123">If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="5e343-2124">Die <xref:System.Linq.Enumerable.Take%2A> und <xref:System.Linq.Enumerable.Skip%2A> Methoden sind funktionale ergänzt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2124">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="5e343-2125">Anhand einer Sequenz `coll` und einer ganzen Zahl `n`, verketten die Ergebnisse der `coll.Take(n)` und `coll.Skip(n)` ergibt die gleiche Sequenz wie `coll`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2125">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="5e343-2126">In Visual Basic-Abfrageausdruckssyntax eine `Take` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.Take%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2126">In Visual Basic query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2127">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Take%2A> Elemente vom Anfang einer Sequenz zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="5e343-2127">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Take%2A> to return elements from the start of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#99)]
 [!code-vb[System.Linq.Enumerable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2128">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2128">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/77bf87b2-1476-4456-957f-fee922fbad8c">
          <span data-ttu-id="5e343-2129">Take-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2129">Take Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member TakeLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TakeWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-2130">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist, und überspringt dann die übrigen Elemente</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2130">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2131">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2131">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2132">Eine Sequenz, aus der Elemente zurückgegeben werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2132">A sequence to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-2133">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2133">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2134">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2134">Returns elements from a sequence as long as a specified condition is true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2135">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die Überprüfung nicht mehr erfolgreich ist</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2135">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2136">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2136">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2137">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2137">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2138">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2138">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2139">Die <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Methode überprüft jedes Element von `source` mit `predicate` und gibt das Element aus, wenn das Ergebnis ist `true`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2139">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="5e343-2140">Enumeration beendet wird, gibt die Prädikatfunktion `false` für ein Element oder `source` keine Elemente mehr enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-2140">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="5e343-2141">Die <xref:System.Linq.Enumerable.TakeWhile%2A> und <xref:System.Linq.Enumerable.SkipWhile%2A> Methoden sind funktionale ergänzt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2141">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="5e343-2142">Anhand einer Sequenz `coll` einer reinen Funktion `p`, verketten die Ergebnisse der `coll.TakeWhile(p)` und `coll.SkipWhile(p)` ergibt die gleiche Sequenz wie `coll`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2142">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="5e343-2143">In Visual Basic-Abfrageausdruckssyntax eine `Take While` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.TakeWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2143">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2144">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Elemente vom Anfang einer Sequenz zurückgegeben werden, solange eine Bedingung erfüllt ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2144">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#100)]
 [!code-vb[System.Linq.Enumerable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2145">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2145">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11">
          <span data-ttu-id="5e343-2146">Take While-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2146">Take While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2147">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2147">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2148">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2148">The sequence to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-2149">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2149">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2150">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2150">Returns elements from a sequence as long as a specified condition is true.</span>
          </span>
          <span data-ttu-id="5e343-2151">In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2151">The element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2152">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die Überprüfung nicht mehr erfolgreich ist</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2152">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2153">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2153">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2154">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2154">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2155">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2155">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2156">Die <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> Methode überprüft jedes Element von `source` mit `predicate` und gibt das Element aus, wenn das Ergebnis ist `true`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2156">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="5e343-2157">Enumeration beendet wird, gibt die Prädikatfunktion `false` für ein Element oder `source` keine Elemente mehr enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-2157">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="5e343-2158">Das erste Argument von `predicate` stellt dar, das zu testende Element.</span><span class="sxs-lookup"><span data-stu-id="5e343-2158">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="5e343-2159">Das zweite Argument darstellt, den nullbasierten Index des Elements in `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2159">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="5e343-2160">Die <xref:System.Linq.Enumerable.TakeWhile%2A> und <xref:System.Linq.Enumerable.SkipWhile%2A> Methoden sind funktionale ergänzt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2160">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="5e343-2161">Anhand einer Sequenz `coll` einer reinen Funktion `p`, verketten die Ergebnisse der `coll.TakeWhile(p)` und `coll.SkipWhile(p)` ergibt die gleiche Sequenz wie `coll`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2161">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="5e343-2162">In Visual Basic-Abfrageausdruckssyntax eine `Take While` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.TakeWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2162">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2163">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> Elemente vom Anfang einer Sequenz zurückgegeben werden, solange eine Bedingung, der Index des Elements verwendet, auf "true" festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2163">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#101)]
 [!code-vb[System.Linq.Enumerable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2164">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2164">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11">
          <span data-ttu-id="5e343-2165">Take While-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2165">Take While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-2166">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2166">Performs a subsequent ordering of the elements in a sequence in ascending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2167">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2167">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2168">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2168">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2169">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" /> mit den zu sortierenden Elementen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2169">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2170">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2170">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2171">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel durch</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2171">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2172">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2172">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2173">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2173">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2174">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2174">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2175">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2175">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2176">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (`x => x` in Visual C#- oder `Function(x) x` in Visual Basic) für `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2176">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="5e343-2177"><xref:System.Linq.Enumerable.ThenBy%2A> und <xref:System.Linq.Enumerable.ThenByDescending%2A> definiert, um den Typ erweitern <xref:System.Linq.IOrderedEnumerable%601>, das ist auch der Rückgabetyp dieser Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2177"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="5e343-2178">Dieser Entwurf ermöglicht es Ihnen, mehrere Sortierkriterien angeben, indem Sie eine beliebige Anzahl von anwenden <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2178">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-2179">Da <xref:System.Linq.IOrderedEnumerable%601> erbt <xref:System.Collections.Generic.IEnumerable%601>, rufen Sie <xref:System.Linq.Enumerable.OrderBy%2A> oder <xref:System.Linq.Enumerable.OrderByDescending%2A> auf den Ergebnissen eines Aufrufs von <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2179">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="5e343-2180">Auf diese Weise führt eine neue primäre Sortierung, die die zuvor festgelegte Sortierung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2180">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="5e343-2181">Diese Methode vergleicht die Schlüssel mithilfe des Standardvergleichs <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2181">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="5e343-2182">Diese Methode führt eine stabile Sortierung. d.h., wenn der Schlüssel der zwei Elemente gleich sind, wird die Reihenfolge der Elemente beibehalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-2182">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="5e343-2183">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="5e343-2183">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="5e343-2184">In der Abfrageausdruckssyntax ein `orderby [first criterion], [second criterion]` (Visual c#) oder `Order By [first criterion], [second criterion]` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.ThenBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2184">In query expression syntax, an `orderby [first criterion], [second criterion]` (Visual C#) or `Order By [first criterion], [second criterion]` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2185">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> ausführen, eine sekundäre Sortierung der Elemente in einer Sequenz.</span><span class="sxs-lookup"><span data-stu-id="5e343-2185">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to perform a secondary ordering of the elements in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#102)]
 [!code-vb[System.Linq.Enumerable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2186">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2186">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="5e343-2187">orderby-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2187">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="5e343-2188">ORDER BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2188">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2189">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2189">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2190">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2190">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2191">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" /> mit den zu sortierenden Elementen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2191">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2192">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2192">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-2193">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2193">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2194">Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2194">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2195">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2195">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2196">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2196">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2197">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2197">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2198">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2198">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2199">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (`x => x` in Visual C#- oder `Function(x) x` in Visual Basic) für `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2199">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="5e343-2200"><xref:System.Linq.Enumerable.ThenBy%2A> und <xref:System.Linq.Enumerable.ThenByDescending%2A> definiert, um den Typ erweitern <xref:System.Linq.IOrderedEnumerable%601>, das ist auch der Rückgabetyp dieser Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2200"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="5e343-2201">Dieser Entwurf ermöglicht es Ihnen, mehrere Sortierkriterien angeben, indem Sie eine beliebige Anzahl von anwenden <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2201">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-2202">Da <xref:System.Linq.IOrderedEnumerable%601> erbt <xref:System.Collections.Generic.IEnumerable%601>, rufen Sie <xref:System.Linq.Enumerable.OrderBy%2A> oder <xref:System.Linq.Enumerable.OrderByDescending%2A> auf den Ergebnissen eines Aufrufs von <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2202">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="5e343-2203">Auf diese Weise führt eine neue primäre Sortierung, die die zuvor festgelegte Sortierung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2203">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="5e343-2204">Wenn `comparer` ist `null`, die standardmäßige Vergleichsfunktion <xref:System.Collections.Generic.Comparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2204">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="5e343-2205">Diese Methode führt eine stabile Sortierung. d.h., wenn der Schlüssel der zwei Elemente gleich sind, wird die Reihenfolge der Elemente beibehalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-2205">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="5e343-2206">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="5e343-2206">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2207">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2207">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-2208">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2208">Performs a subsequent ordering of the elements in a sequence in descending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2209">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2209">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2210">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2210">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2211">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" /> mit den zu sortierenden Elementen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2211">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2212">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2212">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2213">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge nach einem Schlüssel durch</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2213">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2214">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2214">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2215">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2215">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2216">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2216">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2217">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2217">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2218">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (`x => x` in Visual C#- oder `Function(x) x` in Visual Basic) für `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2218">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="5e343-2219"><xref:System.Linq.Enumerable.ThenBy%2A> und <xref:System.Linq.Enumerable.ThenByDescending%2A> definiert, um den Typ erweitern <xref:System.Linq.IOrderedEnumerable%601>, das ist auch der Rückgabetyp dieser Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2219"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="5e343-2220">Dieser Entwurf ermöglicht es Ihnen, mehrere Sortierkriterien angeben, indem Sie eine beliebige Anzahl von anwenden <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2220">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-2221">Da <xref:System.Linq.IOrderedEnumerable%601> erbt <xref:System.Collections.Generic.IEnumerable%601>, rufen Sie <xref:System.Linq.Enumerable.OrderBy%2A> oder <xref:System.Linq.Enumerable.OrderByDescending%2A> auf den Ergebnissen eines Aufrufs von <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2221">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="5e343-2222">Auf diese Weise führt eine neue primäre Sortierung, die die zuvor festgelegte Sortierung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2222">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="5e343-2223">Diese Sortierung Methode vergleicht die Schlüssel mithilfe des Standardvergleichs <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2223">This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="5e343-2224">Diese Methode führt eine stabile Sortierung. d.h., wenn der Schlüssel der zwei Elemente gleich sind, wird die Reihenfolge der Elemente beibehalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-2224">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="5e343-2225">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="5e343-2225">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="5e343-2226">In Visual C#-Abfrageausdruckssyntax ein `orderby [first criterion], [second criterion] descending` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2226">In Visual C# query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 <span data-ttu-id="5e343-2227">In Visual Basic-Abfrageausdruckssyntax ein `Order By [first criterion], [second criterion] Descending` Klausel übersetzt in einen Aufruf von <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2227">In Visual Basic query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2228">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2228">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="5e343-2229">orderby-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2229">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="5e343-2230">ORDER BY-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2230">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2231">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2231">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2232">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2232">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2233">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" /> mit den zu sortierenden Elementen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2233">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2234">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2234">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-2235">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2235">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2236">Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2236">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2237">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2237">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2238">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2238">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2239">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2239">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2240">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2240">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2241">Um eine Sequenz von den Werten der Elemente selbst zu sortieren, geben Sie die Identity-Funktion (`x => x` in Visual C#- oder `Function(x) x` in Visual Basic) für `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2241">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="5e343-2242"><xref:System.Linq.Enumerable.ThenBy%2A> und <xref:System.Linq.Enumerable.ThenByDescending%2A> definiert, um den Typ erweitern <xref:System.Linq.IOrderedEnumerable%601>, das ist auch der Rückgabetyp dieser Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2242"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="5e343-2243">Dieser Entwurf ermöglicht es Ihnen, mehrere Sortierkriterien angeben, indem Sie eine beliebige Anzahl von anwenden <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2243">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e343-2244">Da <xref:System.Linq.IOrderedEnumerable%601> erbt <xref:System.Collections.Generic.IEnumerable%601>, rufen Sie <xref:System.Linq.Enumerable.OrderBy%2A> oder <xref:System.Linq.Enumerable.OrderByDescending%2A> auf den Ergebnissen eines Aufrufs von <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> oder <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2244">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="5e343-2245">Auf diese Weise führt eine neue primäre Sortierung, die die zuvor festgelegte Sortierung nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2245">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="5e343-2246">Wenn `comparer` ist `null`, die standardmäßige Vergleichsfunktion <xref:System.Collections.Generic.Comparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2246">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="5e343-2247">Diese Methode führt eine stabile Sortierung. d.h., wenn der Schlüssel der zwei Elemente gleich sind, wird die Reihenfolge der Elemente beibehalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-2247">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="5e343-2248">Im Gegensatz dazu behält eine instabile Sortierung die Reihenfolge der Elemente nicht den gleichen Schlüssel verfügen.</span><span class="sxs-lookup"><span data-stu-id="5e343-2248">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2249">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> ausführen, eine sekundäre Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge nach mit einem benutzerdefinierten Comparer.</span><span class="sxs-lookup"><span data-stu-id="5e343-2249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#103)]
 [!code-vb[System.Linq.Enumerable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2250">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2250">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArray(Of TSource) (source As IEnumerable(Of TSource)) As TSource()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;TSource&gt; ^ ToArray(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToArray : seq&lt;'Source&gt; -&gt; 'Source[]" Usage="System.Linq.Enumerable.ToArray source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2251">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2251">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2252">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Array erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2252">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2253">Erstellt ein Array aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2253">Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2254">Ein Array, das die Elemente aus der Eingabesequenz enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2254">An array that contains the elements from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2255">Die <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode erzwingt die sofortige abfrageauswertung und gibt ein Array, das die Ergebnisse der Abfrage enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-2255">The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results.</span></span> <span data-ttu-id="5e343-2256">Sie können diese Methode der Abfrage anfügen, um eine zwischengespeicherte Kopie der Abfrageergebnisse zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-2256">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="5e343-2257"><xref:System.Linq.Enumerable.ToList%2A> verhält sich ähnlich, gibt jedoch eine <xref:System.Collections.Generic.List%601> anstelle eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="5e343-2257"><xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2258">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.ToArray%2A> zum Erzwingen der Auswertung für direkte Abfragen und gibt ein Array von Ergebnissen zurück.</span><span class="sxs-lookup"><span data-stu-id="5e343-2258">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToArray%2A> to force immediate query evaluation and return an array of results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#104](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#104)]
 [!code-vb[System.Linq.Enumerable#104](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2259">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2259">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-2260">Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2260">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2261">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2261">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2262">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2262">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2263">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2263">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2264">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2264">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2265">Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2265">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2266">Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Schlüssel und Werte enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2266">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2267">Die <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> -Methode verwendet den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln.</span><span class="sxs-lookup"><span data-stu-id="5e343-2267">The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2268">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> zum Erstellen einer <xref:System.Collections.Generic.Dictionary%602> mithilfe einer Schlüsselauswahlfunktion.</span><span class="sxs-lookup"><span data-stu-id="5e343-2268">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to create a <xref:System.Collections.Generic.Dictionary%602> by using a key selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#105](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#105)]
 [!code-vb[System.Linq.Enumerable#105](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2269">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2269">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="5e343-2270">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2270">-or-</span>
          </span>
          <span data-ttu-id="5e343-2271">
            <paramref name="keySelector" /> erzeugt einen Schlüssel, der <see langword="null" /> ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2271">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5e343-2272">
            <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2272">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2273">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2273">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2274">Der Typ der von <paramref name="keySelector" /> zurückgegebenen Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2274">The type of the keys returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2275">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2275">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2276">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2276">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-2277">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2277">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2278">Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion und eines angegebenen Schlüsselvergleichs</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2278">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2279">Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Schlüssel und Werte enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2279">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2280">Wenn `comparer` ist `null`, den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2280">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2281">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2281">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="5e343-2282">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2282">-or-</span>
          </span>
          <span data-ttu-id="5e343-2283">
            <paramref name="keySelector" /> erzeugt einen Schlüssel, der <see langword="null" /> ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2283">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5e343-2284">
            <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2284">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2285">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2285">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2286">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2286">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="5e343-2287">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2287">The type of the value returned by <paramref name="elementSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2288">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2288">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2289">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2289">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="5e343-2290">Eine Transformierenfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2290">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2291">Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> entsprechend der angegebenen Schlüsselauswahlfunktion und Elementauswahlfunktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2291">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2292">Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2292">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2293">Die <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> -Methode verwendet den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln.</span><span class="sxs-lookup"><span data-stu-id="5e343-2293">The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2294">
            <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2294">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="5e343-2295">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2295">-or-</span>
          </span>
          <span data-ttu-id="5e343-2296">
            <paramref name="keySelector" /> erzeugt einen Schlüssel, der <see langword="null" /> ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2296">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5e343-2297">
            <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2297">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2298">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2298">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2299">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2299">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="5e343-2300">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2300">The type of the value returned by <paramref name="elementSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2301">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2301">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2302">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2302">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="5e343-2303">Eine Transformierenfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2303">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-2304">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2304">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2305">Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> entsprechend einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2305">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2306">Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2306">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2307">Wenn `comparer` ist `null`, den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2307">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2308">
            <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2308">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="5e343-2309">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2309">-or-</span>
          </span>
          <span data-ttu-id="5e343-2310">
            <paramref name="keySelector" /> erzeugt einen Schlüssel, der <see langword="null" /> ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2310">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5e343-2311">
            <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2311">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2312">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2312">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2313">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.HashSet`1" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2313">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2314">Erstellt ein <see cref="T:System.Collections.Generic.HashSet`1" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2314">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2315">Ein <see cref="T:System.Collections.Generic.HashSet`1" />, das aus der Eingabesequenz ausgewählte Werte vom Typ TSource enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2315">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type TSource selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2316">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2316">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2317">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.HashSet`1" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2317">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-2318">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2318">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2319">Erstellt einen <see cref="T:System.Collections.Generic.HashSet`1" /> aus einer <see cref="T:System.Collections.Generic.IEnumerable`1" /> mithilfe der <paramref name="comparer" /> zum Vergleichen von Schlüsseln</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2319">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2320">Ein <see cref="T:System.Collections.Generic.HashSet`1" />, das Werte vom Typ <paramref name="TSource" /> enthält, die aus der Eingabesequenz ausgewählt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2320">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToList&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToList(Of TSource) (source As IEnumerable(Of TSource)) As List(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::List&lt;TSource&gt; ^ ToList(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToList : seq&lt;'Source&gt; -&gt; System.Collections.Generic.List&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToList source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2321">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2321">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2322">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem eine <see cref="T:System.Collections.Generic.List`1" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2322">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2323">Erstellt ein <see cref="T:System.Collections.Generic.List`1" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2323">Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2324">Eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2324">A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2325">Die <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode erzwingt die sofortige abfrageauswertung und gibt eine <xref:System.Collections.Generic.List%601> , die die Ergebnisse der Abfrage enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-2325">The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span> <span data-ttu-id="5e343-2326">Sie können diese Methode der Abfrage anfügen, um eine zwischengespeicherte Kopie der Abfrageergebnisse zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="5e343-2326">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="5e343-2327"><xref:System.Linq.Enumerable.ToArray%2A> verhält sich ähnlich, aber gibt ein Array anstelle von einem <xref:System.Collections.Generic.List%601>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2327"><xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2328">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.ToList%2A> Erzwingen der Auswertung für direkte Abfragen und Zurückgeben einer <xref:System.Collections.Generic.List%601> , die die Ergebnisse der Abfrage enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-2328">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToList%2A> to force immediate query evaluation and return a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#106](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#106)]
 [!code-vb[System.Linq.Enumerable#106](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2329">
            <paramref name="source" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2329">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLookup&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-2330">Erstellt ein generisches <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2330">Creates a generic <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2331">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2331">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2332">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2332">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2333">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem eine <see cref="T:System.Linq.Lookup`2" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2333">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2334">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2334">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2335">Erstellt ein <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2335">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2336">Ein <see cref="T:System.Linq.Lookup`2" />, das Schlüssel und Werte enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2336">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2337">Die <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Methode gibt eine <xref:System.Linq.Lookup%602>, eine 1: n Wörterbuch, das Sammlungen von Werten Schlüssel zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2337">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="5e343-2338">Ein <xref:System.Linq.Lookup%602> unterscheidet sich von einem <xref:System.Collections.Generic.Dictionary%602>, die eine 1: 1-Zuordnung von Schlüsseln in einzelne Werte ausführt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2338">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="5e343-2339">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2339">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2340">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2340">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2341">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2341">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2342">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2342">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2343">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem eine <see cref="T:System.Linq.Lookup`2" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2343">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2344">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2344">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-2345">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2345">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2346">Erstellt ein <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion und eines angegebenen Schlüsselvergleichs</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2346">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2347">Ein <see cref="T:System.Linq.Lookup`2" />, das Schlüssel und Werte enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2347">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2348">Die <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Methode gibt eine <xref:System.Linq.Lookup%602>, eine 1: n Wörterbuch, das Sammlungen von Werten Schlüssel zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2348">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="5e343-2349">Ein <xref:System.Linq.Lookup%602> unterscheidet sich von der eine <xref:System.Collections.Generic.Dictionary%602>, die eine 1: 1-Zuordnung von Schlüsseln in einzelne Werte ausführt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2349">A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="5e343-2350">Wenn `comparer` ist `null`, den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2350">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2351">
            <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2351">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2352">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2352">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2353">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2353">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="5e343-2354">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2354">The type of the value returned by <paramref name="elementSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2355">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem eine <see cref="T:System.Linq.Lookup`2" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2355">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2356">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2356">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="5e343-2357">Eine Transformierenfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2357">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2358">Erstellt ein <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> entsprechend der angegebenen Schlüsselauswahlfunktion und Elementauswahlfunktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2358">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2359">Ein <see cref="T:System.Linq.Lookup`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2359">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2360">Die <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> Methode gibt eine <xref:System.Linq.Lookup%602>, eine 1: n Wörterbuch, das Sammlungen von Werten Schlüssel zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2360">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="5e343-2361">Ein <xref:System.Linq.Lookup%602> unterscheidet sich von einem <xref:System.Collections.Generic.Dictionary%602>, die eine 1: 1-Zuordnung von Schlüsseln in einzelne Werte ausführt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2361">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="5e343-2362">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2362">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2363">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> zum Erstellen einer <xref:System.Linq.Lookup%602> mithilfe einer Schlüsselauswahlfunktion und einer Elementauswahlfunktion.</span><span class="sxs-lookup"><span data-stu-id="5e343-2363">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to create a <xref:System.Linq.Lookup%602> by using a key selector function and an element selector function.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#107](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#107)]
 [!code-vb[System.Linq.Enumerable#107](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2364">
            <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2364">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2365">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2365">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="5e343-2366">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2366">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="5e343-2367">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2367">The type of the value returned by <paramref name="elementSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2368">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem eine <see cref="T:System.Linq.Lookup`2" /> erstellt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2368">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="5e343-2369">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2369">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="5e343-2370">Eine Transformierenfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2370">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-2371">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2371">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2372">Erstellt ein <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> entsprechend einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2372">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2373">Ein <see cref="T:System.Linq.Lookup`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2373">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2374">Die <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Methode gibt eine <xref:System.Linq.Lookup%602>, eine 1: n Wörterbuch, das Sammlungen von Werten Schlüssel zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2374">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="5e343-2375">Ein <xref:System.Linq.Lookup%602> unterscheidet sich von einem <xref:System.Collections.Generic.Dictionary%602>, die eine 1: 1-Zuordnung von Schlüsseln in einzelne Werte ausführt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2375">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="5e343-2376">Wenn `comparer` ist `null`, den Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> zum Vergleichen von Schlüsseln verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="5e343-2376">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2377">
            <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2377">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-2378">Erzeugt die Vereinigungsmenge von zwei Sequenzen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2378">Produces the set union of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2379">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2379">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-2380">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente die erste Menge für die Gesamtmenge bilden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2380">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-2381">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente die zweite Menge für die Gesamtmenge bilden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2381">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2382">Erzeugt die Vereinigungsmenge von zwei Sequenzen mithilfe des Standardgleichheitsvergleichs</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2382">Produces the set union of two sequences by using the default equality comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2383">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2383">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2384">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2384">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2385">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2385">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2386">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2386">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2387">Diese Methode schließt die Duplikate aus der zurückgegebenen Menge.</span><span class="sxs-lookup"><span data-stu-id="5e343-2387">This method excludes duplicates from the return set.</span></span> <span data-ttu-id="5e343-2388">Dies ist die herbeigeführte verhaltensänderung, um die <xref:System.Linq.Enumerable.Concat%2A> -Methode, die alle Elemente in den Eingabesequenzen, einschließlich Duplikate, zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2388">This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.</span></span>  
  
 <span data-ttu-id="5e343-2389">Der Standardgleichheitsvergleich <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um die Werte der Typen verglichen, die Implementierung der <xref:System.Collections.Generic.IEqualityComparer%601> generische Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="5e343-2389">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="5e343-2390">Um einen benutzerdefinierten Datentyp zu vergleichen, müssen Sie diese Schnittstelle implementieren, und geben Sie Ihre eigenen <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden für den Typ.</span><span class="sxs-lookup"><span data-stu-id="5e343-2390">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="5e343-2391">Wenn die von dieser Methode zurückgegebene Objekt auflistbar ist, <xref:System.Linq.Enumerable.Union%2A> listet `first` und `second` in dieser Reihenfolge und gibt jedes Element, das noch nicht zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="5e343-2391">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2392">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> zum Abrufen der Union von zwei Sequenzen von ganzen Zahlen.</span><span class="sxs-lookup"><span data-stu-id="5e343-2392">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the union of two sequences of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#109)]
 [!code-vb[System.Linq.Enumerable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#109)]  
  
 <span data-ttu-id="5e343-2393">Wenn Sie die Sequenzen von Objekten eines benutzerdefinierten Datentyps vergleichen möchten, müssen Sie implementieren die <xref:System.Collections.Generic.IEqualityComparer%601> generische Schnittstelle in einem Helperclass.</span><span class="sxs-lookup"><span data-stu-id="5e343-2393">If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass.</span></span> <span data-ttu-id="5e343-2394">Im folgenden Codebeispiel wird veranschaulicht, wie zum Implementieren dieser Schnittstelle in einem benutzerdefinierten Datentyp aus, und geben Sie <xref:System.Object.GetHashCode%2A> und <xref:System.Object.Equals%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="5e343-2394">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="5e343-2395">Nachdem Sie diese Schnittstelle implementiert haben, können Sie Sequenzen von `ProductA` Objekte in der <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2395">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-csharp[CSLINQEncapsulatedComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#4)]
[!code-vb[CSLINQEncapsulatedComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2396">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2396">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2397">Der Typ der Elemente der Eingabesequenzen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2397">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-2398">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente die erste Menge für die Gesamtmenge bilden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2398">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-2399">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente die zweite Menge für die Gesamtmenge bilden</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2399">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="5e343-2400">Der <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2400">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2401">Erzeugt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> die Vereinigungsmenge von zwei Sequenzen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2401">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2402">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2402">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2403">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2403">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2404">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2404">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2405">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2405">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2406">Wenn `comparer` ist `null`, des Standardgleichheitsvergleichs, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, wird verwendet, um Werte zu vergleichen.</span><span class="sxs-lookup"><span data-stu-id="5e343-2406">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
 <span data-ttu-id="5e343-2407">Wenn die von dieser Methode zurückgegebene Objekt auflistbar ist, <xref:System.Linq.Enumerable.Union%2A> listet `first` und `second` in dieser Reihenfolge und gibt jedes Element, das noch nicht zurückgegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="5e343-2407">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
 <span data-ttu-id="5e343-2408">Die <xref:System.Linq.Enumerable.Concat%2A> Methode unterscheidet sich von der <xref:System.Linq.Enumerable.Union%2A> Methode da die <xref:System.Linq.Enumerable.Concat%2A> Methode gibt alle Elemente in den Eingabesequenzen, einschließlich Duplikate, zurück, während <xref:System.Linq.Enumerable.Union%2A> nur eindeutige Werte zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2408">The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2409">Das folgende Beispiel zeigt, wie Sie einen Gleichheitsvergleich implementieren, die verwendet werden können die <xref:System.Linq.Enumerable.Union%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="5e343-2409">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Union%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="5e343-2410">Nachdem Sie dieses Vergleichs implementiert haben, können Sie Sequenzen von `Product` Objekte in der <xref:System.Linq.Enumerable.Union%2A> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="5e343-2410">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Union%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#4)]
[!code-vb[CSLINQCustomComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2411">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2411">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Where&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5e343-2412">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2412">Filters a sequence of values based on a predicate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2413">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2413">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2414">Ein zu filterndes <see cref="T:System.Collections.Generic.IEnumerable`1" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2414">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-2415">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2415">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2416">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2416">Filters a sequence of values based on a predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2417">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente aus der Eingabesequenz enthält, die die Bedingung erfüllen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2417">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2418">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2418">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2419">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2419">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2420">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2420">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2421">In der Abfrageausdruckssyntax ein `where` (Visual c#) oder `Where` -Klausel (Visual Basic) in einen Aufruf von übersetzt <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="5e343-2421">In query expression syntax, a `where` (Visual C#) or `Where` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2422">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> um eine Sequenz zu filtern.</span><span class="sxs-lookup"><span data-stu-id="5e343-2422">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to filter a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#110)]
 [!code-vb[System.Linq.Enumerable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2423">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2423">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7f9bf952-7744-4f91-b676-cddb55d107c3">
          <span data-ttu-id="5e343-2424">where-Klausel (C#-Referenz)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2424">where clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/48b5c2c5-3181-429c-8545-894296798c89">
          <span data-ttu-id="5e343-2425">Where-Klausel (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2425">Where Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="5e343-2426">Der Typ der Elemente von <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2426">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="5e343-2427">Ein zu filterndes <see cref="T:System.Collections.Generic.IEnumerable`1" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2427">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="5e343-2428">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2428">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2429">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2429">Filters a sequence of values based on a predicate.</span>
          </span>
          <span data-ttu-id="5e343-2430">In der Logik der Prädikatfunktion wird der Index der einzelnen Elemente verwendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2430">Each element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2431">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente aus der Eingabesequenz enthält, die die Bedingung erfüllen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2431">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2432">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2432">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2433">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2433">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2434">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2434">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2435">Das erste Argument von `predicate` stellt dar, das zu testende Element.</span><span class="sxs-lookup"><span data-stu-id="5e343-2435">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="5e343-2436">Das zweite Argument darstellt, den nullbasierten Index des Elements in `source`.</span><span class="sxs-lookup"><span data-stu-id="5e343-2436">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2437">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> zum Filtern einer Sequenz basierend auf der ein Prädikat, das den Index jedes Element enthält.</span><span class="sxs-lookup"><span data-stu-id="5e343-2437">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to filter a sequence based on a predicate that involves the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#111)]
 [!code-vb[System.Linq.Enumerable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2438">
            <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2438">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; * Func&lt;'First, 'Second, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Zip (first, second, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst">
          <span data-ttu-id="5e343-2439">Der Typ der Elemente der ersten Eingabesequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2439">The type of the elements of the first input sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TSecond">
          <span data-ttu-id="5e343-2440">Der Typ der Elemente der zweiten Eingabesequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2440">The type of the elements of the second input sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="5e343-2441">Der Typ der Elemente in der Ergebnissequenz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2441">The type of the elements of the result sequence.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="5e343-2442">Die erste Sequenz, die zusammengeführt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2442">The first sequence to merge.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="5e343-2443">Die zweite Sequenz, die zusammengeführt werden soll</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2443">The second sequence to merge.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="5e343-2444">Eine Funktion, die angibt, wie die Elemente der zwei Sequenzen zusammengeführt werden sollen</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2444">A function that specifies how to merge the elements from the two sequences.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5e343-2445">Wendet eine Funktion auf die entsprechenden Elemente von zwei Sequenzen an, und erzeugt eine Sequenz der Ergebnisse</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2445">Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5e343-2446">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die zusammengeführten Elemente der beiden Eingabesequenzen enthält</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2446">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e343-2447">Diese Methode wird mit verzögerter Ausführung implementiert.</span><span class="sxs-lookup"><span data-stu-id="5e343-2447">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="5e343-2448">Die sofortige ist der Rückgabewert ein Objekt, das alle Informationen speichert, die zum Ausführen der Aktion erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="5e343-2448">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="5e343-2449">Die Abfrage dargestellt, die von dieser Methode wird nicht ausgeführt, bis das Objekt aufgelistet wird entweder durch Aufrufen der `GetEnumerator` Methode direkt oder mithilfe von `foreach` in Visual C#- oder `For Each` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5e343-2449">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="5e343-2450">Die Methode führt jedes Element der ersten Sequenz mit einem Element mit dem gleichen Index in der zweiten Sequenz zusammen.</span><span class="sxs-lookup"><span data-stu-id="5e343-2450">The method merges each element of the first sequence with an element that has the same index in the second sequence.</span></span> <span data-ttu-id="5e343-2451">Wenn die Sequenzen nicht die gleiche Anzahl von Elementen verfügen, führt die Methode Sequenzen zusammen, bis das Ende eines dieser Elemente erreicht.</span><span class="sxs-lookup"><span data-stu-id="5e343-2451">If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</span></span> <span data-ttu-id="5e343-2452">Z. B. wenn eine Sequenz besteht aus drei Elementen und das andere vier hat, haben die Ergebnissequenz nur drei Elemente.</span><span class="sxs-lookup"><span data-stu-id="5e343-2452">For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e343-2453">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Linq.Enumerable.Zip%2A> Methode zum Zusammenführen von zwei Sequenzen.</span><span class="sxs-lookup"><span data-stu-id="5e343-2453">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Zip%2A> method to merge two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#200)]
 [!code-vb[System.Linq.Enumerable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5e343-2454">
            <paramref name="first" /> oder <paramref name="second" /> ist <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e343-2454">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
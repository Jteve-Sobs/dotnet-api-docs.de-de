<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9843d5805a28e43a72905b2b25616b3145d2e7e5" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83531920" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public interface IQueryable&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Linq.IQueryable" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of T)&#xA;Implements IEnumerable(Of T), IQueryable" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Linq.Expressions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Linq.Expressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="dabdf-101">Der Typ der Daten in der Datenquelle.</span><span class="sxs-lookup"><span data-stu-id="dabdf-101">The type of the data in the data source.</span></span></typeparam>
    <summary><span data-ttu-id="dabdf-102">Stellt Funktionen zur Auswertung von Abfragen für eine bestimmte Datenquelle mit bekanntem Datentyp bereit.</span><span class="sxs-lookup"><span data-stu-id="dabdf-102">Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dabdf-103">Die <xref:System.Linq.IQueryable%601>-Schnittstelle ist für die Implementierung durch Abfrage Anbieter vorgesehen.</span><span class="sxs-lookup"><span data-stu-id="dabdf-103">The <xref:System.Linq.IQueryable%601> interface is intended for implementation by query providers.</span></span>  
  
 <span data-ttu-id="dabdf-104">Diese Schnittstelle erbt die <xref:System.Collections.Generic.IEnumerable%601>-Schnittstelle, sodass die Ergebnisse dieser Abfrage aufgezählt werden können, wenn Sie eine Abfrage darstellen.</span><span class="sxs-lookup"><span data-stu-id="dabdf-104">This interface inherits the <xref:System.Collections.Generic.IEnumerable%601> interface so that if it represents a query, the results of that query can be enumerated.</span></span> <span data-ttu-id="dabdf-105">Die Enumeration erzwingt die Ausführung der Ausdrucks Baumstruktur, die einem <xref:System.Linq.IQueryable%601> Objekt zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="dabdf-105">Enumeration forces the expression tree associated with an <xref:System.Linq.IQueryable%601> object to be executed.</span></span> <span data-ttu-id="dabdf-106">Abfragen, die keine Aufzähl Bare-Ergebnisse zurückgeben, werden ausgeführt, wenn die <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>-Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="dabdf-106">Queries that do not return enumerable results are executed when the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method is called.</span></span>  
  
 <span data-ttu-id="dabdf-107">Die Definition von "Ausführen einer Ausdrucks Baumstruktur" ist für einen Abfrage Anbieter spezifisch.</span><span class="sxs-lookup"><span data-stu-id="dabdf-107">The definition of "executing an expression tree" is specific to a query provider.</span></span> <span data-ttu-id="dabdf-108">Beispielsweise kann es erforderlich sein, die Ausdrucks Baumstruktur in eine Abfragesprache zu übersetzen, die für eine zugrunde liegende Datenquelle geeignet ist.</span><span class="sxs-lookup"><span data-stu-id="dabdf-108">For example, it may involve translating the expression tree to a query language appropriate for an underlying data source.</span></span>  
  
 <span data-ttu-id="dabdf-109">Die <xref:System.Linq.IQueryable%601>-Schnittstelle ermöglicht es, dass Abfragen polymorph sind.</span><span class="sxs-lookup"><span data-stu-id="dabdf-109">The <xref:System.Linq.IQueryable%601> interface enables queries to be polymorphic.</span></span> <span data-ttu-id="dabdf-110">Das heißt, weil eine Abfrage für eine `IQueryable` Datenquelle als Ausdrucks Baumstruktur dargestellt wird, kann Sie für verschiedene Arten von Datenquellen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="dabdf-110">That is, because a query against an `IQueryable` data source is represented as an expression tree, it can be executed against different types of data sources.</span></span>  
  
 <span data-ttu-id="dabdf-111">Die `static` (`Shared` in Visual Basic)-Methoden, die in der-Klasse definiert <xref:System.Linq.Queryable> (außer <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>und <xref:System.Linq.Queryable.ThenByDescending%2A>), erweitern Objekte von Typen, die die <xref:System.Linq.IQueryable%601>-Schnittstelle implementieren.</span><span class="sxs-lookup"><span data-stu-id="dabdf-111">The `static` (`Shared` in Visual Basic) methods defined in the class <xref:System.Linq.Queryable> (except for <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, and <xref:System.Linq.Queryable.ThenByDescending%2A>) extend objects of types that implement the <xref:System.Linq.IQueryable%601> interface.</span></span>  
  
 <span data-ttu-id="dabdf-112">Weitere Informationen zum Erstellen eines eigenen LINQ-Anbieters finden Sie unter [LINQ: Erstellen eines iquerable-Anbieters](https://docs.microsoft.com/archive/blogs/mattwar/linq-building-an-iqueryable-provider-part-i).</span><span class="sxs-lookup"><span data-stu-id="dabdf-112">For more information about how to create your own LINQ provider, see [LINQ: Building an IQueryable Provider](https://docs.microsoft.com/archive/blogs/mattwar/linq-building-an-iqueryable-provider-part-i).</span></span>
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>

<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a58a4463d6d69fd3bc508ac89a53740d19322fad" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75130774" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Der Typ der Daten in der Datenquelle.</typeparam>
    <summary>Stellt Funktionen zur Auswertung von Abfragen für eine bestimmte Datenquelle mit bekanntem Datentyp bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Linq.IQueryable%601>-Schnittstelle ist für die Implementierung durch Abfrage Anbieter vorgesehen.  
  
 Diese Schnittstelle erbt die <xref:System.Collections.Generic.IEnumerable%601>-Schnittstelle, sodass die Ergebnisse dieser Abfrage aufgezählt werden können, wenn Sie eine Abfrage darstellen. Die Enumeration erzwingt die Ausführung der Ausdrucks Baumstruktur, die einem <xref:System.Linq.IQueryable%601> Objekt zugeordnet ist. Abfragen, die keine Aufzähl Bare-Ergebnisse zurückgeben, werden ausgeführt, wenn die <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29>-Methode aufgerufen wird.  
  
 Die Definition von "Ausführen einer Ausdrucks Baumstruktur" ist für einen Abfrage Anbieter spezifisch. Beispielsweise kann es erforderlich sein, die Ausdrucks Baumstruktur in eine Abfragesprache zu übersetzen, die für eine zugrunde liegende Datenquelle geeignet ist.  
  
 Die <xref:System.Linq.IQueryable%601>-Schnittstelle ermöglicht es, dass Abfragen polymorph sind. Das heißt, weil eine Abfrage für eine `IQueryable` Datenquelle als Ausdrucks Baumstruktur dargestellt wird, kann Sie für verschiedene Arten von Datenquellen ausgeführt werden.  
  
 Die `static` (`Shared` in Visual Basic)-Methoden, die in der-Klasse definiert <xref:System.Linq.Queryable> (außer <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>und <xref:System.Linq.Queryable.ThenByDescending%2A>), erweitern Objekte von Typen, die die <xref:System.Linq.IQueryable%601>-Schnittstelle implementieren.  
  
 Weitere Informationen zum Erstellen eines eigenen LINQ-Anbieters finden Sie unter [LINQ: Erstellen eines iquerable-Anbieters](https://go.microsoft.com/fwlink/?LinkID=112370) auf MSDN-Blogs.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>

<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d66c61830c60670687228ad8681be7fa396883aa" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51880361" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Der Datentyp in der Datenquelle.</typeparam>
    <summary>Stellt Funktionen zur Auswertung von Abfragen für eine bestimmte Datenquelle mit bekanntem Datentyp bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Linq.IQueryable%601> Schnittstelle ist für die Implementierung durch Abfrageanbieter vorgesehen.  
  
 Diese Schnittstelle erbt die <xref:System.Collections.Generic.IEnumerable%601> Schnittstelle, damit die Ergebnisse der Abfrage auf, wenn es sich um eine Abfrage darstellt, aufgelistet werden können. Enumeration erzwingt, dass die Ausdrucksbaumstruktur, die zugeordneten ein <xref:System.Linq.IQueryable%601> Objekt, das ausgeführt werden. Abfragen, die keine auflistbare Ergebnisse zurückgeben werden ausgeführt, wenn die <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> Methode wird aufgerufen.  
  
 Die Definition von "Ausführen einer Ausdrucksbaumstruktur" bezieht sich auf ein Abfrageanbieter. Beispielsweise kann das dazu gehören die Ausdrucksbaumstruktur, eine für eine zugrunde liegende Datenquelle geeignete Abfragesprache übersetzen.  
  
 Die <xref:System.Linq.IQueryable%601> Schnittstelle ermöglicht polymorphe Abfragen. Das heißt, da eine Abfrage für eine `IQueryable` Datenquelle als eine Ausdrucksbaumstruktur dargestellt wird, kann es für verschiedene Typen von Datenquellen ausgeführt werden.  
  
 Die `static` (`Shared` in Visual Basic) Methoden, die in der Klasse definiert <xref:System.Linq.Queryable> (mit Ausnahme von <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, und <xref:System.Linq.Queryable.ThenByDescending%2A>) erweitern Sie die Objekte der Typen, implementieren die <xref:System.Linq.IQueryable%601> Schnittstelle.  
  
 Weitere Informationen dazu, wie Sie einen eigenen LINQ-Anbieter erstellen, finden Sie unter [LINQ: Building an IQueryable Provider](https://go.microsoft.com/fwlink/?LinkID=112370) auf MSDN-Blogs.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>
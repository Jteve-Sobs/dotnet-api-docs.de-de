<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a98e7405214e67e1749e141e35befa2336c63155" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86699103" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="41d87-101">Unterstützt die Zusammenarbeit von WPF- und Wind32-Code.</span><span class="sxs-lookup"><span data-stu-id="41d87-101">Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41d87-102">Member dieser Klasse ermöglichen dem Aufrufer den internen Zugriff auf das [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND und das übergeordnete HWND eines [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> .</span><span class="sxs-lookup"><span data-stu-id="41d87-102">Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</span></span>  <span data-ttu-id="41d87-103">Die richtigen Sicherheitsüberprüfungen werden von diesen Mitgliedern durchgeführt.</span><span class="sxs-lookup"><span data-stu-id="41d87-103">The proper security checks are performed by those members.</span></span>  
  
 <span data-ttu-id="41d87-104">Verwenden Sie diese Klasse immer dann, wenn Sie ein spezifischeren Objekt basierend auf seinem HWND benötigen.</span><span class="sxs-lookup"><span data-stu-id="41d87-104">Use this class whenever you need a more specific object based on its HWND.</span></span>  
  
 <span data-ttu-id="41d87-105">Ein Beispielszenario ist, wenn Sie ein [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Dialogfeld in einer-Anwendung hosten müssen [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] .</span><span class="sxs-lookup"><span data-stu-id="41d87-105">An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span> <span data-ttu-id="41d87-106">Initialisieren Sie <xref:System.Windows.Interop.WindowInteropHelper> mit einem [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Window-Objekt für das Dialogfeld.</span><span class="sxs-lookup"><span data-stu-id="41d87-106">Initialize the <xref:System.Windows.Interop.WindowInteropHelper> with a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object for the dialog box.</span></span> <span data-ttu-id="41d87-107">Sie können dann das [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] handle (HWND) des Fensters aus der <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> -Eigenschaft erhalten und den Besitzer für das [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Fenster mit der- <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> Eigenschaft angeben.</span><span class="sxs-lookup"><span data-stu-id="41d87-107">You can then get the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property.</span></span> <span data-ttu-id="41d87-108">Im folgenden Codebeispiel wird veranschaulicht, wie verwendet wird, <xref:System.Windows.Interop.WindowInteropHelper> Wenn ein [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Dialogfeld in einer-Anwendung gehostet wird [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] .</span><span class="sxs-lookup"><span data-stu-id="41d87-108">The following code example shows how to use <xref:System.Windows.Interop.WindowInteropHelper> when hosting a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span>  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 <span data-ttu-id="41d87-109">Ein anderes von dieser Klasse unterstütztes Szenario ist das Abrufen eines- <xref:System.Windows.Interop.HwndSource> Objekts aus einem- [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> Objekt.</span><span class="sxs-lookup"><span data-stu-id="41d87-109">Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object.</span></span> <span data-ttu-id="41d87-110"><xref:System.Windows.Interop.HwndSource>Ermöglicht die direkte Verarbeitung von [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] Nachrichten über die- <xref:System.Windows.Interop.HwndSource.AddHook%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="41d87-110">The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method.</span></span> <span data-ttu-id="41d87-111">Wenn <xref:System.Windows.Interop.HwndSource> Sie und <xref:System.Windows.Interop.HwndSource.AddHook%2A> anstelle von verwenden <xref:System.Windows.Window> , können Sie weiterhin Nachrichten verarbeiten, für die keine Entsprechung oder Behandlung in vorhanden ist [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] .</span><span class="sxs-lookup"><span data-stu-id="41d87-111">By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="41d87-112">Erstellen Sie ein <xref:System.Windows.Interop.WindowInteropHelper> mit der <xref:System.Windows.Window> Quelle, und rufen Sie dann <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> auf, <xref:System.Windows.Interop.WindowInteropHelper> um von HWND zu zu gelangen <xref:System.Windows.Interop.HwndSource> .</span><span class="sxs-lookup"><span data-stu-id="41d87-112">Create a <xref:System.Windows.Interop.WindowInteropHelper> with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the <xref:System.Windows.Interop.WindowInteropHelper> to get from HWND to <xref:System.Windows.Interop.HwndSource>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (window As Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window"><span data-ttu-id="41d87-113">Ein [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Fensterobjekt.</span><span class="sxs-lookup"><span data-stu-id="41d87-113">A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object.</span></span></param>
        <summary><span data-ttu-id="41d87-114">Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interop.WindowInteropHelper" />-Klasse für ein angegebenes [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Fenster.</span><span class="sxs-lookup"><span data-stu-id="41d87-114">Initializes a new instance of the <see cref="T:System.Windows.Interop.WindowInteropHelper" /> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41d87-115">Das Fenster kann ein Dialogfeld oder ein Fenster sein, das andernfalls nicht zum Hosten innerhalb der Grenzen einer-Anwendung geeignet ist [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] .</span><span class="sxs-lookup"><span data-stu-id="41d87-115">The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41d87-116">Erstellt den HWND des Fensters, wenn der HWND noch nicht erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="41d87-116">Creates the HWND of the window if the HWND has not been created yet.</span></span></summary>
        <returns><span data-ttu-id="41d87-117">Ein <see cref="T:System.IntPtr" />, das den HWND darstellt.</span><span class="sxs-lookup"><span data-stu-id="41d87-117">An <see cref="T:System.IntPtr" /> that represents the HWND.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41d87-118">Verwenden Sie die- <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Methode, wenn Sie die Erstellung eines Fenster Handles (HWND) von der eigentlichen Anzeige der verwalteten-Methode trennen möchten <xref:System.Windows.Window> .</span><span class="sxs-lookup"><span data-stu-id="41d87-118">Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>.</span></span> <span data-ttu-id="41d87-119">Dies ist nützlich, wenn Sie einen Automatisierungs Client haben, der seine Aufgaben erledigen kann, ohne dass ein Fenster angezeigt werden muss.</span><span class="sxs-lookup"><span data-stu-id="41d87-119">This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.</span></span>  
  
 <span data-ttu-id="41d87-120">Wenn das native Fenster noch nicht erstellt wurde, erstellt diese Methode das native Fenster, legt die <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> -Eigenschaft fest und gibt das HWND zurück.</span><span class="sxs-lookup"><span data-stu-id="41d87-120">If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND.</span></span> <span data-ttu-id="41d87-121">Wenn das native Fenster bereits erstellt wurde, wird das Handle des vorhandenen nativen Fensters zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="41d87-121">If the native window has been created already, the handle of the existing native window is returned.</span></span>  
  
 <span data-ttu-id="41d87-122">Wenn das native Fenster aufgrund des Aufrufs dieser Methode erstellt wird, wird das- <xref:System.Windows.Window.SourceInitialized> Ereignis ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="41d87-122">If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.</span></span>  
  
 <span data-ttu-id="41d87-123">Wenn die- <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Eigenschaft nach dem Aufrufen der-Methode abgefragt <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> wird, wird das vorhandene Fenster Handle zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="41d87-123">Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle.</span></span> <span data-ttu-id="41d87-124">Die visuelle Struktur wird erst dann an das Fenster angefügt, nachdem die- <xref:System.Windows.Window.Show%2A> Methode aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="41d87-124">The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.</span></span>  
  
 <span data-ttu-id="41d87-125">Wenn die-Methode mehrmals aufgerufen wird, werden <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> keine neuen Fenster Handles erstellt.</span><span class="sxs-lookup"><span data-stu-id="41d87-125">Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles.</span></span> <span data-ttu-id="41d87-126">Wenn die-Methode aufgerufen wird <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> , wenn das Handle bereits durch einen Aufruf der-Methode erstellt wurde, <xref:System.Windows.Window.Show%2A> wird kein neues Fenster Handle erstellt.</span><span class="sxs-lookup"><span data-stu-id="41d87-126">Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle.</span></span> <span data-ttu-id="41d87-127">Ein natives Fenster wird nur erstellt, wenn kein Handle vorhanden ist, wenn die- <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="41d87-127">A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called.</span></span>  
  
 <span data-ttu-id="41d87-128">Fenster Eigenschaften, die mithilfe von nativen Windows-APIs über p/aufrufen festgelegt werden, werden möglicherweise nicht in den APIs für verwaltete Fenster angezeigt.</span><span class="sxs-lookup"><span data-stu-id="41d87-128">Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.</span></span> <span data-ttu-id="41d87-129">Wenn Sie z. b. das Fenster mit dem systemeigenen MS_EX_TOPMOST-Flag auf den obersten Wert festlegen, nachdem die- <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Methode aufgerufen wurde, <xref:System.Windows.Window.Topmost%2A> ist es nicht garantiert, dass die-Eigenschaft die native Einstellung widerspiegelt.</span><span class="sxs-lookup"><span data-stu-id="41d87-129">For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41d87-130">Ruft das Fensterhandle für ein [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Fenster ab, in dem dieser <see cref="T:System.Windows.Interop.WindowInteropHelper" /> erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="41d87-130">Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</span></span></summary>
        <value><span data-ttu-id="41d87-131">Das [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Fensterhandle (HWND).</span><span class="sxs-lookup"><span data-stu-id="41d87-131">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window handle (HWND).</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41d87-132">Ruft das Fensterhandle des [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Besitzerfensters ab oder legt dieses fest.</span><span class="sxs-lookup"><span data-stu-id="41d87-132">Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window.</span></span></summary>
        <value><span data-ttu-id="41d87-133">Das Besitzerfensterhandle (HWND).</span><span class="sxs-lookup"><span data-stu-id="41d87-133">The owner window handle (HWND).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41d87-134">Sie können Windows neu zuweisen, indem Sie diese Eigenschaft festlegen.</span><span class="sxs-lookup"><span data-stu-id="41d87-134">You can reparent windows by setting this property.</span></span> <span data-ttu-id="41d87-135">Wie bei [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] der allgemeinen Programmierung, sollten Sie Windows nicht neu zuordnen, die bereits verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="41d87-135">As is true for general [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>

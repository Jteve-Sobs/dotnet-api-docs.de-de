<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a4595677207343b13421f7fcbdcaa8250fc01acf" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37503269" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Member dieser Klasse ermöglicht dem Aufrufer, haben internen Zugriff auf die [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND und übergeordneten HWND des eine [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  Die richtige sicherheitsüberprüfungen erfolgen durch die Elemente.  
  
 Verwenden Sie diese Klasse, wenn Sie ein spezifischeres Objekt basierend auf seinem HWND benötigen.  
  
 Ein Beispielszenario ist, wenn Sie zum Hosten müssen einer [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] im Dialogfeld eine [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] Anwendung. Initialisieren der <xref:System.Windows.Interop.WindowInteropHelper> mit einem [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Window-Objekt, für das Dialogfeld. Anschließend können Sie Abrufen der [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Handle (HWND) des Fensters aus der <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Eigenschaft, und geben Sie den Besitzer für die [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] -Fenster mit der <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> Eigenschaft. Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit <xref:System.Windows.Interop.WindowInteropHelper> beim Hosten einer [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] im Dialogfeld eine [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] Anwendung.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 Ein weiteres Szenario, die von dieser Klasse unterstützt wird, zum Abrufen einer <xref:System.Windows.Interop.HwndSource> -Objekt aus einem [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> Objekt. Die <xref:System.Windows.Interop.HwndSource> ermöglicht die direkte Verarbeitung von [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] Meldungen über die <xref:System.Windows.Interop.HwndSource.AddHook%2A> Methode. Mithilfe von <xref:System.Windows.Interop.HwndSource> und <xref:System.Windows.Interop.HwndSource.AddHook%2A> anstelle von einem <xref:System.Windows.Window> können Sie weiterhin Nachrichten, die nicht äquivalent oder in Verarbeitung behandeln [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Erstellen Sie eine <xref:System.Windows.Interop.WindowInteropHelper> mit der <xref:System.Windows.Window> Datenquelle aus, und rufen Sie dann <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> auf die <xref:System.Windows.Interop.WindowInteropHelper> zum Abrufen von HWND auf <xref:System.Windows.Interop.HwndSource>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Interop.WindowInteropHelper" /> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Fenster kann es sich um ein Dialogfeld oder ein Fenster, das andernfalls nicht geeignet für das Hosten innerhalb der Grenzen des ist eine [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] Anwendung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the HWND of the window if the HWND has not been created yet.</summary>
        <returns>An <see cref="T:System.IntPtr" /> that represents the HWND.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Methode, wenn Sie Handle (HWND) fenstererstellung aus den tatsächlichen mit der verwalteten trennen möchten <xref:System.Windows.Window>. Dies ist nützlich, wenn Sie einen Automatisierungsclient verfügen, der die Aufgaben ohne die Notwendigkeit, das Anzeigen eines Fensters kann.  
  
 Wenn das systemeigene Fenster noch nicht erstellt wurde, wird diese Methode erstellt das systemeigene Fenster, legt die <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> -Eigenschaft, und gibt den HWND zurück. Wenn das systemeigene Fenster bereits erstellt wurde, wird das Handle des vorhandenen systemeigenen Fensters zurückgegeben.  
  
 Wenn das systemeigene Fenster erstellt wird, resultieren aus dem Aufruf dieser Methode die <xref:System.Windows.Window.SourceInitialized> Ereignis wird ausgelöst.  
  
 Abfragen der <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> -Eigenschaft nach der <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Methode wird aufgerufen, gibt die vorhandene Fensterhandle zurück. Die visuelle Struktur ist nicht angefügt, um das Fenster erst nach der <xref:System.Windows.Window.Show%2A> Methode wird aufgerufen.  
  
 Aufrufen der <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Methode mehr als einmal erstellt keine neue Fensterhandles. Aufrufen der <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Methode, wenn das Handle durch einen Aufruf von bereits erstellt wurde die <xref:System.Windows.Window.Show%2A> Methode erstellt ein neues Fensterhandle nicht. Ein systemeigenes Fenster wird nur erstellt, wenn kein Handle vorhanden ist. wenn die <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Methode wird aufgerufen.  
  
 Eigenschaften, die festgelegt werden, mithilfe der systemeigenen Fenster-APIs über p/invoke möglicherweise nicht in den verwalteten APIs-Fenster angezeigt. Z. B., wenn Sie das Fenster, um die oberste werden mit dem systemeigenen MS_EX_TOPMOST Flag nach dem Festlegen der <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> -Methode aufgerufen wird, die <xref:System.Windows.Window.Topmost%2A> Eigenschaft ist nicht garantiert die systemeigene Einstellung reflektiert.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Erstellen und Zugriff auf ein Fensterhandle. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</summary>
        <value>Der [! Include[TLA#tla_winclient](~/Includes/tlasharptla-WinClient-MD.MD)] das Fensterhandle (HWND).</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Um ein Fensterhandle zu erhalten. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window.</summary>
        <value>Die Besitzer-Fensterhandle (HWND).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können Windows Neuzuordnen des übergeordneten Elements durch Festlegen dieser Eigenschaft. Als "true" ist für allgemeine [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programmieren, sind nicht Neuzuordnen des übergeordneten Elements Windows, die bereits in Verwendung sind.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Abrufen oder Festlegen der Wert dieser Eigenschaft. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>
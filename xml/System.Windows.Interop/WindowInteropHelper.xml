<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4336638cdf2fb1c5cf7d47bec3e51e24af0b3fb" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64994520" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Unterstützt die Zusammenarbeit von WPF- und Wind32-Code.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Member dieser Klasse ermöglichen dem Aufrufer den internen Zugriff auf das [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND und das übergeordnete HWND [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>eines.  Die richtigen Sicherheitsüberprüfungen werden von diesen Mitgliedern durchgeführt.  
  
 Verwenden Sie diese Klasse immer dann, wenn Sie ein spezifischeren Objekt basierend auf seinem HWND benötigen.  
  
 Ein Beispielszenario ist, wenn Sie ein [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Dialogfeld in einer [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] -Anwendung hosten müssen. Initialisieren <xref:System.Windows.Interop.WindowInteropHelper> Sie mit einem [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Window-Objekt für das Dialogfeld. Sie können dann das Handle [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] (HWND) des Fensters aus der <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> -Eigenschaft erhalten und den Besitzer für das [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Fenster mit der <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> -Eigenschaft angeben. Im folgenden Codebeispiel wird veranschaulicht, wie <xref:System.Windows.Interop.WindowInteropHelper> verwendet wird, [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] wenn ein Dialogfeld [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] in einer-Anwendung gehostet wird.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 Ein anderes von dieser Klasse unterstütztes Szenario ist das <xref:System.Windows.Interop.HwndSource> Abrufen eines- [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Objekts aus einem <xref:System.Windows.Window> -Objekt. Ermöglicht <xref:System.Windows.Interop.HwndSource> die direkte Verarbeitung von [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] Nachrichten über <xref:System.Windows.Interop.HwndSource.AddHook%2A> die-Methode. Wenn <xref:System.Windows.Window> Sie <xref:System.Windows.Interop.HwndSource> und <xref:System.Windows.Interop.HwndSource.AddHook%2A> anstelle von verwenden, können Sie weiterhin Nachrichten verarbeiten, für die keine Entsprechung [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]oder Behandlung in vorhanden ist. Erstellen Sie <xref:System.Windows.Interop.WindowInteropHelper> ein mit <xref:System.Windows.Window> der Quelle <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> <xref:System.Windows.Interop.HwndSource>, und rufen Sie dann auf, umvonHWNDzuzugelangen.<xref:System.Windows.Interop.WindowInteropHelper>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">Ein [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]-Fensterobjekt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interop.WindowInteropHelper" />-Klasse für ein angegebenes [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Fenster.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Fenster kann ein Dialogfeld oder ein Fenster sein, das andernfalls nicht zum Hosten innerhalb der Grenzen einer [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] -Anwendung geeignet ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt den HWND des Fensters, wenn der HWND noch nicht erstellt wurde.</summary>
        <returns>Ein <see cref="T:System.IntPtr" />, das den HWND darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> die-Methode, wenn Sie die Erstellung eines Fenster Handles (HWND) von der eigentlichen Anzeige der <xref:System.Windows.Window>verwalteten-Methode trennen möchten. Dies ist nützlich, wenn Sie einen Automatisierungs Client haben, der seine Aufgaben erledigen kann, ohne dass ein Fenster angezeigt werden muss.  
  
 Wenn das native Fenster noch nicht erstellt wurde, erstellt diese Methode das native Fenster, legt die <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> -Eigenschaft fest und gibt das HWND zurück. Wenn das native Fenster bereits erstellt wurde, wird das Handle des vorhandenen nativen Fensters zurückgegeben.  
  
 Wenn das native Fenster aufgrund des Aufrufs dieser Methode erstellt wird, wird das <xref:System.Windows.Window.SourceInitialized> -Ereignis ausgelöst.  
  
 Wenn die- <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Eigenschaft nach dem <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Aufrufen der-Methode abgefragt wird, wird das vorhandene Fenster Handle zurückgegeben. Die visuelle Struktur wird erst dann an das Fenster angefügt, <xref:System.Windows.Window.Show%2A> nachdem die-Methode aufgerufen wurde.  
  
 Wenn die <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> -Methode mehrmals aufgerufen wird, werden keine neuen Fenster Handles erstellt. Wenn die- <xref:System.Windows.Window.Show%2A> Methode aufgerufen wird, wenn das Handle bereits durch einen Aufruf der-Methode erstellt wurde, wird kein neues Fenster Handle erstellt. <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> Ein natives Fenster wird nur erstellt, wenn kein Handle vorhanden ist <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> , wenn die-Methode aufgerufen wird.  
  
 Fenster Eigenschaften, die mithilfe von nativen Windows-APIs über p/aufrufen festgelegt werden, werden möglicherweise nicht in den APIs für verwaltete Fenster angezeigt. Wenn Sie z. b. das Fenster mithilfe des systemeigenen MS_EX_TOPMOST-Flags auf den obersten Wert festlegen <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> <xref:System.Windows.Window.Topmost%2A> , nachdem die-Methode aufgerufen wurde, ist es nicht gewährleistet, dass die-Eigenschaft die native Einstellung widerspiegelt.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">, um ein Fenster Handle zu erstellen und darauf zuzugreifen. Zugehörige Enumeration:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Fensterhandle für ein [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Fenster ab, in dem dieser <see cref="T:System.Windows.Interop.WindowInteropHelper" /> erstellt wird.</summary>
        <value>Das [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Fensterhandle (HWND).</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Abrufen eines Fenster Handles. Zugehörige Enumeration:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Fensterhandle des [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]-Besitzerfensters ab oder legt dieses fest.</summary>
        <value>Das Besitzerfensterhandle (HWND).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können Windows neu zuweisen, indem Sie diese Eigenschaft festlegen. Wie bei der allgemeinen [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] Programmierung, sollten Sie Windows nicht neu zuordnen, die bereits verwendet werden.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">, um diesen Eigenschafts Wert zu erhalten oder festzulegen. Zugehörige Enumeration:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>
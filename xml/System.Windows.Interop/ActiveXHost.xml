<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ActiveXHost.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55f3095a7d2446ff0c3f838a58c443449ae13552c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f3095a7d2446ff0c3f838a58c443449ae13552c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Interop.ActiveXHost">
          <source>Hosts an ActiveX control as an element within Windows Presentation Foundation (WPF) content.</source>
          <target state="translated">Hostet ein ActiveX-Steuerelement als Element in WPF-Inhalt (Windows Presentation Foundation).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.ActiveXHost">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Interop.ActiveXHost&gt;</ph> class to host an ActiveX control as a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.Windows.Interop.ActiveXHost&gt;</ph> -Klasse zum Hosten von ActiveX-Steuerelement und ein <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.ActiveXHost">
          <source>Currently, support is limited to windowed controls.</source>
          <target state="translated">Derzeit ist die Unterstützung auf Steuerelemente im Fenstermodus beschränkt.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
          <source>The parent window.</source>
          <target state="translated">Das übergeordnete Fenster.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
          <source>Creates the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph> window and assigns it to a parent.</source>
          <target state="translated">Erstellt das <ph id="ph1">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph>-Fenster und weist es einem übergeordneten Element zu.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> to the <ph id="ph2">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph> window.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> für das <ph id="ph2">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph>-Fenster.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
          <source>A structure that contains the window handle.</source>
          <target state="translated">Eine Struktur, die das Fensterhandle enthält.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
          <source>Destroys the hosted window.</source>
          <target state="translated">Zerstört das gehostete Fenster.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <ph id="ph2">&lt;see langword="false" /&gt;</ph>, um ausschließlich nicht verwaltete Ressourcen freizugeben.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources that are used by the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Gibt die von <ph id="ph1">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph> verwendeten nicht verwalteten Ressourcen und optional auch die verwalteten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.ActiveXHost.IsDisposed">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="M:System.Windows.Interop.ActiveXHost.Dispose(System.Boolean)" /&gt;</ph> method has been called on the <ph id="ph2">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph> instance.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob die <ph id="ph1">&lt;see cref="M:System.Windows.Interop.ActiveXHost.Dispose(System.Boolean)" /&gt;</ph>-Methode für diese <ph id="ph2">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph>-Instanz aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.ActiveXHost.IsDisposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph> instance has been disposed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die <ph id="ph2">&lt;see cref="T:System.Windows.Interop.ActiveXHost" /&gt;</ph>-Instanz verworfen wurde; andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.ActiveXHost.IsDisposed">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Der Standardwert ist <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.MeasureOverride(System.Windows.Size)">
          <source>The size of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndHost" /&gt;</ph> object.</source>
          <target state="translated">Die Größe des <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndHost" /&gt;</ph>-Objekts.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.MeasureOverride(System.Windows.Size)">
          <source>Returns the size of the window represented by the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndHost" /&gt;</ph> object, as requested by layout engine operations.</source>
          <target state="translated">Gibt in einer für Layoutmoduloperationen verwendbaren Form die Größe des Fensters zurück, das durch das <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndHost" /&gt;</ph>-Objekt dargestellt wird.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.MeasureOverride(System.Windows.Size)">
          <source>The size of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndHost" /&gt;</ph> object.</source>
          <target state="translated">Die Größe des <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndHost" /&gt;</ph>-Objekts.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>The event data to the access key event.</source>
          <target state="translated">Die Ereignisdaten für das Tastenkombinationsereignis.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>The event data reports which key was invoked, and indicate whether the <ph id="ph1">&lt;see cref="T:System.Windows.Input.AccessKeyManager" /&gt;</ph> object that controls the sending of these events also sent this access key invocation to other elements.</source>
          <target state="translated">In den Ereignisdaten wird gemeldet, welche Taste aufgerufen wurde. Zudem wird angegeben, ob das <ph id="ph1">&lt;see cref="T:System.Windows.Input.AccessKeyManager" /&gt;</ph>-Objekt, das das Senden dieser Ereignisse steuert, den Aufruf dieser Tastenkombination auch an andere Elemente gesendet hat.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
          <source>Provides class handling for when an access key that is meaningful for this element is invoked.</source>
          <target state="translated">Stellt die Klassenbehandlung für eine Situation bereit, in der eine Tastenkombination mit Bedeutung für dieses Element aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The event data that describes the property that changed, as well as old and new values.</source>
          <target state="translated">Die Ereignisdaten, die die geänderte Eigenschaft beschreibt, sowie die alten und neuen Werte.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked whenever the effective value of any dependency property on this <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> has been updated.</source>
          <target state="translated">Wird immer dann aufgerufen, wenn der tatsächliche Wert einer Abhängigkeitseigenschaft für diese <ph id="ph1">&lt;see cref="T:System.Windows.FrameworkElement" /&gt;</ph> aktualisiert wurde.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The specific dependency property that changed is reported in the arguments parameter.</source>
          <target state="translated">Welche spezifische Abhängigkeitseigenschaft geändert wird, wird im Argumentparameter gemeldet.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Overrides <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /&gt;</ph>.</source>
          <target state="translated">Überschreibt <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnWindowPositionChanged(System.Windows.Rect)">
          <source>The window's position.</source>
          <target state="translated">Die Position des Fensters.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.ActiveXHost.OnWindowPositionChanged(System.Windows.Rect)">
          <source>Called when the hosted window's position changes.</source>
          <target state="translated">Wird aufgerufen, wenn sich die Position des gehosteten Fensters ändert.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
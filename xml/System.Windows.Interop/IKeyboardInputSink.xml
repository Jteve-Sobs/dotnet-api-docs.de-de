<Type Name="IKeyboardInputSink" FullName="System.Windows.Interop.IKeyboardInputSink">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bee69fc51f6cc38bbee436ed4e0db3a8f30f8560" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36503774" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IKeyboardInputSink" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IKeyboardInputSink" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.IKeyboardInputSink" />
  <TypeSignature Language="VB.NET" Value="Public Interface IKeyboardInputSink" />
  <TypeSignature Language="C++ CLI" Value="public interface class IKeyboardInputSink" />
  <TypeSignature Language="F#" Value="type IKeyboardInputSink = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Stellt für Komponenten eine Tastatursenke bereit, die die Navigation mit der TAB-TASTE, Zugriffstasten und mnemonische Zeichen über Interoperabilitätsgrenzen hinweg und zwischen HWNDs verwaltet. Diese Schnittstelle implementiert die Verwaltung von Tastaturmeldungen in WPF-Win32-Interoperationsszenarios.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tastatursenke behandelt Eingaben von bestimmten Untergruppen des gesamten Eingabemodell Tastatur für [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] und [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], und einige Tastatureingaben verarbeitet und auf HWNDs als die mit dem aktuellen Tastaturfokus weitergeleitet werden können.  
  
 Wenn die Komponente Komponenten enthält und eine Tabulatorreihenfolge, muss auch die Komponente implementieren <xref:System.Windows.Interop.IKeyboardInputSite> und das Verfolgen von welche Komponente den Fokus besitzt.  
  
 Eine Erläuterung der input-Architektur speziell für implementiert [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] interop, finden Sie unter [Windows Forms- und WPF-Interoperabilität Eingabearchitektur](~/docs/framework/wpf/advanced/windows-forms-and-wpf-interoperability-input-architecture.md).  
  
 <xref:System.Windows.Interop.HwndSource> und <xref:System.Windows.Interop.HwndHost> implementieren jeweils die <xref:System.Windows.Interop.IKeyboardInputSink> -Schnittstelle durch explizite Definitionen. Die explizite Definitionen bereitstellen, Standardverhaltensweisen, auch möglich, ggf. durch eine <xref:System.Windows.Interop.IKeyboardInputSink> Schnittstelle umwandeln, der <xref:System.Windows.Interop.HwndSource> oder <xref:System.Windows.Interop.HwndHost>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="T:System.Windows.Interop.HwndHost" />
  </Docs>
  <Members>
    <Member MemberName="HasFocusWithin">
      <MemberSignature Language="C#" Value="public bool HasFocusWithin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasFocusWithin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFocusWithin () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFocusWithin();" />
      <MemberSignature Language="F#" Value="abstract member HasFocusWithin : unit -&gt; bool" Usage="iKeyboardInputSink.HasFocusWithin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Wert ab, mit dem angegeben wird, ob die Senke oder eine der enthaltenen Komponenten den Fokus hat.</summary>
        <returns>
          <see langword="true" />, wenn die Senke oder eine der enthaltenen Komponenten den Fokus hat, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist erforderlich für die Weiterleitung <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> Aufrufe an untergeordneten Komponenten mit dem Fokus innerhalb der <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> Implementierung. Rufen Sie <xref:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin%2A> rekursiv, bis Sie das Maß an bestimmten Fokus und Weiterleiten von erreichen <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> vorhanden.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />
        <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputSite">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.IKeyboardInputSite KeyboardInputSite { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Interop.IKeyboardInputSite KeyboardInputSite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardInputSite As IKeyboardInputSite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Interop::IKeyboardInputSite ^ KeyboardInputSite { System::Windows::Interop::IKeyboardInputSite ^ get(); void set(System::Windows::Interop::IKeyboardInputSite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardInputSite : System.Windows.Interop.IKeyboardInputSite with get, set" Usage="System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.IKeyboardInputSite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf die <see cref="T:System.Windows.Interop.IKeyboardInputSite" />-Schnittstelle des Containers der Komponente ab oder legt diesen Verweis fest.</summary>
        <value>Ein Verweis auf die <see cref="T:System.Windows.Interop.IKeyboardInputSite" />-Schnittstelle des Containers.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft sollte zunächst festgelegt werden, um `null`. Alle Container, die der Komponentenliste die Senke hinzufügt wird legen <xref:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite%2A> bevor andere Methoden aufgerufen werden, und mehrere Male danach festgelegt werden. Legen Sie die Eigenschaft auf `null` vor der Freigabe wieder.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="OnMnemonic">
      <MemberSignature Language="C#" Value="public bool OnMnemonic (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMnemonic(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function OnMnemonic (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool OnMnemonic(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="abstract member OnMnemonic :  * System.Windows.Input.ModifierKeys -&gt; bool" Usage="iKeyboardInputSink.OnMnemonic (msg, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">Die Meldung für die mnemonischen und zugeordneten Daten. Ändern Sie diese Meldungsstruktur nicht. Es wird als Verweis und nur aus Leistungsgründen übergeben.</param>
        <param name="modifiers">Modifizierertasten.</param>
        <summary>Wird aufgerufen, wenn eines der mnemonischen Zeichen (Zugriffstasten) dieser Senke aufgerufen wird.</summary>
        <returns>
          <see langword="true" />, wenn die Nachricht behandelt wurde; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] Nachricht muss WM_CHAR und WM_SYSCHAR, WM_DEADCHAR WM_SYSDEADCHAR sein.  
  
 Wenn die Komponente Komponenten enthalten sind, muss die Nachricht übergeben werden, in der Implementierung durch jeden Aufruf von enthaltenen Komponentennamens <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A> Methode.  
  
 Eine Schnittstelle, die gibt `true` aus <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> kein Aufruf <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>. Implementierungen können auch alle bestimmte Tastenkombination Verarbeitung ausführen <xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A>umgehen und <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
        <altmember cref="T:System.Windows.Input.AccessKeyManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterKeyboardInputSink">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSink (System.Windows.Interop.IKeyboardInputSink sink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSink(class System.Windows.Interop.IKeyboardInputSink sink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterKeyboardInputSink (sink As IKeyboardInputSink) As IKeyboardInputSite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Interop::IKeyboardInputSite ^ RegisterKeyboardInputSink(System::Windows::Interop::IKeyboardInputSink ^ sink);" />
      <MemberSignature Language="F#" Value="abstract member RegisterKeyboardInputSink : System.Windows.Interop.IKeyboardInputSink -&gt; System.Windows.Interop.IKeyboardInputSite" Usage="iKeyboardInputSink.RegisterKeyboardInputSink sink" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.IKeyboardInputSite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sink" Type="System.Windows.Interop.IKeyboardInputSink" />
      </Parameters>
      <Docs>
        <param name="sink">Die <see cref="T:System.Windows.Interop.IKeyboardInputSink" />-Senke der enthaltenen Komponente.</param>
        <summary>Registriert die <see cref="T:System.Windows.Interop.IKeyboardInputSink" />-Schnittstelle einer enthaltenen Komponente.</summary>
        <returns>Die <see cref="T:System.Windows.Interop.IKeyboardInputSite" />-Site der enthaltenen Komponente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Komponenten mit untergeordneten Komponenten sollten interne Sammlungen Standorte verwalten und verwenden Sie diese Methode zum Hinzufügen einer neuen Senke und am neuen Standort zurück. Sie müssen nur die Websitesammlung zu verwalten, da die Senke vom Standort abgerufen werden kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabInto">
      <MemberSignature Language="C#" Value="public bool TabInto (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TabInto(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function TabInto (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TabInto(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member TabInto : System.Windows.Input.TraversalRequest -&gt; bool" Usage="iKeyboardInputSink.TabInto request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Gibt an, ob der Fokus auf den ersten oder letzten Tabstopp festgelegt werden soll.</param>
        <summary>Legt den Fokus auf den ersten oder letzten Tabstopp der Senke fest.</summary>
        <returns>
          <see langword="true" />, wenn der Fokus wie angefordert festgelegt wurde, <see langword="false" />,wenn keine Tabstopps vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.FocusNavigationDirection.First> und <xref:System.Windows.Input.FocusNavigationDirection.Last> sind die einzigen relevanten Werte, die an diese Methode in übergeben werden sollen die <xref:System.Windows.Input.TraversalRequest>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAccelerator">
      <MemberSignature Language="C#" Value="public bool TranslateAccelerator (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TranslateAccelerator(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslateAccelerator (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TranslateAccelerator(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="abstract member TranslateAccelerator :  * System.Windows.Input.ModifierKeys -&gt; bool" Usage="iKeyboardInputSink.TranslateAccelerator (msg, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">Die Meldung und die zugeordneten Daten. Ändern Sie diese Struktur nicht. Es wird als Verweis und nur aus Leistungsgründen übergeben.</param>
        <param name="modifiers">Modifizierertasten.</param>
        <summary>Verarbeitet Tastatureingaben auf der Ebene von Meldungen für gedrückte Tasten.</summary>
        <returns>
          <see langword="true" />, wenn die Meldung durch die Implementierung der Methode behandelt wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Nachricht muss entweder WM_KEYDOWN oder WM_SYSKEYDOWN sein.  
  
 Wenn die Komponente kann nicht die Eingaben Übersetzungen verarbeitet und untergeordneten Komponenten, die Übersetzungen möglicherweise hat, ruft es in der Regel <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> Methode für die untergeordnete Komponente, die den aktuellen Fokus enthält, bevor ein Ergebnis zurückgegeben.  
  
 Wenn die Nachricht nicht unmittelbar behandelt werden kann, Sie können erneut verteilen sie innerhalb der <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> Implementierung, falls erforderlich, und geben Sie `false`.  
  
 Szenario zum Übersetzen von Zugriffstasten Verarbeiten der VK_TAB Keydown-Nachricht und ermittelt, ob der Fokus innerhalb der Komponente aufrufen, legen Sie <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A> an eine untergeordnete Komponente oder Aufrufen <xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A> am übergeordneten Standort da die Sequenz der Registerkarte " die Anfang oder Ende Grenzen erreicht. Bestimmte Komponenten können die Tab-Taste auf diese Weise nicht zu behandeln.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      </Docs>
    </Member>
    <Member MemberName="TranslateChar">
      <MemberSignature Language="C#" Value="public bool TranslateChar (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TranslateChar(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslateChar (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TranslateChar(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="abstract member TranslateChar :  * System.Windows.Input.ModifierKeys -&gt; bool" Usage="iKeyboardInputSink.TranslateChar (msg, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">Die Meldung und die zugeordneten Daten. Ändern Sie diese Struktur nicht. Es wird als Verweis und nur aus Leistungsgründen übergeben.</param>
        <param name="modifiers">Modifizierertasten.</param>
        <summary>Verarbeitet die Eingabemeldungen WM_CHAR, WM_SYSCHAR, WM_DEADCHAR und WM_SYSDEADCHAR, bevor <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> aufgerufen wird.</summary>
        <returns>
          <see langword="true" />, wenn die Meldung verarbeitet wurde und <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> nicht aufgerufen werden soll, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie diese Methode zurückzugebenden implementieren `true`, Eingabearchitektur für die kein Aufruf <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A> für diese Schlüssel Nachricht.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
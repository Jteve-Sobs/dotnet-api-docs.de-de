<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a605e4ebcc96522c2ca769cde87eed8ec1fedfd5" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70568741" /></Metadata><TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Mechanismus zum Abrufen eines Objekts für die Formatierungssteuerung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IFormatProvider> -Schnittstelle stellt ein Objekt bereit, das Formatierungsinformationen für Formatierungs-und Analyse Vorgänge bereitstellt Bei Formatierungs Vorgängen wird der Wert eines Typs in die Zeichen folgen Darstellung dieses Werts konvertiert. Typische Formatierungs Methoden sind `ToString` die Methoden eines Typs sowie. <xref:System.String.Format%2A> Beim Durcharbeiten von Vorgängen wird die Zeichen folgen Darstellung eines Werts in einen Typ mit diesem Wert konvertiert. Typische Methoden für die- `Parse` Methode `TryParse`sind und.  
  
 Die <xref:System.IFormatProvider> -Schnittstelle besteht aus einer einzelnen <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>Methode,. <xref:System.IFormatProvider.GetFormat%2A>ist eine Rückruf Methode: die Methode "Methode" und "Formatierung" wird aufgerufen und <xref:System.Type> übergibt ein-Objekt, das den Objekttyp darstellt, der von der Formatierungs-oder der-Methode erwartet wird. Die <xref:System.IFormatProvider.GetFormat%2A> -Methode ist für die Rückgabe eines Objekts dieses Typs verantwortlich.  
  
 <xref:System.IFormatProvider>Implementierungen werden oft implizit durch Formatierungs-und Methoden Methoden verwendet. Beispielsweise verwendet die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> -Methode implizit eine <xref:System.IFormatProvider> -Implementierung, die die aktuelle Kultur des Systems darstellt. <xref:System.IFormatProvider>Implementierungen können auch explizit durch Methoden angegeben werden, die über einen Parameter vom <xref:System.IFormatProvider>Typ verfügen, <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> z <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. b. und.  
  
 Die .NET Framework umfasst die folgenden drei vordefinierten <xref:System.IFormatProvider> Implementierungen, um kulturspezifische Informationen bereitzustellen, die beim Formatieren oder Auswerten von numerischen Werten und Datums-und Uhrzeitwerten verwendet werden:  
  
-   Die <xref:System.Globalization.NumberFormatInfo> -Klasse, die Informationen bereitstellt, die zum Formatieren von Zahlen verwendet werden, wie z. b. die Währungssymbole, Tausender Trennzeichen und Dezimaltrennzeichen für eine bestimmte Kultur. Informationen zu den vordefinierten Format Zeichenfolgen, die <xref:System.Globalization.NumberFormatInfo> von einem-Objekt erkannt und in numerischen Formatierungs Vorgängen verwendet werden, finden Sie unter [Standard mäßige Zahlenformat](~/docs/standard/base-types/standard-numeric-format-strings.md) Zeichenfolgen und [benutzerdefinierte Zahlen](~/docs/standard/base-types/custom-numeric-format-strings.md)  
  
-   Die <xref:System.Globalization.DateTimeFormatInfo> -Klasse, die Informationen bereitstellt, die zum Formatieren von Datums-und Uhrzeitangaben verwendet werden, z. b. die Datums-und Uhrzeit Trennzeichen für eine bestimmte Kultur oder die Reihenfolge und das Format der Komponenten Jahr, Monat und Tag eines Datums. Informationen zu den vordefinierten Format Zeichenfolgen, die <xref:System.Globalization.DateTimeFormatInfo> von einem-Objekt erkannt und in numerischen Formatierungs Vorgängen verwendet werden, finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Format](~/docs/standard/base-types/custom-date-and-time-format-strings.md)Zeichenfolgen  
  
-   Die <xref:System.Globalization.CultureInfo> -Klasse, die eine bestimmte Kultur darstellt. Die zugehörige- <xref:System.Globalization.NumberFormatInfo> <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo> Methode gibt ein kulturspezifisches-oder-Objekt zurück, abhängig davon, ob das Objekt in einem Formatierungs-oder einem Verarbeitungsvorgang verwendet wird, das Zahlen oder Datumsangaben und Uhrzeiten umfasst. <xref:System.IFormatProvider.GetFormat%2A>  
  
 Der .NET Framework unterstützt auch die benutzerdefinierte Formatierung. Dies umfasst in der Regel die Erstellung einer Formatierungs Klasse, <xref:System.IFormatProvider> die <xref:System.ICustomFormatter>sowohl als auch implementiert. Eine Instanz dieser Klasse wird dann als Parameter an eine Methode übergeben, die einen benutzerdefinierten Formatierungs Vorgang ausführt, z <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> . b. in diesem Beispiel wird eine Darstellung einer solchen benutzerdefinierten Implementierung bereitstellt, die eine Zahl als 12-stellige Kontonummer formatiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, <xref:System.IFormatProvider> wie eine-Implementierung die Darstellung eines Datums-und Uhrzeitwerts ändern kann. In diesem Fall wird ein einzelnes Datum mit <xref:System.Globalization.CultureInfo> Objekten angezeigt, die vier verschiedene Kulturen darstellen.  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 Im folgenden Beispiel wird die Verwendung einer Klasse veranschaulicht, die die <xref:System.IFormatProvider> -Schnittstelle <xref:System.IFormatProvider.GetFormat%2A> und die-Methode implementiert. Die `AcctNumberFormat` -Klasse konvertiert <xref:System.Int64> einen-Wert, der eine Kontonummer darstellt, in eine formatierte 12-stellige Kontonummer. `GetFormat` `formatType` `AcctNumberFormat` `null`Die zugehörige- <xref:System.ICustomFormatter>Methode gibt einen Verweis auf die aktuelle-Instanz zurück, wenn der-Parameter auf eine Klasse verweist, die implementiert; andernfalls wird zurückgegeben. `GetFormat`  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Die Klasse, die <xref:System.IFormatProvider> implementiert, kann dann in einem-Vorgang verwendet werden, der einen Formatierungs-und einen Verarbeitungsvorgang aufruft. Der folgende Code ruft z. b. <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> die-Methode auf, um eine Zeichenfolge zu generieren, die eine formatierte 12-stellige Kontonummer enthält.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
    <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">Gewusst wie: Definieren und Verwenden von benutzerdefinierten numerischen Formatanbietern</related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Ein Objekt, das den Typ des zurückzugebenden Formatierungsobjekts angibt.</param>
        <summary>Gibt ein Objekt zurück, das Formatierungsdienste für den angegebenen Typ bereitstellt.</summary>
        <returns>Eine Instanz des von <paramref name="formatType" /> angegebenen Objekts, wenn die <see cref="T:System.IFormatProvider" />-Implementierung den betreffenden Typ von Objekt angeben kann, andernfalls <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A>ist eine Rückruf Methode, die von Formatierungs-und Methoden Methoden aufgerufen wird, um Informationen über das Format der Eingabe Zeichenfolge in den-oder-Formatierungs Vorgängen oder das Format der Ausgabe Zeichenfolge abzurufen. Im- `formatType` Parameter übergibt die Formatierungs-oder die Methoden Methode den Objekttyp, der zum Ausführen des Vorgangs erforderlich ist. Wenn die <xref:System.IFormatProvider> Implementierung dieses Formatierungs-oder Analyse-Objekt bereitstellen kann, wird dieses Objekt zurückgegeben. Andernfalls wird zurück `null`gegeben.  
  
 Beispielsweise ist das Methoden Argument beim aufzurufen <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> der-Methode ein <xref:System.IFormatProvider> Objekt, das Informationen darüber bereitstellt, wie die Zeichen folgen Darstellung der aktuellen ganzzahligen Instanz formatiert werden kann. Wenn die Laufzeit die-Methode ausführt, ruft Sie <xref:System.IFormatProvider> die- <xref:System.IFormatProvider.GetFormat%2A> Methode des-Objekts auf <xref:System.Type> und übergibt ihr ein <xref:System.Globalization.NumberFormatInfo> -Objekt, das den-Typ darstellt. Wenn das <xref:System.IFormatProvider> -Objekt ein <xref:System.Globalization.NumberFormatInfo> -Objekt bereitstellen kann, wird dieses Objekt zurückgegeben. Wenn kein Objekt dieses Typs bereitgestellt werden kann, wird zurück `null`gegeben.  
  
 Sie können die <xref:System.IFormatProvider> -Schnittstelle und <xref:System.IFormatProvider.GetFormat%2A> die-Methode in Klassen implementieren, die benutzerdefinierte Formatierungs-oder Diagnosedienste bereitstellen. Die <xref:System.IFormatProvider> -Implementierung wird dann als Argument an jede Überladung einer Analyse-oder Formatierungs Methode übergeben, die einen Parameter <xref:System.IFormatProvider>vom Typ aufweist <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>z. <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>b., oder.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung einer Klasse veranschaulicht, die die <xref:System.IFormatProvider> -Schnittstelle <xref:System.IFormatProvider.GetFormat%2A> und die-Methode implementiert. Die `AcctNumberFormat` -Klasse konvertiert <xref:System.Int64> einen-Wert, der eine Kontonummer darstellt, in eine formatierte 12-stellige Kontonummer. `null` `GetFormat` <xref:System.ICustomFormatter> `formatType` Die- Methode gibt einen Verweis auf sich selbst zurück, wenn der-Parameter auf eine Klasse verweist, die implementiert; andernfalls wird zurückgegeben. `GetFormat`  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Eine Instanz der `AcctNumberFormat` -Klasse kann dann als Argument an eine Methode weitergegeben werden, die Formatierungs-oder Analyse-Dienste bereitstellt. Der folgende Code übergibt z. b. `AcctNumberFormat` eine-Klasse <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> an die-Methode, um eine formatierte 12-stellige Kontonummer zu generieren.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

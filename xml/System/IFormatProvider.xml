<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5a4dff04b5617e515e087bc87188865f65b869df" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48594508" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Mechanismus zum Abrufen eines Objekts für die Formatierungssteuerung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IFormatProvider> Schnittstelle stellt ein Objekt, das Formatierungsinformationen bereitstellt, für die Formatierung und Analyse für Vorgänge bereit. Formatierungsvorgängen konvertiert den Wert eines Typs in die Zeichenfolgendarstellung des Werts. Typische Formatierungsmethoden sind die `ToString` Methoden eines Typs als auch <xref:System.String.Format%2A>. Analyseoperationen konvertiert die Zeichenfolgendarstellung eines Werts in einen Typ mit diesem Wert. Typische Analysemethoden sind `Parse` und `TryParse`.  
  
 Die <xref:System.IFormatProvider> Schnittstelle besteht aus einer einzelnen Methode, <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>. <xref:System.IFormatProvider.GetFormat%2A> ist eine Rückrufmethode: die Analyse oder Formatierungsmethode ruft es auf und übergibt eine <xref:System.Type> Objekt, das den Typ des Objekts darstellt, die von der formatierungs- oder Analysemethode erwartet bieten Formatierungsinformationen. Die <xref:System.IFormatProvider.GetFormat%2A> Methode ist dafür verantwortlich, ein Objekt dieses Typs zurückzugeben.  
  
 <xref:System.IFormatProvider> Implementierungen werden häufig implizit durch die Formatierung und Analyse für Methoden verwendet. Z. B. die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> -Methode verwendet implizit eine <xref:System.IFormatProvider> -Implementierung, die aktuelle Kultur des Systems darstellt. <xref:System.IFormatProvider> Implementierungen können auch explizit durch Methoden, die über einen Parameter vom Typ angegeben werden <xref:System.IFormatProvider>, z. B. <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> und <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 .NET Framework enthält die folgenden drei vordefinierten <xref:System.IFormatProvider> Implementierungen, um kulturspezifische Informationen bereitzustellen, die beim Formatieren oder analysieren numerische und Datums-und Uhrzeitwerte verwendet wird:  
  
-   Die <xref:System.Globalization.NumberFormatInfo> -Klasse, die Informationen bereitstellt, die zum Formatieren von Zahlen, wie z. B. Währungssymbole oder Trennzeichen und Dezimaltrennzeichen für eine bestimmte Kultur. Informationen zu den vordefinierten Formatzeichenfolgen erkannt werden, indem eine <xref:System.Globalization.NumberFormatInfo> Objekt aus, und in numerische Formatierung Vorgänge finden Sie in [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Die <xref:System.Globalization.DateTimeFormatInfo> -Klasse, die Informationen bereitstellt, die zum Formatieren von Datumsangaben und Uhrzeiten, z. B. das Datum und Uhrzeit Trennzeichen für Zeitangaben für eine bestimmte Kultur oder die Reihenfolge und das Format des Datum-Jahr, Monat und Tagkomponenten. Informationen zu den vordefinierten Formatzeichenfolgen erkannt werden, indem eine <xref:System.Globalization.DateTimeFormatInfo> Objekt aus, und in numerische Formatierung Vorgänge finden Sie in [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings ](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Die <xref:System.Globalization.CultureInfo> -Klasse, die eine bestimmte Kultur darstellt. Die <xref:System.IFormatProvider.GetFormat%2A> Methodenrückgabe eine kulturspezifische <xref:System.Globalization.NumberFormatInfo> oder <xref:System.Globalization.DateTimeFormatInfo> -Objekt, je nachdem, ob die <xref:System.Globalization.CultureInfo> Objekt wird in ein formatierungs- oder Analysemethode, die Zahlen oder Datumsangaben und Uhrzeiten umfasst verwendet.  
  
 .NET Framework unterstützt auch benutzerdefinierte Formatierung. Dies schließt in der Regel die Erstellung einer Formatierung-Klasse, die beide implementiert <xref:System.IFormatProvider> und <xref:System.ICustomFormatter>. Eine Instanz dieser Klasse wird dann als Parameter übergeben, um eine Methode, die einen benutzerdefinierten Formatierungsvorgang, wie z. B. ausführt <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> im Beispiel wird veranschaulicht, eine solche eine benutzerdefinierte Implementierung die Formatierung einer Zahl als Zahl 12 Ziffern.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie ein <xref:System.IFormatProvider> Implementierung kann die Darstellung eines Werts für Datum und Uhrzeit ändern. In diesem Fall wird ein einzelnes Datum angezeigt, mit <xref:System.Globalization.CultureInfo> Objekte, die vier verschiedene Kulturen darstellen.  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 Das folgende Beispiel veranschaulicht die Verwendung einer Klasse, die implementiert die <xref:System.IFormatProvider> Schnittstelle und die <xref:System.IFormatProvider.GetFormat%2A> Methode. Die `AcctNumberFormat` -Klasse konvertiert einen <xref:System.Int64> -Wert, eine Kontonummer, eine formatierte Kontonummer 12 Ziffern darstellt. Die `GetFormat` Methode gibt einen Verweis auf das aktuelle `AcctNumberFormat` Instanz, wenn die `formatType` Parameter verweist auf eine Klasse, die implementiert <xref:System.ICustomFormatter>ist, andernfalls `GetFormat` gibt `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Implementiert die Klasse, <xref:System.IFormatProvider> kann dann in einem Aufruf einer Formatierung und Analyse von Vorgang verwendet werden. Beispielsweise der folgende code Ruft die <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Methode, um eine Zeichenfolge zu generieren, die eine formatierte Kontonummer 12 Ziffern enthält.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
    <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md">Gewusst wie: Definieren und Verwenden von benutzerdefinierten numerischen Formatanbietern</related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Ein Objekt, das den Typ des zurückzugebenden Formatierungsobjekts angibt.</param>
        <summary>Gibt ein Objekt zurück, das Formatierungsdienste für den angegebenen Typ bereitstellt.</summary>
        <returns>Eine Instanz des von <paramref name="formatType" /> angegebenen Objekts, wenn die <see cref="T:System.IFormatProvider" />-Implementierung den betreffenden Typ von Objekt angeben kann, andernfalls <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A> ist eine Rückrufmethode, die Formatierung und Analyse von Methoden, zum Abrufen von Informationen über das Format der Eingabezeichenfolge beim Analysieren von Vorgängen oder das Format der Ausgabezeichenfolge Aufrufen bei Formatierungsvorgängen. In der `formatType` -Parameter, für das Formatieren oder Analysieren der Methode übergibt den Typ des Objekts, die es benötigt, um diesen Vorgang ausführen. Wenn die <xref:System.IFormatProvider> Implementierung kann bereitstellen formatieren oder Analysieren des Objekts, dieses Objekt gibt. Wenn nicht der Fall, gibt `null`.  
  
 Z. B. im Aufruf der <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> -Methode, um das Methodenargument ist ein <xref:System.IFormatProvider> -Objekt, das enthält Informationen wie die Zeichenfolgendarstellung der aktuellen Instanz für die ganze Zahl formatiert werden kann. Wenn die Runtime die Methode ausgeführt wird, ruft er die <xref:System.IFormatProvider> des Objekts <xref:System.IFormatProvider.GetFormat%2A> Methode und übergibt es ein <xref:System.Type> Objekt, das darstellt der <xref:System.Globalization.NumberFormatInfo> Typ. Wenn die <xref:System.IFormatProvider> -Objekt bereit, kann ein <xref:System.Globalization.NumberFormatInfo> -Objekt, wird das Objekt zurückgegeben. Wenn ein Objekt dieses Typs kann nicht angegeben werden, gibt es `null`.  
  
 Können Sie implementieren die <xref:System.IFormatProvider> Schnittstelle und die <xref:System.IFormatProvider.GetFormat%2A> -Methode in der Klassen, die benutzerdefinierte Formatierung oder Analysedienste bereitstellen. Die <xref:System.IFormatProvider> Implementierung wird dann als Argument an eine Überladung der eine Analyse oder Formatierungsmethode, die einen Parameter vom Typ übergeben <xref:System.IFormatProvider>, z. B. <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung einer Klasse, die implementiert die <xref:System.IFormatProvider> Schnittstelle und die <xref:System.IFormatProvider.GetFormat%2A> Methode. Die `AcctNumberFormat` -Klasse konvertiert einen <xref:System.Int64> -Wert, eine Kontonummer, eine formatierte Kontonummer 12 Ziffern darstellt. Die `GetFormat` Methode gibt einen Verweis auf sich selbst zurück, wenn die `formatType` Parameter verweist auf eine Klasse, die implementiert <xref:System.ICustomFormatter>ist, andernfalls `GetFormat` gibt `null`.  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 Eine Instanz von der `AcctNumberFormat` Klasse kann dann als Argument an eine Methode, die bereitstellt, formatieren oder Analysieren der Dienste übergeben werden. Der folgende code z. B. übergibt eine `AcctNumberFormat` -Klasse der <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Methode, um eine formatierte Kontonummer 12 Ziffern zu generieren.  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ef809a2ab35e0e8acf32b0fecae027f229d4fcc0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39766108" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Enumerator für diese Elemente eines <see cref="T:System.Span`1" />-Elements bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

Die C#- [Foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) der C#-Sprache und die [für jede... Nächste](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Konstrukt in Visual Basic Blendet die Komplexität der Enumeratoren. Anstatt ein direktes Bearbeiten des Enumerators, mit `foreach` oder `For Each...Next` wird empfohlen. 

Zunächst wird der Enumerator vor das erste Element in der <xref:System.Span%601>. An dieser Position ist <xref:System.Span%601.Enumerator.Current> nicht definiert. Rufen Sie <xref:System.Span%601.Enumerator.MoveNext%2A> auf den Enumerator auf das erste Element in der <xref:System.Span%601> vor dem Lesen des Werts von <xref:System.Span%601.Enumerator.Current>.

<xref:System.Span%601.Enumerator.Current> Gibt den gleichen Wert bis <xref:System.Span%601.Enumerator.MoveNext%2A> aufgerufen wird. <xref:System.Span%601.Enumerator.MoveNext%2A> Legt <xref:System.Span%601.Enumerator.Current> zum nächsten Element in der <xref:System.Span%601>.

Wenn <xref:System.Span%601.Enumerator.MoveNext%2A> übergibt am Ende der <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> gibt `false`. Wenn der Enumerator ist auf diesem Status, schlagen nachfolgende Aufrufe <xref:System.Span%601.Enumerator.MoveNext%2A> auch zurückgeben `false` und <xref:System.Span%601.Enumerator.Current> ist nicht definiert. Sie können nicht festgelegt werden <xref:System.Span%601.Enumerator.Current> auf das erste Element in der <xref:System.Span%601> erneut; Sie müssen eine neue Enumeratorinstanz stattdessen erstellen. 

Der Enumerator hat keinen exklusiven Zugriff auf die <xref:System.Span%601>. Darüber hinaus können die zugrunde liegenden Daten, die auf denen die Spanne basiert auch geändert werden. Aus diesem Grund ist die Enumeration einer Spans systemintern keine threadsichere Prozedur. Um während der Enumeration Threadsicherheit zu gewährleisten, müssen Sie eine eigene Synchronisierung implementieren. Der folgende Code wird z. B. eine Racebedingung hat. Es stellt nicht sicher, dass die Spanne vor aufgelistet werden, wird die `ClearContents` Methode ausgeführt wird. Daher wird das zugrunde liegende Array während der Enumeration der Spanne gelöscht:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Wenn Sie Zugriff auf das Array vor der Enumeration der Spans, die überarbeitete Version der synchronisieren die `EnumerateSpan` Methode im folgenden Beispiel wird die `ClearContents` Methode nicht ändern, die zugrunde liegende Spanne Daten während der Enumeration. Beachten Sie, dass im Beispiel wird das zugrunde liegende Array Sperren auf dem die Spanne basiert.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

Im Gegensatz zu einigen anderen Enumerator-Strukturen in .NET die <xref:System.Span%601.Enumerator>:

- Implementiert nicht die <xref:System.Collections.IEnumerator> oder <xref:System.Collections.Generic.IEnumerator%601> Schnittstelle. Grund hierfür ist, <xref:System.Span%601.Enumerator> ist eine [Referenzstruktur](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- Enthält keine `Reset` -Methode, die den Enumerator auf seine anfängliche Position vor dem ersten Element in der Spanne festlegen kann. (Die <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> Methode muss als Teil der Schnittstelle implementiert werden, aber die meisten Implementierungen eine Ausnahme auslösen, oder es keine Implementierung bereitstellen.) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das Element an der aktuellen Position des Enumerators ab.</summary>
        <value>Das Element in der <see cref="T:System.Span`1" /> an der aktuellen Position des Enumerators.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` ist nicht unter eine der folgenden Bedingungen definiert werden: 

- Unmittelbar nach der Enumerator erstellt wird, wird der Enumerator vor dem ersten Element in der Spanne. <xref:System.Span%601.Enumerator.MoveNext%2A> muss aufgerufen werden, um den Enumerator auf das erste Element der Spanne vor dem Lesen des Werts von `Current`.

- Der letzte Aufruf von <xref:System.Span%601.Enumerator.MoveNext%2A> zurückgegebenen `false`, womit das Ende der Spanne. 

`Current` Gibt den gleichen Wert bis <xref:System.Span%601.Enumerator.MoveNext%2A> aufgerufen wird. <xref:System.Span%601.Enumerator.MoveNext%2A> Legt `Current` zum nächsten Element in der Spanne. 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Enumerator auf das nächste Element von <see cref="System.Span`1" /> fest.</summary>
        <returns>`true`, wenn der Enumerator erfolgreich auf das nächste Element festgelegt wurde; `false`, wenn das Ende des Span-Elements überschritten wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Nachdem ein Enumerator erstellt wurde, es befindet sich vor dem ersten Element in der Spanne und der erste Aufruf `MoveNext` setzt den Enumerator auf das erste Element in der Spanne. 

Wenn `MoveNext` übergibt das Ende der Spanne `MoveNext` gibt `false`. Wenn der Enumerator ist auf diesem Status, schlagen nachfolgende Aufrufe `MoveNext` auch zurückgeben `false`.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
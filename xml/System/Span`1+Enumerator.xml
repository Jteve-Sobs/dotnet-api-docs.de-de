<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73a32fba6a760ad9f47ebe565f10c1d4a21d6021" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68541007" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Enumerator für diese Elemente eines <see cref="T:System.Span`1" />-Elements bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

Die C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) - C# Sprache und die [for each-Sprache... Das nächste](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Konstrukt in Visual Basic verbirgt die Komplexität von Enumeratoren. Anstatt den Enumerator direkt zu manipulieren, wird `foreach` die `For Each...Next` Verwendung von oder empfohlen. 

Anfänglich wird der Enumerator vor dem ersten Element in der <xref:System.Span%601>positioniert. An dieser Position ist <xref:System.Span%601.Enumerator.Current> nicht definiert. Sie müssen aufzurufen <xref:System.Span%601.Enumerator.MoveNext%2A> , um den Enumerator vor dem Lesen des Werts <xref:System.Span%601> von <xref:System.Span%601.Enumerator.Current>auf das erste Element in der zu setzen.

<xref:System.Span%601.Enumerator.Current>Gibt den gleichen Wert zurück <xref:System.Span%601.Enumerator.MoveNext%2A> , bis aufgerufen wird. <xref:System.Span%601.Enumerator.MoveNext%2A>legt <xref:System.Span%601.Enumerator.Current> auf das nächste Element in der <xref:System.Span%601>fest.

Wenn <xref:System.Span%601.Enumerator.MoveNext%2A> das Ende <xref:System.Span%601>von übergibt, wird <xref:System.Span%601.Enumerator.MoveNext%2A> zurück `false`gegeben. Wenn sich der Enumerator in diesem Zustand befindet, geben nachfolg <xref:System.Span%601.Enumerator.MoveNext%2A> Ende Aufrufe `false` von <xref:System.Span%601.Enumerator.Current> ebenfalls zurück und sind nicht definiert. Sie können nicht <xref:System.Span%601.Enumerator.Current> <xref:System.Span%601> erneut auf das erste Element im festlegen. stattdessen müssen Sie eine neue Enumeratorinstanz erstellen. 

Der Enumerator hat keinen exklusiven Zugriff auf den <xref:System.Span%601>. Außerdem können die zugrunde liegenden Daten, auf denen die Spanne basiert, geändert werden. Daher ist die Enumeration durch eine Spanne intrinsisch keine Thread sichere Prozedur. Um die Thread Sicherheit während der Enumeration zu gewährleisten, müssen Sie eine eigene Synchronisierung implementieren. Der folgende Code weist z. b. eine Racebedingung auf. Dadurch wird nicht sichergestellt, dass die Spanne vor der Ausführung der `ClearContents` -Methode aufgeführt wird. Folglich wird das zugrunde liegende Array während der Enumeration der Spanne gelöscht:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Wenn Sie den Zugriff auf das Array vor dem Auflisten der Spanne synchronisieren, wie die überarbeitete Version der `EnumerateSpan` Methode im folgenden Beispiel funktioniert, ändert die `ClearContents` -Methode keine zugrunde liegenden spannen Daten während der Enumeration. Beachten Sie, dass im Beispiel das zugrunde liegende Array gesperrt wird, auf dem die Spanne basiert.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

Anders als bei einigen anderen enumeratorstrukturen in .net <xref:System.Span%601.Enumerator>:

- Implementiert nicht die- <xref:System.Collections.IEnumerator> Schnitt <xref:System.Collections.Generic.IEnumerator%601> Stelle oder die-Schnittstelle. Der Grund hierfür <xref:System.Span%601.Enumerator> ist, dass eine [ref-Struktur](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type)ist.

- Enthält keine `Reset` -Methode, die den Enumerator auf seine anfängliche Position vor dem ersten Element in der Spanne festlegen kann. (Die <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> -Methode muss als Teil der-Schnittstelle implementiert werden, aber die meisten Implementierungen lösen entweder eine Ausnahme aus oder stellen keine Implementierung bereit.) 
 
]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das Element an der aktuellen Position des Enumerators ab.</summary>
        <value>Das Element in der <see cref="T:System.Span`1" /> an der aktuellen Position des Enumerators.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current`ist unter einer der folgenden Bedingungen nicht definiert: 

- Unmittelbar nach dem Erstellen des Enumerators wird der Enumerator vor dem ersten Element in der Spanne positioniert. <xref:System.Span%601.Enumerator.MoveNext%2A>muss aufgerufen werden, um den Enumerator vor dem Lesen des Werts von `Current`auf das erste Element der Spanne zu setzen.

- Der letzte <xref:System.Span%601.Enumerator.MoveNext%2A> zurückgegebene `false`Rückruf, der das Ende der Spanne angibt. 

`Current`Gibt den gleichen Wert zurück <xref:System.Span%601.Enumerator.MoveNext%2A> , bis aufgerufen wird. <xref:System.Span%601.Enumerator.MoveNext%2A>legt `Current` auf das nächste Element in der Spanne fest. 

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Enumerator auf das nächste Element von <see cref="System.Span`1" /> fest.</summary>
        <returns><see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element festgelegt wurde; <see langword="false" />, wenn das Ende des Span-Elements überschritten wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Nachdem ein Enumerator erstellt wurde, wird er vor dem ersten Element in der Spanne positioniert, und der erste-Befehl `MoveNext` , um den Enumerator auf das erste Element in der Spanne zu verschieben. 

Wenn `MoveNext` das Ende der Spanne übergibt, wird `MoveNext` zurück `false`gegeben. Wenn sich der Enumerator in diesem Zustand befindet, geben nachfolg `MoveNext` Ende Aufrufe `false`von ebenfalls zurück.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

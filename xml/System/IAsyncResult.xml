<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a19af8d93c2ba2693865f4a17ddc6fbf15edc63b" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83967934" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt den Status eines asynchronen Vorgangs dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IAsyncResult>-Schnittstelle wird von Klassen implementiert, die Methoden enthalten, die asynchron agieren können. Dabei handelt es sich um den Rückgabetyp von Methoden, die einen asynchronen Vorgang initiieren, wie z. b. <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, und an Methoden, die einen asynchronen Vorgang beenden, z. b. <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>. <xref:System.IAsyncResult> Objekte werden auch an Methoden übermittelt, die von <xref:System.AsyncCallback> Delegaten aufgerufen werden, wenn ein asynchroner Vorgang abgeschlossen wird.  
  
 Ein Objekt, das die <xref:System.IAsyncResult>-Schnittstelle unterstützt, speichert Zustandsinformationen für einen asynchronen Vorgang und stellt ein Synchronisierungs Objekt bereit, mit dem Threads signalisiert werden können, wenn der Vorgang abgeschlossen ist.  
  
> [!NOTE]
>  Die <xref:System.Runtime.Remoting.Messaging.AsyncResult>-Klasse ist die Implementierung von <xref:System.IAsyncResult>, die von der `BeginInvoke`-Methode zurückgegeben wird, wenn Sie einen Delegaten verwenden, um eine Methode asynchron aufzurufen.  
  
 Eine ausführliche Beschreibung der Verwendung der <xref:System.IAsyncResult>-Schnittstelle finden Sie im Thema [Asynchrones Aufrufen synchroner Methoden](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously) .  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie Sie die <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A>-Eigenschaft verwenden, um eine <xref:System.Threading.WaitHandle>abzurufen, und wie Sie auf einen asynchronen Aufruf eines Delegaten warten. Das <xref:System.Threading.WaitHandle> wird bei Beendigung des asynchronen Aufrufs signalisiert, und durch Aufrufen der <xref:System.Threading.WaitHandle.WaitOne%2A> -Methode kann darauf gewartet werden.  
  
 Das Beispiel besteht aus zwei Klassen: der-Klasse, die die Methode enthält, die asynchron aufgerufen wird, und der-Klasse, die die `Main` Methode enthält, die den Aufruf durchführt.  
  
 Weitere Informationen und weitere Beispiele zum asynchronen Aufrufen von Methoden mithilfe von Delegaten finden Sie unter [Asynchrones Aufrufen synchroner Methoden](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein benutzerdefiniertes Objekt ab, das einen asynchronen Vorgang qualifiziert oder Informationen darüber enthält.</summary>
        <value>Ein benutzerdefiniertes Objekt, das einen asynchronen Vorgang qualifiziert oder Informationen darüber enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt das-Objekt zurück, das den letzten Parameter der Methode ist, die einen asynchronen Vorgang initiiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A>-Eigenschaft verwendet wird, um Informationen an eine Rückruf Methode zu übergeben. Der letzte Parameter des `BeginInvoke` Methoden Aufrufs ist eine Format Zeichenfolge, die von der Rückruf Methode zum Formatieren einer Ausgabe Meldung verwendet wird.  
  
 Das Beispiel besteht aus zwei Klassen: der-Klasse, die die Methode enthält, die asynchron aufgerufen wird, und der-Klasse, die die `Main` Methode enthält, die den Aufruf durchführt.  
  
 Weitere Informationen zur Funktionsweise dieses Rückruf Beispiels sowie weitere Beispiele zum asynchronen Aufrufen von Methoden mithilfe von Delegaten finden Sie unter [Asynchrones Aufrufen synchroner Methoden](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementieren Sie diese Eigenschaft, um dem Aufrufer eines asynchronen Vorgangs das Abrufen eines Anwendungs definierten Objekts zu ermöglichen, das zu Beginn des Vorgangs angegeben wurde.</para></block>
        <block subset="none" type="usage"><para>Dieses Objekt kann verwendet werden, um Zustandsinformationen für den asynchronen Vorgang an eine von Ihnen bereitgestellte <see cref="T:System.AsyncCallback" /> zu übergeben.</para></block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.Threading.WaitHandle" /> ab, der verwendet wird, um auf den Abschluss eines asynchronen Vorgangs zu warten.</summary>
        <value>Ein <see cref="T:System.Threading.WaitHandle" />, der verwendet wird, um auf den Abschluss eines asynchronen Vorgangs zu warten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert ermöglicht es dem Client, auf den Abschluss eines asynchronen Vorgangs zu warten, anstatt <xref:System.IAsyncResult.IsCompleted%2A> abzufragen, bis der Vorgang abgeschlossen ist. Der Rückgabewert kann verwendet werden, um einen <xref:System.Threading.WaitHandle.WaitOne%2A>-, <xref:System.Threading.WaitHandle.WaitAny%2A>-oder <xref:System.Threading.WaitHandle.WaitAll%2A>-Vorgang auszuführen.  
  
 Der Common Language Runtime stellt eine Reihe von aufnutzbaren Objekten bereit, z. b. <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>und <xref:System.Threading.Mutex>, die alle die Win32-Synchronisierungs primitiven spiegeln.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie Sie die <xref:System.IAsyncResult.AsyncWaitHandle%2A>-Eigenschaft verwenden, um eine <xref:System.Threading.WaitHandle>abzurufen, und wie Sie auf einen asynchronen Aufruf eines Delegaten warten. Das <xref:System.Threading.WaitHandle> wird bei Beendigung des asynchronen Aufrufs signalisiert, und durch Aufrufen der <xref:System.Threading.WaitHandle.WaitOne%2A> -Methode kann darauf gewartet werden.  
  
 Das Beispiel besteht aus zwei Klassen: der-Klasse, die die Methode enthält, die asynchron aufgerufen wird, und der-Klasse, die die `Main` Methode enthält, die den Aufruf durchführt.  
  
 Weitere Informationen und weitere Beispiele zum asynchronen Aufrufen von Methoden mithilfe von Delegaten finden Sie unter [Asynchrones Aufrufen synchroner Methoden](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Das Objekt, das <see cref="T:System.IAsyncResult" /> implementiert, muss die <see cref="T:System.Threading.WaitHandle" /> erst erstellen, wenn die <see cref="P:System.IAsyncResult.AsyncWaitHandle" />-Eigenschaft gelesen wird. Es ist die Wahl des <see cref="T:System.IAsyncResult" /> Implementierers. Wenn der Implementierer jedoch <see cref="P:System.IAsyncResult.AsyncWaitHandle" />erstellt, liegt es in der Verantwortung des Implementierers, das <see cref="T:System.Threading.WaitHandle" /> zu signalisieren, das den warte Vorgang zur richtigen Zeit beendet. Beispielsweise beendet <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> den warte Vorgang im Auftrag des Aufrufers, wenn eine asynchron aufgerufene Methode zurückgibt. Nach der Erstellung sollten <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> aufrechterhalten werden, bis der Benutzer die Methode aufruft, die den asynchronen Vorgang beendet. Zu diesem Zeitpunkt kann das Objekt hinter <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> verworfen werden.</para></block>
        <block subset="none" type="usage"><para>Clients, die auf den Abschluss des Vorgangs warten (im Gegensatz zum Abruf), verwenden diese Eigenschaft zum Abrufen eines Synchronisierungs Objekts, auf das gewartet werden soll.  
  
 <block subset="none" type="note"><para>  
 Wenn Sie die <see langword="BeginInvoke" />-Methode eines Delegaten verwenden, um eine Methode asynchron aufzurufen und ein Wait-Handle von der resultierenden <see cref="T:System.IAsyncResult" />abzurufen, empfiehlt es sich, das Wait-Handle zu schließen, sobald Sie die Verwendung abgeschlossen haben, indem Sie die <see cref="M:System.Threading.WaitHandle.Close" />-Methode aufrufen. Wenn Sie einfach alle Verweise auf das Wait-Handle freigeben, werden Systemressourcen freigegeben, wenn Garbage Collection das Wait-Handle zurückgibt, aber Garbage Collection effizienter funktioniert, wenn verwerfbare Objekte explizit geschlossen oder verworfen werden. Weitere Informationen finden Sie unter den Ausführungen zur Eigenschaft <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />.  
  
</para></block></para></block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der asynchrone Vorgang synchron abgeschlossen wurde.</summary>
        <value><see langword="true" />, wenn der asynchrone Vorgang synchron abgeschlossen wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der synchrone Abschluss des Aufrufes im <xref:System.AsyncCallback> Delegaten erkannt wird, ist es wahrscheinlich, dass der Thread, der den asynchronen Vorgang initiiert hat, der aktuelle Thread ist.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die meisten Implementierer der <see cref="T:System.IAsyncResult" />-Schnittstelle verwenden diese Eigenschaft nicht und sollten <see langword="false" />zurückgeben. Beginnend mit dem [!INCLUDE[net_v45](~/includes/net-v45-md.md)]wird eine mit der <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />-Methode erstellte Aufgabe nicht vervollständigt, wenn diese Eigenschaft nicht ordnungsgemäß implementiert wird. Weitere Informationen finden Sie [unter Anwendungs Kompatibilität in 4,5](/dotnet/framework/migration-guide/application-compatibility-in-the-net-framework-4-5).</para></block>
        <block subset="none" type="usage"><para>Verwenden Sie diese Eigenschaft, um zu bestimmen, ob der asynchrone Vorgang synchron abgeschlossen wurde. Diese Eigenschaft kann z. b. <see langword="true" /> für einen asynchronen e/a-Vorgang zurückgeben, wenn die e/a-Anforderung klein war.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der asynchrone Vorgang abgeschlossen wurde.</summary>
        <value><see langword="true" />, wenn der Vorgang abgeschlossen ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft `true`ist, können Sie davon ausgehen, dass es sicher ist, alle Ressourcen zu verwerfen, die Sie für die Verwendung durch den asynchronen Vorgang zuordnen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die <xref:System.IAsyncResult.IsCompleted%2A>-Eigenschaft der-<xref:System.IAsyncResult> verwendet wird, um zu ermitteln, wann ein asynchroner-Vorgang abgeschlossen wird. In diesem Fall erfolgt der asynchrone Aufruf mithilfe der `BeginInvoke`-Methode eines Delegaten. Sie können die <xref:System.IAsyncResult.IsCompleted%2A>-Eigenschaft verwenden, um die Vervollständigung abzufragen, wenn Sie den asynchronen Aufrufs von einem Thread ausführen, der die Benutzeroberfläche nutzt. Durch das Abrufen der Beendigung kann die Verarbeitung vom aufrufenden Thread fortgesetzt werden, während der asynchrone Aufruf für einen <xref:System.Threading.ThreadPool> -Thread ausgeführt wird.  
  
 Das Beispiel besteht aus zwei Klassen: der-Klasse, die die Methode enthält, die asynchron aufgerufen wird, und der-Klasse, die die `Main` Methode enthält, die den Aufruf durchführt.  
  
 Weitere Informationen und weitere Beispiele zum asynchronen Aufrufen von Methoden mithilfe von Delegaten finden Sie unter [Asynchrones Aufrufen synchroner Methoden](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementierer geben in der Regel den Wert eines privaten Felds oder internen Tests als Wert dieser Eigenschaft zurück.</para></block>
        <block subset="none" type="usage"><para>Clients, die den Vorgangs Statusabfragen (im Gegensatz zum warten auf ein Synchronisierungs Objekt) verwenden diese Eigenschaft, um den Status des Vorgangs zu bestimmen.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

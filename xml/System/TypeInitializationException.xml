<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="30abbf6a789f74f57eff55cfa894c130f54e3446" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68398238" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Ausnahme, die als Wrapper um die von dieser Klasseninitialisierung ausgelöste Ausnahme ausgelöst wird. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Initialisierung eines Typs durch eine Klasseninitialisierung fehlschlägt, wird eine <xref:System.TypeInitializationException> erstellt. Dieser Ausnahme wird dann ein Verweis auf die Ausnahme übergeben, die durch die Klasseninitialisierung des Typs ausgelöst wurde. Die <xref:System.Exception.InnerException%2A> -Eigenschaft <xref:System.TypeInitializationException> von enthält die zugrunde liegende Ausnahme.  
  
 In der Regel <xref:System.TypeInitializationException> spiegelt die Ausnahme eine katastrophale Bedingung wider (die Laufzeit kann einen Typ nicht instanziieren), wodurch verhindert wird, dass die Anwendung fortgesetzt wird.  In den meisten Fällen <xref:System.TypeInitializationException> wird der als Reaktion auf eine Änderung in der Ausführungsumgebung der Anwendung ausgelöst. Folglich sollte die Ausnahme nicht in einem `try` / `catch` -Block behandelt werden, außer möglicherweise für die Problembehandlung von Debugcode. Stattdessen sollte die Ursache der Ausnahme untersucht und entfernt werden.  
  
 <xref:System.TypeInitializationException>verwendet das HRESULT-COR_E_TYPEINITIALIZATION, das den Wert 0x80131534 aufweist.  
  
 Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.TypeInitializationException>, finden Sie unter den <xref:System.TypeInitializationException.%23ctor%2A> Konstruktoren.  
  
 In den folgenden Abschnitten werden einige Situationen beschrieben, in denen <xref:System.TypeInitializationException> eine-Ausnahme ausgelöst wird.  
  
- [Statische Konstruktoren und die TypeInitializationException-Ausnahme](#Static)   
- [Vergleichs Timeout Werte für reguläre Ausdrücke](#Timeout)   
- [Kalender und Kultur Daten](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a>Statische Konstruktoren und TypeInitializationException

 Wenn ein statischer Konstruktor vorhanden ist, wird er automatisch von der Laufzeit aufgerufen, bevor eine neue Instanz eines Typs erstellt wird. Statische Konstruktoren können von einem Entwickler explizit definiert werden. Wenn ein statischer Konstruktor nicht explizit definiert ist, erstellen Compiler automatisch einen, um beliebige `static` (in C#) oder `Shared` (in Visual Basic) Member des Typs zu initialisieren.  Weitere Informationen zu statischen Konstruktoren finden Sie unter [statische Konstruktoren](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).  
  
 In den meisten Fällen <xref:System.TypeInitializationException> wird eine-Ausnahme ausgelöst, wenn ein statischer Konstruktor einen Typ nicht instanziieren kann.  Die <xref:System.Exception.InnerException%2A> -Eigenschaft gibt an, warum der statische Konstruktor den Typ nicht instanziieren konnte. Einige der häufigsten Gründe für eine <xref:System.TypeInitializationException> -Ausnahme sind:  
  
- Eine nicht behandelte Ausnahme in einem statischen Konstruktor.  
 
   Wenn in einem statischen Konstruktor eine Ausnahme ausgelöst wird, wird diese Ausnahme in eine <xref:System.TypeInitializationException> -Ausnahme umgerückt, und der-Typ kann nicht instanziiert werden.  
  
   Diese Ausnahme ist häufig schwer zu beheben, da statische Konstruktoren nicht immer explizit im Quellcode definiert werden. Ein statischer Konstruktor ist in einem Typ vorhanden, wenn Folgendes vorliegt:  
  
   -   Es wurde explizit als Member eines Typs definiert.  
  
   -   Der Typ verfügt `static` über ( C#in) `Shared` oder (in Visual Basic) Variablen, die in einer einzelnen Anweisung deklariert und initialisiert werden. In diesem Fall generiert der sprach Compiler einen statischen Konstruktor für den Typ. Sie können ihn mithilfe eines Hilfsprogramms wie [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md)überprüfen. Wenn z. b. C# der-und VB-Compiler das folgende Beispiel kompiliert, generieren Sie die Il für einen statischen Konstruktor, der in etwa wie folgt aussieht:  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   Das folgende Beispiel zeigt eine <xref:System.TypeInitializationException> -Ausnahme, die von einem vom Compiler generierten statischen Konstruktor ausgelöst wird. Die `Example` -Klasse enthält `static` ein- C#Feld ( `Shared` in) oder (in Visual Basic) `TestClass` vom Typ, das instanziiert wird, indem der Wert 3 an den zugehörigen Klassenkonstruktor übergeben wird.  Dieser Wert ist jedoch unzulässig. nur die Werte 0 oder 1 sind zulässig. Folglich löst der `TestClass` Klassenkonstruktor einen <xref:System.ArgumentOutOfRangeException>aus. Da diese Ausnahme nicht behandelt wird, wird Sie in eine <xref:System.TypeInitializationException> -Ausnahme umschließt.  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   Beachten Sie, dass in der Ausnahme Meldung Informationen <xref:System.Exception.InnerException%2A> zur-Eigenschaft angezeigt werden.  
  
- Eine fehlende Assembly oder Datendatei  
 
   Eine häufige Ursache für eine <xref:System.TypeInitializationException> -Ausnahme ist, dass eine Assembly oder Datendatei, die in den Entwicklungs-und Testumgebungen einer Anwendung vorhanden war, in der Laufzeitumgebung fehlt. Beispielsweise können Sie das folgende Beispiel mit der folgenden Befehlszeilen Syntax in eine Assembly mit dem Namen Missing1a. dll kompilieren:  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   Anschließend können Sie das folgende Beispiel in eine ausführbare Datei mit dem Namen Missing1. exe kompilieren, indem Sie einen Verweis auf Missing1a. dll einschließen:  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   Wenn Sie jedoch Missing1a. dll umbenennen, verschieben oder löschen und das Beispiel ausführen, wird eine <xref:System.TypeInitializationException> -Ausnahme ausgelöst und die im Beispiel gezeigte Ausgabe angezeigt.  Beachten Sie, dass die Ausnahme Meldung Informationen über <xref:System.Exception.InnerException%2A> die Eigenschaft enthält. In diesem Fall handelt es sich bei der inneren <xref:System.IO.FileNotFoundException> Ausnahme um eine, die ausgelöst wird, da die Runtime die abhängige Assembly nicht finden kann.  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  In diesem Beispiel wurde eine <xref:System.TypeInitializationException> -Ausnahme ausgelöst, weil eine Assembly nicht geladen werden konnte. Die Ausnahme kann auch ausgelöst werden, wenn ein statischer Konstruktor versucht, eine Datendatei zu öffnen, z. b. eine Konfigurationsdatei, eine XML-Datei oder eine Datei mit serialisierten Daten, die nicht gefunden werden kann.  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>Vergleichs Timeout Werte für reguläre Ausdrücke  
 Sie können den Standard Timeout Wert für einen Vorgang eines Musters für reguläre Ausdrücke auf Anwendungs Basis festlegen. Das Timeout wird durch einen definiert, der <xref:System.TimeSpan> einen Wert für die Eigenschaft "REGEX_DEFAULT_MATCH_TIMEOUT" der <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> Methode angibt. Das Zeitintervall muss ein gültiges <xref:System.TimeSpan> -Objekt sein, das größer als 0 (null) und kleiner als ungefähr 24 Tage ist. Wenn diese Anforderungen nicht erfüllt werden, löst der Versuch, den Standard Timeout Wert festzulegen <xref:System.ArgumentOutOfRangeException>, eine aus, die wiederum in eine <xref:System.TypeInitializationException> -Ausnahme umschließt.  
  
 Das folgende Beispiel zeigt das <xref:System.TypeInitializationException> -Objekt, das ausgelöst wird, wenn der Wert, der der Eigenschaft "REGEX_DEFAULT_MATCH_TIMEOUT" zugewiesen ist, ungültig ist. Um die Ausnahme auszuschließen, legen Sie die Eigenschaft "REGEX_DEFAULT_MATCH_TIMEOUT" auf <xref:System.TimeSpan> einen Wert fest, der größer als 0 (null) und kleiner als ungefähr 24 Tage ist.  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>Kalender und Kultur Daten  
 Wenn Sie versuchen, einen Kalender zu instanziieren, aber die Laufzeit das <xref:System.Globalization.CultureInfo> Objekt, das diesem Kalender entspricht, nicht instanziieren kann, wird eine <xref:System.TypeInitializationException> -Ausnahme ausgelöst. Diese Ausnahme kann durch die folgenden kalenderklassenkonstruktoren ausgelöst werden:  
  
-   Der Parameter lose Konstruktor der <xref:System.Globalization.JapaneseCalendar> -Klasse.  
  
-   Der Parameter lose Konstruktor der <xref:System.Globalization.KoreanCalendar> -Klasse.  
  
-   Der Parameter lose Konstruktor der <xref:System.Globalization.TaiwanCalendar> -Klasse.  
  
 Da kulturelle Daten für diese Kulturen auf allen Systemen verfügbar sein sollten, sollte diese Ausnahme in seltenen Fällen auftreten.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen in .NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">Der voll gekennzeichnete Name des Typs, der nicht initialisiert werden kann.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter kein NULL-Verweis ist (<see langword="Nothing" /> in Visual Basic), wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TypeInitializationException" />-Klasse mit einer angegebenen Fehlermeldung, dem angegebenen Typnamen und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ausnahme, die als direktes Ergebnis einer vorhergehenden Ausnahme ausgelöst wird, kann in der <xref:System.Exception.InnerException%2A>-Eigenschaft über einen Verweis auf die vorhergehende Ausnahme verfügen. Die <xref:System.Exception.InnerException%2A>-Eigenschaft gibt denselben Wert zurück, der an den Konstruktor übergeben wurde, bzw. einen NULL-Verweis (`Nothing` in Visual Basic), wenn die <xref:System.Exception.InnerException%2A>-Eigenschaft nicht den Wert für die innere Ausnahme für den Konstruktor bereitstellt.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.TypeInitializationException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Der Verweis auf die interne Ausnahme.|  
|<xref:System.Exception.Message%2A>|Die lokalisierte Zeichenfolge mit der Fehlermeldung.|  
|<xref:System.TypeInitializationException.TypeName%2A>|Der Name des Typs.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen in .NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Die <see cref="T:System.Runtime.Serialization.SerializationInfo" />, die die serialisierten Objektdaten für die ausgelöste Ausnahme enthält.</param>
        <param name="context">Der <see cref="T:System.Runtime.Serialization.StreamingContext" />, der die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
        <summary>Legt das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit dem Typnamen und zusätzlichen Informationen zur Ausnahme fest.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den voll gekennzeichneten Namen des Typs ab, der nicht initialisiert werden kann.</summary>
        <value>Der voll gekennzeichnete Name des Typs, der nicht initialisiert werden kann.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="DateTime" FullName="System.DateTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bb5bbc558cc9ebe59b0eb2fda9d5b9e07b959687" /><Meta Name="ms.sourcegitcommit" Value="385ff23cc00fe9aa1c93460c62603b45c2041d0b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/22/2019" /><Meta Name="ms.locfileid" Value="74388781" /></Metadata><TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an instant in time, typically expressed as a date and time of day.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## <a name="quick-links-to-example-code"></a>Quick Links zum Beispielcode

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Dieser Artikel enthält mehrere Beispiele, in denen der `DateTime`-Typ verwendet wird:

**Initialisierungs Beispiele**      
- [Aufrufen eines Konstruktors](#initialization-01)
- [Aufrufen des impliziten Parameter losen Konstruktors](#initialization-02)
- [Zuweisung von Rückgabewert](#initialization-03)
- [Eine Zeichenfolge, die ein Datum und eine Uhrzeit darstellt, wird verarbeitet.](#initialization-04)
- [Visual Basic Syntax zum Initialisieren eines Datums und einer Uhrzeit](#initialization-05)

**Formatieren von `DateTime` Objekten als Zeichen folgen**  
- [Standardformat für Datum/Uhrzeit verwenden](#formatting-01)
- [Formatieren eines Datums und einer Uhrzeit mit einer bestimmten Kultur](#formatting-02)
- [Formatieren eines Datums Zeitraums mithilfe einer standardmäßigen oder benutzerdefinierten Format Zeichenfolge](#formatting-03)
- [Geben Sie eine Format Zeichenfolge und eine bestimmte Kultur an.](#formatting-04)
- [Formatieren eines Datums Zeitraums mit dem ISO 8601-Standard für Webdienste](#formatting-05)

**Als `DateTime` Objekte werden Zeichen folgen verarbeitet.**  
- [Verwenden Sie `Parse` oder `TryParse`, um eine Zeichenfolge in ein Datum und eine Uhrzeit zu konvertieren.](#parsing-01)
- [Verwenden Sie `ParseExact` oder `TryParseExact`, um eine Zeichenfolge in einem bekannten Format zu konvertieren.](#parsing-02)
- [Konvertieren der Zeichen folgen Darstellung von ISO 8601 in ein Datum und eine Uhrzeit](#parsing-03)

**`DateTime` Auflösung**  
- [Untersuchen der Auflösung von Datums-und Uhrzeitwerten](#resolution-01)
- [Vergleichen von Gleichheit innerhalb einer Toleranz](#comparison-01)

**Kultur und Kalender**  
- [Anzeigen von Datums-und Uhrzeitwerten mithilfe kulturspezifischer Kalender](#calendars-01)
- [Zeichen folgen gemäß einem kulturspezifischen Kalender analysieren](#calendars-02)
- [Initialisieren eines Datums und einer Uhrzeit aus dem Kalender einer bestimmten Kultur](#calendars-03)
- [Zugreifen auf Datums-und Uhrzeit Eigenschaften mit dem Kalender einer bestimmten Kultur](#calendars-04)
- [Abrufen der Woche des Jahres mit kulturspezifischen Kalendern](#calendars-05)

**Persistenz**  
- [Beibehalten von Datums-und Uhrzeitwerten als Zeichen folgen in der lokalen Zeitzone](#persistence-01)
- [Beibehalten von Datums-und Uhrzeitwerten als Zeichen folgen in einem invarianten Format der Kultur und Uhrzeit](#persistence-02)
- [Beibehalten von Datums-und Uhrzeitwerten als ganze Zahlen](#persistence-03)
- [Beibehalten von Datums-und Uhrzeitwerten mithilfe der `XmlSerializer`](#persistence-04)
- [Beibehalten von Datums-und Uhrzeitwerten mithilfe der `BinaryFormatter`](#persistence-05)
- [Beibehalten von Datums-und Uhrzeitwerten mit Zeit Zonendaten](#persistence-06)

## <a name="quick-links-to-remarks-topics"></a>Quick Links zu hinweisen Themen.

Dieser Abschnitt enthält Themen für viele gängige Verwendungsmöglichkeiten der `DateTime`-Struktur:
  
- [Initialisieren eines `DateTime` Objekts](#initializing-a-datetime-object)
- [DateTime-Werte und ihre Zeichen folgen Darstellungen](#datetime-values-and-their-string-representations)
- [Die DateTime-Werte aus Zeichen folgen werden ausgewertet.](#parsing-datetime-values-from-strings)
- [DateTime-Werte](#datetime-values)
- [DateTime-Vorgänge](#datetime-operations)
- [DateTime-Auflösung](#datetime-resolution)
- [DateTime-Werte und Kalender](#datetime-values-and-calendars)
- [Beibehalten von DateTime-Werten](#persisting-datetime-values)
- ["DateTime" und "TimeSpan"](#datetime-vs-timespan)
- [Vergleichen von Gleichheit innerhalb der Toleranz](#comparing-for-equality-within-tolerance)
- [Überlegungen zu COM-Interop](#com-interop-considerations)
   
Der <xref:System.DateTime> Werttyp stellt Datumsangaben und Uhrzeiten mit Werten im Bereich von 00:00:00 (Mitternacht), dem 1. Januar 0001 (allgemeiner Zeitraum) bis 11:59:59 Uhr, 31. Dezember 9999 n. Chr. dar. unserer Zeitrechnung im gregorianischen Kalender.  
  
Uhrzeitwerte werden in 100-Nanosecond-Einheiten gemessen, die als Ticks bezeichnet werden. Ein bestimmtes Datum ist die Anzahl der Ticks seit 12:00 Mitternacht, 1. Januar 0001 n. Chr. unserer Zeitrechnung im <xref:System.Globalization.GregorianCalendar> Kalender. Die Zahl schließt Ticks aus, die durch Schaltsekunden hinzugefügt würden. Ein Ticks-Wert von 31241376000000000l stellt z. b. das Datum Freitag, den 01. Januar 0100 12:00:00 Mitternacht dar. Ein <xref:System.DateTime> Wert wird immer im Kontext eines expliziten oder Standard Kalenders ausgedrückt.  
  
> [!NOTE]
>  Wenn Sie mit einem Ticks-Wert arbeiten, den Sie in ein anderes Zeitintervall konvertieren möchten (z. b. Minuten oder Sekunden), sollten Sie den <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>-, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>-, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>-, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>-oder <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> Konstanten verwenden, um die Konvertierung auszuführen. Um z. b. die Anzahl der Sekunden, die durch eine angegebene Anzahl von Ticks dargestellt wird, der <xref:System.DateTime.Second%2A> Komponente eines <xref:System.DateTime> Werts hinzuzufügen, können Sie den Ausdruck `dateValue.Second + nTicks/Timespan.TicksPerSecond`verwenden.  

Sie können die Quelle für den gesamten Satz von Beispielen in diesem Artikel entweder in [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) oder [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) im docs-Repository auf GitHub anzeigen.

> [!NOTE]
>  Eine Alternative zur <xref:System.DateTime> Struktur zum Arbeiten mit Datums-und Uhrzeitwerten in bestimmten Zeitzonen ist die <xref:System.DateTimeOffset> Struktur. Die <xref:System.DateTimeOffset> Struktur speichert Datums-und Uhrzeit Informationen in einem privaten <xref:System.DateTime> Feld und die Anzahl der Minuten, um die dieses Datum und die Uhrzeit von UTC in einem privaten <xref:System.Int16> Feld abweicht. Dies ermöglicht es einer <xref:System.DateTimeOffset> Wert entsprechend der die Zeit in einer bestimmten Zeitzone, während eine <xref:System.DateTime> Wert kann nur UTC und der lokalen Zeitzone eindeutig darstellen. Eine Erläuterung dazu, wann die <xref:System.DateTime> Struktur oder die <xref:System.DateTimeOffset> Struktur beim Arbeiten mit Datums-und Uhrzeitwerten verwendet werden sollte, finden Sie unter [auswählen zwischen DateTime, DateTimeOffset, TimeSpan und TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Initialisieren eines DateTime-Objekts  

Sie können einem neuen `DateTime` Wert auf viele verschiedene Arten einen Anfangswert zuweisen:

- Aufrufen eines Konstruktors, entweder für den Fall, dass Sie Argumente für Werte angeben oder den impliziten Parameter losen Konstruktor verwenden.
- Zuweisen einer `DateTime` zum Rückgabewert einer Eigenschaft oder Methode.
- Das Auswerten eines `DateTime` Werts aus der Zeichen folgen Darstellung.
- Verwenden Visual Basic spezifischer Sprachfunktionen zum Instanziieren einer `DateTime`. 

Die folgenden Code Ausschnitte zeigen Beispiele für jede:

#### <a name="invoke-constructors"></a>Konstruktoren aufrufen

Sie können eine der über Ladungen des <xref:System.DateTime> Konstruktors aufzurufen, die Elemente des Datums-und Uhrzeitwerts angeben (z. b. Jahr, Monat, Tag oder Anzahl der Ticks). Der folgende Code erstellt ein bestimmtes Datum mit dem <xref:System.DateTime>-Konstruktor, der Jahr, Monat, Tag, Stunde, Minute und Sekunde angibt.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Sie rufen den impliziten Parameter losen Konstruktor der `DateTime` Struktur auf, wenn ein `DateTime` mit seinem Standardwert initialisiert werden soll. (Ausführliche Informationen über den impliziten Parameter losen Konstruktor eines Werttyps finden Sie unter [Werttypen](~/docs/csharp/language-reference/keywords/value-types.md).) Einige Compiler unterstützen auch das Deklarieren eines <xref:System.DateTime> Werts ohne explizites Zuweisen eines Werts. Wenn Sie einen Wert ohne explizite Initialisierung erstellen, ergibt sich auch der Standardwert. Das folgende Beispiel veranschaulicht den <xref:System.DateTime> impliziten Parameter losen Konstruktor in C# und Visual Basic sowie eine <xref:System.DateTime>-Deklaration ohne Zuweisung in Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Zuweisen eines berechneten Werts

Sie können dem <xref:System.DateTime>-Objekt einen Datums-und Uhrzeitwert zuweisen, der von einer Eigenschaft oder Methode zurückgegeben wird. Im folgenden Beispiel werden das aktuelle Datum und die aktuelle Uhrzeit, die aktuelle koordinierte Weltzeit (UTC) und das aktuelle Datum drei neuen <xref:System.DateTime> Variablen zugewiesen.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Eine Zeichenfolge, die einen DateTime-Wert darstellt, wird verarbeitet

Die Methoden <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>und <xref:System.DateTime.TryParseExact%2A> konvertieren eine Zeichenfolge in den entsprechenden Datums-und Uhrzeitwert. In den folgenden Beispielen werden die Methoden <xref:System.DateTime.Parse%2A> und <xref:System.DateTime.ParseExact%2A> verwendet, um eine Zeichenfolge zu analysieren und in einen <xref:System.DateTime> Wert zu konvertieren. Das zweite Format verwendet ein vom [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) -Standard unterstütztes Formular für eine, die das Datum und die Uhrzeit im Zeichen folgen Format darstellt. Diese Standarddarstellung wird häufig zum Übertragen von Datumsinformationen in Webdiensten verwendet.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

Die Methoden <xref:System.DateTime.TryParse%2A> und <xref:System.DateTime.TryParseExact%2A> geben an, ob eine Zeichenfolge eine gültige Darstellung eines <xref:System.DateTime> Werts ist, und wenn dies der Fall ist, wird die Konvertierung durchführt.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sprachspezifische Syntax für Visual Basic

Die folgende Visual Basic-Anweisung initialisiert einen neuen <xref:System.DateTime>-Wert.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>DateTime-Werte und ihre Zeichen folgen Darstellungen  

Intern werden alle <xref:System.DateTime> Werte als die Anzahl der Ticks (die Anzahl der 100-Nanosekunden-Intervalle) dargestellt, die 12:00:00 seit dem 1. Januar 0001, 1. Januar 0001, verstrichen sind. Der tatsächliche <xref:System.DateTime> Wert ist unabhängig von der Art und Weise, in der dieser Wert angezeigt wird, wenn er angezeigt wird. Das Aussehen eines <xref:System.DateTime> Werts ist das Ergebnis eines Formatierungs Vorgangs, bei dem ein Wert in seine Zeichen folgen Darstellung konvertiert wird.  
  
Die Darstellung von Datums-und Uhrzeitwerten hängt von der Kultur, den internationalen Standards, den Anwendungsanforderungen und den persönlichen Vorlieben ab. Die <xref:System.DateTime> Struktur bietet Flexibilität beim Formatieren von Datums-und Uhrzeitwerten durch über Ladungen von <xref:System.DateTime.ToString%2A>. Die Standard <xref:System.DateTime.ToString?displayProperty=nameWithType> Methode gibt die Zeichen folgen Darstellung eines Datums-und Uhrzeitwerts zurück, indem das kurze Datums-und lange Zeitmuster der aktuellen Kultur verwendet wird. Im folgenden Beispiel wird die Standard <xref:System.DateTime.ToString?displayProperty=nameWithType>-Methode verwendet. Es zeigt das Datum und die Uhrzeit unter Verwendung des kurzen Datums-und langen Zeit Musters für die aktuelle Kultur an. Die Kultur "en-US" ist die aktuelle Kultur auf dem Computer, auf dem das Beispiel ausgeführt wurde.  
  
<a name="formatting-01"></a> [!code-csharp[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Möglicherweise müssen Sie Datumsangaben in einer bestimmten Kultur formatieren, um Webszenarien zu unterstützen, in denen sich der Server in einer anderen Kultur als der Client befinden kann. Sie geben die Kultur mithilfe der <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>-Methode an, um die Darstellung der kurzen Datums-und uhrzeitanzeit in einer bestimmten Kultur zu erstellen. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>-Methode verwendet, um das Datum und die Uhrzeit mit dem Muster für kurze Datums-und lange Zeit für die fr-FR-Kultur anzuzeigen.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Andere Anwendungen erfordern möglicherweise andere Zeichen folgen Darstellungen eines Datums. Die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>-Methode gibt die durch einen Standard-oder benutzerdefinierten Format Bezeichner definierte Zeichen folgen Darstellung unter Verwendung der Formatierungs Konventionen der aktuellen Kultur zurück. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>-Methode verwendet, um das vollständige Datums-und Uhrzeit Muster für die Kultur "en-US" anzuzeigen, die aktuelle Kultur auf dem Computer, auf dem das Beispiel ausgeführt wurde.  
  
<a name="formatting-03"></a> [!code-csharp[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Schließlich können Sie sowohl die Kultur als auch das Format mit der <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-Methode angeben. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-Methode verwendet, um das vollständige Datums-und Uhrzeit Muster für die fr-FR-Kultur anzuzeigen.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

Die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Überladung kann auch mit einer benutzerdefinierten Format Zeichenfolge verwendet werden, um andere Formate anzugeben. Im folgenden Beispiel wird gezeigt, wie eine Zeichenfolge mit dem Standardformat [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formatiert werden kann, das häufig für Webdienste verwendet wird. Das ISO 8601-Format weist keine entsprechende Standardformat Zeichenfolge auf.

<a name="formatting-05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Weitere Informationen zum Formatieren <xref:System.DateTime> Werten finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Die DateTime-Werte aus Zeichen folgen werden ausgewertet.

Bei der-Verarbeitung wird die Zeichen folgen Darstellung eines Datums und einer Uhrzeit in einen <xref:System.DateTime> Wert konvertiert. Datums-und Uhrzeit Zeichenfolgen haben in der Regel zwei verschiedene Verwendungen in Anwendungen:  
  
-   Ein Datum und eine Uhrzeit haben eine Vielzahl von Formularen und reflektieren die Konventionen der aktuellen Kultur oder einer bestimmten Kultur. Eine Anwendung ermöglicht beispielsweise einem Benutzer, dessen aktuelle Kultur en-US ist, einen Datumswert als "12/15/2013" oder "15. Dezember 2013" einzugeben. Ein Benutzer, dessen aktuelle Kultur en-GB ist, kann einen Datumswert als "15/12/2013" oder 15. Dezember 2013 eingeben.  
  
-   Ein Datum und eine Uhrzeit werden in einem vordefinierten Format dargestellt. Beispielsweise serialisiert eine Anwendung ein Datum unabhängig von der Kultur, in der die app ausgeführt wird, als "20130103". Für eine Anwendung ist es möglicherweise erforderlich, dass Datumsangaben im kurzen Datumsformat der aktuellen Kultur eingegeben werden.
  
Verwenden Sie die <xref:System.DateTime.Parse%2A>-oder <xref:System.DateTime.TryParse%2A>-Methode, um eine Zeichenfolge aus einem der allgemeinen Datums-und Uhrzeit Formate, die von einer Kultur verwendet werden, in einen <xref:System.DateTime> Wert zu konvertieren. Im folgenden Beispiel wird gezeigt, wie Sie mit <xref:System.DateTime.TryParse%2A> Datums Zeichenfolgen in unterschiedlichen Kultur abhängigen Formaten in einen <xref:System.DateTime>-Wert konvertieren können. Sie ändert die aktuelle Kultur in Englisch (Großbritannien) und ruft die <xref:System.DateTime.GetDateTimeFormats>-Methode auf, um ein Array von Datums-und Uhrzeit Zeichenfolgen zu generieren. Anschließend übergibt Sie jedes Element im Array an die <xref:System.DateTime.TryParse%2A> Methode. Die Ausgabe des Beispiels zeigt, dass die-Methode für die-Methode jede kulturspezifische Datums-und Uhrzeit Zeichenfolge erfolgreich konvertieren konnte.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Mit den Methoden <xref:System.DateTime.ParseExact%2A> und <xref:System.DateTime.TryParseExact%2A> können Sie eine Zeichenfolge, die einem bestimmten Format oder Format entsprechen muss, mit einem <xref:System.DateTime> Wert konvertieren. Sie geben mindestens eine Format Zeichenfolge für Datum und Uhrzeit als Parameter für die-Methode an. Im folgenden Beispiel wird die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>-Methode verwendet, um Zeichen folgen zu konvertieren, die entweder im Format "YYYYMMDD" oder im Format "HHMMSS" vorliegen müssen, um Werte <xref:System.DateTime>.  
  
<a name="parsing-02"></a> [!code-csharp[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Eine häufige Verwendung für <xref:System.DateTime.ParseExact%2A> ist das Konvertieren einer Zeichen folgen Darstellung von einem Webdienst, normalerweise im [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) -Standardformat. Der folgende Code zeigt die korrekte zu verwendende Format Zeichenfolge:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Wenn eine Zeichenfolge nicht analysiert werden kann, lösen die Methoden <xref:System.DateTime.Parse%2A> und <xref:System.DateTime.ParseExact%2A> eine Ausnahme aus. Die Methoden <xref:System.DateTime.TryParse%2A> und <xref:System.DateTime.TryParseExact%2A> geben einen <xref:System.Boolean> Wert zurück, der angibt, ob die Konvertierung erfolgreich war oder fehlgeschlagen ist. Verwenden Sie die Methoden <xref:System.DateTime.TryParse%2A> oder <xref:System.DateTime.TryParseExact%2A> in Szenarios, in denen die Leistung wichtig ist. Der erteilungsvorgang für Datums-und Uhrzeit Zeichenfolgen weist tendenziell eine hohe Fehlerrate auf, und die Ausnahmebehandlung ist aufwendig. Verwenden Sie diese Methoden, wenn Zeichen folgen von Benutzern eingegeben werden oder aus einer unbekannten Quelle stammen. 
  
Weitere Informationen zum Auswerten von Datums-und Uhrzeitwerten finden Sie unter "Auswerten von [Datums-und Uhrzeit](~/docs/standard/base-types/parsing-datetime.md)Zeichenfolgen".  

### <a name="datetime-values"></a>DateTime-Werte

Beschreibungen von Uhrzeitwerten im <xref:System.DateTime> Typ werden häufig mit dem UTC-Standard (koordinierte Weltzeit) ausgedrückt. Koordinierte Weltzeit ist der International erkannte Name für die Ortszeit (Greenwich Mean Time, GMT). Koordinierte Weltzeit ist die Zeit, die bei einem Längengrad von Null Grad gemessen wird, dem UTC-Ursprungs Punkt. Die Sommerzeit ist nicht auf die UTC anwendbar.  
  
Die Ortszeit ist relativ zu einer bestimmten Zeitzone. Eine Zeitzone ist einem Zeit Zonen Offset zugeordnet. Ein Zeit Zonen Offset ist die Verschiebung der Zeitzone, gemessen in Stunden vom UTC-Ursprungs Punkt. Außerdem wird die lokale Zeit optional von der Sommerzeit beeinflusst, wodurch eine zeitliche Intervall Anpassung hinzugefügt oder subtrahiert wird. Die Ortszeit wird berechnet, indem der Zeit Zonen Offset zur UTC addiert und bei Bedarf die Sommerzeit angepasst wird. Der Zeit Zonen Offset am UTC-Ursprungs Punkt ist 0 (null).  
  
Die UTC-Zeit eignet sich für Berechnungen, Vergleiche und das Speichern von Datums-und Uhrzeitangaben in Dateien. Lokale Zeit eignet sich für die Anzeige in Benutzeroberflächen von Desktop Anwendungen. Zeit Zonen abhängige Anwendungen (z. b. viele Webanwendungen) müssen auch mit einer Reihe anderer Zeitzonen arbeiten.  
  
Wenn die <xref:System.DateTime.Kind%2A>-Eigenschaft eines <xref:System.DateTime> Objekts <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ist, wird es nicht angegeben, ob es sich bei der dargestellten Zeit um Ortszeit, UTC-Zeit oder eine Uhrzeit in einer anderen Zeitzone handelt.  

### <a name="datetime-resolution"></a>DateTime-Auflösung
  
> [!NOTE]
>  Als Alternative zum Durchführen von Datums-und Uhrzeit Arithmetik für <xref:System.DateTime> Werte zum Messen der verstrichenen Zeit können Sie die <xref:System.Diagnostics.Stopwatch>-Klasse verwenden.  
  
Die <xref:System.DateTime.Ticks%2A>-Eigenschaft drückt Datums-und Uhrzeitwerte in Einheiten von 1 10 Millionstel einer Sekunde aus. Die <xref:System.DateTime.Millisecond%2A>-Eigenschaft gibt die Tausendstel Sekunden in einem Datums-und Uhrzeitwert zurück. Die Verwendung von wiederholten Aufrufen der <xref:System.DateTime.Now%2A?displayProperty=nameWithType>-Eigenschaft zum Messen der verstrichenen Zeit hängt von der Systemuhr ab. Die Systemuhr auf Windows 7-und Windows 8-Systemen hat eine Auflösung von ungefähr 15 Millisekunden. Diese Lösung wirkt sich auf kleine Zeitintervalle aus, die kleiner als 100 Millisekunden sind. 
  
Im folgenden Beispiel wird die Abhängigkeit der aktuellen Datums-und Uhrzeitwerte bei der Auflösung der Systemuhr veranschaulicht. Im Beispiel wird 20 Mal eine äußere Schleife wiederholt, und eine innere Schleife dient dazu, die äußere Schleife zu verzögern. Wenn der Wert des äußeren Schleifen Zählers 10 ist, führt ein aufrufungs-<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> Methode eine Verzögerung von fünf Millisekunden ein. Das folgende Beispiel zeigt die Anzahl der Millisekunden, die von der `DateTime.Now.Milliseconds`-Eigenschaft zurückgegeben wird, die sich erst nach dem <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>aufgerufen hat.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>DateTime-Vorgänge  

Bei einer Berechnung mit einer <xref:System.DateTime> Struktur, z. b. <xref:System.DateTime.Add%2A> oder <xref:System.DateTime.Subtract%2A>, wird der Wert der Struktur nicht geändert. Stattdessen gibt die Berechnung eine neue <xref:System.DateTime>-Struktur zurück, deren Wert das Ergebnis der Berechnung ist.  
  
Bei Konvertierungs Vorgängen zwischen Zeitzonen (z. b. zwischen UTC und Ortszeit oder zwischen einer Zeitzone und einer anderen) wird Sommerzeit berücksichtigt, bei arithmetischen und Vergleichs Vorgängen jedoch nicht.  
  
Die <xref:System.DateTime> Struktur selbst bietet eingeschränkte Unterstützung für die Umstellung von einer Zeitzone in eine andere. Sie können die <xref:System.DateTime.ToLocalTime%2A>-Methode verwenden, um die UTC in eine lokale Zeit zu konvertieren, oder Sie können die <xref:System.DateTime.ToUniversalTime%2A>-Methode verwenden, um die lokale Zeit in die UTC zu konvertieren. Allerdings ist ein vollständiger Satz von Zeit Zonen Konvertierungs Methoden in der <xref:System.TimeZoneInfo>-Klasse verfügbar. Mithilfe dieser Methoden können Sie die Zeit in einer beliebigen Zeitzone in eine beliebige andere Zeitzone konvertieren.  
  
Berechnungen und Vergleiche von <xref:System.DateTime> Objekten sind nur dann sinnvoll, wenn die Objekte Zeiten in derselben Zeitzone darstellen. Sie können ein <xref:System.TimeZoneInfo> Objekt verwenden, um die Zeitzone eines <xref:System.DateTime> Werts darzustellen, obwohl beide lose gekoppelt sind. Ein <xref:System.DateTime>-Objekt verfügt nicht über eine-Eigenschaft, die ein Objekt zurückgibt, das die Zeitzone des Datums-und Uhrzeitwerts darstellt. Die <xref:System.DateTime.Kind%2A>-Eigenschaft gibt an, ob ein `DateTime` UTC, Ortszeit oder nicht angegeben darstellt. In einer Zeit Zonen fähigen Anwendung müssen Sie sich auf einen externen Mechanismus verlassen, um die Zeitzone zu bestimmen, in der ein <xref:System.DateTime>-Objekt erstellt wurde. Sie können eine Struktur verwenden, die sowohl den <xref:System.DateTime> Wert als auch das <xref:System.TimeZoneInfo> Objekt umschließt, das die Zeitzone des <xref:System.DateTime> Werts darstellt. Ausführliche Informationen zur Verwendung von UTC in Berechnungen und vergleichen mit <xref:System.DateTime> Werten finden Sie unter [Durchführen arithmetischer Operationen mit Datums-und Uhrzeitwerten](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Jeder <xref:System.DateTime> Member verwendet implizit den gregorianischen Kalender, um den Vorgang auszuführen. Ausnahmen sind Methoden, die einen Kalender implizit angeben. Hierzu gehören Konstruktoren, die einen Kalender angeben, und Methoden mit einem Parameter, der von <xref:System.IFormatProvider>abgeleitet ist, z. b. <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Bei Vorgängen durch Mitglieder des <xref:System.DateTime> Typs werden Details wie z. b. Schaltjahre und die Anzahl der Tage eines Monats berücksichtigt.  

## <a name="datetime-values-and-calendars"></a>DateTime-Werte und Kalender  

Die .NET Framework-Klassenbibliothek enthält eine Reihe von Kalender Klassen, die alle von der <xref:System.Globalization.Calendar>-Klasse abgeleitet sind.  Sie lauten folgendermaßen:  
  
-   Der <xref:System.Globalization.ChineseLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.EastAsianLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.GregorianCalendar>-Klasse.  
-   Der <xref:System.Globalization.HebrewCalendar>-Klasse.  
-   Der <xref:System.Globalization.HijriCalendar>-Klasse.  
-   Der <xref:System.Globalization.JapaneseCalendar>-Klasse.  
-   Der <xref:System.Globalization.JapaneseLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.JulianCalendar>-Klasse.  
-   Der <xref:System.Globalization.KoreanCalendar>-Klasse.  
-   Der <xref:System.Globalization.KoreanLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.PersianCalendar>-Klasse.  
-   Der <xref:System.Globalization.TaiwanCalendar>-Klasse.  
-   Der <xref:System.Globalization.TaiwanLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.ThaiBuddhistCalendar>-Klasse.  
-   Der <xref:System.Globalization.UmAlQuraCalendar>-Klasse.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

Jede Kultur verwendet einen Standardkalender, der durch die schreibgeschützte <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType>-Eigenschaft definiert wird. Jede Kultur kann mindestens einen Kalender unterstützen, der durch die schreibgeschützte <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>-Eigenschaft definiert ist. Der Kalender, der zurzeit von einem bestimmten <xref:System.Globalization.CultureInfo> Objekt verwendet wird, wird durch seine <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>-Eigenschaft definiert. Dies muss einer der Kalender sein, die im <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> Array gefunden werden.  
  
Der aktuelle Kalender einer Kultur wird in allen Formatierungs Vorgängen für diese Kultur verwendet. Beispielsweise ist der Standardkalender der Thai-Kultur Thai der thailändische Epochen Kalender, der durch die <xref:System.Globalization.ThaiBuddhistCalendar>-Klasse dargestellt wird.  Wenn ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur thailändischer Thailändisch darstellt, in einem Datums-und Uhrzeit Formatierungs Vorgang verwendet wird, wird standardmäßig der thailändische Kalender für Thai verwendet. Der gregorianische Kalender wird nur verwendet, wenn die <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>-Eigenschaft der Kultur geändert wird, wie im folgenden Beispiel gezeigt:  

<a name="calendars-01"></a> [!code-csharp[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Der aktuelle Kalender einer Kultur wird auch in allen-Element Vorgängen für diese Kultur verwendet, wie im folgenden Beispiel gezeigt.  
  
<a name="calendars-02"></a> [!code-csharp[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Sie instanziieren einen <xref:System.DateTime> Wert mithilfe der Datums-und Uhrzeit Elemente (Anzahl des Jahres, Monats und Tages) eines bestimmten Kalenders, indem Sie einen [DateTime-Konstruktor](xref:System.DateTime.%23ctor%2A) aufrufen, der einen `calendar` Parameter enthält, und ihm ein <xref:System.Globalization.CultureInfo.Calendar%2A> Objekt übergeben, das Folgendes darstellt: Kalender. Im folgenden Beispiel werden die Datums-und Uhrzeit Elemente aus dem <xref:System.Globalization.ThaiBuddhistCalendar> Kalender verwendet.  
  
<a name="calendars-03"></a> [!code-csharp[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> Konstruktoren, die keinen `calendar` Parameter enthalten, wird davon ausgegangen, dass die Datums-und Uhrzeit Elemente als Einheiten im gregorianischen Kalender ausgedrückt werden.  
  
Alle anderen <xref:System.DateTime> Eigenschaften und-Methoden verwenden den gregorianischen Kalender. Die <xref:System.DateTime.Year%2A?displayProperty=nameWithType>-Eigenschaft gibt beispielsweise das Jahr im gregorianischen Kalender zurück, und die <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType>-Methode geht davon aus, dass der `year`-Parameter ein Jahr im gregorianischen Kalender ist.  Jedes <xref:System.DateTime> Member, der den gregorianischen Kalender verwendet, verfügt über einen entsprechenden Member der <xref:System.Globalization.CultureInfo.Calendar%2A> Klasse, die einen bestimmten Kalender verwendet. Die <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType>-Methode gibt z. b. das Jahr in einem bestimmten Kalender zurück, und die <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType>-Methode interpretiert den `year`-Parameter als eine Jahreszahl in einem bestimmten Kalender. Im folgenden Beispiel werden sowohl der <xref:System.DateTime> als auch die entsprechenden Member der <xref:System.Globalization.ThaiBuddhistCalendar>-Klasse verwendet.  
  
<a name="calendars-04"></a> [!code-csharp[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

Die <xref:System.DateTime>-Struktur enthält eine <xref:System.DateTime.DayOfWeek%2A>-Eigenschaft, die den Wochentag im gregorianischen Kalender zurückgibt. Sie enthält keinen Member, mit dem Sie die Wochen Nummer des Jahres abrufen können. Um die Woche des Jahres abzurufen, rufen Sie die <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType>-Methode des einzelnen Kalenders auf. Dies wird im folgenden Beispiel veranschaulicht.  
  
<a name="calendars-05"></a> [!code-csharp[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Weitere Informationen zu Datumsangaben und Kalender finden Sie unter [Arbeiten mit Kalendern](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Beibehalten von DateTime-Werten  

Sie können <xref:System.DateTime> Werte auf vier Arten beibehalten:  
  
-   Sie [Konvertieren Sie in](#persisting-values-as-strings) Zeichen folgen und speichern die Zeichen folgen.  
-   Sie [Konvertieren Sie in ganzzahlige 64-Bit-Werte](#persisting-values-as-integers) (den Wert der <xref:System.DateTime.Ticks%2A>-Eigenschaft) und speichern die ganzen Zahlen.  
-   Sie [serialisieren die DateTime-Werte](#serializing-datetime-values).  
-   Sie [serialisieren die DateTime-Werte zusammen mit den Zeitzoneninformationen](#serializing-datetime-and-time-zone-data).  
  
Sie müssen sicherstellen, dass die Routine, mit der die <xref:System.DateTime> Werte wieder hergestellt werden, keine Daten verliert oder unabhängig von der gewählten Methode eine Ausnahme auslöst. <xref:System.DateTime> Werte sollten einen Roundtrip auslösen. Das heißt, der ursprüngliche Wert und der wiederhergestellte Wert müssen identisch sein. Und wenn der ursprüngliche <xref:System.DateTime> Wert einen einzelnen Zeitpunkt darstellt, sollte er denselben Zeitpunkt angeben, in dem er wieder hergestellt wird.  
  
#### <a name="persisting-values-as-strings"></a>Beibehalten von Werten als Zeichen folgen  

Befolgen Sie die folgenden Regeln, um <xref:System.DateTime> Werte, die als Zeichen folgen persistent gespeichert werden, erfolgreich wiederherzustellen:  
  
-   Nehmen Sie bei der Wiederherstellung der Zeichenfolge die gleichen Annahmen wie bei der kulturspezifischen Formatierung vor. Um sicherzustellen, dass eine Zeichenfolge auf einem System wieder hergestellt werden kann, dessen aktuelle Kultur von der Kultur des Systems abweicht, auf dem es gespeichert wurde, müssen Sie die <xref:System.DateTime.ToString%2A>-Überladung aufrufen, um die Zeichenfolge unter Verwendung der Konventionen der invarianten Kultur zu speichern. Aufrufen der <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-oder <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Überladung, um die Zeichenfolge mithilfe der Konventionen der invarianten Kultur wiederherzustellen. Verwenden Sie niemals die <xref:System.DateTime.ToString>-, <xref:System.DateTime.Parse%28System.String%29>-oder <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> Überladungen, die die Konventionen der aktuellen Thread Kultur verwenden.  
  
-   Wenn das Datum einen bestimmten Zeitpunkt darstellt, stellen Sie sicher, dass es denselben Zeitpunkt darstellt, in dem es wieder hergestellt wird, auch in einer anderen Zeitzone. Konvertieren Sie den <xref:System.DateTime> Wert vor dem Speichern in koordinierte Weltzeit (UTC). Sie können den Wert auch zusammen mit Zeitzoneninformationen serialisieren. Weitere Informationen zu diesem Ansatz finden Sie unter [Serialisieren von DateTime-und Zeit Zonendaten](#serializing-datetime-and-time-zone-data).  
  
 Der häufigste Fehler beim beibehalten <xref:System.DateTime> Werte als Zeichen folgen besteht darin, die Formatierungs Konventionen der standardmäßigen oder der aktuellen Kultur zu nutzen. Es treten Probleme auf, wenn die aktuelle Kultur beim Speichern und Wiederherstellen der Zeichen folgen anders ist. Diese Probleme werden im folgenden Beispiel veranschaulicht. Es speichert fünf Datumsangaben unter Verwendung der Formatierungs Konventionen der aktuellen Kultur, in diesem Fall Englisch (USA). Die Daten werden mithilfe der Formatierungs Konventionen einer anderen Kultur wieder hergestellt, in diesem Fall Englisch (Großbritannien). Da die Formatierungs Konventionen der beiden Kulturen unterschiedlich sind, können zwei der Datumsangaben nicht wieder hergestellt werden, und die verbleibenden drei Datumsangaben werden fälschlicherweise interpretiert. Wenn die ursprünglichen Datums-und Uhrzeitwerte einen Zeitunterschied darstellen, sind die Wiederherstellungszeiten falsch, da Zeitzoneninformationen verloren gehen.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Führen Sie die folgenden Schritte aus, um <xref:System.DateTime> Werte erfolgreich zu überführen:  
  
1.  Wenn die Werte einen Einzel Zeitraum darstellen, konvertieren Sie Sie von der Ortszeit in UTC, indem Sie die <xref:System.DateTime.ToUniversalTime%2A>-Methode aufrufen.  
1.  Konvertieren Sie die Datumsangaben in ihre Zeichen folgen Darstellungen, indem Sie die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>-oder <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Überladung aufrufen. Verwenden Sie die Formatierungs Konventionen der invarianten Kultur, indem Sie <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> als `provider`-Argument angeben. Geben Sie an, dass der Wert mit der Standardformat Zeichenfolge "O" oder "R" abgerundet werden soll.  
  
Um die beibehaltenen <xref:System.DateTime> Werte ohne Datenverlust wiederherzustellen, führen Sie die folgenden Schritte aus:  
  
1.  Analysieren Sie die Daten, indem Sie die <xref:System.DateTime.ParseExact%2A>-oder <xref:System.DateTime.TryParseExact%2A> Überladung aufrufen. Geben Sie <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> als `provider` Argument an, und verwenden Sie die gleiche Standardformat Zeichenfolge, die Sie während der Konvertierung für das `format` Argument verwendet haben. Fügen Sie den <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Wert in das `styles`-Argument ein.  
1.  Wenn die <xref:System.DateTime> Werte einen einzelnen Moment in der Zeit darstellen, können Sie die <xref:System.DateTime.ToLocalTime%2A>-Methode zum Konvertieren des analysierten Datums von UTC in die lokale Zeit aufzurufen.  
  
Im folgenden Beispiel wird die invariante Kultur und die Standardformat Zeichenfolge "O" verwendet, um sicherzustellen, dass <xref:System.DateTime> Werte, die gespeichert und wieder hergestellt werden, denselben Zeitpunkt darstellen, unabhängig vom System, der Kultur oder der Zeitzone der Quell-und Zielsysteme.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Beibehalten von Werten als ganze Zahlen  

Sie können ein Datum und eine Uhrzeit als <xref:System.Int64> Wert persistent speichern, der eine Reihe von Ticks darstellt. In diesem Fall müssen Sie nicht die Kultur der Systeme in Erwägung gezogen werden, in denen die <xref:System.DateTime> Werte persistent gespeichert und wieder hergestellt werden.  
  
So speichern Sie einen <xref:System.DateTime> Wert als ganze Zahl:  
  
-   Wenn die <xref:System.DateTime> Werte einen einzelnen Moment in der Zeit darstellen, konvertieren Sie Sie in UTC, indem Sie die <xref:System.DateTime.ToUniversalTime%2A>-Methode aufrufen.  
-   Ruft die Anzahl der Ticks ab, die durch den <xref:System.DateTime> Wert aus der <xref:System.DateTime.Ticks%2A>-Eigenschaft dargestellt werden.  
  
So stellen Sie einen <xref:System.DateTime> Wert wieder her, der als ganze Zahl beibehalten wurde:  
  
1.  Instanziieren Sie ein neues <xref:System.DateTime>-Objekt, indem Sie den <xref:System.Int64>-Wert an den <xref:System.DateTime.%23ctor%28System.Int64%29>-Konstruktor übergeben.  
1.  Wenn der <xref:System.DateTime> Wert einen einzelnen Moment darstellt, konvertieren Sie ihn von UTC in die lokale Zeit, indem Sie die <xref:System.DateTime.ToLocalTime%2A>-Methode aufrufen.  
  
Im folgenden Beispiel wird ein Array von <xref:System.DateTime> Werten als ganze Zahlen in einem System in der Zeitzone "USA, Pazifik" beibehalten. Sie stellt Sie auf einem System in der UTC-Zone wieder her. Die Datei, die die ganzen Zahlen enthält, enthält einen <xref:System.Int32> Wert, der die Gesamtzahl der <xref:System.Int64> Werte angibt, die unmittelbar befolgt werden.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

<a name="serializing-datetime-values"></a>
#### <a name="serializing-datetime-values"></a>Serialisieren von DateTime-Werten  

Sie können <xref:System.DateTime> Werte durch Serialisierung in einen Stream oder eine Datei beibehalten und dann durch Deserialisierung wiederherstellen. <xref:System.DateTime> Daten werden in einem bestimmten Objekt Format serialisiert. Die Objekte werden wieder hergestellt, wenn Sie deserialisiert werden. Ein Formatierer oder Serialisierungsprogramm, wie z. b. <xref:System.Xml.Serialization.XmlSerializer> oder <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, verarbeitet den Prozess der Serialisierung und Deserialisierung. Weitere Informationen zur Serialisierung und zu den von der .NET Framework unterstützten Serialisierungstypen finden Sie unter [Serialisierung](~/docs/standard/serialization/index.md).
  
Im folgenden Beispiel wird die <xref:System.Xml.Serialization.XmlSerializer>-Klasse verwendet, um <xref:System.DateTime> Werte zu serialisieren und zu deserialisieren. Die Werte stellen alle Schaltjahr Tage im 21. Jahrhundert dar. Die Ausgabe stellt das Ergebnis dar, wenn das Beispiel auf einem System ausgeführt wird, dessen aktuelle Kultur Englisch (Großbritannien) ist. Da Sie das <xref:System.DateTime> Objekt selbst deserialisiert haben, muss der Code keine kulturellen Unterschiede in Datums-und Uhrzeit Formaten verarbeiten.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

Das vorherige Beispiel enthält keine Zeit Informationen. Wenn ein <xref:System.DateTime> Wert einen bestimmten Zeitpunkt darstellt und als Ortszeit ausgedrückt wird, konvertieren Sie ihn vor der Serialisierung von Ortszeit in UTC, bevor Sie die <xref:System.DateTime.ToUniversalTime%2A>-Methode aufrufen. Nachdem Sie sie deserialisiert haben, konvertieren Sie Sie von UTC in Ortszeit, indem Sie die <xref:System.DateTime.ToLocalTime%2A>-Methode aufrufen. Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>-Klasse verwendet, um <xref:System.DateTime> Daten in einem System in der US-Pazifik-Standard Zeitzone zu serialisieren und in einem System in der US-zentral Standard Zone zu deserialisieren.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

<a name="serializing-datetime-and-time-zone-data"></a>
#### <a name="serializing-datetime-and-time-zone-data"></a>Serialisieren von DateTime-und Zeit Zonendaten  

In den vorherigen Beispielen wird davon ausgegangen, dass <xref:System.DateTime> Werte als lokale Zeiten ausgedrückt werden. Der Code hat die Werte zwischen UTC und Ortszeit konvertiert, sodass Sie denselben Zeitpunkt auf den Quell-und Zielsystemen widerspiegeln. <xref:System.DateTime> Werte können auch Zeitangaben in einer anderen Zeitzone als Local und UTC widerspiegeln. Da die <xref:System.DateTime> Struktur nicht Zeit Zonen fähig ist, müssen Sie sowohl den <xref:System.DateTime> Wert als auch das <xref:System.TimeZoneInfo>-Objekt serialisieren, das die Zeitzone darstellt. Erstellen Sie einen Typ, dessen Felder sowohl den <xref:System.DateTime> Wert als auch die zugehörige Zeitzone enthalten. Im folgenden Beispiel wird eine `DateWithTimeZone` Struktur definiert.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  Die `DateWithTimeZone` Struktur wird in den folgenden beiden Beispielen verwendet, die ein Array von `DateWithTimeZone` Objekten serialisieren und deserialisieren. Sie können die Quelle für den gesamten Satz von Beispielen in diesem Artikel entweder in [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) oder [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) im docs-Repository auf GitHub anzeigen.
  
Wenn Sie die `DateWithTimeZone` Struktur verwenden, können Sie Datum und Uhrzeit zusammen mit Zeitzoneninformationen beibehalten. Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>-Klasse verwendet, um ein Array von `DateWithTimeZone` Objekten zu serialisieren.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

Im folgenden Beispiel wird dann die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>-Methode aufgerufen, um Sie zu deserialisieren.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>"DateTime" und "TimeSpan"  

Die <xref:System.DateTime>-und <xref:System.TimeSpan> Werttypen unterscheiden sich insofern, als ein <xref:System.DateTime> einen Zeitpunkt darstellt, während ein <xref:System.TimeSpan> ein Zeitintervall darstellt. Sie können eine Instanz von <xref:System.DateTime> von einem anderen subtrahieren, um ein <xref:System.TimeSpan> Objekt zu erhalten, das das Zeitintervall zwischen Ihnen darstellt. Oder Sie können dem aktuellen <xref:System.DateTime> ein positives <xref:System.TimeSpan> hinzufügen, um einen <xref:System.DateTime> Wert zu erhalten, der ein zukünftiges Datum darstellt.  
  
Sie können ein Zeitintervall von einem <xref:System.DateTime> Objekt hinzufügen oder subtrahieren. Zeitintervalle können negativ oder positiv sein, und Sie können in Einheiten wie z. b. Ticks, Sekunden oder als <xref:System.TimeSpan> Objekt ausgedrückt werden.  

### <a name="comparing-for-equality-within-tolerance"></a>Vergleichen von Gleichheit innerhalb der Toleranz

Gleichheits Vergleiche für <xref:System.DateTime> Werte sind genau. Dies bedeutet, dass zwei Werte als gleich viele Ticks ausgedrückt werden müssen, damit Sie als gleich betrachtet werden. Diese Genauigkeit ist für viele Anwendungen häufig unnötig oder sogar falsch. Häufig möchten Sie testen, ob <xref:System.DateTime>-Objekte **ungefähr gleich**sind. 

Im folgenden Beispiel wird veranschaulicht, wie ungefähr äquivalente <xref:System.DateTime> Werte verglichen werden. Sie akzeptiert einen kleinen Unterschied, wenn Sie gleich deklariert werden.  
  
<a name="comparison-01"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Überlegungen zu COM-Interop  

Ein <xref:System.DateTime> Wert, der an eine COM-Anwendung übertragen und dann zurück an eine verwaltete Anwendung übertragen wird, wird als Roundtrip bezeichnet. Ein <xref:System.DateTime> Wert, der nur eine Uhrzeit angibt, führt jedoch nicht zu einem Roundtrip, wie Sie vielleicht erwarten.  
  
Wenn Sie nur eine Zeit (z. b. 3 Uhr) Roundtrip, ist das letzte Datum und die Uhrzeit der 30. Dezember 1899 Uhr. um 3:00 Uhr, anstelle von Januar, 1, 0001 um 3:00 Uhr Die .NET Framework und com nehmen ein Standard Datum an, wenn nur eine Uhrzeit angegeben wird. Allerdings geht das com-System von einem Basisdatum von 30. Dezember 1899 Uhr aus, während die .NET Framework ein Basisdatum von Januar, 1, 0001  
  
Wenn nur eine Uhrzeit vom .NET Framework an com übermittelt wird, wird eine spezielle Verarbeitung ausgeführt, die die Uhrzeit in das von com verwendete Format konvertiert. Wenn nur eine Uhrzeit von com an den .NET Framework weitergegeben wird, wird keine spezielle Verarbeitung durchgeführt, da dies legitime Datums-und Uhrzeitangaben am 30. Dezember 1899 beschädigen würde. Wenn ein Datum seinen Roundtrip von com startet, behalten die .NET Framework und com das Datum bei.  
  
Das Verhalten der .NET Framework und com bedeutet Folgendes: Wenn die Anwendung eine <xref:System.DateTime>, die nur eine Uhrzeit angibt, auf einen Roundtrip durchführt, muss sich die Anwendung daran erinnern, das fehlerhafte Datum des letzten <xref:System.DateTime> Objekts zu ändern oder zu ignorieren.  
     
 ]]></format>
    </remarks>
    <threadsafe>Alle Member dieses Typs sind Thread sicher. Member, die scheinbar den Instanzzustand ändern, geben tatsächlich eine neue Instanz zurück, die mit dem neuen Wert initialisiert wurde. Wie bei jedem anderen Typ muss das Lesen und Schreiben in eine freigegebene Variable, die eine Instanz dieses Typs enthält, durch eine Sperre geschützt werden, um die Thread Sicherheit zu gewährleisten.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Auswählen zwischen "DateTime", "DateTimeOffset", "TimeSpan" und "TimeZoneInfo"</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">Arbeiten mit Kalendern</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">Beispiel: .net Core-Hilfsprogramm zur FormatierungC#von WinForms ()</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">Beispiel: .net Core-Hilfsprogramm für die WinForms-Formatierung (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Für Anwendungen, in denen die Portabilität von Datums-und Uhrzeitdaten oder eine begrenzte Zeit Zonen Erkennung wichtig ist, können Sie den entsprechenden <xref:System.DateTimeOffset>-Konstruktor verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird einer der <xref:System.DateTime> Konstruktoren veranschaulicht.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <param name="kind">One of the enumeration values that indicates whether <paramref name="ticks" /> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für Anwendungen, in denen die Portabilität von Datums-und Uhrzeitdaten oder eine begrenzte Zeit Zonen Erkennung wichtig ist, können Sie den entsprechenden <xref:System.DateTimeOffset>-Konstruktor verwenden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert `year`, `month`und `day` als Jahr, Monat und Tag im gregorianischen Kalender. Um einen <xref:System.DateTime> Wert mithilfe von Jahr, Monat und Tag in einem anderen Kalender zu instanziieren, müssen Sie den <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>-Konstruktor aufzurufen.  
  
 Die Tageszeit für die resultierende <xref:System.DateTime> ist Mitternacht (00:00:00). Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> initialisiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29>-Konstruktor verwendet, um einen <xref:System.DateTime>-Wert zu instanziieren. Das Beispiel veranschaulicht außerdem, dass diese Überladung einen <xref:System.DateTime> Wert erstellt, dessen Zeitkomponente Mitternacht (oder 0:00) ist.  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is less than 1 or greater than 9999.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than 12.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
        <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Tageszeit für die resultierende <xref:System.DateTime> ist Mitternacht (00:00:00). Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`und `day` sind von `calendar`abhängig. Eine-Ausnahme wird ausgelöst, wenn das angegebene Datum und die angegebene Uhrzeit nicht mithilfe von `calendar`ausgedrückt werden können.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Der <xref:System.Globalization>-Namespace stellt verschiedene Kalender bereit, einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>-Konstruktor zweimal aufgerufen, um zwei <xref:System.DateTime> Werte zu instanziieren. Der erste-Befehl instanziiert einen <xref:System.DateTime> Wert mit einem <xref:System.Globalization.PersianCalendar>-Objekt. Da der persische Kalender nicht als Standardkalender für eine Kulturfest gelegt werden kann, sind für die Anzeige eines Datums im persischen Kalender individuelle Aufrufe der Methoden <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> erforderlich. Der zweite-Konstruktor-Konstruktor instanziiert einen <xref:System.DateTime> Wert mit einem <xref:System.Globalization.HijriCalendar>-Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) geändert und der Standardkalender der aktuellen Kultur in den Hijri-Kalender geändert. Da Hijri der Standardkalender der aktuellen Kultur ist, verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode Sie, um das Datum zu formatieren. Wenn die vorherige aktuelle Kultur (in diesem Fall Englisch (USA)) wieder hergestellt wird, verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode den standardmäßigen gregorianischen Kalender der aktuellen Kultur, um das Datum zu formatieren.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Dieser Konstruktor interpretiert`year`, `month`und `day` als Jahr, Monat und Tag im gregorianischen Kalender. Um einen <xref:System.DateTime> Wert mithilfe von Jahr, Monat und Tag in einem anderen Kalender zu instanziieren, müssen Sie den <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>-Konstruktor aufzurufen.  
  
 Für Anwendungen, in denen die Portabilität von Datums-und Uhrzeitdaten oder eine begrenzte Zeit Zonen Erkennung wichtig ist, können Sie den entsprechenden <xref:System.DateTimeOffset>-Konstruktor verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%2A>-Konstruktor verwendet, um einen <xref:System.DateTime>-Wert zu instanziieren.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is less than 1 or greater than 9999.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than 12.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
-or- 
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
-or- 
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="second" /> is less than 0 or greater than 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> and <paramref name="second" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`und `day` als Jahr, Monat und Tag im gregorianischen Kalender. Um einen <xref:System.DateTime> Wert mithilfe von Jahr, Monat und Tag in einem anderen Kalender zu instanziieren, müssen Sie den <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>-Konstruktor aufzurufen.  
  
 Für Anwendungen, in denen die Portabilität von Datums-und Uhrzeitdaten oder eine begrenzte Zeit Zonen Erkennung wichtig ist, können Sie den entsprechenden <xref:System.DateTimeOffset>-Konstruktor verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29>-Konstruktor verwendet, um einen <xref:System.DateTime>-Wert zu instanziieren.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is less than 1 or greater than 9999.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than 12.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
-or- 
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
-or- 
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
        <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`und `day` sind von `calendar`abhängig. Eine-Ausnahme wird ausgelöst, wenn das angegebene Datum und die angegebene Uhrzeit nicht mithilfe von `calendar`ausgedrückt werden können.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Der <xref:System.Globalization>-Namespace stellt verschiedene Kalender bereit, einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>-Konstruktor zweimal aufgerufen, um zwei <xref:System.DateTime> Werte zu instanziieren. Der erste-Befehl instanziiert einen <xref:System.DateTime> Wert mit einem <xref:System.Globalization.PersianCalendar>-Objekt. Da der persische Kalender nicht als Standardkalender für eine Kulturfest gelegt werden kann, sind für die Anzeige eines Datums im persischen Kalender individuelle Aufrufe der Methoden <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> erforderlich. Der zweite-Konstruktor-Konstruktor instanziiert einen <xref:System.DateTime> Wert mit einem <xref:System.Globalization.HijriCalendar>-Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) geändert und der Standardkalender der aktuellen Kultur in den Hijri-Kalender geändert. Da Hijri der Standardkalender der aktuellen Kultur ist, verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode Sie, um das Datum zu formatieren. Wenn die vorherige aktuelle Kultur (in diesem Fall Englisch (USA)) wieder hergestellt wird, verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode den standardmäßigen gregorianischen Kalender der aktuellen Kultur, um das Datum zu formatieren.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
-or- 
 <paramref name="hour" /> is less than 0 or greater than 23 
-or- 
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`und `day` als Jahr, Monat und Tag im gregorianischen Kalender. Um einen <xref:System.DateTime> Wert mithilfe von Jahr, Monat und Tag in einem anderen Kalender zu instanziieren, müssen Sie den <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>-Konstruktor aufzurufen.  
  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Für Anwendungen, in denen die Portabilität von Datums-und Uhrzeitdaten oder eine begrenzte Zeit Zonen Erkennung wichtig ist, können Sie den entsprechenden <xref:System.DateTimeOffset>-Konstruktor verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>-Konstruktor verwendet, um einen <xref:System.DateTime>-Wert zu instanziieren.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is less than 1 or greater than 9999.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than 12.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
-or- 
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
-or- 
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="second" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="7" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`und `day` als Jahr, Monat und Tag im gregorianischen Kalender. Um einen <xref:System.DateTime> Wert mithilfe von Jahr, Monat und Tag in einem anderen Kalender zu instanziieren, müssen Sie den <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>-Konstruktor aufzurufen.  
  
 Für Anwendungen, in denen die Portabilität von Datums-und Uhrzeitdaten oder eine begrenzte Zeit Zonen Erkennung wichtig ist, können Sie den entsprechenden <xref:System.DateTimeOffset>-Konstruktor verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29>-Konstruktor verwendet, um einen <xref:System.DateTime>-Wert zu instanziieren.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is less than 1 or greater than 9999.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than 12.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
-or- 
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
-or- 
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="second" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
        <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`und `day` sind von `calendar`abhängig. Eine-Ausnahme wird ausgelöst, wenn das angegebene Datum und die angegebene Uhrzeit nicht mithilfe von `calendar`ausgedrückt werden können.  
  
 Für Anwendungen, in denen die Portabilität von Datums-und Uhrzeitdaten oder eine begrenzte Zeit Zonen Erkennung wichtig ist, können Sie den entsprechenden <xref:System.DateTimeOffset>-Konstruktor verwenden.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Der <xref:System.Globalization>-Namespace stellt verschiedene Kalender bereit, einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>-Konstruktor zweimal aufgerufen, um zwei <xref:System.DateTime> Werte zu instanziieren. Der erste-Befehl instanziiert einen <xref:System.DateTime> Wert mit einem <xref:System.Globalization.PersianCalendar>-Objekt. Da der persische Kalender nicht als Standardkalender für eine Kulturfest gelegt werden kann, sind für die Anzeige eines Datums im persischen Kalender individuelle Aufrufe der Methoden <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> erforderlich. Der zweite-Konstruktor-Konstruktor instanziiert einen <xref:System.DateTime> Wert mit einem <xref:System.Globalization.HijriCalendar>-Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) geändert und der Standardkalender der aktuellen Kultur in den Hijri-Kalender geändert. Da Hijri der Standardkalender der aktuellen Kultur ist, verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode Sie, um das Datum zu formatieren. Wenn die vorherige aktuelle Kultur (in diesem Fall Englisch (USA)) wieder hergestellt wird, verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode den standardmäßigen gregorianischen Kalender der aktuellen Kultur, um das Datum zu formatieren.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
-or- 
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
-or- 
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="second" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <paramref name="calendar" />).</param>
        <param name="month">The month (1 through the number of months in <paramref name="calendar" />).</param>
        <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />.</param>
        <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zulässigen Werte für die Parameter `year`, `month`und `day` hängen vom `calendar` Parameter ab. Eine-Ausnahme wird ausgelöst, wenn das angegebene Datum und die angegebene Uhrzeit nicht mithilfe von `calendar`ausgedrückt werden können.  
  
 Für Anwendungen, in denen die Portabilität von Datums-und Uhrzeitdaten oder eine begrenzte Zeit Zonen Erkennung wichtig ist, können Sie den entsprechenden <xref:System.DateTimeOffset>-Konstruktor verwenden.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Der <xref:System.Globalization>-Namespace stellt verschiedene Kalender bereit, einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>-Konstruktor zweimal aufgerufen, um zwei <xref:System.DateTime> Werte zu instanziieren. Der erste-Befehl instanziiert einen <xref:System.DateTime> Wert mit einem <xref:System.Globalization.PersianCalendar>-Objekt. Da der persische Kalender nicht als Standardkalender für eine Kulturfest gelegt werden kann, sind für die Anzeige eines Datums im persischen Kalender individuelle Aufrufe der Methoden <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> erforderlich. Der zweite-Konstruktor-Konstruktor instanziiert einen <xref:System.DateTime> Wert mit einem <xref:System.Globalization.HijriCalendar>-Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) geändert und der Standardkalender der aktuellen Kultur in den Hijri-Kalender geändert. Da Hijri der Standardkalender der aktuellen Kultur ist, verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode Sie, um das Datum zu formatieren. Wenn die vorherige aktuelle Kultur (in diesem Fall Englisch (USA)) wieder hergestellt wird, verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode den standardmäßigen gregorianischen Kalender der aktuellen Kultur, um das Datum zu formatieren.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  
  
-or- 
 <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  
  
-or- 
 <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  
  
-or- 
 <paramref name="hour" /> is less than 0 or greater than 23.  
  
-or- 
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="second" /> is less than 0 or greater than 59.  
  
-or- 
 <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">A positive or negative time interval.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.DateTime.Add%2A>-Methode verwenden, um mehr als eine Art Zeitintervall (Tage, Stunden, Minuten, Sekunden oder Millisekunden) in einem einzigen Vorgang hinzuzufügen. Das Verhalten dieser Methode ist mit dem des Additions Operators identisch. Die <xref:System.DateTime> Struktur unterstützt auch spezielle Additions Methoden (z. b. <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>und <xref:System.DateTime.AddMinutes%2A>) für jedes Zeitintervall.  
  
 Bei der <xref:System.DateTime.Add%2A>-Methode werden Schaltjahre und die Anzahl der Tage in einem Monat beim Durchführen von Datums Arithmetik berücksichtigt.  
  
 Diese Methode ändert den Wert dieses <xref:System.DateTime>nicht. Stattdessen wird ein neuer <xref:System.DateTime> zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist. Die <xref:System.DateTime.Kind%2A>-Eigenschaft der neuen <xref:System.DateTime> Instanz entspricht der der aktuellen Instanz.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Add%2A> Methode. Ab diesem Zeitpunkt wird der Wochentag berechnet, der 36 Tage (864 Stunden) entspricht.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional days. The <paramref name="value" /> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert den Wert dieses <xref:System.DateTime>nicht. Stattdessen wird ein neuer <xref:System.DateTime> zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist.  
  
 Der Bruchteil von `value` ist der Bruch Teil eines Tages. 4,5 entspricht z. b. 4 Tage, 12 Stunden, 0 Minuten, 0 Sekunden, 0 Millisekunden und 0 Ticks.  
  
 Der `value`-Parameter wird auf die nächste Millisekunde gerundet.  
  
 Bei der <xref:System.DateTime.AddDays%2A>-Methode werden Schaltjahre und die Anzahl der Tage in einem Monat beim Durchführen von Datums Arithmetik berücksichtigt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddDays%2A>-Methode verwendet, um den Wochentag 36 Tage nach dem aktuellen Datum zu bestimmen.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional hours. The <paramref name="value" /> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert den Wert dieses <xref:System.DateTime>nicht. Stattdessen wird ein neuer <xref:System.DateTime> zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist. Die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts entspricht der von `value`.  
  
 Der Bruchteil von `value` ist der Bruchteil einer Stunde. 4,5 entspricht z. b. 4 Stunden, 30 Minuten, 0 Sekunden, 0 Millisekunden und 0 Ticks.  
  
 Der `value`-Parameter wird auf die nächste Millisekunde gerundet.  
  
 Das Umrechnen von Zeitintervallen von weniger als einer Stunde in einen Bruchteil kann zu einem Genauigkeits Verlust führen, wenn das Ergebnis ein sich wiederholendes Dezimaltrennzeichen ist. (Eine Minute beträgt z. b. 0,016667 einer Stunde.) Wenn dies problematisch ist, können Sie die <xref:System.DateTime.Add%2A>-Methode verwenden, die es Ihnen ermöglicht, mehr als eine Art Zeitintervall in einem einzelnen Methodenaufruf anzugeben. Außerdem entfällt die Notwendigkeit, Zeitintervalle in Bruchteile einer Stunde zu konvertieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddHours%2A>-Methode verwendet, um einem Datum und einer Uhrzeit eine Anzahl von ganzen-und Bruch Werten hinzuzufügen. Außerdem wird der Genauigkeits Verlust veranschaulicht, der verursacht wird, wenn der-Methode ein Wert übergeben wird, der eine Bruchteil-Komponente enthält.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional milliseconds. The <paramref name="value" /> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert den Wert dieses <xref:System.DateTime>nicht. Stattdessen wird ein neuer <xref:System.DateTime> zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist.  
  
 Der Bruchteil von `value` ist der Bruchteil einer Millisekunde. 4,5 entspricht z. b. 4 Millisekunden und 5000 Ticks, wobei eine Millisekunde = 10000 Ticks.  
  
 Der `value`-Parameter wird auf die nächste ganze Zahl gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddMilliseconds%2A>-Methode verwendet, um einen Millisekundenwert und 1,5 Millisekunden zu einem <xref:System.DateTime> Wert hinzuzufügen. Anschließend werden alle neuen Werte angezeigt, und der Unterschied zwischen dem Wert und dem ursprünglichen Wert wird angezeigt. Der Unterschied wird sowohl als Zeitspanne als auch als Anzahl von Ticks angezeigt. Im Beispiel wird klar, dass eine Millisekunde 10.000 Ticks beträgt. Außerdem wird gezeigt, dass Sekundenbruchteile gerundet werden, bevor die Addition durchgeführt wird. der <xref:System.DateTime> Wert, der sich aus dem Hinzufügen von 1,5 Millisekunden zum ursprünglichen Datum ergibt, ist 2 Millisekunden größer als das ursprüngliche Datum.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional minutes. The <paramref name="value" /> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert den Wert dieses <xref:System.DateTime>nicht. Stattdessen wird ein neuer <xref:System.DateTime> zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist.  
  
 Der Bruchteil der `value` ist der Bruchteil einer Minute. 4,5 entspricht z. b. 4 Minuten, 30 Sekunden, 0 Millisekunden und 0 Ticks.  
  
 Der `value`-Parameter wird auf die nächste Millisekunde gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddMinutes%2A>-Methode verwendet, um einem Datum und einer Uhrzeit eine Anzahl von ganzen-und Bruch Werten hinzuzufügen.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">A number of months. The <paramref name="months" /> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime> Objekts. Stattdessen wird ein neues <xref:System.DateTime> Objekt zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist.  
  
 Die <xref:System.DateTime.AddMonths%2A>-Methode berechnet den resultierenden Monat und das Jahr unter Berücksichtigung von Schaltjahren und der Anzahl von Tagen in einem Monat und passt dann den Tages Teil des resultierenden <xref:System.DateTime> Objekts an. Wenn der resultierende Tag kein gültiger Tag im resultierenden Monat ist, wird der letzte gültige Tag des resultierenden Monats verwendet. Beispiel: 31. März + 1 Monat = 30. April und 31. März-1 Monat = 21. Februar für ein nicht-Schaltjahr und 29. Februar für ein Schaltjahr.  
  
 Der Tageszeit-Teil des resultierenden <xref:System.DateTime> Objekts bleibt identisch mit dieser Instanz.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der letzte Tag des Dezember 2015 zwischen 0 und 15 Monaten hinzugefügt. In diesem Fall gibt die addmonth-Methode das Datum des letzten Tags jedes Monats zurück und verarbeitet die Schaltjahre erfolgreich.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.  
  
-or- 
 <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional seconds. The <paramref name="value" /> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert den Wert dieses <xref:System.DateTime>nicht. Stattdessen wird ein neuer <xref:System.DateTime> zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist.  
  
 Der Bruchteil von `value` ist der Bruchteil einer Sekunde. 4,5 entspricht z. b. 4 Sekunden, 500 Millisekunden und 0 Ticks.  
  
 Der `value`-Parameter wird auf die nächste Millisekunde gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddSeconds%2A>-Methode verwendet, um 30 Sekunden und die Anzahl der Sekunden in einem Tag zu einem <xref:System.DateTime> Wert hinzuzufügen. Anschließend werden alle neuen Werte angezeigt, und der Unterschied zwischen dem Wert und dem ursprünglichen Wert wird angezeigt. Der Unterschied wird sowohl als Zeitspanne als auch als Anzahl von Ticks angezeigt.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">A number of 100-nanosecond ticks. The <paramref name="value" /> parameter can be positive or negative.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert den Wert dieses <xref:System.DateTime>nicht. Stattdessen wird ein neuer <xref:System.DateTime> zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A number of years. The <paramref name="value" /> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime> Objekts. Stattdessen wird ein neues <xref:System.DateTime> Objekt zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist.  
  
 Die <xref:System.DateTime.AddYears%2A>-Methode berechnet das resultierende Jahr in Rechnung. Der Monats-und Uhrzeitanteil des resultierenden <xref:System.DateTime> Objekts bleibt gleich wie diese Instanz.  
  
 Wenn die aktuelle Instanz den springday in einem Schaltjahr darstellt, hängt der Rückgabewert vom Zieldatum ab:  
  
-   Wenn `value` + <xref:System.DateTime.Year%2A?displayProperty=nameWithType> auch ein Schaltjahr ist, stellt der Rückgabewert den Schalttag in diesem Jahr dar. Wenn beispielsweise vier Jahre zum 29. Februar 2012 hinzugefügt werden, ist das zurückgegebene Datum der 29. Februar 2016.  
  
-   Wenn `value` + <xref:System.DateTime.Year%2A?displayProperty=nameWithType> kein Schaltjahr ist, stellt der Rückgabewert den Tag vor dem Schalttag in diesem Jahr dar. Wenn beispielsweise ein Jahr zum 29. Februar 2012 hinzugefügt wird, ist das zurückgegebene Datum der 28. Februar 2013.  
  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.DateTime.AddYears%2A>-Methode mit einem <xref:System.DateTime> Wert, der ein Schaltjahr darstellt. Es zeigt das Datum für die 15 Jahre vor und die 15 Jahre an, die nach dem 29. Februar 2000 liegen.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
        <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Value Type 
 </term><description> Condition 
 </description></listheader><item><term> Less than zero 
 </term><description><paramref name="t1" /> is earlier than <paramref name="t2" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="t1" /> is the same as <paramref name="t2" />.  
  
 </description></item><item><term> Greater than zero 
 </term><description><paramref name="t1" /> is later than <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Ermitteln der Beziehung zwischen `t1` und `t2`vergleicht die <xref:System.DateTime.Compare%2A>-Methode die <xref:System.DateTime.Ticks%2A>-Eigenschaft von `t1` und `t2`, ignoriert aber deren <xref:System.DateTime.Kind%2A>-Eigenschaft. Bevor Sie <xref:System.DateTime> Objekte vergleichen, stellen Sie sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Compare%2A> Methode.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zwei über Ladungen der <xref:System.DateTime.CompareTo%2A>-Methode geben eine Zahl mit Vorzeichen zurück, die den relativen Wert dieser Instanz und das `value`-Argument angibt, wie in der folgenden Tabelle dargestellt.  
  
|Wert|Beschreibung|  
|-----------|-----------------|  
|Kleiner als 0 (null)|Diese Instanz liegt vor `value`.|  
|Zero|Diese Instanz entspricht `value`.|  
|Größer als 0 (null)|Diese Instanz liegt nach `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to the current instance.</param>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.  
  
 <list type="table"><listheader><term> Value 
 </term><description> Description 
 </description></listheader><item><term> Less than zero 
 </term><description> This instance is earlier than <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> This instance is the same as <paramref name="value" />.  
  
 </description></item><item><term> Greater than zero 
 </term><description> This instance is later than <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die Beziehung zwischen der aktuellen Instanz und der `value`zu bestimmen, vergleicht die <xref:System.DateTime.CompareTo%2A>-Methode die <xref:System.DateTime.Ticks%2A>-Eigenschaft der aktuellen Instanz und `value` aber deren <xref:System.DateTime.Kind%2A>-Eigenschaft ignoriert.  Stellen Sie vor dem Vergleichen von <xref:System.DateTime> Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Dies können Sie erreichen, indem Sie die Werte ihrer <xref:System.DateTime.Kind%2A> Eigenschaften vergleichen.  
  
 Diese Methode implementiert die <xref:System.IComparable%601?displayProperty=nameWithType>-Schnittstelle und bietet eine etwas bessere Leistung als die <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType>-Methoden Überladung, da der `value`-Parameter nicht in ein-Objekt konvertiert werden muss.  
  
   
  
## Examples  
 Im folgenden Beispiel werden drei <xref:System.DateTime>-Objekte instanziiert, eine, die das heutige Datum darstellt, ein weiteres, das das Datum ein Jahr vorher darstellt, und ein drittes, das das Datum in der Zukunft ein Jahr darstellt. Anschließend wird die <xref:System.DateTime.CompareTo%28System.DateTime%29>-Methode aufgerufen, und das Ergebnis des Vergleichs wird angezeigt.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(object value) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ value);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">A boxed object to compare, or <see langword="null" />.</param>
        <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value 
 </term><description> Description 
 </description></listheader><item><term> Less than zero 
 </term><description> This instance is earlier than <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> This instance is the same as <paramref name="value" />.  
  
 </description></item><item><term> Greater than zero 
 </term><description> This instance is later than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die Beziehung zwischen der aktuellen Instanz und der `value`zu bestimmen, vergleicht die <xref:System.DateTime.CompareTo%2A>-Methode die <xref:System.DateTime.Ticks%2A>-Eigenschaft der aktuellen Instanz und `value` aber deren <xref:System.DateTime.Kind%2A>-Eigenschaft ignoriert. Stellen Sie vor dem Vergleichen von <xref:System.DateTime> Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Dies können Sie erreichen, indem Sie die Werte ihrer <xref:System.DateTime.Kind%2A> Eigenschaften vergleichen.  
  
 Jede Instanz von <xref:System.DateTime>unabhängig von ihrem Wert als größer als `null`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.CompareTo%2A> Methode.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> is not a <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date component of this instance.</summary>
        <value>Ein neues Objekt mit demselben Datum wie diese Instanz und einer Uhrzeit von Mitternacht (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts entspricht dem Wert der aktuellen Instanz.  
  
 Da der <xref:System.DateTime>-Typ Datumsangaben und Uhrzeiten in einem einzelnen Typ darstellt, ist es wichtig, die Fehlinterpretation eines Datums, das von der <xref:System.DateTime.Date%2A>-Eigenschaft zurückgegeben wird, als Datum und Uhrzeit zu vermeiden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Date%2A>-Eigenschaft verwendet, um die Datums Komponente eines <xref:System.DateTime> Werts zu extrahieren, deren Zeitkomponente auf NULL (oder 0:00:00 oder Mitternacht) festgelegt ist. Außerdem wird veranschaulicht, dass die Zeitkomponente abhängig von der Format Zeichenfolge, die beim Anzeigen des <xref:System.DateTime> Werts verwendet wird, weiterhin in der formatierten Ausgabe angezeigt werden kann.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the month represented by this instance.</summary>
        <value>Die Tagkomponente als Wert zwischen 1 und 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Day%2A>-Eigenschaft gibt immer den Tag des Monats im gregorianischen Kalender zurück, auch wenn der aktuelle <xref:System.DateTime> Wert mit einem anderen Kalender instanziiert wurde oder der Standardkalender der aktuellen Thread Kultur nicht der gregorianische Kalender ist. Wenn Sie den Tag des Monats eines bestimmten Datums mithilfe eines anderen Kalenders abrufen möchten, rufen Sie die <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> Methode dieses Kalenders auf. Im folgenden Beispiel werden die <xref:System.DateTime.Day%2A>-Eigenschaft und die <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>-Methode verwendet, um den Tag des Monats für einen <xref:System.DateTime> Wert abzurufen, der mit dem Hijri-Kalender instanziiert wird.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Entsprechend werden im folgenden Beispiel sowohl die <xref:System.DateTime.Day%2A>-Eigenschaft als auch die <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>-Methode verwendet, um den Tag des Monats abzurufen, wenn die aktuelle Thread Kultur "ar-SA" ist, die Hijri als Standardkalender verwendet.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Day%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the week represented by this instance.</summary>
        <value>Eine Enumerationskonstante, die den Wochentag dieses <see cref="T:System.DateTime" />-Werts angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der Konstanten in der <xref:System.DayOfWeek> Enumeration reicht von <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> bis <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Wenn Sie in eine ganze Zahl umgewandelt wird, reicht der Wert von 0 (null) (was <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) auf sechs (<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Die <xref:System.DateTime.DayOfWeek%2A>-Eigenschaft gibt eine Enumerationskonstante zurück. Es spiegelt nicht die Regions-und Spracheinstellungen eines Systems wider. Um eine Zeichenfolge abzurufen, die einen lokalisierten Wochentagsnamen für ein bestimmtes Datum darstellt, rufen Sie eine der über Ladungen der <xref:System.DateTime.ToString%2A> Methode auf, die einen `format`-Parameter enthält, und übergeben Sie entweder die `ddd` oder `dddd` benutzerdefinierte Format Zeichenfolgen. Weitere Informationen finden Sie unter Gewusst [wie: Extrahieren des Wochentags aus einem bestimmten Datum](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die <xref:System.DateTime.DayOfWeek%2A>-Eigenschaft und die <xref:System.DayOfWeek?displayProperty=nameWithType>-Enumeration veranschaulicht.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the year represented by this instance.</summary>
        <value>Der Tag des Jahres als Wert zwischen 1 und 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Berechnen des Wochentags werden bei der <xref:System.DateTime.DayOfYear%2A>-Eigenschaft Schaltjahre berücksichtigt. Der Eigenschafts Wert gibt immer den Tag des Jahres im gregorianischen Kalender an, unabhängig vom aktuellen Kalender der aktuellen Thread Kultur. Rufen Sie die <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType>-Methode dieses Kalenders auf, um den Tag des Jahres in einem anderen Kalender abzurufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Tag des Jahres des 31. Dezember für die Jahre 2010-2020 im gregorianischen Kalender angezeigt. Beachten Sie, dass das Beispiel zeigt, dass der 31. Dezember der 31. Dezember der Jahrestage in Schaltjahren ist.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year.</param>
        <param name="month">The month (a number ranging from 1 to 12).</param>
        <summary>Returns the number of days in the specified month and year.</summary>
        <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.  
  
For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.DaysInMonth%2A>-Methode interpretiert immer `month` und `year` als Monat und Jahr des gregorianischen Kalenders, auch wenn der gregorianische Kalender nicht der aktuelle Kalender der aktuellen Kultur ist. Um die Anzahl von Tagen in einem bestimmten Monat eines bestimmten Kalenders abzurufen, nennen Sie die <xref:System.Globalization.Calendar.GetDaysInMonth%2A>-Methode dieses Kalenders.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.DateTime.DaysInMonth%2A>-Methode verwendet wird, um die Anzahl der Tage im Juli 2001, im Februar 1998 (ein nicht-Schaltjahr) und 1996 (ein Schaltjahr) zu bestimmen.  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 Im folgenden Beispiel wird die Anzahl der Tage in den einzelnen Monaten eines Jahres angezeigt, die in einem ganzzahligen Array angegeben sind.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> is less than 1 or greater than 12.  
  
-or- 
 <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> objects, or a <see cref="T:System.DateTime" /> instance and another object or <see cref="T:System.DateTime" />, have the same value.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:System.DateTime" /> instance.</summary>
        <returns><see langword="true" /> if the <paramref name="value" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Instanz und `value` sind gleich, wenn Ihre <xref:System.DateTime.Ticks%2A> Eigenschaftswerte gleich sind. Die <xref:System.DateTime.Kind%2A> Eigenschaftswerte werden im Test nicht auf Gleichheit überprüft.  
  
 Diese Methode implementiert die <xref:System.IEquatable%601?displayProperty=nameWithType>-Schnittstelle und bietet eine etwas bessere Leistung als die <xref:System.DateTime.Equals%2A>-Methode, da der `value`-Parameter nicht in ein-Objekt konvertiert werden muss.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns><see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Instanz und `value` sind gleich, wenn Ihre <xref:System.DateTime.Ticks%2A> Eigenschaftswerte gleich sind. Die <xref:System.DateTime.Kind%2A> Eigenschaftswerte werden im Test nicht auf Gleichheit überprüft.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> instances  have the same date and time value.</summary>
        <returns><see langword="true" /> if the two values are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` und `t2` sind gleich, wenn Ihre <xref:System.DateTime.Ticks%2A> Eigenschaftswerte gleich sind. Die <xref:System.DateTime.Kind%2A> Eigenschaftswerte werden im Test nicht auf Gleichheit überprüft.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field.</param>
        <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
        <returns>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.DateTime.ToBinary%2A>-Methode, um den Wert des aktuellen <xref:System.DateTime> Objekts in einen binären Wert zu konvertieren. Verwenden Sie anschließend den binären Wert und die <xref:System.DateTime.FromBinary%2A>-Methode, um das ursprüngliche <xref:System.DateTime>-Objekt erneut zu erstellen.  
  
> [!IMPORTANT]
>  In einigen Fällen ist der von der <xref:System.DateTime.FromBinary%2A>-Methode zurückgegebene <xref:System.DateTime> Wert nicht mit dem ursprünglichen <xref:System.DateTime> Wert identisch, der für die <xref:System.DateTime.ToBinary%2A>-Methode bereitgestellt wird. Weitere Informationen finden Sie im nächsten Abschnitt "lokale Zeitanpassung".  
  
## <a name="local-time-adjustment"></a>Lokale Zeitanpassung  
 Eine lokale Uhrzeit, bei der es sich um eine koordinierte Weltzeit handelt, die auf die lokale Zeitzone abgestimmt ist, wird durch eine <xref:System.DateTime> Struktur dargestellt, deren <xref:System.DateTime.Kind%2A>-Eigenschaft den Wert <xref:System.DateTimeKind.Local>hat. Beim Wiederherstellen eines lokalen <xref:System.DateTime> Werts aus der binären Darstellung, die durch die <xref:System.DateTime.ToBinary%2A>-Methode erzeugt wird, kann die <xref:System.DateTime.FromBinary%2A>-Methode den neu erstellten Wert so anpassen, dass er nicht gleich dem ursprünglichen Wert ist. Dieser Fall kann unter den folgenden Bedingungen eintreten:  
  
-   Wenn ein lokales <xref:System.DateTime> Objekt mit der <xref:System.DateTime.ToBinary%2A>-Methode in einer Zeitzone serialisiert und anschließend durch die <xref:System.DateTime.FromBinary%2A>-Methode in einer anderen Zeitzone deserialisiert wird, wird die vom resultierenden <xref:System.DateTime> Objekt dargestellte lokale Zeit automatisch an die zweite Zeitzone angepasst.  
  
     Stellen Sie sich beispielsweise ein <xref:System.DateTime> Objekt vor, das eine Ortszeit von 3 Uhr darstellt. Eine Anwendung, die in der USA Pacific Time-Zone ausgeführt wird, verwendet die <xref:System.DateTime.ToBinary%2A>-Methode, um diese <xref:System.DateTime> Objekt in einen binären Wert zu konvertieren. Eine andere Anwendung, die in der Region "USA, Osten" ausgeführt wird, verwendet dann die <xref:System.DateTime.FromBinary%2A>-Methode, um den binären Wert in ein neues <xref:System.DateTime>-Objekt zu konvertieren. Der Wert des neuen <xref:System.DateTime> Objekts ist 6 Uhr, was denselben Zeitpunkt wie das ursprüngliche 3-pm-Objekt darstellt. , wird jedoch an die Ortszeit in der Eastern Time-Zone angepasst.  
  
-   Wenn die binäre Darstellung eines lokalen <xref:System.DateTime> Werts eine ungültige Zeit in der lokalen Zeitzone des Systems darstellt, für das <xref:System.DateTime.FromBinary%2A> aufgerufen wird, wird die Uhrzeit so angepasst, dass Sie gültig ist.  
  
     Beispielsweise findet der Übergang von der Standardzeit zur Sommerzeit in der Pacific Time Zone der USA am 14. März 2010 um 2:00 Uhr statt, wenn die Zeit um eine Stunde um um 3:00 Uhr liegt. Dieses Stunden Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass eine Zeitspanne, die in diesen Bereich fällt, von der <xref:System.DateTime.ToBinary%2A>-Methode in einen binären Wert konvertiert und dann mit der <xref:System.DateTime.FromBinary%2A>-Methode wieder hergestellt wird. der ursprüngliche Wert wird so angepasst, dass er zu einer gültigen Zeit wird. Sie können bestimmen, ob ein bestimmter Datums-und Uhrzeitwert geändert werden kann, indem er an die <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>-Methode übergeben wird, wie im Beispiel veranschaulicht.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Überlegungen zur Version  
 Beginnend mit der .NET Framework Version 2,0 besteht eine <xref:System.DateTime> Struktur aus einem privaten feldfeld, das angibt, ob die angegebene Zeit Ortszeit, koordinierte Weltzeit (UTC) oder keines von beiden ist, das mit dem Feld "private Ticks" verkettet ist, das das Anzahl der 100-Nanosekunden-Ticks, die ein Datum und eine Uhrzeit angeben. Auf die Anzahl der Ticks kann mit der <xref:System.DateTime.Ticks%2A>-Eigenschaft zugegriffen werden, und auf das Kind-Feld kann mit der <xref:System.DateTime.Kind%2A>-Eigenschaft zugegriffen werden.  
  
 Wenn Sie vor dem .NET Framework 2,0 ein <xref:System.DateTime> Objekt manuell serialisiert haben, statt eine Serialisierungsschnittstelle wie <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>zu verwenden, mussten Sie nur die Ticks-Daten in der <xref:System.DateTime>serialisieren. Beginnend mit dem .NET Framework 2,0 müssen Sie auch die Art der Daten serialisieren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent local time.</summary>
        <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n/s verstrichen sind. unserer Zeitrechnung Koordinierte Weltzeit (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wann eine Anwendung eine Datei erstellt, zugreift oder in eine Datei schreibt.  
  
 Der `fileTime`-Parameter gibt eine Datei Zeit in 100-Nanosekunden-Ticks an.  
  
 Beginnend mit der .NET Framework Version 2,0 ist der Rückgabewert ein <xref:System.DateTime>, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.FromFileTime%2A> Methode.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage"><para>Normalerweise stellt die <see cref="M:System.DateTime.FromFileTime(System.Int64)" />-Methode einen <see cref="T:System.DateTime" /> Wert wieder her, der von der <see cref="M:System.DateTime.ToFileTime" />-Methode gespeichert wurde. Die beiden Werte können sich jedoch unter den folgenden Bedingungen unterscheiden: 
: Wenn die Serialisierung und Deserialisierung des <see cref="T:System.DateTime" /> Werts in anderen Zeitzonen erfolgt. Beispiel: Wenn ein <see cref="T:System.DateTime" /> Wert mit einer Uhrzeit von 12:30 Uhr in der Region "USA, Osten" wird serialisiert und anschließend in der Zeitzone "USA, Pazifik" deserialisiert, der ursprüngliche Wert von 12:30 Uhr wird an 9:30 Uhr angepasst. , um den Unterschied zwischen den beiden Zeitzonen widerzuspiegeln.  
  
-Wenn der <see cref="T:System.DateTime" /> Wert, der serialisiert wird, eine ungültige Zeit in der lokalen Zeitzone darstellt. In diesem Fall passt die <see cref="M:System.DateTime.ToFileTime" />-Methode den wiederhergestellten <see cref="T:System.DateTime" /> Wert so an, dass er eine gültige Zeit in der lokalen Zeitzone darstellt.  
  
Der Übergang von der Standardzeit zur Sommerzeit erfolgt z. b. in der US-Pazifik-Zeitzone am 14. März 2010 um 2:00 Uhr, wenn die Zeit um eine Stunde um um 3:00 Uhr liegt. Dieses Stunden Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass eine Zeitspanne, die in diesen Bereich fällt, durch die <see cref="M:System.DateTime.ToFileTime" />-Methode in einen Long-ganzzahligen Wert konvertiert und dann durch die <see cref="M:System.DateTime.FromFileTime(System.Int64)" />-Methode wieder hergestellt wird. der ursprüngliche Wert wird so angepasst, dass er zu einer gültigen Zeit wird. Sie können bestimmen, ob ein bestimmter Datums-und Uhrzeitwert geändert werden kann, indem er an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />-Methode übergeben wird, wie im Beispiel veranschaulicht.  
  
[! Code-csharp[System. DateTime. FromFileTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! Code-vb[System. DateTime. FromFileTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
        <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n/s verstrichen sind. unserer Zeitrechnung Koordinierte Weltzeit (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wann eine Anwendung eine Datei erstellt, zugreift oder in eine Datei schreibt.  
  
 Der `fileTime`-Parameter gibt eine Datei Zeit in 100-Nanosekunden-Ticks an.  
  
 Beginnend mit der .NET Framework Version 2,0 ist der Rückgabewert ein <xref:System.DateTime>, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Utc>ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="d">An OLE Automation Date value.</param>
        <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</summary>
        <returns>An object that represents the same date and time as <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `d`-Parameter ist eine Gleit Komma Zahl mit doppelter Genauigkeit, die ein Datum als Anzahl von Tagen vor oder nach dem Basisdatum (Mitternacht, 30. Dezember 1899) darstellt. Der Zeichen-und ganzzahlige Teil von `d` die das Datum als positive oder negative Tages Verschiebung vom 30. Dezember 1899 codieren, und der absolute Wert des Bruchteils der `d` codiert die Tageszeit als Bruchteil eines tagesverschiebungen von Mitternacht. `d` muss ein Wert zwischen einem negativen 657435,0 und einem positiven 2958465,99999999 sein.  
  
 Beachten Sie, dass aufgrund der Art und Weise, wie Datumsangaben codiert werden, zwei Möglichkeiten zum Darstellen einer beliebigen Tageszeit am 30. Dezember 1899. Beispielsweise bedeuten "-0,5" und "0,5" am 30. Dezember 1899 Uhr, weil eine Tages Verschiebung von Plus-oder minus 0 Tagen ab dem Basisdatum noch das Basisdatum ist, und eine halbe Tages Verschiebung von Mitternacht Uhr Uhr.  
  
 Weitere Informationen zur OLE-Automatisierung finden Sie unter <xref:System.DateTime.ToOADate%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Sie sollten nicht davon ausgehen, dass mehrere Aufrufe der <xref:System.DateTime.GetDateTimeFormats%2A> Überladungen identische Daten zurückgeben. Abhängig von der jeweiligen Überladung können sich die von dieser Methode zurückgegebenen Daten ändern, wenn sich die aktuelle Kultur ändert, der Benutzer die einzelnen kulturellen Einstellungen überschreibt oder ein Update auf die kulturellen Daten des Systems durchgeführt wird.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Zeichen folgen Array, das von der <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>-Methode zurückgegeben wird, entspricht dem Kombinieren der Zeichen folgen Arrays, die von separaten Aufrufen der <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType>-Methode mit "d" zurückgegeben werden. die Standardformat Zeichenfolgen "d", "f", "f", "g", "g", "m", "o", "r", "s", "t", "t", "u", "u" und "y". Weitere Informationen zu Standardformat Bezeichnerzeichen finden Sie unter Standardformat Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird anhand von Informationen aus der aktuellen Kultur formatiert. Weitere Informationen zu kulturspezifischen Formatierungsinformationen für die aktuelle Kultur finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Da bei dieser Methode Kultur abhängige Daten verwendet werden, sollten Sie nicht davon ausgehen, dass mehrere Aufrufe der-Methode identische Daten zurückgeben. Die von dieser Methode zurückgegebenen Daten können sich ändern, wenn sich die aktuelle Kultur ändert, der Benutzer die einzelnen kulturellen Einstellungen überschreibt oder ein Update auf die kulturellen Daten des Systems durchgeführt wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> Methode. Es zeigt die Zeichen folgen Darstellung eines Datums mit allen möglichen Standard Datums-und Uhrzeit Formaten in der aktuellen Kultur des Computers an, in diesem Fall "en-US".  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 Im Beispiel wird die folgende Ausgabe angezeigt:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">A standard date and time format string.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `format`-Parameter kann einer der Standardformat Bearbeiter für Datum und Uhrzeit sein. Hierzu gehören d, d, f, f, g, g, m (oder m), o (oder o), r (oder r), s, t, t, u, u und y (oder y). Weitere Informationen finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird anhand von Informationen aus der aktuellen Kultur formatiert. Weitere Informationen zu kulturspezifischen Formatierungsinformationen für die aktuelle Kultur finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Da bei dieser Methode Kultur abhängige Daten verwendet werden, sollten Sie nicht davon ausgehen, dass mehrere Aufrufe der-Methode identische Daten zurückgeben. Die von dieser Methode zurückgegebenen Daten können sich ändern, wenn sich die aktuelle Kultur ändert, der Benutzer die einzelnen kulturellen Einstellungen überschreibt oder ein Update auf die kulturellen Daten des Systems durchgeführt wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> Methode. Es zeigt die Zeichen folgen Darstellung eines Datums mit dem Long Date Format Bezeichner ("D") für die aktuelle Kultur an.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Zeichen folgen Array, das von der <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>-Methode zurückgegeben wird, entspricht dem Kombinieren der Zeichen folgen Arrays, die von separaten Aufrufen der <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-Methode mit "d" zurückgegeben werden. die Standardformat Zeichenfolgen "d", "f", "f", "g", "g", "m", "o", "r", "s", "t", "t", "u", "u" und "y". Weitere Informationen zu Standardformat Bezeichnerzeichen finden Sie unter Standardformat Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird mithilfe von kulturspezifischen Informationen formatiert, die von `provider`bereitgestellt werden.  
  
> [!IMPORTANT]
>  Da bei dieser Methode Kultur abhängige Daten verwendet werden, sollten Sie nicht davon ausgehen, dass mehrere Aufrufe der-Methode identische Daten zurückgeben, es sei denn, `provider` ist ein <xref:System.Globalization.CultureInfo> Objekt, das die invariante Kultur darstellt. Die von dieser Methode zurückgegebenen Daten können sich ändern, wenn der Benutzer die einzelnen kulturellen Einstellungen von `provider` außer Kraft setzt oder wenn ein Update auf die kulturellen Daten des Systems für `provider`erfolgt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> Methode. Es zeigt die Zeichen folgen Darstellung eines Datums mithilfe aller möglichen Standard Datums-und Uhrzeit Formate für die fr-FR-Kultur an.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 Im Beispiel wird die folgende Ausgabe angezeigt:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Format-Parameter kann ein beliebiger Standardformat Bearbeiter für Datum und Uhrzeit sein. Hierzu gehören d, d, f, f, g, g, m (oder m), o (oder o), r (oder r), s, t, t, u, u und y (oder y). Weitere Informationen finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird mithilfe von kulturspezifischen Informationen formatiert, die von `provider`bereitgestellt werden.  
  
> [!IMPORTANT]
>  Da bei dieser Methode Kultur abhängige Daten verwendet werden, sollten Sie nicht davon ausgehen, dass mehrere Aufrufe der-Methode identische Daten zurückgeben, es sei denn, `provider` ist ein <xref:System.Globalization.CultureInfo> Objekt, das die invariante Kultur darstellt. Die von dieser Methode zurückgegebenen Daten können sich ändern, wenn der Benutzer die einzelnen kulturellen Einstellungen von `provider` außer Kraft setzt oder wenn ein Update auf die kulturellen Daten des Systems für `provider`erfolgt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> Methode. Die Zeichen folgen Darstellungen eines Datums werden mithilfe des kurzdatums Format Bezeichnern ("d") für die fr-FR-Kultur angezeigt.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
        <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hour component of the date represented by this instance.</summary>
        <value>Die Stundenkomponente als Wert zwischen 0 und 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der <xref:System.DateTime.Hour%2A>-Eigenschaft wird immer mit einem 24-Stunden-Format ausgedrückt. Um eine Zeichenfolge abzurufen, die die Stunde einer Datums-und Uhrzeitangabe mit einem 12-Stunden-Format darstellt, rufen Sie die Methode <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> oder <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> mit dem benutzerdefinierten Format Bezeichner "h" auf. Beispiel:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Hour%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</summary>
        <returns><see langword="true" /> if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; <see langword="false" /> if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bestimmt, ob der aktuelle <xref:System.DateTime> Wert innerhalb des Sommerzeit Bereichs der lokalen Zeitzone liegt, der von der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird. Sie können bestimmen, ob eine Zeitzone die Sommerzeit unterstützt, indem Sie den Wert der <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType>-Eigenschaft abrufen. Bei Zeitzonen, die die Sommerzeit beobachten, können Sie bestimmen, wann der Übergang zu und von der Sommerzeit erfolgt, indem Sie das <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> Array abrufen, das von der <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType>-Eigenschaft der Zeitzone zurückgegeben wird.  
  
 Wenn der aktuelle <xref:System.DateTime> Wert entweder eine mehrdeutige oder eine ungültige Uhrzeit in der lokalen Zeitzone darstellt, gibt die Methode `false`zurück.  
  
 Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systemen erkennt die <xref:System.DateTime.IsDaylightSavingTime%2A>-Methode nur die aktuelle Anpassungs Regel, wenn bestimmt wird, ob es sich bei der aktuellen Instanz um eine Sommerzeit handelt. Folglich meldet die Methode möglicherweise nicht genau, ob es sich bei der aktuellen Instanz um eine Sommerzeit für Zeiträume handelt, bevor die aktuelle Anpassungs Regel wirksam wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">A 4-digit year.</param>
        <summary>Returns an indication whether the specified year is a leap year.</summary>
        <returns><see langword="true" /> if <paramref name="year" /> is a leap year; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` wird als vierstellige Basis 10-Nummer angegeben. Beispiel: 1996.  
  
 `year` wird immer als Jahr im gregorianischen Kalender interpretiert. Um zu ermitteln, ob ein bestimmtes Jahr ein Schaltjahr in einem anderen Kalender war, nennen Sie die `IsLeapYear`-Methode dieses Kalender Objekts.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.IsLeapYear%2A>-Methode verwendet, um zu bestimmen, welche Jahre zwischen 1994 und 2014 Schaltjahre sind. Das Beispiel veranschaulicht auch das Ergebnis, wenn die <xref:System.DateTime.AddYears%2A>-Methode verwendet wird, um ein Jahr zu einem Schalt Tag hinzuzufügen.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
        <value>Einer der Enumerationswerte, der angibt, welche Zeit von der aktuellen Uhrzeit dargestellt wird. Die Standardeinstellung ist <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.DateTime.Kind%2A>-Eigenschaft eines neuen <xref:System.DateTime> Werts explizit auf einen bestimmten <xref:System.DateTimeKind> Wert festlegen, indem Sie die <xref:System.DateTime.SpecifyKind%2A>-Methode aufrufen.  
  
 Mit der <xref:System.DateTime.Kind%2A>-Eigenschaft kann ein <xref:System.DateTime> Wert die koordinierte Weltzeit (UTC) oder die Ortszeit eindeutig widerspiegeln. Im Gegensatz dazu kann die <xref:System.DateTimeOffset> Struktur jede Zeit in jeder Zeitzone eindeutig als einen einzelnen Zeitpunkt reflektieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A>-Methode verwendet, um zu veranschaulichen, wie sich die <xref:System.DateTime.Kind%2A>-Eigenschaft auf die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Konvertierungs Methoden auswirkt  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstante entspricht 23:59:59.9999999 UTC, 31. Dezember 9999 im gregorianischen Kalender, genau 1 100-Nanosecond-Tick vor 00:00:00 UTC, 1. Januar 10000.  
  
 Einige Kalender, wie z. b. die <xref:System.Globalization.ThaiBuddhistCalendar>, unterstützen einen oberen Datumsbereich vor <xref:System.DateTime.MaxValue>. In diesen Fällen kann der Versuch, auf <xref:System.DateTime.MaxValue> in Variablen Zuweisungen oder Formatierungs-und Verarbeitungsvorgängen zuzugreifen, eine <xref:System.ArgumentOutOfRangeException>auslösen. Anstatt den Wert <xref:System.DateTime.MaxValue?displayProperty=nameWithType>abzurufen, können Sie den Wert des letzten gültigen Datums Werts der angegebenen Kultur aus der <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType>-Eigenschaft abrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.DateTime> Objekt instanziiert, indem der zugehörige Konstruktor ein <xref:System.Int64> Wert übergeben wird, der eine Reihe von Ticks darstellt. Vor dem Aufrufen des Konstruktors stellt das Beispiel sicher, dass dieser Wert größer als oder gleich `DateTime.MinValue.Ticks` und kleiner als oder gleich `DateTime.MaxValue.Ticks`ist. Wenn dies nicht der Fall ist, wird ein <xref:System.ArgumentOutOfRangeException>ausgelöst.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the milliseconds component of the date represented by this instance.</summary>
        <value>Die Millisekundenkomponente als Wert zwischen 0 und 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die Zeichen folgen Darstellung der <xref:System.DateTime.Millisecond%2A>-Eigenschaft anzeigen, indem Sie den Format Bezeichner "fff" verwenden. Im folgenden Code wird z. b. eine Zeichenfolge mit der Anzahl der Millisekunden in einem Datum und einer Uhrzeit der Konsole angezeigt.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Sie können die Millisekundenkomponente auch mit den anderen Komponenten eines Datums-und Uhrzeitwerts anzeigen, indem Sie den Standardformat Bezeichner "o" verwenden. Beispiel:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Der Format Bezeichner "o" ist jedoch weniger für die Anzeige vorgesehen, als für das Roundtrip oder Speichern eines <xref:System.DateTime> Werts. Sie können auch Millisekunden mit anderen Datums-und Uhrzeit Komponenten anzeigen, indem Sie eine benutzerdefinierte Format Zeichenfolge verwenden, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Millisecond%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minute component of the date represented by this instance.</summary>
        <value>Die Minutenkomponente als Wert zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Minute%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstante entspricht 00:00:00.0000000 UTC, 1. Januar 0001 im gregorianischen Kalender.  
  
 <xref:System.DateTime.MinValue> definiert das Datum und die Uhrzeit, die einer nicht initialisierten <xref:System.DateTime> Variablen zugewiesen werden. Das folgende Beispiel veranschaulicht dies.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 Die Eigenschaften <xref:System.DateTime.MinValue> und <xref:System.DateTime.MaxValue> können verwendet werden, um sicherzustellen, dass ein Wert innerhalb des unterstützten Bereichs liegt, bevor er an einen <xref:System.DateTime>-Konstruktor übergeben wird. Der Code im Beispiel Abschnitt veranschaulicht diese Verwendung.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.DateTime> Objekt instanziiert, indem der zugehörige Konstruktor ein <xref:System.Int64> Wert übergeben wird, der eine Reihe von Ticks darstellt. Vor dem Aufrufen des Konstruktors stellt das Beispiel sicher, dass dieser Wert größer als oder gleich `DateTime.MinValue.Ticks` und kleiner als oder gleich `DateTime.MaxValue.Ticks`ist. Wenn dies nicht der Fall ist, wird ein <xref:System.ArgumentOutOfRangeException>ausgelöst.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the month component of the date represented by this instance.</summary>
        <value>Die Monatskomponente als Wert zwischen 1 und 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Month%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
        <value>Ein Objekt, dessen Wert die aktuelle lokale Datums- und Uhrzeitangabe ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Now%2A>-Eigenschaft gibt einen <xref:System.DateTime>-Wert zurück, der das aktuelle Datum und die aktuelle Uhrzeit auf dem lokalen Computer darstellt. Beachten Sie, dass es einen Unterschied zwischen einem <xref:System.DateTime> Wert gibt, der die Anzahl der Ticks darstellt, die seit Mitternacht des 1. Januar 0001 verstrichen sind, sowie die Zeichen folgen Darstellung dieses <xref:System.DateTime> Werts, der einen Datums-und Uhrzeitwert in einem kulturspezifisches bestimmtes Format. Weitere Informationen zum Formatieren von Datums-und Uhrzeitwerten finden Sie in der <xref:System.DateTime.ToString%2A>-Methode. Im folgenden Beispiel wird die kurze Datums-und Uhrzeit Zeichenfolge in einer Reihe von kulturspezifischen Formaten angezeigt.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 Die Auflösung dieser Eigenschaft hängt vom System Timer ab, der vom zugrunde liegenden Betriebssystem abhängt. Der Wert liegt tendenziell zwischen 0,5 und 15 Millisekunden. Daher kann es vorkommen, dass wiederholte Aufrufe der <xref:System.DateTime.Now%2A>-Eigenschaft in einem kurzen Zeitintervall (z. b. in einer-Schleife) denselben Wert zurückgeben.  
  
 Die <xref:System.DateTime.Now%2A>-Eigenschaft wird häufig verwendet, um die Leistung zu messen. Aufgrund der geringen Auflösung ist Sie jedoch nicht für die Verwendung als Benchmarktool geeignet. Eine bessere Alternative ist die Verwendung der <xref:System.Diagnostics.Stopwatch>-Klasse.  
  
 Beginnend mit der .NET Framework Version 2,0 ist der Rückgabewert ein <xref:System.DateTime>, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>zurückgibt.  
  
> [!NOTE]
>  Sie können auch die <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType>-Eigenschaft verwenden, um das aktuelle lokale Datum und die aktuelle Uhrzeit abzurufen. Dadurch kann eine lokale Zeit eindeutig als einzelner Zeitpunkt ausgedrückt werden, was wiederum dazu führt, dass der Zeitwert Computer übergreifend portabel ist.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Eigenschaften <xref:System.DateTime.Now%2A> und <xref:System.DateTime.UtcNow%2A> verwendet, um das aktuelle lokale Datum und die aktuelle Uhrzeit sowie das aktuelle universelle koordinierte Datum und die Uhrzeit abzurufen. Anschließend werden die Zeichen folgen mithilfe der Formatierungs Konventionen einer Reihe von Kulturen und den Werten ihrer <xref:System.DateTime.Kind%2A> Eigenschaften angezeigt.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to add.</param>
        <param name="t">The time interval to add.</param>
        <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
        <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel veranschaulicht den Additions Operator.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
        <returns><see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.DateTime.op_Equality%2A>-Operator bestimmt, ob zwei <xref:System.DateTime> Werte gleich sind, indem er die Anzahl der Ticks vergleicht. Stellen Sie vor dem Vergleichen von <xref:System.DateTime> Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel wird der Gleichheits Operator veranschaulicht.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns><see langword="true" /> if <paramref name="t1" /> is later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.DateTime.op_GreaterThan%2A>-Operator bestimmt die Beziehung zwischen zwei <xref:System.DateTime> Werten, indem er die Anzahl der Ticks vergleicht. Stellen Sie vor dem Vergleichen von <xref:System.DateTime> Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns><see langword="true" /> if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.DateTime.op_GreaterThanOrEqual%2A>-Operator bestimmt die Beziehung zwischen zwei <xref:System.DateTime> Werten, indem er die Anzahl der Ticks vergleicht. Stellen Sie vor dem Vergleichen von <xref:System.DateTime> Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
        <returns><see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.DateTime.op_Inequality%2A>-Operator bestimmt, ob zwei <xref:System.DateTime> Werte ungleich sind, indem Sie die Anzahl der Ticks vergleichen. Stellen Sie vor dem Vergleichen von <xref:System.DateTime> Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns><see langword="true" /> if <paramref name="t1" /> is earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.DateTime.op_LessThan%2A>-Operator bestimmt die Beziehung zwischen zwei <xref:System.DateTime> Werten, indem er die Anzahl der Ticks vergleicht. Stellen Sie vor dem Vergleichen von <xref:System.DateTime> Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns><see langword="true" /> if <paramref name="t1" /> is the same as or earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.DateTime.op_LessThanOrEqual%2A>-Operator bestimmt die Beziehung zwischen zwei <xref:System.DateTime> Werten, indem er die Anzahl der Ticks vergleicht. Stellen Sie vor dem Vergleichen von <xref:System.DateTime> Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified <see cref="T:System.DateTime" /> or<see cref="T:System.TimeSpan" /> from a specified <see cref="T:System.DateTime" />.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The date and time value to subtract from (the minuend).</param>
        <param name="d2">The date and time value to subtract (the subtrahend).</param>
        <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
        <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29>-Methode berücksichtigt nicht den Wert der <xref:System.DateTime.Kind%2A>-Eigenschaft der beiden <xref:System.DateTime> Werte, wenn die Subtraktion durchgeführt wird. Stellen Sie vor dem subtrahieren <xref:System.DateTime>-Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Andernfalls enthält das Ergebnis den Unterschied zwischen Zeitzonen.  
  
> [!NOTE]
>  Bei der <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>-Methode wird der Unterschied zwischen Zeitzonen beim Ausführen der Subtraktion berücksichtigt.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden die <xref:System.DateTime.Subtract%2A>-Methode und der Subtraktions Operator veranschaulicht.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to subtract from.</param>
        <param name="t">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
        <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode subtrahiert den Ticks-Wert von `t` vom Ticks-Wert `d`.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden die <xref:System.DateTime.Subtract%2A>-Methode und der Subtraktions Operator veranschaulicht.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks  
 In diesem Abschnitt:  
  
- [Welche Methode rufe ich auf?](#Tasks)
- [Die zu über teilbare Zeichenfolge.](#StringToParse)
- [Und kulturelle Konventionen](#Culture)
- [Formatieren und Formatieren von Elementen](#Styles)
- [Der Rückgabewert und DateTime. Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Welche Methode rufe ich auf?  
  
|Zweck|Call|  
|--------|----------|  
|Analysieren Sie eine Datums-und Uhrzeit Zeichenfolge mithilfe der Konventionen der aktuellen Kultur.|<xref:System.DateTime.Parse%28System.String%29>-Überladung|  
|Analysieren Sie eine Datums-und Uhrzeit Zeichenfolge mithilfe der Konventionen einer bestimmten Kultur.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> Überladung (siehe "auswerten [und kulturelle Konventionen](#Culture)")|  
|Analysieren Sie eine Datums-und Uhrzeit Zeichenfolge mit speziellen Stilelementen (z. b. Leerzeichen oder Leerzeichen).|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Überladung|  
|Analysieren Sie eine Datums-und Uhrzeit Zeichenfolge, die in einem bestimmten Format vorliegen muss.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> oder <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analysieren Sie eine Datums-und Uhrzeit Zeichenfolge, und führen Sie eine Konvertierung in UTC oder Ortszeit durch.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Überladung|  
|Analysieren Sie eine Datums-und Uhrzeit Zeichenfolge, ohne Ausnahmen zu behandeln.|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>-Methode|  
|Stellen Sie einen von einem Formatierungs Vorgang erstellten Datums-und Uhrzeitwert wieder her (Roundtrip).|Übergeben Sie die Standardformat Zeichenfolge "o" oder "r" an die <xref:System.DateTime.ToString%28System.String%29>-Methode, und nennen Sie die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Überladung mit <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analysieren Sie eine Datums-und Uhrzeit Zeichenfolge in einem bestimmten Format (und möglicherweise an Kultur Grenzen).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>-oder <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>-Methode|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>Die zu über teilbare Zeichenfolge.  
 Die <xref:System.DateTime.Parse%2A>-Methode versucht, die Zeichen folgen Darstellung eines Datums-und Uhrzeitwerts in seine <xref:System.DateTime> Entsprechung zu konvertieren. Es wird versucht, die Eingabe Zeichenfolge vollständig zu analysieren, ohne eine <xref:System.FormatException> Ausnahme auszulösen.  
  
> [!IMPORTANT]
>  Wenn der-Vorgang aufgrund eines nicht erkannten Zeichen folgen Formats fehlschlägt, löst die <xref:System.DateTime.Parse%2A>-Methode eine <xref:System.FormatException>aus, während die <xref:System.DateTime.TryParse%2A>-Methode `false`zurückgibt. Da die Ausnahmebehandlung sehr aufwändig sein kann, sollten Sie <xref:System.DateTime.Parse%2A> verwenden, wenn erwartet wird, dass der Vorgang erfolgreich ausgeführt wird, da die Eingabe Quelle vertrauenswürdig ist. <xref:System.DateTime.TryParse%2A> ist vorzuziehen, wenn Analysefehler wahrscheinlich auftreten, insbesondere weil eine Eingabe Quelle nicht vertrauenswürdig ist, oder wenn Sie über angemessene Standardwerte verfügen, um Zeichen folgen zu ersetzen, die nicht erfolgreich analysiert werden.   

 Die zu erteilende Zeichenfolge kann eine der folgenden Formen aufweisen:  
  
-   Eine Zeichenfolge mit einem Datum und einer Zeitkomponente.  
  
-   Eine Zeichenfolge mit einem Datum, aber keiner Zeitkomponente. Wenn die Zeitkomponente fehlt, geht die Methode von 12:00 Mitternacht aus. Wenn die Datums Komponente ein zweistelliges Jahr aufweist, wird Sie basierend auf dem <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> des aktuellen Kalenders der aktuellen Kultur oder dem aktuellen Kalender der angegebenen Kultur in ein Jahr konvertiert (wenn Sie eine Überladung mit einem `provider` Argument verwenden, das nicht NULL ist).  
  
- Eine Zeichenfolge mit einer Datums Komponente, die nur den Monat und das Jahr, aber keine Tages Komponente enthält. Die-Methode nimmt den ersten Tag des Monats an.

- Eine Zeichenfolge mit einer Datums Komponente, die nur den Monat und den Tag, aber keine Jahres Komponente enthält. Die-Methode setzt das aktuelle Jahr voraus.

-   Eine Zeichenfolge mit einer Zeit, aber ohne Datums Komponente. Die Methode nimmt das aktuelle Datum an, es sei denn, Sie geben die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Überladung an und schließen <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> in das `styles`-Argument ein. in diesem Fall geht die Methode von einem Datum vom 1. Januar 0001 aus.  

- Eine Zeichenfolge mit einer Zeitkomponente, die nur die Stunde und einen am/pm-Kenn Zeichner ohne Datums Komponente umfasst. Die-Methode nimmt das aktuelle Datum und eine Uhrzeit ohne Minuten und ohne Sekunden an. Sie können dieses Verhalten ändern, indem Sie die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Überladung aufrufen und <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> in das `styles`-Argument einschließen. in diesem Fall geht die Methode von einem Datum ab dem 1. Januar 0001 aus.

-   Eine Zeichenfolge, die Zeitzoneninformationen enthält und ISO 8601 entspricht. In den folgenden Beispielen gibt die erste Zeichenfolge die koordinierte Weltzeit (UTC) an, und die zweite Zeichenfolge gibt die Zeit in einer Zeitzone an, die sieben Stunden vor UTC liegt:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Eine Zeichenfolge, die den GMT-Kenn Zeichner enthält und dem RFC 1123-Zeitformat entspricht. Zum Beispiel:  
  
     "Sat, 01 Nov 2008 19:35:00 GMT"  
  
-   Eine Zeichenfolge, die das Datum und die Uhrzeit zusammen mit Zeit Zonen Offset-Informationen enthält; Zum Beispiel:  
  
     "03/01/2009 05:42:00 -5:00"  

Im folgenden Beispiel werden Zeichen folgen in jedem dieser Formate mithilfe der Formatierungs Konventionen der aktuellen Kultur analysiert, die in diesem Fall die Kultur "en-US" ist:

[!code-csharp[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Wenn die Eingabe Zeichenfolge einen Schalttag in einem Schaltjahr im Kalender darstellt, der von der Analysemethode verwendet wird (siehe [analysieren und Kultur Konventionen](#Culture)), analysiert die <xref:System.DateTime.Parse%2A>-Methode die Zeichenfolge erfolgreich. Wenn die Eingabe Zeichenfolge einen Schalttag in einem nicht-Schaltjahr darstellt, löst die Methode eine <xref:System.FormatException>aus.  
  
 Da die <xref:System.DateTime.Parse%2A>-Methode versucht, die Zeichen folgen Darstellung eines Datums und einer Uhrzeit mithilfe der Formatierungs Regeln der aktuellen oder einer angegebenen Kultur zu analysieren, kann der Versuch, eine Zeichenfolge über verschiedene Kulturen hinweg zu analysieren, fehlschlagen. Um ein bestimmtes Datums-und Uhrzeit Format über verschiedene Gebiets Schemas zu analysieren, verwenden Sie eine der über Ladungen der <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>-Methode, und geben Sie einen Format Bezeichner an.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Und kulturelle Konventionen  
 Alle über Ladungen der <xref:System.DateTime.Parse%2A>-Methode sind Kultur abhängig, es sei denn, die Zeichenfolge, die durch `s` in der folgenden Tabelle dargestellt wird, entspricht dem ISO 8601-Muster. Der-erteilungsvorgang verwendet die Formatierungsinformationen in einem <xref:System.Globalization.DateTimeFormatInfo> Objekt, das wie folgt abgeleitet wird:  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

|Wenn Sie|Und `provider` ist|Formatierungsinformationen werden von abgeleitet|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|Die aktuelle Thread Kultur (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>-Eigenschaft)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt|Das angegebene <xref:System.Globalization.DateTimeFormatInfo> Objekt.|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|Die aktuelle Thread Kultur (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>-Eigenschaft)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|ein <xref:System.Globalization.CultureInfo>-Objekt|Die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft.|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Implementierung von benutzerdefinierten <xref:System.IFormatProvider>|Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> -Methode|  
  
 Wenn Formatierungsinformationen von einem <xref:System.Globalization.DateTimeFormatInfo> Objekt abgeleitet werden, definiert die Eigenschaft <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> den Kalender, der beim Verarbeitungsvorgang verwendet wird.  
  
 Wenn Sie eine Datums-und Uhrzeit Zeichenfolge mithilfe eines <xref:System.Globalization.DateTimeFormatInfo> Objekts mit angepassten Einstellungen analysieren, die sich von denen einer Standard Kultur unterscheiden, verwenden Sie die <xref:System.DateTime.ParseExact%2A>-Methode anstelle der <xref:System.DateTime.Parse%2A>-Methode, um die Wahrscheinlichkeit einer erfolgreichen Konvertierung zu verbessern. Eine nicht standardmäßige Datums-und Uhrzeit Zeichenfolge kann kompliziert und schwer zu analysieren sein. Die <xref:System.DateTime.Parse%2A>-Methode versucht, eine Zeichenfolge mit mehreren impliziten Analyse Mustern zu analysieren, die möglicherweise fehlschlagen. Im Gegensatz dazu erfordert die <xref:System.DateTime.ParseExact%2A>-Methode, dass Sie explizit ein oder mehrere exakte Analyse Muster festlegen, die wahrscheinlich erfolgreich sind. Weitere Informationen finden Sie im Abschnitt "DateTimeFormatInfo und dynamische Daten" des Themas <xref:System.Globalization.DateTimeFormatInfo>.  
  
> [!IMPORTANT]
>  Beachten Sie, dass die Formatierungs Konventionen für eine bestimmte Kultur dynamisch sind und geändert werden können. Dies bedeutet, dass bei der Verarbeitung von Vorgängen, die von den Formatierungs Konventionen der Standard Kultur abhängig sind oder die ein <xref:System.IFormatProvider> Objekt angeben, das eine andere Kultur als die invariante Kultur darstellt, unerwartet ein Fehler auftreten kann, wenn eine der folgenden Bedingungen zutrifft:  
>   
> -   Die kulturspezifischen Daten wurden zwischen der Haupt-oder neben Version des .NET Framework oder als Ergebnis einer Aktualisierung der vorhandenen Version des .NET Framework geändert.  
> -   Die kulturspezifischen Daten spiegeln die Benutzereinstellungen wider, die von Computer zu Computer oder Sitzung zu Sitzung variieren können.  
> -   Die kulturspezifischen Daten repräsentieren eine Ersatz Kultur, die die Einstellungen einer Standard Kultur oder einer benutzerdefinierten Kultur überschreibt.  
>   
>  Um die Schwierigkeiten beim Analysieren von Daten und Zeit Zeichenfolgen zu vermeiden, die Änderungen in kulturellen Daten zugeordnet sind, können Sie Datums-und Uhrzeit Zeichenfolgen mit der invarianten Kultur analysieren, oder Sie können die <xref:System.DateTime.ParseExact%2A>-oder <xref:System.DateTime.TryParseExact%2A>-Methode und das genaue Format des zu Analyse Ende Zeichenfolge. Wenn Sie Datums-und Uhrzeitdaten serialisieren und deserialisieren, können Sie entweder die Formatierungs Konventionen der invarianten Kultur verwenden, oder Sie können den <xref:System.DateTime> Wert in einem binären Format serialisieren und deserialisieren.  
>   
>  Weitere Informationen finden Sie im Abschnitt "dynamische Kultur Daten" im Thema <xref:System.Globalization.CultureInfo> und im Abschnitt "persistente DateTime-Werte" im Thema <xref:System.DateTime>.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Formatieren und Formatieren von Elementen  
 Alle <xref:System.DateTime.Parse%2A> Überladungen ignorieren führende, innere oder nachfolgende Leerzeichen in der Eingabe Zeichenfolge (die durch `s` in der folgenden Tabelle dargestellt wird). Das Datum und die Uhrzeit können mit einem Paar von führenden und nachfolgenden Nummern Zeichen ("#", U + 0023) in Klammern gesetzt werden, und Sie können mit einem oder mehreren NULL-Zeichen (u + 0000) abgezogen werden.  
  
 Außerdem verfügt die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Überladung über einen `styles` Parameter, der aus einem oder mehreren Membern der <xref:System.Globalization.DateTimeStyles>-Enumeration besteht. Dieser Parameter definiert, wie `s` interpretiert werden und wie der Analyse Vorgang `s` in ein Datum und eine Uhrzeit konvertieren soll. In der folgenden Tabelle werden die Auswirkungen der einzelnen <xref:System.Globalization.DateTimeStyles> Member auf den Analyse Vorgang beschrieben.  
  
|DateTimeStyles-Member|Auswirkung auf Konvertierung|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und konvertiert Sie ggf. wie folgt in UTC:<br /><br /> -Wenn `s` einen Zeit Zonen Offset enthält, oder wenn `s` keine Zeitzoneninformationen enthält, aber `styles` das <xref:System.Globalization.DateTimeStyles.AssumeLocal>-Flag enthält, analysiert die Methode die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> auf, um den zurückgegebenen <xref:System.DateTime> Wert in UTC zu konvertieren. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest.<br />-Wenn `s` angibt, dass es sich um UTC handelt, oder wenn `s` keine Zeitzoneninformationen enthält, `styles` jedoch das <xref:System.Globalization.DateTimeStyles.AssumeUniversal>-Flag enthält, analysiert die Methode die Zeichenfolge, führt keine Zeit Zonen Konvertierung für den zurückgegebenen <xref:System.DateTime> Wert aus. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest.<br />-In allen anderen Fällen hat das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Dieser Wert wird ignoriert. Innere Leerräume sind in den Datums-und Uhrzeit Elementen von `s`immer zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Dieser Wert wird ignoriert. Führende Leerzeichen sind in den Datums-und Uhrzeit Elementen von `s`immer zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Dieser Wert wird ignoriert. Nachfolgende Leerzeichen sind in den Datums-und Uhrzeit Elementen von `s`immer zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führende, innere und nachfolgende Leerzeichen enthalten kann. Dies ist das Standardverhalten. Sie kann nicht überschrieben werden, indem eine restriktivere <xref:System.Globalization.DateTimeStyles> Enumerationswerts wie <xref:System.Globalization.DateTimeStyles.None>bereitgestellt wird.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` keine Zeitzoneninformationen vorhanden sind, die lokale Zeit angenommen wird. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal>-Flag nicht vorhanden ist, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass die UTC-Zeit angenommen wird, wenn `s` keine Zeitzoneninformationen enthält. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal>-Flag nicht vorhanden ist, konvertiert die-Methode den zurückgegebenen <xref:System.DateTime> Wert von UTC in Ortszeit und legt seine <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>fest.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Bei Zeichen folgen, die Zeitzoneninformationen enthalten, wird von versucht, die Konvertierung von Datums-und Uhrzeit Zeichenfolgen in einen <xref:System.DateTime> Wert zu verhindern, der eine Ortszeit darstellt, deren <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt ist. In der Regel wird eine solche Zeichenfolge durch Aufrufen der <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>-Methode und mit dem Standardformat Bezeichner "o", "r" und "u" erstellt.|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>Der Rückgabewert und DateTime. Kind

Die `DateTime.Parse` Überladungen geben einen <xref:System.DateTime>-Wert zurück, dessen <xref:System.DateTime.Kind>-Eigenschaft Zeitzoneninformationen enthält. Dies kann darauf hinweisen, dass die Uhrzeit:

- Koordinierte Weltzeit (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- Die Uhrzeit in der lokalen Zeitzone (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- Die Zeit in einer unbekannten Zeitzone (Xref: System. DateTimeKind. unspezifiziert? displayproperty = FullName >).
 
 Im Allgemeinen gibt die <xref:System.DateTime.Parse%2A>-Methode ein <xref:System.DateTime>-Objekt zurück, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ist. Die <xref:System.DateTime.Parse%2A>-Methode kann jedoch auch eine Zeit Zonen Konvertierung durchführen und den Wert der <xref:System.DateTime.Kind%2A>-Eigenschaft abhängig von den Werten der `s` und `styles` Parameter unterschiedlich festlegen:  
  
|Wenn virtuelle Maschinen mit|Zeit Zonen Konvertierung|Kind-Eigenschaft|  
|--------|--------------------------|-------------------|  
|`s` enthält Zeitzoneninformationen.|Datum und Uhrzeit werden in die Uhrzeit in der lokalen Zeitzone konvertiert.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` enthält Zeitzoneninformationen, und `styles` schließt das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal>-Flag ein.|Das Datum und die Uhrzeit werden in die koordinierte Weltzeit (UTC) konvertiert.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` enthält den Z-oder GMT-Zeit Zonen Kenn Zeichner, und `styles` schließt das <xref:System.Globalization.DateTimeStyles.RoundtripKind>-Flag ein.|Das Datum und die Uhrzeit werden als UTC interpretiert.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 Im folgenden Beispiel werden Datums Zeichenfolgen, die Zeitzoneninformationen enthalten, in die Uhrzeit in der lokalen Zeitzone konvertiert:  
  
 [!code-csharp[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Sie können den Wert einer <xref:System.DateTime.Kind%2A>-Eigenschaft der Datums-und Uhrzeit während eines Formatierungs-und Verarbeitungsvorgangs auch beibehalten, indem Sie das <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>-Flag verwenden. Im folgenden Beispiel wird veranschaulicht, wie sich das <xref:System.Globalization.DateTimeStyles.RoundtripKind>-Flag auf den <xref:System.DateTime> Werten auswirkt, die mit dem Format Bezeichner "o", "r" und "u" in Zeichen folgen konvertiert werden.  
  
 [!code-csharp[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
## Examples

Zahlreiche Beispiele, die die `DateTime.Parse`-Methode aufzurufen, werden im Abschnitt " [Hinweise](#remarks) " in diesem Artikel und in der Dokumentation für die einzelnen `DateTime.Parse` Überladungen zusammengesetzt.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Sie können auch einen kompletten Satz `DateTime.Parse` Beispiele herunterladen, die in einem [.net Core 2,0- C# Projekt für](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip) und ein [.net Core 2,0-Projekt für Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip)enthalten sind, aus dem [GitHub-Repository "dotnet/Samples](https://github.com/dotnet/samples)".

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the conventions of the current thread culture.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Wenn `s` Zeitzoneninformationen enthält, gibt diese Methode einen <xref:System.DateTime>-Wert zurück, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ist, und konvertiert das Datum und die Uhrzeit in `s` in die lokale Zeit. Andernfalls wird keine Zeit Zonen Konvertierung durchführt, und es wird ein <xref:System.DateTime> Wert zurückgegeben, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ist.

Diese Überladung versucht, `s` mithilfe der Formatierungs Konventionen der aktuellen Kultur zu analysieren. Die aktuelle Kultur wird durch die <xref:System.Globalization.CultureInfo.CurrentCulture>-Eigenschaft angegeben. Um eine Zeichenfolge mithilfe der Formatierungs Konventionen einer bestimmten Kultur zu analysieren, müssen Sie die <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> oder die <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> Überladungen aufzurufen.

Diese Überladung versucht, `s` mithilfe <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> Stils zu analysieren.

## <a name="example"></a>Beispiel

Im folgenden Beispiel wird die Zeichen folgen Darstellung mehrerer Datums-und Uhrzeitwerte mithilfe von analysiert:

- Mit dem Standardformat Anbieter, der die Formatierungs Konventionen der aktuellen Thread Kultur des Computers bereitstellt, der zum Entwickeln der Beispielausgabe verwendet wird. Die Ausgabe dieses Beispiels reflektiert die Formatierungs Konventionen der Kultur "en-US".

- Verwenden des standardmäßigen Stil Werts, der <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>ist. 

Sie behandelt die <xref:System.FormatException> Ausnahme, die ausgelöst wird, wenn die Methode versucht, die Zeichen folgen Darstellung eines Datums und einer Uhrzeit mithilfe der Formatierungs Konventionen einer anderen Kultur zu analysieren. Außerdem wird gezeigt, wie ein Datums-und Uhrzeitwert, der nicht die Formatierungs Konventionen der aktuellen Thread Kultur verwendet, erfolgreich analysiert wird.  
  
 [!code-csharp[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.  See [Parsing and cultural conventions](#Culture)</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Wenn `s` Zeitzoneninformationen enthält, gibt diese Methode einen <xref:System.DateTime>-Wert zurück, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ist, und konvertiert das Datum und die Uhrzeit in `s` in die lokale Zeit. Andernfalls wird keine Zeit Zonen Konvertierung durchführt, und es wird ein <xref:System.DateTime> Wert zurückgegeben, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ist.

Diese Überladung versucht, `s` mithilfe des <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> Stils zu analysieren.

## <a name="example"></a>Beispiel

Im folgenden Beispiel wird ein Array von Datums Zeichenfolgen mithilfe der Konventionen der Kulturen en-US, fr-FR und de-de analysiert. Es zeigt, dass die Zeichen folgen Darstellungen eines einzelnen Datums in verschiedenen Kulturen unterschiedlich interpretiert werden können.  
  
[!code-csharp[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">The memory span that contains the string to parse. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.  See [Parsing and cultural conventions](#Culture)</param>
        <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts a memory span that contains string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.  See [Parsing and cultural conventions](#Culture)</param>
        <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Diese Methoden Überladung konvertiert das Datum und die Uhrzeit in `s` und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts wie folgt fest:

| Wenn virtuelle Maschinen mit | Zeit Zonen Konvertierung | Kind-Eigenschaft |
|----|----------------------|---------------|
| `s` enthält keine Zeitzoneninformationen. | None. | <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> |
| `s` enthält Zeitzoneninformationen. | Bis zu dem Zeitpunkt in der lokalen Zeitzone | <xref:System.DateTimeKind.Local?displayProperty=nameWithType> |
| `s` enthält Zeitzoneninformationen, und `styles` schließt das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag ein. | In koordinierter Weltzeit (UTC) | <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> |
| `s` enthält den Z-oder GMT-Zeit Zonen Kenn Zeichner, und `styles` enthält die <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>. | None. | <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> |

## <a name="example"></a>Beispiel

Im folgenden Beispiel wird die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Methode veranschaulicht und der Wert der <xref:System.DateTime.Kind%2A>-Eigenschaft der resultierenden <xref:System.DateTime> Werte angezeigt.  
  
[!code-csharp[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">Gewusst wie: Roundtrip-Datums- und -Uhrzeitwerte</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly or an exception is thrown.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das in dem vom `format`-Parameter definierten Format vorliegen muss. Außerdem ist es erforderlich, dass die \<Datums > und \<Zeit > Elemente der Zeichen folgen Darstellung eines Datums und einer Uhrzeit in der von `format`angegebenen Reihenfolge angezeigt werden und dass `s` keinen Leerraum aufweisen, der nicht von `format`zugelassen ist. Wenn `format` ein Datum ohne Zeitelement definiert und der Analyse Vorgang erfolgreich ist, hat der resultierende <xref:System.DateTime> Wert eine Uhrzeit von Mitternacht (00:00:00). Wenn `format` eine Uhrzeit ohne Date-Element definiert und der Analyse Vorgang erfolgreich ist, hat der resultierende <xref:System.DateTime> Wert das Datum `DateTime.Now.Date`.  
  
 Wenn `s` keine Zeit in einer bestimmten Zeitzone darstellt und der Analyse Vorgang erfolgreich ist, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. , Wenn `s` die Zeit in einer bestimmten Zeitzone darstellt und `format` das vorhanden sein von Zeitzoneninformationen ermöglicht (z. b., wenn `format` gleich den Standardformat Bezeichner"o", "r" oder "u" ist, oder wenn es "z" enthält. , "zz" oder benutzerdefinierte Format Bearbeiter "zzz"), wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  

 Der `format`-Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthält, die das erforderliche Format von `s`definieren. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oder benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Wenn `format` ein benutzerdefiniertes Format Muster ist, das keine Datums-oder Uhrzeit Trennzeichen (z. b. "yyyyMMddhhmm") enthält, verwenden Sie die invariante Kultur für den `provider` Parameter und die breiteste Form der einzelnen benutzerdefinierten Format Bezeichner. Wenn Sie z. b. Stunden im Format Muster angeben möchten, geben Sie die breitere Form "hh" anstelle der engeren Form "H" an.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen (z. b. Namen der Wochentage in einer bestimmten Sprache), die in `s` verwendet werden, werden durch den Parameter `provider` definiert, ebenso wie das genaue Format von `s`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `provider`-Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, die zum Interpretieren `s`verwendet wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von seiner <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider>-Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode entweder das <xref:System.Globalization.CultureInfo>-Objekt oder das <xref:System.Globalization.DateTimeFormatInfo> Objekt zurückgibt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ParseExact%2A> Methode.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> or <paramref name="format" /> is an empty string.  
  
-or- 
 <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  
  
-or- 
The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]löst die <see cref="Overload:System.DateTime.ParseExact" />-Methode eine <see cref="T:System.FormatException" /> aus, wenn die zu deaktivier Ende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">A span containing the characters that represent a date and time to convert.</param>
        <param name="format">A span containing the characters that represent a format specifier that defines the required format of <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="style">A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified span representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">A span containing the characters that represent a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified span representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <paramref name="s" />. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="style">A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das in einem Format vorliegen muss, das durch den `format`-Parameter definiert wird. Außerdem ist es erforderlich, dass die Datums-und Uhrzeit Elemente in `s` in der durch `format`angegebenen Reihenfolge angezeigt werden. Wenn `s` nicht mit dem Muster des `format`-Parameters identisch ist, löst die Methode eine <xref:System.FormatException>aus, wenn die vom `style`-Parameter definierten Variationen vorhanden sind. Im Gegensatz dazu analysiert die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode die Zeichen folgen Darstellung eines Datums in einem beliebigen Format, das vom <xref:System.Globalization.DateTimeFormatInfo>-Objekt des Format Anbieters erkannt wird. Die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode ermöglicht außerdem, dass die Datums-und Uhrzeit Elemente in `s` in beliebiger Reihenfolge angezeigt werden.  
  
 Wenn der `s`-Parameter nur eine Uhrzeit und kein Datum enthält, wird das aktuelle Datum verwendet, es sei denn, der `style`-Parameter enthält das <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>-Flag. in diesem Fall wird das Standard Datum (`DateTime.Date.MinValue`) verwendet. Wenn der `s`-Parameter nur ein Datum und keine Uhrzeit enthält, wird Mitternacht (00:00:00) verwendet. Der `style`-Parameter bestimmt auch, ob der `s` Parameter führende, innere oder nachfolgende Leerzeichen enthalten darf.  
  
 Wenn `s` keine Zeitzoneninformationen enthält, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann mit dem <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag geändert werden, das einen <xref:System.DateTime> Wert zurückgibt, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flags, die einen <xref:System.DateTime> Wert zurückgibt, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` Zeitzoneninformationen enthält, wird die Uhrzeit ggf. in lokale Zeit konvertiert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts wird auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt. Dieses Verhalten kann geändert werden, indem das <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>-Flag verwendet wird, um die koordinierte Weltzeit (UTC) nicht in eine Ortszeit zu konvertieren und die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>festzulegen.  
  
 Der `format`-Parameter definiert das erforderliche Muster des `s`-Parameters. Sie kann aus der Tabelle mit den benutzerdefinierten Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/custom-date-and-time-format-strings.md) oder einem einzelnen Standardformat Bezeichner, der ein vordefiniertes Muster identifiziert, aus der standardmäßigen Format Zeichenfolge für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) bestehen.  
  
 Wenn Sie keine Datums-oder Uhrzeit Trennzeichen in einem benutzerdefinierten Format Muster verwenden, verwenden Sie die invariante Kultur für den `provider`-Parameter und die breiteste Form der einzelnen benutzerdefinierten Format Bezeichner. Wenn Sie z. b. Stunden im Muster angeben möchten, geben Sie die breitere Form "hh" anstelle des engeren Formulars "H" an.  
  
> [!NOTE]
>  Anstatt zu verlangen, dass `s` einem einzelnen Format entsprechen, damit der Analyse Vorgang erfolgreich ausgeführt werden kann, können Sie die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode aufzurufen und mehrere zulässige Formate angeben. Dadurch wird die Wahrscheinlichkeit, dass der Analyse Vorgang erfolgreich durchgeführt wird.  
  
 Der `styles`-Parameter enthält mindestens einen Member der <xref:System.Globalization.DateTimeStyles> Enumeration, der bestimmt, ob und wo von `format` nicht definierte Leerzeichen in `s` erscheinen und das genaue Verhalten des Analyse Vorgangs steuern können. In der folgenden Tabelle wird beschrieben, wie sich jedes Element der <xref:System.Globalization.DateTimeStyles> Enumeration auf den Vorgang der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Methode auswirkt.  
  
|DateTimeStyles-Member|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und konvertiert Sie ggf. in UTC. Wenn `s` einen Zeit Zonen Offset enthält, oder wenn `s` keine Zeitzoneninformationen enthält, aber `styles` das <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> auf, um den zurückgegebenen <xref:System.DateTime> Wert in die UTC zu konvertieren. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. Wenn `s` angibt, dass es sich um UTC handelt, oder wenn `s` keine Zeitzoneninformationen enthält, `styles` jedoch das <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, führt keine Zeit Zonen Konvertierung für den zurückgegebenen <xref:System.DateTime> Wert aus. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. In allen anderen Fällen hat das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass der von `format` nicht definierte Leerraum zwischen einem einzelnen Date-oder Time-Element angezeigt werden kann.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerzeichen, die nicht von `format` definiert werden, am Anfang `s`vorkommen können.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerzeichen, die nicht von `format` definiert werden, am Ende `s`angezeigt werden können.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führende, innere und nachfolgende Leerzeichen enthalten kann, die nicht durch `format`definiert sind.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie eine Ortszeit darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie die UTC darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, konvertiert die-Methode den zurückgegebenen <xref:System.DateTime> Wert von UTC in Ortszeit und legt seine <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>fest.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` Zeit ohne Datumsangaben enthält, wird das Datum des Rückgabewerts auf `DateTime.MinValue.Date`festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.None>|Der `s`-Parameter wird mit Standardwerten analysiert. In `format` sind keine Leerzeichen zulässig, die in vorhanden sind. Wenn `s` eine Datums Komponente fehlt, wird das Datum des zurückgegebenen <xref:System.DateTime> Werts auf 1/1/0001 festgelegt. Wenn `s` keine Zeitzoneninformationen enthält, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts auf <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>festgelegt. Wenn Zeitzoneninformationen in `s`vorhanden sind, wird die Uhrzeit in die Ortszeit konvertiert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts wird auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Bei Zeichen folgen, die Zeitzoneninformationen enthalten, versucht, die Konvertierung in einen <xref:System.DateTime> Wert Datum und Uhrzeit zu verhindern, wobei dessen <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt ist. Dieses Flag verhindert hauptsächlich die Konvertierung von UTC-Zeiten in lokale Uhrzeiten.|  
  
 Die bestimmten Datums-und Uhrzeit Symbole und-Zeichen folgen (z. b. die Namen der Wochentage in einer bestimmten Sprache), die in `s` verwendet werden, werden durch den `provider`-Parameter definiert, ebenso wie das genaue Format von `s`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `provider`-Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, die zum Interpretieren `s`verwendet wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von seiner <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider>-Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode entweder das <xref:System.Globalization.CultureInfo>-Objekt oder das <xref:System.Globalization.DateTimeFormatInfo> Objekt zurückgibt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode. Beachten Sie, dass die Zeichenfolge "5/01/2009 8:30 am" nicht erfolgreich analysiert werden kann, wenn der `styles` Parameter <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> ist, da führende Leerzeichen von `format`nicht zugelassen werden. Außerdem kann die Zeichenfolge "5/01/2009 09:00" nicht erfolgreich analysiert werden, da die `format` "mm/dd/yyyyhh: mm" lautet, da die Datums Zeichenfolge nicht der Monatsnummer vorangestellt ist, wie `format` erfordert.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> or <paramref name="format" /> is an empty string.  
  
-or- 
 <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  
  
-or- 
The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]löst die <see cref="Overload:System.DateTime.ParseExact" />-Methode eine <see cref="T:System.FormatException" /> aus, wenn die zu deaktivier Ende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <paramref name="s" />. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das mit einem der Muster übereinstimmt, die dem `formats`-Parameter zugewiesen sind. Wenn die Zeichenfolge `s` nicht mit einem dieser Muster mit einer der vom `styles`-Parameter definierten Variationen identisch ist, löst die Methode eine <xref:System.FormatException>aus. Abgesehen vom Vergleich von `s` mit mehreren Formatierungs Mustern anstatt mit einem einzelnen Formatierungs Muster verhält sich diese Überladung identisch mit der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode.  
  
 Der `s`-Parameter enthält das Datum und die Uhrzeit, die analysiert werden sollen. Wenn der `s`-Parameter nur eine Uhrzeit und kein Datum enthält, wird das aktuelle Datum verwendet, es sei denn, der `style`-Parameter enthält das <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>-Flag. in diesem Fall wird das Standard Datum (`DateTime.Date.MinValue`) verwendet. Wenn der `s`-Parameter nur ein Datum und keine Uhrzeit enthält, wird Mitternacht (00:00:00) verwendet. Der `style`-Parameter bestimmt außerdem, ob der `s` Parameter führende, innere oder nachfolgende Leerzeichen enthalten darf, die nicht von einer der Format Zeichenfolgen in `formats`zulässig sind.  
  
 Wenn `s` keine Zeitzoneninformationen enthält, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann mit dem <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag geändert werden, das einen <xref:System.DateTime> Wert zurückgibt, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flags, die einen <xref:System.DateTime> Wert zurückgibt, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` Zeitzoneninformationen enthält, wird die Uhrzeit ggf. in lokale Zeit konvertiert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts wird auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt. Dieses Verhalten kann geändert werden, indem das <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>-Flag verwendet wird, um die koordinierte Weltzeit (UTC) nicht in eine Ortszeit zu konvertieren und die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>festzulegen.  
  
 Der `formats`-Parameter enthält ein Array von Mustern, von denen eine `s` genau übereinstimmen muss, wenn der Analyse Vorgang erfolgreich durchgeführt werden soll. Die Muster im `formats`-Parameter bestehen aus einem oder mehreren benutzerdefinierten Format Bezeichnern aus der benutzerdefinierten Format Zeichenfolgen-Tabelle für [Datum und Uhrzeit](~/docs/standard/base-types/custom-date-and-time-format-strings.md) oder einem einzelnen Standardformat Bezeichner, der ein vordefiniertes Muster identifiziert, vom [Standard Datum und-Uhrzeit. ](~/docs/standard/base-types/standard-date-and-time-format-strings.md)Zeichen folgen Tabelle formatieren.  
  
 Wenn Sie keine Datums-oder Uhrzeit Trennzeichen in einem benutzerdefinierten Format Muster verwenden, verwenden Sie die invariante Kultur für den `provider`-Parameter und die breiteste Form der einzelnen benutzerdefinierten Format Bezeichner. Wenn Sie z. b. Stunden im Muster angeben möchten, geben Sie die breitere Form "hh" anstelle des engeren Formulars "H" an.  
  
 Der `styles`-Parameter enthält mindestens einen Member der <xref:System.Globalization.DateTimeStyles> Enumeration, der bestimmt, ob und wo von `format` nicht definierte Leerzeichen in `s` erscheinen und das genaue Verhalten des Analyse Vorgangs steuern können. In der folgenden Tabelle wird beschrieben, wie sich jedes Element der <xref:System.Globalization.DateTimeStyles> Enumeration auf den Vorgang der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Methode auswirkt.  
  
|DateTimeStyles-Member|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und konvertiert Sie ggf. in UTC. Wenn `s` einen Zeit Zonen Offset enthält, oder wenn `s` keine Zeitzoneninformationen enthält, aber `styles` das <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> auf, um den zurückgegebenen <xref:System.DateTime> Wert in die UTC zu konvertieren. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. Wenn `s` angibt, dass es sich um UTC handelt, oder wenn `s` keine Zeitzoneninformationen enthält, `styles` jedoch das <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, führt keine Zeit Zonen Konvertierung für den zurückgegebenen <xref:System.DateTime> Wert aus. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. In allen anderen Fällen hat das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass der von `format` nicht definierte Leerraum zwischen einem einzelnen Date-oder Time-Element angezeigt werden kann.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerzeichen, die nicht von `format` definiert werden, am Anfang `s`vorkommen können.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerzeichen, die nicht von `format` definiert werden, am Ende `s`angezeigt werden können.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führende, innere und nachfolgende Leerzeichen enthalten kann, die nicht durch `format`definiert sind.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie eine Ortszeit darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie die UTC darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, konvertiert die-Methode den zurückgegebenen <xref:System.DateTime> Wert von UTC in Ortszeit und legt seine <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>fest.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` Zeit ohne Datumsangaben enthält, wird das Datum des Rückgabewerts auf `DateTime.MinValue.Date`festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.None>|Der `s`-Parameter wird mit Standardwerten analysiert. In `format` sind keine Leerzeichen zulässig, die in vorhanden sind. Wenn `s` eine Datums Komponente fehlt, wird das Datum des zurückgegebenen <xref:System.DateTime> Werts auf 1/1/0001 festgelegt. Wenn `s` keine Zeitzoneninformationen enthält, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts auf <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>festgelegt. Wenn Zeitzoneninformationen in `s`vorhanden sind, wird die Uhrzeit in die Ortszeit konvertiert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts wird auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Bei Zeichen folgen, die Zeitzoneninformationen enthalten, versucht, die Konvertierung in ein Datum und eine Uhrzeit zu verhindern, deren <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt ist. Dieses Flag verhindert hauptsächlich die Konvertierung von UTC-Zeiten in lokale Uhrzeiten.|  
  
 Die bestimmten Datums-und Uhrzeit Symbole und-Zeichen folgen (z. b. die Namen der Wochentage in einer bestimmten Sprache), die in `s` verwendet werden, werden durch den `provider`-Parameter definiert, ebenso wie das genaue Format von `s`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `provider`-Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, die zum Interpretieren `s`verwendet wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von seiner <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider>-Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode entweder das <xref:System.Globalization.CultureInfo>-Objekt oder das <xref:System.Globalization.DateTimeFormatInfo> Objekt zurückgibt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode verwendet, um sicherzustellen, dass eine Zeichenfolge in mehreren möglichen Formaten erfolgreich analysiert werden kann.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> is an empty string.  
  
-or- 
an element of <paramref name="formats" /> is an empty string.  
  
-or- 
 <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />.  
  
-or- 
The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]löst die <see cref="Overload:System.DateTime.ParseExact" />-Methode eine <see cref="T:System.FormatException" /> aus, wenn die zu deaktivier Ende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the seconds component of the date represented by this instance.</summary>
        <value>Die Sekundenkomponente als Wert zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Second%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">A date and time.</param>
        <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
        <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
        <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.DateTime> Objekt besteht aus einem Kind-Feld, das angibt, ob der Zeitwert auf lokaler Zeit, koordinierter Weltzeit (UTC) oder keinem der Werte basiert, und ein Ticks-Feld, das einen Zeitwert enthält, der in 100-Nanosekunden-Ticks gemessen wird. Mit der <xref:System.DateTime.SpecifyKind%2A>-Methode wird ein neues <xref:System.DateTime>-Objekt mit dem angegebenen `kind`-Parameter und dem ursprünglichen Uhrzeitwert erstellt.  
  
> [!IMPORTANT]
>  Der zurückgegebene <xref:System.DateTime> Wert repräsentiert nicht denselben Zeitpunkt wie der `value` Parameter, und <xref:System.DateTime.SpecifyKind%2A> ist keine Zeit Zonen Konvertierungsmethode. Stattdessen bleibt die vom `value`-Parameter angegebene Zeit unverändert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft wird auf `kind`festgelegt. Weitere Informationen zu Zeit Zonen Konvertierungen finden Sie unter [Konvertieren von Uhrzeiten zwischen Zeitzonen](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 Die <xref:System.DateTime.SpecifyKind%2A>-Methode ist in Interoperabilitäts Szenarios nützlich, in denen Sie ein <xref:System.DateTime> Objekt mit einem nicht spezifizierten Kind-Feld erhalten. Sie können jedoch unabhängig voneinander bestimmen, dass das Feld "Ticks" eine Ortszeit oder UTC darstellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A>-Methode verwendet, um zu veranschaulichen, wie sich die <xref:System.DateTime.Kind%2A>-Eigenschaft auf die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Konvertierungs Methoden auswirkt  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">COM-Interoperabilität in .NET Framework-Anwendungen (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a new <see cref="T:System.DateTime" /> that subtracts the specified time or duration from the value of this instance.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to subtract.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that subtracts the specified date and time from the value of this instance.</summary>
        <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Subtract%28System.DateTime%29>-Methode bestimmt den Unterschied zwischen zwei Datumsangaben. Rufen Sie die <xref:System.DateTime.Subtract%28System.TimeSpan%29>-Methode auf, um ein Zeitintervall von der aktuellen Instanz zu subtrahieren. Um ein bestimmtes Zeitintervall von der aktuellen Instanz zu subtrahieren, rufen Sie die-Methode auf, die dieses Zeitintervall dem aktuellen Datum hinzufügt, und geben einen negativen Wert als Methoden Argument an. Um z. b. zwei Monate vom aktuellen Datum zu subtrahieren, rufen Sie die <xref:System.DateTime.AddMonths%28System.Int32%29>-Methode mit dem Wert-2 auf.  
  
 Wenn das Datum und die Uhrzeit der aktuellen Instanz vor dem `value`liegen, gibt die Methode ein <xref:System.TimeSpan> Objekt zurück, das eine negative Zeitspanne darstellt. Das heißt, der Wert aller seiner nicht-NULL-Eigenschaften (z. b. <xref:System.TimeSpan.Days%2A> oder <xref:System.TimeSpan.Ticks%2A>) ist negativ.  
  
 Die <xref:System.DateTime.Subtract%28System.DateTime%29>-Methode berücksichtigt nicht den Wert der <xref:System.DateTime.Kind%2A>-Eigenschaft der beiden <xref:System.DateTime> Werte, wenn die Subtraktion durchgeführt wird. Stellen Sie vor dem subtrahieren <xref:System.DateTime>-Objekten sicher, dass die-Objekte Zeiten in derselben Zeitzone darstellen. Andernfalls enthält das Ergebnis den Unterschied zwischen Zeitzonen.  
  
> [!NOTE]
>  Bei der <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>-Methode wird der Unterschied zwischen Zeitzonen beim Ausführen der Subtraktion berücksichtigt.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die <xref:System.DateTime.Subtract%2A>-Methode und der Subtraktions Operator veranschaulicht.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">The time interval to subtract.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that subtracts the specified duration from the value of this instance.</summary>
        <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Subtract%28System.TimeSpan%29>-Methode gibt das Datum zurück, das ein angegebenes Zeitintervall Unterschied von der aktuellen Instanz ist. Zum Ermitteln des Zeitintervalls zwischen zwei Datumsangaben wird die <xref:System.DateTime.Subtract%28System.DateTime%29>-Methode aufgerufen. Um ein bestimmtes Zeitintervall von der aktuellen Instanz zu subtrahieren, rufen Sie die-Methode auf, die dieses Zeitintervall dem aktuellen Datum hinzufügt, und geben einen negativen Wert als Methoden Argument an. Um z. b. zwei Monate vom aktuellen Datum zu subtrahieren, rufen Sie die <xref:System.DateTime.AddMonths%28System.Int32%29>-Methode mit dem Wert-2 auf.  
  
 Diese Methode ändert den Wert dieses <xref:System.DateTime>nicht. Stattdessen wird ein neuer <xref:System.DateTime> zurückgegeben, dessen Wert das Ergebnis dieses Vorgangs ist.  
  
 Normalerweise subtrahiert die <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>-Methode ein <xref:System.TimeSpan> Objekt, das eine positive Zeitspanne darstellt, und gibt einen <xref:System.DateTime> Wert zurück, der vor dem Datum und der Uhrzeit der aktuellen Instanz liegt. Wenn das <xref:System.TimeSpan>-Objekt jedoch eine negative Zeitspanne darstellt, gibt die <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>-Methode einen <xref:System.DateTime> Wert zurück, der nach dem Datum und der Uhrzeit der aktuellen Instanz liegt.  
  
 Mit der <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>-Methode können Sie ein Zeitintervall subtrahieren, das aus mehr als einer Zeiteinheit besteht (z. b. eine angegebene Anzahl von Stunden und eine bestimmte Anzahl von Minuten). Um eine einzelne Zeiteinheit (z. b. Jahre, Monate oder Tage) von der <xref:System.DateTime> Instanz zu subtrahieren, können Sie einen negativen numerischen Wert als Parameter an eine der folgenden Methoden übergeben:  
  
-   <xref:System.DateTime.AddYears%2A>, um eine bestimmte Anzahl von Jahren von der aktuellen Datums-und Uhrzeit Instanz zu subtrahieren.  
  
-   <xref:System.DateTime.AddMonths%2A>, um eine bestimmte Anzahl von Monaten von der aktuellen Datums-und Uhrzeit Instanz zu subtrahieren.  
  
-   <xref:System.DateTime.AddDays%2A>, um eine bestimmte Anzahl von Tagen von der aktuellen Datums-und Uhrzeit Instanz zu subtrahieren.  
  
-   <xref:System.DateTime.AddHours%2A>, um eine bestimmte Anzahl von Stunden von der aktuellen Datums-und Uhrzeit Instanz zu subtrahieren.  
  
-   <xref:System.DateTime.AddMinutes%2A>, um eine bestimmte Anzahl von Minuten von der aktuellen Datums-und Uhrzeit Instanz zu subtrahieren.  
  
-   <xref:System.DateTime.AddSeconds%2A>, um eine bestimmte Anzahl von Sekunden von der aktuellen Datums-und Uhrzeit Instanz zu subtrahieren.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, um eine bestimmte Anzahl von Millisekunden von der aktuellen Datums-und Uhrzeit Instanz zu subtrahieren.  
  
-   <xref:System.DateTime.AddTicks%2A>, um eine bestimmte Anzahl von Ticks von der aktuellen Datums-und Uhrzeit Instanz zu subtrahieren.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die <xref:System.DateTime.Subtract%2A>-Methode und der Subtraktions Operator veranschaulicht.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
        <returns>The current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type">The desired type.</param>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
        <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.DateTime" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode füllt den `info`-Parameter mit den Eigenschafts Werten <xref:System.DateTime.Ticks%2A> und <xref:System.DateTime.Kind%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
        <value>Die Anzahl der Ticks, die Datum und Uhrzeit dieser Instanz darstellen. Der Wert liegt zwischen <see langword="DateTime.MinValue.Ticks" /> und <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein einzelner Tick stellt 100 Nanosekunden oder 1 10-Millionstel einer Sekunde dar. Es gibt 10.000 Ticks in einer Millisekunde oder 10 Millionen Ticks in einer Sekunde.  
  
 Der Wert dieser Eigenschaft stellt die Anzahl der 100-Nanosekunden-Intervalle dar, die 12:00:00 seit dem 1. Januar 0001 (0:00:00 UTC am 1. Januar 0001 im gregorianischen Kalender) verstrichen sind, der <xref:System.DateTime.MinValue?displayProperty=nameWithType>darstellt. Sie enthält nicht die Anzahl der Ticks, die auf Schaltsekunden zurückzuführen sind.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Ticks%2A>-Eigenschaft verwendet, um die Anzahl der Ticks anzuzeigen, die seit dem Beginn des 21. Jahrhunderts verstrichen sind, und um ein <xref:System.TimeSpan> Objekt zu instanziieren. Das <xref:System.TimeSpan>-Objekt wird dann verwendet, um die verstrichene Zeit mithilfe mehrerer anderer Zeitintervalle anzuzeigen.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time of day for this instance.</summary>
        <value>Ein Zeitintervall, das den seit Mitternacht vergangenen Teil des Tages darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anders als die <xref:System.DateTime.Date%2A>-Eigenschaft. Gibt einen <xref:System.DateTime> Wert zurück, der ein Datum ohne seine Zeitkomponente darstellt, gibt die <xref:System.DateTime.TimeOfDay%2A>-Eigenschaft einen <xref:System.TimeSpan> Wert zurück, der die Zeitkomponente eines <xref:System.DateTime> Werts darstellt.  
  
 Wenn Sie die Tageszeit anzeigen oder die Zeichen folgen Darstellung der Tageszeit eines <xref:System.DateTime> Werts abrufen möchten, können Sie stattdessen eine Überladung der <xref:System.DateTime.ToString%2A> Methode aufrufen, die über einen `format`-Parameter verfügt, oder die Funktion für die [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) mit "t" oder "t" verwenden. "Standardformat Zeichenfolge.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Wert der <xref:System.DateTime.TimeOfDay%2A>-Eigenschaft für ein Array mit <xref:System.DateTime> Werten angezeigt. Außerdem wird der Rückgabewert mit der Zeichenfolge, die von der Standardformat Zeichenfolge "t" in einem zusammengesetzten Formatierungs Vorgang zurückgegeben wird  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</summary>
        <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.DateTime.ToBinary%2A>-Methode, um den Wert des aktuellen <xref:System.DateTime> Objekts in einen binären Wert zu konvertieren. Verwenden Sie anschließend den binären Wert und die <xref:System.DateTime.FromBinary%2A>-Methode, um das ursprüngliche <xref:System.DateTime>-Objekt erneut zu erstellen.  
  
> [!IMPORTANT]
>  In einigen Fällen ist der von der <xref:System.DateTime.FromBinary%2A>-Methode zurückgegebene <xref:System.DateTime> Wert nicht mit dem ursprünglichen <xref:System.DateTime> Wert identisch, der für die <xref:System.DateTime.ToBinary%2A>-Methode bereitgestellt wird. Weitere Informationen finden Sie im nächsten Abschnitt "lokale Zeitanpassung".  
  
## <a name="local-time-adjustment"></a>Lokale Zeitanpassung  
 Eine lokale Uhrzeit, bei der es sich um eine koordinierte Weltzeit handelt, die auf die lokale Zeitzone abgestimmt ist, wird durch eine <xref:System.DateTime> Struktur dargestellt, deren <xref:System.DateTime.Kind%2A>-Eigenschaft den Wert <xref:System.DateTimeKind.Local>hat. Beim Wiederherstellen eines lokalen <xref:System.DateTime> Werts aus der binären Darstellung, die durch die <xref:System.DateTime.ToBinary%2A>-Methode erzeugt wird, kann die <xref:System.DateTime.FromBinary%2A>-Methode den neu erstellten Wert so anpassen, dass er nicht gleich dem ursprünglichen Wert ist. Dieser Fall kann unter den folgenden Bedingungen eintreten:  
  
-   Wenn ein lokales <xref:System.DateTime> Objekt mit der <xref:System.DateTime.ToBinary%2A>-Methode in einer Zeitzone serialisiert und anschließend durch die <xref:System.DateTime.FromBinary%2A>-Methode in einer anderen Zeitzone deserialisiert wird, wird die vom resultierenden <xref:System.DateTime> Objekt dargestellte lokale Zeit automatisch an die zweite Zeitzone angepasst.  
  
     Stellen Sie sich beispielsweise ein <xref:System.DateTime> Objekt vor, das eine Ortszeit von 3 Uhr darstellt. Eine Anwendung, die in der USA Pacific Time-Zone ausgeführt wird, verwendet die <xref:System.DateTime.ToBinary%2A>-Methode, um diese <xref:System.DateTime> Objekt in einen binären Wert zu konvertieren. Eine andere Anwendung, die in der Region "USA, Osten" ausgeführt wird, verwendet die <xref:System.DateTime.FromBinary%2A>-Methode, um den binären Wert in ein neues <xref:System.DateTime>-Objekt zu konvertieren. Der Wert des neuen <xref:System.DateTime> Objekts ist 6 Uhr, was denselben Zeitpunkt wie das ursprüngliche 3-pm-Objekt darstellt. , wird jedoch an die Ortszeit in der Eastern Time-Zone angepasst.  
  
-   Wenn die binäre Darstellung eines lokalen <xref:System.DateTime> Werts eine ungültige Zeit in der lokalen Zeitzone des Systems darstellt, für das <xref:System.DateTime.FromBinary%2A> aufgerufen wird, wird die Uhrzeit so angepasst, dass Sie gültig ist.  
  
     Der Übergang von der Standardzeit zur Sommerzeit erfolgt z. b. in der US-Pazifik-Zeitzone am 14. März 2010 um 2:00 Uhr, wenn die Zeit um eine Stunde um um 3:00 Uhr liegt. Dieses Stunden Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass eine Zeitspanne, die in diesen Bereich fällt, von der <xref:System.DateTime.ToBinary%2A>-Methode in einen binären Wert konvertiert und dann mit der <xref:System.DateTime.FromBinary%2A>-Methode wieder hergestellt wird. der ursprüngliche Wert wird so angepasst, dass er zu einer gültigen Zeit wird. Sie können bestimmen, ob ein bestimmter Datums-und Uhrzeitwert geändert werden kann, indem er an die <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>-Methode übergeben wird, wie im Beispiel veranschaulicht.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Überlegungen zur Version  
 Beginnend mit der .NET Framework Version 2,0 besteht eine <xref:System.DateTime> Struktur aus einem privaten Feld, das angibt, ob der angegebene Zeitwert auf lokaler Zeit, koordinierter Weltzeit (UTC) oder keinem der Werte basiert, und ein Feld für private Ticks, das das Anzahl der 100-Nanosekunden-Ticks, die ein Datum und eine Uhrzeit angeben. Auf das Feld Ticks kann mit der <xref:System.DateTime.Ticks%2A>-Eigenschaft zugegriffen werden, und auf das Feld Kind kann mit der <xref:System.DateTime.Kind%2A>-Eigenschaft zugegriffen werden.  
  
 Wenn Sie vor dem .NET Framework 2,0 ein <xref:System.DateTime> Objekt manuell serialisiert haben, statt eine Serialisierungsschnittstelle wie <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>zu verwenden, mussten Sie nur die Ticks-Daten in der <xref:System.DateTime> Struktur serialisieren. Ab Version 2,0 müssen Sie auch die Kind-Daten serialisieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current date.</summary>
        <value>Ein Objekt, das auf das heutige Datum mit einer auf 00:00:00 festgelegten Zeitkomponente festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beginnend mit der .NET Framework Version 2,0 ist der Rückgabewert ein <xref:System.DateTime>, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local>zurückgibt.  
  
 Da das aktuelle Datum ohne die aktuelle Zeit zurückgegeben wird, eignet sich die <xref:System.DateTime.Today%2A>-Eigenschaft für die Verwendung in Anwendungen, die nur mit Datumsangaben arbeiten. Weitere Informationen finden Sie unter [auswählen zwischen DateTime, DateTimeOffset, TimeSpan und TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Im Gegensatz dazu gibt die <xref:System.DateTime.TimeOfDay%2A>-Eigenschaft die aktuelle Uhrzeit ohne das aktuelle Datum zurück, und die <xref:System.DateTime.Now%2A>-Eigenschaft gibt das aktuelle Datum und die aktuelle Uhrzeit zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Date%2A>-Eigenschaft verwendet, um das aktuelle Datum abzurufen. Außerdem wird veranschaulicht, wie ein <xref:System.DateTime> Wert mit einigen der Standardformat Zeichenfolgen für Datum und Uhrzeit formatiert werden kann. Beachten Sie, dass die Ausgabe, die vom dritten Aufruf der <xref:System.DateTime.ToString%28System.String%29>-Methode erzeugt wird, den g-Format Bezeichner verwendet, um die Zeitkomponente einzubeziehen, die 0 (null) ist.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n/s verstrichen sind. unserer Zeitrechnung Koordinierte Weltzeit (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wann eine Anwendung eine Datei erstellt, zugreift oder in eine Datei schreibt.  
  
 Die <xref:System.DateTime.ToFileTime%2A>-Methode verwendet die <xref:System.DateTime.Kind%2A>-Eigenschaft, um zu bestimmen, ob es sich bei dem aktuellen <xref:System.DateTime>-Objekt um eine Ortszeit, eine UTC-Zeit oder eine nicht angegebene Art Zeit handelt, die als Ortszeit behandelt wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToFileTime%2A> Methode.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage"><para>Normalerweise stellt die <see cref="M:System.DateTime.FromFileTime(System.Int64)" />-Methode einen <see cref="T:System.DateTime" /> Wert wieder her, der von der <see cref="M:System.DateTime.ToFileTime" />-Methode gespeichert wurde. Die beiden Werte können sich jedoch unter den folgenden Bedingungen unterscheiden: 
: Wenn die Serialisierung und Deserialisierung des <see cref="T:System.DateTime" /> Werts in anderen Zeitzonen erfolgt. Beispiel: Wenn ein <see cref="T:System.DateTime" /> Wert mit einer Uhrzeit von 12:30 Uhr in der Region "USA, Osten" wird serialisiert und anschließend in der Zeitzone "USA, Pazifik" deserialisiert, der ursprüngliche Wert von 12:30 Uhr wird an 9:30 Uhr angepasst. , um den Unterschied zwischen den beiden Zeitzonen widerzuspiegeln.  
  
-Wenn der <see cref="T:System.DateTime" /> Wert, der serialisiert wird, eine ungültige Zeit in der lokalen Zeitzone darstellt. In diesem Fall passt die <see cref="M:System.DateTime.ToFileTime" />-Methode den wiederhergestellten <see cref="T:System.DateTime" /> Wert so an, dass er eine gültige Zeit in der lokalen Zeitzone darstellt.  
  
Der Übergang von der Standardzeit zur Sommerzeit erfolgt z. b. in der US-Pazifik-Zeitzone am 14. März 2010 um 2:00 Uhr, wenn die Zeit um eine Stunde um um 3:00 Uhr liegt. Dieses Stunden Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass eine Zeitspanne, die in diesen Bereich fällt, durch die <see cref="M:System.DateTime.ToFileTime" />-Methode in einen Long-ganzzahligen Wert konvertiert und dann durch die <see cref="M:System.DateTime.FromFileTime(System.Int64)" />-Methode wieder hergestellt wird. der ursprüngliche Wert wird so angepasst, dass er zu einer gültigen Zeit wird. Sie können bestimmen, ob ein bestimmter Datums-und Uhrzeitwert geändert werden kann, indem er an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />-Methode übergeben wird, wie im Beispiel veranschaulicht.  
  
[! Code-csharp[System. DateTime. FromFileTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! Code-vb[System. DateTime. FromFileTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n/s verstrichen sind. unserer Zeitrechnung Koordinierte Weltzeit (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wann eine Anwendung eine Datei erstellt, zugreift oder in eine Datei schreibt.  
  
 Die <xref:System.DateTime.ToFileTimeUtc%2A>-Methode verwendet die <xref:System.DateTime.Kind%2A>-Eigenschaft, um zu bestimmen, ob es sich bei dem aktuellen <xref:System.DateTime>-Objekt um eine Ortszeit, eine UTC-Zeit oder eine nicht angegebene Zeitangabe handelt, die als UTC-Zeit behandelt wird. Wenn es sich um eine Ortszeit handelt, wird die Uhrzeit in die UTC konvertiert, bevor die Konvertierung in eine Windows-Dateizeit erfolgt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTime.ToFileTimeUtc" />-Methode wird manchmal verwendet, um eine lokale Uhrzeit in die UTC zu konvertieren und anschließend wiederherzustellen, indem die <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />-Methode gefolgt von der <see cref="M:System.DateTime.ToLocalTime" />-Methode aufgerufen wird. Wenn die ursprüngliche Zeit jedoch eine ungültige Zeit in der lokalen Zeitzone darstellt, sind die beiden lokalen Uhrzeitwerte nicht gleich. Weitere Informationen finden Sie unter der <see cref="M:System.DateTime.ToLocalTime" /> Methode.</para></block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ortszeit ist gleich der UTC-Zeit (koordinierte Weltzeit) plus dem UTC-Offset. Weitere Informationen zum UTC-Offset finden Sie unter <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. Die Konvertierung berücksichtigt auch die Sommerzeit Regel, die sich auf die Zeit bezieht, die durch das aktuelle <xref:System.DateTime>-Objekt dargestellt wird.  
  
> [!IMPORTANT]
>  Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systemen erkennt die <xref:System.DateTime.ToLocalTime%2A>-Methode nur die aktuelle Anpassungs Regel, wenn Sie von UTC in die lokale Zeit umschließt. Daher wird der Unterschied zwischen UTC und Ortszeit durch Konvertierungen für Zeiträume vor der aktuellen Anpassungs Regel möglicherweise nicht genau widerspiegelt.  
  
 Beginnend mit der .NET Framework Version 2,0 wird der Wert, der von der <xref:System.DateTime.ToLocalTime%2A>-Methode zurückgegeben wird, von der <xref:System.DateTime.Kind%2A>-Eigenschaft des aktuellen <xref:System.DateTime> Objekts bestimmt. In der folgenden Tabelle werden die möglichen Ergebnisse beschrieben.  
  
|Art|Ergebnisse|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Diese Instanz von <xref:System.DateTime> wird in die lokale Zeit konvertiert.|  
|<xref:System.DateTimeKind.Local>|Es wird keine Konvertierung durchgeführt.|  
|<xref:System.DateTimeKind.Unspecified>|Diese Instanz von <xref:System.DateTime> wird als UTC-Zeit angenommen, und die Konvertierung erfolgt so, als ob <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Utc>wären.|  
  
> [!NOTE]
>  Die <xref:System.DateTime.ToLocalTime%2A>-Methode konvertiert einen <xref:System.DateTime>-Wert von UTC in die lokale Zeit. Verwenden Sie die <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType>-Methode, um die Zeit in einer bestimmten Zeitzone in eine lokale Zeit zu konvertieren.  
  
 Der von der Konvertierung zurückgegebene Wert ist eine <xref:System.DateTime>, deren <xref:System.DateTime.Kind%2A> Eigenschaft immer <xref:System.DateTimeKind.Local>zurückgibt. Folglich wird ein gültiges Ergebnis zurückgegeben, auch wenn <xref:System.DateTime.ToLocalTime%2A> wiederholt auf denselben <xref:System.DateTime>angewendet wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLocalTime%2A> Methode. Beachten Sie, dass die genaue Ausgabe von der aktuellen Kultur und der lokalen Zeitzone des Systems abhängt, in dem Sie ausgeführt wird.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A>-Methode verwendet, um zu veranschaulichen, wie sich die <xref:System.DateTime.Kind%2A>-Eigenschaft auf die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Konvertierungs Methoden auswirkt  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Sie können die <see cref="M:System.DateTime.ToLocalTime" />-Methode verwenden, um einen lokalen Datums-und Uhrzeitwert wiederherzustellen, der von der <see cref="M:System.DateTime.ToUniversalTime" />-oder <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />-Methode in UTC konvertiert wurde. Wenn die ursprüngliche Zeit jedoch eine ungültige Zeit in der lokalen Zeitzone darstellt, entspricht Sie nicht dem wiederhergestellten Wert. Wenn die <see cref="M:System.DateTime.ToLocalTime" />-Methode eine Uhrzeit von UTC in die lokale Zeitzone konvertiert, wird auch die Uhrzeit angepasst, sodass Sie in der lokalen Zeitzone gültig ist.  
  
Der Übergang von der Standardzeit zur Sommerzeit erfolgt z. b. in der US-Pazifik-Zeitzone am 14. März 2010 um 2:00 Uhr, wenn die Zeit um eine Stunde um um 3:00 Uhr liegt. Dieses Stunden Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass eine Zeitspanne, die in diesen Bereich fällt, von der <see cref="M:System.DateTime.ToUniversalTime" />-Methode in UTC konvertiert und dann durch die <see cref="M:System.DateTime.ToLocalTime" />-Methode wieder hergestellt wird. der ursprüngliche Wert wird so angepasst, dass er zu einem gültigen Zeitpunkt wird. Sie können bestimmen, ob ein bestimmter Datums-und Uhrzeitwert geändert werden kann, indem er an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />-Methode übergeben wird, wie im Beispiel veranschaulicht.  
  
[! Code-csharp[System. DateTime. ToLocalTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! Code-vb[System. DateTime. ToLocalTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para></block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
        <returns>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekts wird anhand des Musters formatiert, das durch die <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>-Eigenschaft definiert ist, die der aktuellen Thread Kultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der durch Angabe der "D"- [Standard-DateTime-Format Zeichenfolge](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29>-Methode zurückgegeben wird  
  
> [!NOTE]
>  Die von der <xref:System.DateTime.ToLongDateString%2A>-Methode zurückgegebene Zeichenfolge ist Kultur abhängig. Es spiegelt das Muster wider, das durch die <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern?displayProperty=nameWithType>-Eigenschaft der aktuellen Kultur definiert wird. Beispielsweise ist für die Kultur "en-US" das Standardmuster für lange Datumsangaben üblicherweise "dddd, MMMM dd, yyyy"; für die Kultur "de-de" lautet der Wert "dddd, d. MMMM yyyy "; für die Kultur "ja-JP" lautet Sie "yyyy ' 年 'm ' 月 'd ' 日 '". Beachten Sie, dass der Wert abhängig von der .NET-Implementierung und der zugehörigen Version, dem Betriebssystem und der zugehörigen Version sowie von der Benutzeranpassung variieren kann.

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]
  
## Examples

Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLongDateString%2A> Methode.  
  
[!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
[!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
        <returns>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Der Wert des aktuellen <xref:System.DateTime> Objekts wird anhand des Musters formatiert, das durch die <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType>-Eigenschaft definiert ist, die der aktuellen Thread Kultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der durch Angabe der "T" [-Standardformat Zeichenfolge für Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29>-Methode zurückgegeben wird.  
  
> [!NOTE]
>  Die von der <xref:System.DateTime.ToLongTimeString%2A>-Methode zurückgegebene Zeichenfolge ist Kultur abhängig. Es spiegelt das Muster wider, das durch die <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType>-Eigenschaft der aktuellen Kultur definiert wird. Für die Kultur "en-US" lautet das Standardmuster für lange Zeit z. b. "h:mm: ss tt"; für die Kultur "de-de" lautet Sie "hh: mm: SS"; für die Kultur "ja-JP" lautet Sie "h:mm: SS". Beachten Sie, dass der Wert abhängig von der .NET-Implementierung und der zugehörigen Version, dem Betriebssystem und der zugehörigen Version sowie von der Benutzeranpassung variieren kann.

[!INCLUDE[culture-sensitive-formatting](~/includes/thread-formatting.md)]
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLongTimeString%2A> Methode.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
        <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein OLE-Automatisierungs Datum wird als Gleit Komma Zahl implementiert, deren integrale Komponente die Anzahl der Tage vor oder nach Mitternacht, 30. Dezember 1899 und deren Dezimaltrennzeichen die Zeit an diesem Tag dividiert durch 24 darstellt. Beispielsweise wird Mitternacht, 31. Dezember 1899 durch 1,0 dargestellt. 6 Uhr, 1. Januar 1900 wird durch 2,25 dargestellt. Mitternacht, 29. Dezember 1899 wird durch-1,0; dargestellt. 6 Uhr, 29. Dezember 1899 wird durch-1,25 dargestellt.  
  
 Das Basis-OLE-Automatisierungs Datum ist Mitternacht, 30. Dezember 1899. Das minimale OLE-Automatisierungs Datum ist Mitternacht, 1. Januar 0100. Das Maximum der OLE-Automatisierung entspricht <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, dem letzten Moment des 31. Dezember 9999.  
  
 Die <xref:System.DateTime.ToOADate%2A>-Methode löst eine <xref:System.OverflowException> aus, wenn die aktuelle Instanz ein Datum darstellt, das nach dem <xref:System.DateTime.MaxValue> und vor Mitternacht auf January1, 0100, liegt. Wenn der Wert der aktuellen Instanz jedoch <xref:System.DateTime.MinValue>ist, gibt die Methode 0 zurück.  
  
 Weitere Informationen zur OLE-Automatisierung finden Sie in der [MSDN Library](https://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
        <returns>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekts wird anhand des Musters formatiert, das durch die <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType>-Eigenschaft definiert ist, die der aktuellen Thread Kultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der durch Angabe der "d"- [Standard-DateTime-Format Zeichenfolge](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29>-Methode zurückgegeben wird  
  
> [!NOTE]
>  Die von der <xref:System.DateTime.ToShortDateString%2A>-Methode zurückgegebene Zeichenfolge ist Kultur abhängig. Es spiegelt das Muster wider, das durch die <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern?displayProperty=nameWithType>-Eigenschaft der aktuellen Kultur definiert wird. Für die Kultur "en-US" lautet das Standardmuster für kurze Datumsangaben z. b. "M/d/yyyy"; für die Kultur "de-de" lautet Sie "dd. MM. yyyy "; für die Kultur "ja-JP" lautet Sie "yyyy/mm/dd". Beachten Sie, dass der Wert abhängig von der .NET-Implementierung und der zugehörigen Version, dem Betriebssystem und der zugehörigen Version sowie von der Benutzeranpassung variieren kann.

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToShortDateString%2A> Methode. Außerdem wird gezeigt, dass das Ergebnis des Abrufens der <xref:System.DateTime.ToShortDateString%2A>-Methode mit dem Aufrufen der <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>-Methode mit "d" als Format Parameter identisch ist.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
        <returns>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Der Wert des aktuellen <xref:System.DateTime> Objekts wird anhand des Musters formatiert, das durch die <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType>-Eigenschaft definiert ist, die der aktuellen Thread Kultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der durch Angabe der [standardmäßigen DateTime-Format Zeichenfolge](~/docs/standard/base-types/standard-date-and-time-format-strings.md) "t" mit der <xref:System.DateTime.ToString%28System.String%29>-Methode zurückgegeben wird.  
  
> [!NOTE]
>  Die von der <xref:System.DateTime.ToShortTimeString%2A>-Methode zurückgegebene Zeichenfolge ist Kultur abhängig. Es spiegelt das Muster wider, das durch die <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern?displayProperty=nameWithType>-Eigenschaft der aktuellen Kultur definiert wird. Für die Kultur "en-US" lautet das Standardmuster für kurze Zeit beispielsweise "h:mm tt"; für die Kultur "de-de" lautet Sie "hh: mm"; für die Kultur "ja-JP" lautet Sie "h:mm". Beachten Sie, dass der Wert abhängig von der .NET-Implementierung und der zugehörigen Version, dem Betriebssystem und der zugehörigen Version sowie von der Benutzeranpassung variieren kann. 

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToShortTimeString%2A> Methode.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the formatting conventions of the current culture.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekts wird mit dem allgemeinen Format Bezeichner für Datum und Uhrzeit ("G") formatiert. Um ihn mit einem bestimmten Format Bezeichner für Datum und Uhrzeit zu formatieren, müssen Sie die <xref:System.DateTime.ToString%28System.String%29>-Methode aufzurufen. Um es mit dem allgemeinen Format Bezeichner für Datum und Uhrzeit ("G") für eine bestimmte Kultur zu formatieren, nennen Sie die <xref:System.DateTime.ToString%28System.IFormatProvider%29>-Methode. Um ihn mit einem bestimmten Format Bezeichner für Datum und Uhrzeit und den Konventionen einer bestimmten Kultur zu formatieren, müssen Sie die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>-Methode verwenden.  
  
 Diese Methode verwendet Formatierungsinformationen, die von der aktuellen Kultur abgeleitet werden. Insbesondere kombiniert Sie die benutzerdefinierten Format Zeichenfolgen, die von den <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>-und <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> Eigenschaften des <xref:System.Globalization.DateTimeFormatInfo> Objekts zurückgegeben werden, das von der `Thread.CurrentThread.CurrentCulture.DateTimeFormat`-Eigenschaft zurückgegeben wird Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Mit anderen über Ladungen der <xref:System.DateTime.ToString%2A>-Methode können Sie die Kultur angeben, deren Formatierung verwendet werden soll, sowie das Ausgabemuster des <xref:System.DateTime> Werts definieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die Zeichen folgen Darstellung eines <xref:System.DateTime> Werts, der von der <xref:System.DateTime.ToString>-Methode zurückgegeben wird, von der aktuellen Thread Kultur abhängig ist. Sie ändert die aktuelle Thread Kultur von en-US in fr-fr in ja-JP. und in jedem Fall ruft die <xref:System.DateTime.ToString>-Methode auf, um die Zeichen folgen Darstellung eines Datums-und Uhrzeitwerts mithilfe dieser Kultur zurückzugeben.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTime.ToString" />-Methode gibt die Zeichen folgen Darstellung des Datums und der Uhrzeit im Kalender zurück, der von der aktuellen Kultur verwendet wird. Wenn der Wert der aktuellen <see cref="T:System.DateTime" /> Instanz früher als <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder höher als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />ist, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />aus. Dies wird im folgenden Beispiel veranschaulicht. Es wird versucht, ein Datum zu formatieren, das außerhalb des Bereichs der <see cref="T:System.Globalization.HijriCalendar" /> Klasse liegt, wenn die aktuelle Kultur Arabisch (Syrien) ist.  
  
[! Code-csharp[System. DateTime. destring. argumentoudefrangeexception # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)] [! Code-vb[System. DateTime. destring. argumentoudefrangeexception # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekts wird mit dem allgemeinen Format Bezeichner für Datum und Uhrzeit ("G") formatiert, der die Ausgabe unter Verwendung des kurzen Datums Musters und des langen Zeit Musters formatiert.  
  
 Das Format des kurzen Datums-und des langen Uhrzeit Musters wird durch den `provider`-Parameter definiert. Der `provider`-Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, deren Formatierungs Konventionen in der zurückgegebenen Zeichenfolge reflektiert werden sollen. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Ein benutzerdefiniertes Objekt, das die <xref:System.IFormatProvider>-Schnittstelle implementiert. Die <xref:System.IFormatProvider.GetFormat%2A>-Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt zurück, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` `null`ist, wird das <xref:System.Globalization.DateTimeFormatInfo>-Objekt verwendet, das der aktuellen Kultur zugeordnet ist. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Zeichen folgen Darstellung eines Datums und einer Uhrzeit mit <xref:System.Globalization.CultureInfo> Objekten angezeigt, die fünf verschiedene Kulturen darstellen.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTime.ToString(System.IFormatProvider)" />-Methode gibt die Zeichen folgen Darstellung des Datums und der Uhrzeit in dem Kalender zurück, der von der durch den <paramref name="provider" />-Parameter dargestellten Kultur verwendet wird. Der Kalender wird durch die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />-Eigenschaft definiert. Wenn der Wert der aktuellen <see cref="T:System.DateTime" /> Instanz früher als <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder höher als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />ist, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />aus. Dies wird im folgenden Beispiel veranschaulicht. Es wird versucht, ein Datum zu formatieren, das außerhalb des Bereichs der <see cref="T:System.Globalization.JapaneseCalendar" /> Klasse liegt.  
  
[! Code-csharp[System. DateTime. destring. argumentoudefrangeexception # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)] [! Code-vb[System. DateTime. destring. argumentoudefrangeexception # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ToString%28System.String%29>-Methode gibt die Zeichen folgen Darstellung eines Datums-und Uhrzeitwerts in einem bestimmten Format zurück, das die Formatierungs Konventionen der aktuellen Kultur verwendet. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 Der `format`-Parameter muss entweder ein einzelnes formatspezifiziererzeichen (siehe Standard Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) oder ein benutzerdefiniertes Format Muster (siehe benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/custom-date-and-time-format-strings.md)) enthalten, das das Format der zurückgegebenen Zeichenfolge definiert. Wenn `format` `null` oder eine leere Zeichenfolge ist, wird der allgemeine Format Bezeichner "G" verwendet.  
  
 Zu den Verwendungsmöglichkeiten dieser Methode gehören:  
  
-   Eine Zeichenfolge, die das Datum und die Uhrzeit im kurzen Datums-und Uhrzeit Format der aktuellen Kultur anzeigt. Verwenden Sie hierzu den Format Bezeichner "G".  
  
-   Eine Zeichenfolge, die nur den Monat und das Jahr enthält. Zu diesem Zweck verwenden Sie die Format Zeichenfolge "mm/yyyy". Die Format Zeichenfolge verwendet das Datums Trennzeichen der aktuellen Kultur.  
  
-   Eine Zeichenfolge, die das Datum und die Uhrzeit in einem bestimmten Format enthält. Die Format Zeichenfolge "mm/dd/yyyyhh: mm" zeigt z. b. die Datums-und Uhrzeit Zeichenfolge in einem bestimmten Format an, z. b. "19//03//2013 18:06". Die Format Zeichenfolge verwendet "/" als Trennzeichen für ein festes Datum, unabhängig von kulturspezifischen Einstellungen.  
  
-   Das erhalten eines Datums in einem komprimierten Format, das zum Serialisieren einer Datums Zeichenfolge verwendet werden kann. Die Format Zeichenfolge "YYYYMMDD" zeigt beispielsweise eine vierstellige Jahres Angabe an, gefolgt von einem zweistelligen Monat und einem zweistelligen Tag ohne Datums Trennzeichen.  
  
 Im folgenden Beispiel werden diese drei Format Zeichenfolgen verwendet, um einen Datums-und Uhrzeitwert mithilfe der Konventionen der Kultur en-US und fr-FR anzuzeigen.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird jede der Standardformat Zeichenfolgen für Datum und Uhrzeit und eine Auswahl von benutzerdefinierten Format Zeichenfolgen für Datum und Uhrzeit verwendet, um die Zeichen folgen Darstellung eines <xref:System.DateTime> Werts anzuzeigen. Die aktuelle Thread Kultur für das Beispiel ist "en-US".  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
-or- 
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTime.ToString(System.String)" />-Methode gibt die Zeichen folgen Darstellung des Datums und der Uhrzeit im Kalender zurück, der von der aktuellen Kultur verwendet wird. Wenn der Wert der aktuellen <see cref="T:System.DateTime" /> Instanz früher als <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder höher als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />ist, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />aus. Dies wird im folgenden Beispiel veranschaulicht. Es wird versucht, ein Datum zu formatieren, das außerhalb des Bereichs der <see cref="T:System.Globalization.HebrewCalendar" /> Klasse liegt, wenn die aktuelle Kultur Hebräisch (Israel) ist.  
  
[! Code-csharp[System. DateTime. destring. argumentoudefrangeexception # 3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)] [! Code-vb[System. DateTime. destring. argumentoudefrangeexception # 3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `format`-Parameter kann entweder ein einzelnes formatspezifiziererzeichen (siehe Standard Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) oder ein benutzerdefiniertes Format Muster (siehe benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](~/docs/standard/base-types/custom-date-and-time-format-strings.md)) enthalten. Wenn `format` `null` oder eine leere Zeichenfolge ("") ist, wird der Standardformat Bezeichner "G" verwendet.  
  
 Der `provider`-Parameter definiert das Muster, das den Standardformat Bezeichnernamen entspricht, sowie die Symbole und Namen von Datums-und Uhrzeit Komponenten. Der `provider`-Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, deren Formatierungs Konventionen in der zurückgegebenen Zeichenfolge reflektiert werden sollen. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Ein benutzerdefiniertes Objekt, das die <xref:System.IFormatProvider>-Schnittstelle implementiert. Die <xref:System.IFormatProvider.GetFormat%2A>-Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt zurück, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` `null`ist, wird die <xref:System.Globalization.DateTimeFormatInfo>, die der aktuellen Kultur zugeordnet ist, verwendet. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird jede der standardmäßigen Datums-/uhrzeitformatzeichenfolgen verwendet, um die Zeichen folgen Darstellung eines Datums und einer Uhrzeit für vier verschiedene Kulturen anzuzeigen.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 Im folgenden Beispiel werden verschiedene Methoden zum Formatieren eines <xref:System.DateTime> Werts mithilfe der invarianten <xref:System.Globalization.DateTimeFormatInfo>veranschaulicht.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
-or- 
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />-Methode gibt die Zeichen folgen Darstellung des Datums und der Uhrzeit im Kalender zurück, der vom <paramref name="provider" />-Parameter verwendet wird. Der Kalender wird durch die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />-Eigenschaft definiert. Wenn der Wert der aktuellen <see cref="T:System.DateTime" /> Instanz früher als <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder höher als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />ist, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />aus. Dies wird im folgenden Beispiel veranschaulicht. Es wird versucht, ein Datum zu formatieren, das außerhalb des Bereichs der <see cref="T:System.Globalization.UmAlQuraCalendar" /> Klasse liegt.  
  
[! Code-csharp[System. DateTime. destring. argumentoudefrangeexception # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)] [! Code-vb[System. DateTime. destring. argumentoudefrangeexception # 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">Beispiel: .net Core-Hilfsprogramm zur FormatierungC#von WinForms ()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">Beispiel: .net Core-Hilfsprogramm für die WinForms-Formatierung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die koordinierte Weltzeit (UTC) ist gleich der lokalen Zeit abzüglich des UTC-Offsets. Weitere Informationen zum UTC-Offset finden Sie unter <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. Die Konvertierung berücksichtigt auch die Sommerzeit Regel, die sich auf die Zeit bezieht, die durch das aktuelle <xref:System.DateTime>-Objekt dargestellt wird.  
  
> [!IMPORTANT]
>  Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systemen erkennt die <xref:System.DateTime.ToUniversalTime%2A>-Methode nur die aktuelle Anpassungs Regel, wenn Sie von der Ortszeit in die UTC-Zeit umschließt. Daher können Konvertierungen für Zeiträume vor der aktuellen Anpassungs Regel den Unterschied zwischen Ortszeit und UTC nicht genau widerspiegeln.  
  
 Beginnend mit der .NET Framework Version 2,0 wird der Wert, der von der <xref:System.DateTime.ToUniversalTime%2A>-Methode zurückgegeben wird, von der <xref:System.DateTime.Kind%2A>-Eigenschaft des aktuellen <xref:System.DateTime> Objekts bestimmt. In der folgenden Tabelle werden die möglichen Ergebnisse beschrieben.  
  
|Art|Ergebnisse|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Es wird keine Konvertierung durchgeführt.|  
|<xref:System.DateTimeKind.Local>|Das aktuelle <xref:System.DateTime> Objekt wird in UTC konvertiert.|  
|<xref:System.DateTimeKind.Unspecified>|Es wird angenommen, dass es sich bei dem aktuellen <xref:System.DateTime> Objekt um eine Ortszeit handelt, und die Konvertierung erfolgt so, als ob <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Local>wären.|  
  
> [!NOTE]
>  Die <xref:System.DateTime.ToUniversalTime%2A>-Methode konvertiert einen <xref:System.DateTime>-Wert von der Ortszeit in UTC. Verwenden Sie die <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>-Methode, um die Uhrzeit in einer nicht lokalen Zeitzone in UTC zu konvertieren. Verwenden Sie die <xref:System.DateTimeOffset.ToUniversalTime%2A>-Methode, um eine Zeit zu konvertieren, deren Offset von UTC bekannt ist.  
  
 Wenn der Datums-und Uhrzeitwert eine mehrdeutige Zeit ist, geht diese Methode davon aus, dass es sich um eine Standardzeit handelt. (Eine mehrdeutige Zeit ist eine, die entweder einer Standardzeit oder einer Sommerzeit in der lokalen Zeitzone zugeordnet werden kann.) Wenn der Datums-und Uhrzeitwert eine ungültige Zeit ist, subtrahiert diese Methode die lokale Zeit einfach vom UTC-Offset der lokalen Zeitzone zur Rückgabe von UTC. (Eine ungültige Zeit ist eine, die aufgrund der Anwendung der Anpassungsregeln für die Sommerzeit nicht vorhanden ist.)  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToUniversalTime%2A> Methode.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A>-Methode verwendet, um zu veranschaulichen, wie sich die <xref:System.DateTime.Kind%2A>-Eigenschaft auf die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Konvertierungs Methoden auswirkt  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTime.ToUniversalTime" />-Methode wird manchmal verwendet, um eine lokale Uhrzeit in die UTC zu konvertieren. Die <see cref="M:System.DateTime.ToLocalTime" />-Methode wird dann aufgerufen, um die ursprüngliche lokale Zeit wiederherzustellen. Wenn die ursprüngliche Zeit jedoch eine ungültige Zeit in der lokalen Zeitzone darstellt, sind die beiden lokalen Uhrzeitwerte nicht gleich. Weitere Informationen und ein Beispiel finden Sie in der <see cref="M:System.DateTime.ToLocalTime" />-Methode.  
  
Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systemen erkennt die <see cref="M:System.DateTime.ToUniversalTime" />-Methode nur die aktuelle Anpassungs Regel für die lokale Zeitzone, die für alle Datumsangaben gilt, einschließlich Datumsangaben, die älter sind als das Startdatum der aktuellen Anpassungs Regel. Anwendungen, die auf [!INCLUDE[winxp](~/includes/winxp-md.md)] ausgeführt werden, die in der Vergangenheit exakte lokale Datums-und Uhrzeit Berechnungen erfordern, müssen dieses Verhalten umgehen, indem Sie die <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />-Methode verwenden, um ein <see cref="T:System.TimeZoneInfo" /> Objekt abzurufen, das der lokalen Zeitzone entspricht, und dessen <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> aufrufen. anzuwenden.  
  
Im folgenden Beispiel wird der Unterschied zwischen den <see cref="M:System.DateTime.ToUniversalTime" />-und <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> Methoden in einem [!INCLUDE[winxp](~/includes/winxp-md.md)] System in der US Pacific Time Zone veranschaulicht. Bei den ersten beiden Methoden aufrufen wird die aktuelle Zeit Zonen Anpassungs Regel (die in 2007 in Kraft trat) auf ein Datum in 2006 angewendet. Mit der aktuellen Anpassungs Regel wird der Übergang zur Sommerzeit am zweiten Sonntag im März ermöglicht. die vorherige Regel, die in 2006 wirksam war, wurde für den Übergang zur Sommerzeit am ersten Sonntag im April bereitgestellt. Nur der dritte Methodenaufruf führt diese historische Datums-und Uhrzeit Konvertierung genau aus.  
  
[! Code-csharp[System. DateTime. deuniversaltime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! Code-vb[System. DateTime. deuniversaltime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination">When this method returns, this instance's value formatted as a span of characters.</param>
        <param name="charsWritten">When this method returns, the number of characters that were written in <paramref name="destination" />.</param>
        <param name="format">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
        <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
        <summary>Tries to format the value of the current datetime instance into the provided span of characters.</summary>
        <returns><see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified char span of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode ähnelt der <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29>-Methode keine Ausnahme auslöst, wenn bei der Konvertierung ein Fehler auftritt.  
  
 Die Zeichenfolge `s` wird mithilfe von Formatierungsinformationen im aktuellen <xref:System.Globalization.DateTimeFormatInfo>-Objekt analysiert, das implizit von der aktuellen Thread Kultur bereitgestellt wird.  
  
 Diese Methode versucht, nicht erkannte Daten zu ignorieren, wenn möglich, und füllt fehlende Monats-, Tages-und Jahres Informationen mit dem aktuellen Datum aus. Wenn `s` nur ein Datum und keine Uhrzeit enthält, geht diese Methode davon aus, dass die Uhrzeit 12:00 Mitternacht ist. Wenn `s` eine Datums Komponente mit einer zweistelligen Jahres Angabe enthält, wird Sie basierend auf dem Wert der Eigenschaft <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> in ein Jahr im aktuellen Kalender der aktuellen Kultur konvertiert. Alle führenden, inneren oder nachfolgenden Leerzeichen in `s` werden ignoriert. Das Datum und die Uhrzeit können mit einem Paar von führenden und nachfolgenden Nummern Zeichen ("#", U + 0023) in Klammern gesetzt werden und können mit einem oder mehreren NULL-Zeichen (u + 0000) abgezogen werden.  
  
 Da die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode versucht, die Zeichen folgen Darstellung eines Datums und einer Uhrzeit mit den Formatierungs Regeln der aktuellen Kultur zu analysieren, kann der Versuch, eine bestimmte Zeichenfolge über verschiedene Kulturen hinweg zu analysieren, fehlschlagen oder andere Ergebnisse zurückgeben. Wenn ein bestimmtes Datums-und Uhrzeit Format über verschiedene Gebiets Schemas hinweg analysiert wird, verwenden Sie die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode oder eine der über Ladungen der <xref:System.DateTime.TryParseExact%2A>-Methode, und geben Sie einen Format Bezeichner an.  
  
 Wenn `s` die Zeichen folgen Darstellung eines Schalt Tags in einem Schaltjahr im aktuellen Kalender ist, analysiert die Methode `s` erfolgreich. Wenn `s` die Zeichen folgen Darstellung eines Schalt Tags in einem nicht-Schaltjahr im aktuellen Kalender der aktuellen Kultur ist, schlägt der Analyse Vorgang fehl, und die Methode gibt `false`zurück.  
  
 Wenn `s` keine Zeitzoneninformationen enthält, enthält `result` einen <xref:System.DateTime> Wert, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft bei Rückgabe der Methode <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> ist. Wenn die zu erteilende Zeichenfolge Zeitzoneninformationen enthält, enthält `result` einen <xref:System.DateTime> Wert, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ist, wenn die Methode zurückgibt.  
  
   
  
## Examples  
 Im folgenden Beispiel werden eine Reihe von Datums-und Uhrzeit Zeichenfolgen an die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode weitergeleitet.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Die Formatierung wird durch Eigenschaften des aktuellen <see cref="T:System.Globalization.DateTimeFormatInfo" /> Objekts beeinflusst, die standardmäßig von der Option Regions **-und Sprachoptionen** in der Systemsteuerung abgeleitet werden. Die <see cref="Overload:System.DateTime.TryParse" />-Methode kann unerwartet einen Fehler erzeugen und <see langword="False" /> zurückgeben, wenn die aktuellen <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />-und <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />-Eigenschaften auf denselben Wert festgelegt sind.</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">Beispiel: .net Core-Hilfsprogramm zur FormatierungC#von WinForms ()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">Beispiel: .net Core-Hilfsprogramm für die WinForms-Formatierung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">A span containing the characters representing the date and time to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the span representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode analysiert eine Zeichenfolge, die Datums-, Uhrzeit-und Zeitzoneninformationen enthalten kann. Sie ähnelt der <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode keine Ausnahme auslöst, wenn bei der Konvertierung ein Fehler auftritt.  
  
 Diese Methode versucht, unbekannte Daten zu ignorieren und `s` vollständig zu analysieren. Wenn `s` eine Uhrzeit, aber kein Datum enthält, ersetzt die Methode standardmäßig das aktuelle Datum oder, wenn `styles` das <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>-Flag enthält, ersetzt `DateTime.Date.MinValue`. Wenn `s` ein Datum, aber keine Uhrzeit enthält, wird 12:00 Mitternacht als Standardzeit verwendet. Wenn ein Datum vorhanden ist, aber seine Jahres Komponente nur aus zwei Ziffern besteht, wird es basierend auf dem Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>-Eigenschaft in ein Jahr im aktuellen Kalender des `provider` Parameters konvertiert. Alle führenden, inneren oder nachfolgenden Leerzeichen in `s` werden ignoriert. Das Datum und die Uhrzeit können mit einem Paar von führenden und nachfolgenden Nummern Zeichen ("#", U + 0023) in Klammern gesetzt werden und können mit einem oder mehreren NULL-Zeichen (u + 0000) abgezogen werden.  
  
 Bestimmte gültige Formate für Datums-und Uhrzeit Elemente sowie die Namen und Symbole, die in Datums-und Uhrzeitangaben verwendet werden, werden durch den `provider`-Parameter definiert. dabei kann es sich um Folgendes handeln:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, deren Formatierung im `s`-Parameter verwendet wird. Das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegebene <xref:System.Globalization.DateTimeFormatInfo> Objekt definiert die in `s`verwendete Formatierung.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das die in `s`verwendete Formatierung definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider>-Implementierung. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>-Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt zurück, das die in `s`verwendete Formatierung definiert.  
  
 Wenn `provider` `null` ist, wird die aktuelle Kultur verwendet.  
  
 Wenn `s` die Zeichen folgen Darstellung eines Schalt Tags in einem Schaltjahr im aktuellen Kalender ist, analysiert die Methode `s` erfolgreich. Wenn `s` die Zeichen folgen Darstellung eines Schalt Tags in einem nicht-Schaltjahr im aktuellen Kalender `provider`ist, schlägt der Analyse Vorgang fehl, und die Methode gibt `false`zurück.  
  
 Der `styles`-Parameter definiert die genaue Interpretation der analysierten Zeichenfolge und die Art, wie Sie vom Analyse Vorgang behandelt werden soll. Dies kann ein oder mehrere Member der <xref:System.Globalization.DateTimeStyles>-Enumeration sein, wie in der folgenden Tabelle beschrieben.  
  
|DateTimeStyles-Member|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und konvertiert Sie ggf. in UTC. Wenn `s` einen Zeit Zonen Offset enthält, oder wenn `s` keine Zeitzoneninformationen enthält, aber `styles` das <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> auf, um den zurückgegebenen <xref:System.DateTime> Wert in die UTC zu konvertieren. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. Wenn `s` angibt, dass es sich um UTC handelt, oder wenn `s` keine Zeitzoneninformationen enthält, `styles` jedoch das <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, führt keine Zeit Zonen Konvertierung für den zurückgegebenen <xref:System.DateTime> Wert aus. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. In allen anderen Fällen hat das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Innere Leerräume sind in den Datums-und Uhrzeit Elementen `s`zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Führende Leerzeichen sind in den Datums-und Uhrzeit Elementen `s`zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Nachfolgende Leerzeichen sind in den Datums-und Uhrzeit Elementen `s`zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führende, innere und nachfolgende Leerzeichen enthalten kann. Dies ist das Standardverhalten. Sie kann nicht überschrieben werden, indem eine restriktivere <xref:System.Globalization.DateTimeStyles> Enumerationswerts wie <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>bereitgestellt wird.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie eine Ortszeit darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie die UTC darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, konvertiert die-Methode den zurückgegebenen <xref:System.DateTime> Wert von UTC in Ortszeit und legt seine <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>fest.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Bei Zeichen folgen, die Zeitzoneninformationen enthalten, versucht, die Konvertierung einer Datums-und Uhrzeit Zeichenfolge in einen <xref:System.DateTime> Wert zu verhindern, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt ist. In der Regel wird eine solche Zeichenfolge durch Aufrufen der <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>-Methode mithilfe der Standardformat Bearbeiter "o", "r" oder "u" erstellt.|  
  
 Wenn `s` keine Zeitzoneninformationen enthält, gibt die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode einen <xref:System.DateTime> Wert zurück, dessen <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> ist, es sei denn, ein `styles`-Flag gibt andernfalls an. Wenn `s` Zeit Zonen-oder Zeit Zonen Offset-Informationen enthält, führt die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode jede erforderliche Zeit Konvertierung durch und gibt eines der folgenden zurück:  
  
-   Ein <xref:System.DateTime> Wert, dessen Datum und Uhrzeit die Ortszeit widerspiegeln und dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist.  
  
-   Oder, wenn `styles` das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal>-Flag enthält, ein <xref:System.DateTime> Wert, dessen Datum und Uhrzeit die UTC widerspiegeln und dessen <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>ist.  
  
 Dieses Verhalten kann mit dem <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>-Flag überschrieben werden.  
  
## <a name="parsing-custom-cultures"></a>Benutzerdefinierte Kulturen werden verarbeitet.  
 Wenn Sie eine Datums-und Uhrzeit Zeichenfolge analysieren, die für eine benutzerdefinierte Kultur generiert wurde, verwenden Sie die <xref:System.DateTime.TryParseExact%2A>-Methode anstelle der <xref:System.DateTime.TryParse%2A>-Methode, um die Wahrscheinlichkeit zu erhöhen, dass der Analyse Vorgang erfolgreich ausgeführt wird. Eine benutzerdefinierte Datums-und Uhrzeit Zeichenfolge für die Kultur kann kompliziert und schwer zu analysieren sein. Die <xref:System.DateTime.TryParse%2A>-Methode versucht, eine Zeichenfolge mit mehreren impliziten Analyse Mustern zu analysieren, die möglicherweise fehlschlagen. Im Gegensatz dazu erfordert die <xref:System.DateTime.TryParseExact%2A>-Methode, dass Sie explizit ein oder mehrere exakte Analyse Muster festlegen, die wahrscheinlich erfolgreich sind.  
  
 Weitere Informationen zu benutzerdefinierten Kulturen finden Sie in der <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType>-Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode veranschaulicht.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
-or- 
 <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
        <block subset="none" type="usage"><para>Die Formatierung wird durch die Eigenschaften des aktuellen <see cref="T:System.Globalization.DateTimeFormatInfo" /> Objekts beeinflusst, das vom <paramref name="provider" />-Parameter bereitgestellt wird. Die <see cref="Overload:System.DateTime.TryParse" />-Methode kann unerwartet einen Fehler erzeugen und <see langword="False" /> zurückgeben, wenn die aktuellen <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />-und <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />-Eigenschaften auf denselben Wert festgelegt sind.</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">A span containing the characters representing a date and time to convert.</param>
        <param name="format">The required format of <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized.</param>
        <summary>Converts the specified span representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s">The span containing the string to parse.</param>
        <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="style">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is <see langword="null" />, is <see cref="F:System.String.Empty" />, or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified char span of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">The required format of <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
        <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das in dem vom `format`-Parameter definierten Format vorliegen muss. Sie ähnelt der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>-Methode keine Ausnahme auslöst, wenn bei der Konvertierung ein Fehler auftritt.  
  
 Der `s`-Parameter enthält das Datum und die Uhrzeit, die analysiert werden sollen, und muss in einem Format vorliegen, das durch den `format`-Parameter definiert wird. Wenn Datums-, Uhrzeit-und Zeit Zonen Elemente in `s`vorhanden sind, müssen Sie auch in der durch `format`angegebenen Reihenfolge angezeigt werden. Wenn `format` ein Datum ohne Zeitelement definiert und der Analyse Vorgang erfolgreich ist, hat der resultierende <xref:System.DateTime> Wert eine Uhrzeit von Mitternacht (00:00:00). Wenn `format` eine Uhrzeit ohne Date-Element definiert und der Analyse Vorgang erfolgreich ist, hat der resultierende <xref:System.DateTime> Wert standardmäßig das Datum `DateTime.Now.Date`oder das Datum `DateTime.MinValue.Date`, wenn `styles` das <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>-Flag enthält. Der `style`-Parameter bestimmt, ob der `s` Parameter führende, innere oder nachfolgende Leerzeichen enthalten darf.  
  
 Wenn `s` keine Zeitzoneninformationen enthält, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann mit dem <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag geändert werden, das einen <xref:System.DateTime> Wert zurückgibt, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flags, die einen <xref:System.DateTime> Wert zurückgibt, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn s Zeitzoneninformationen enthält, wird die Uhrzeit ggf. in lokale Zeit konvertiert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts wird auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt. Dieses Verhalten kann geändert werden, indem das <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>-Flag verwendet wird, um die koordinierte Weltzeit (UTC) nicht in eine Ortszeit zu konvertieren und die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>festzulegen.  
  
 Der `format`-Parameter enthält ein Muster, das dem erwarteten Format des `s`-Parameters entspricht. Das Muster im `format`-Parameter besteht aus einem oder mehreren benutzerdefinierten Format Bezeichnern aus der benutzerdefinierten Format Zeichenfolgen-Tabelle für [Datum und Uhrzeit](~/docs/standard/base-types/custom-date-and-time-format-strings.md) oder einem einzelnen Standardformat Bezeichner, der ein vordefiniertes Muster identifiziert, vom [Standard Datum und-Uhrzeit. ](~/docs/standard/base-types/standard-date-and-time-format-strings.md)Zeichen folgen Tabelle formatieren.  
  
 Wenn Sie keine Datums-oder Uhrzeit Trennzeichen in einem benutzerdefinierten Format Muster verwenden, verwenden Sie die invariante Kultur für den `provider`-Parameter und die breiteste Form der einzelnen benutzerdefinierten Format Bezeichner. Wenn Sie z. b. Stunden im Muster angeben möchten, geben Sie die breitere Form "hh" anstelle des engeren Formulars "H" an.  
  
> [!NOTE]
>  Anstatt zu verlangen, dass `s` einem einzelnen Format entsprechen, damit der Analyse Vorgang erfolgreich ausgeführt werden kann, können Sie die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode aufzurufen und mehrere zulässige Formate angeben. Dadurch wird die Wahrscheinlichkeit, dass der Analyse Vorgang erfolgreich durchgeführt wird.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und-Zeichen folgen (z. b. die Namen der Wochentage in einer bestimmten Sprache), die in `s` verwendet werden, werden durch den `provider`-Parameter definiert, ebenso wie das genaue Format von `s`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `provider`-Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, die zum Interpretieren `s`verwendet wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von seiner <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider>-Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode entweder das <xref:System.Globalization.CultureInfo>-Objekt oder das <xref:System.Globalization.DateTimeFormatInfo> Objekt zurückgibt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter enthält mindestens einen Member der <xref:System.Globalization.DateTimeStyles> Enumeration, der bestimmt, ob und wo von `format` nicht definierte Leerzeichen in `s` erscheinen und das genaue Verhalten des Analyse Vorgangs steuern können. In der folgenden Tabelle wird beschrieben, wie sich jedes Element der <xref:System.Globalization.DateTimeStyles> Enumeration auf den Vorgang der <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>-Methode auswirkt.  
  
|DateTimeStyles-Member|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und konvertiert Sie ggf. in UTC. Wenn `s` einen Zeit Zonen Offset enthält, oder wenn `s` keine Zeitzoneninformationen enthält, aber `styles` das <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> auf, um den zurückgegebenen <xref:System.DateTime> Wert in die UTC zu konvertieren. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. Wenn `s` angibt, dass es sich um UTC handelt, oder wenn `s` keine Zeitzoneninformationen enthält, `styles` jedoch das <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, führt keine Zeit Zonen Konvertierung für den zurückgegebenen <xref:System.DateTime> Wert aus. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. In allen anderen Fällen hat das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass der von `format` nicht definierte Leerraum zwischen einem einzelnen Date-oder Time-Element angezeigt werden kann.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerzeichen, die nicht von `format` definiert werden, am Anfang `s`vorkommen können.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerzeichen, die nicht von `format` definiert werden, am Ende `s`angezeigt werden können.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führende, innere und nachfolgende Leerzeichen enthalten kann, die nicht durch `format`definiert sind.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie eine Ortszeit darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie die UTC darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, konvertiert die-Methode den zurückgegebenen <xref:System.DateTime> Wert von UTC in Ortszeit und legt seine <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>fest.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` Zeit ohne Datumsangaben enthält, wird das Datum des Rückgabewerts auf `DateTime.MinValue.Date`festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.None>|Der `s`-Parameter wird mit Standardwerten analysiert. In `format` sind keine Leerzeichen zulässig, die in vorhanden sind. Wenn `s` eine Datums Komponente fehlt, wird das Datum des zurückgegebenen <xref:System.DateTime> Werts auf 1/1/0001 festgelegt. Wenn `s` keine Zeitzoneninformationen enthält, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts auf <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>festgelegt. Wenn Zeitzoneninformationen in `s`vorhanden sind, wird die Uhrzeit in die Ortszeit konvertiert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts wird auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Bei Zeichen folgen, die Zeitzoneninformationen enthalten, versucht, die Konvertierung in einen <xref:System.DateTime> Wert zu verhindern, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt ist. Dieses Flag verhindert hauptsächlich die Konvertierung von UTC-Zeiten in lokale Uhrzeiten.|  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode. Beachten Sie, dass die Zeichenfolge "5/01/2009 8:30 am" nicht erfolgreich analysiert werden kann, wenn der `styles` Parameter <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> ist, da führende Leerzeichen von `format`nicht zugelassen werden. Außerdem kann die Zeichenfolge "5/01/2009 09:00" nicht erfolgreich analysiert werden, da die `format` "mm/dd/yyyyhh: mm" lautet, da die Datums Zeichenfolge nicht der Monatsnummer vorangestellt ist, wie `format` erfordert.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
-or- 
 <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]gibt die <see cref="Overload:System.DateTime.TryParseExact" />-Methode <see langword="false" /> zurück, wenn die zu erteilende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <paramref name="s" />.</param>
        <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />, <paramref name="s" /> or an element of <paramref name="formats" /> is an empty string, or the format of <paramref name="s" /> is not exactly as specified by at least one of the format patterns in <paramref name="formats" />. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das mit einem der Muster übereinstimmt, die dem `formats`-Parameter zugewiesen sind. Dies entspricht der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass die <xref:System.DateTime.TryParseExact%2A>-Methode keine Ausnahme auslöst, wenn bei der Konvertierung ein Fehler auftritt.  
  
 Der `s`-Parameter enthält das Datum und die Uhrzeit, die analysiert werden sollen. Wenn der `s`-Parameter nur eine Uhrzeit und kein Datum enthält, wird das aktuelle Datum verwendet, es sei denn, der `style`-Parameter enthält das <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>-Flag. in diesem Fall wird das Standard Datum (`DateTime.Date.MinValue`) verwendet. Wenn der `s`-Parameter nur ein Datum und keine Uhrzeit enthält, wird Mitternacht (00:00:00) verwendet. Der `style`-Parameter bestimmt außerdem, ob der `s` Parameter führende, innere oder nachfolgende Leerzeichen enthalten darf, die nicht von einer der Format Zeichenfolgen in `formats`zulässig sind.  
  
 Wenn `s` keine Zeitzoneninformationen enthält, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann mit dem <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag geändert werden, das einen <xref:System.DateTime> Wert zurückgibt, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flags, die einen <xref:System.DateTime> Wert zurückgibt, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn s Zeitzoneninformationen enthält, wird die Uhrzeit ggf. in lokale Zeit konvertiert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts wird auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt. Dieses Verhalten kann geändert werden, indem das <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>-Flag verwendet wird, um die koordinierte Weltzeit (UTC) nicht in eine Ortszeit zu konvertieren und die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>festzulegen.  
  
 Der `formats`-Parameter enthält ein Array von Mustern, von denen eine `s` genau übereinstimmen muss, wenn der Analyse Vorgang erfolgreich durchgeführt werden soll. Die Muster im `formats`-Parameter bestehen aus einem oder mehreren benutzerdefinierten Format Bezeichnern aus der benutzerdefinierten Format Zeichenfolgen-Tabelle für [Datum und Uhrzeit](~/docs/standard/base-types/custom-date-and-time-format-strings.md) oder einem einzelnen Standardformat Bezeichner, der ein vordefiniertes Muster identifiziert, vom [Standard Datum und-Uhrzeit. ](~/docs/standard/base-types/standard-date-and-time-format-strings.md)Zeichen folgen Tabelle formatieren.  
  
 Wenn Sie keine Datums-oder Uhrzeit Trennzeichen in einem benutzerdefinierten Format Muster verwenden, verwenden Sie die invariante Kultur für den `provider`-Parameter und die breiteste Form der einzelnen benutzerdefinierten Format Bezeichner. Wenn Sie z. b. Stunden im Muster angeben möchten, geben Sie die breitere Form "hh" anstelle des engeren Formulars "H" an.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und-Zeichen folgen (z. b. die Namen der Wochentage in einer bestimmten Sprache), die in `s` verwendet werden, werden durch den `provider`-Parameter definiert, ebenso wie das genaue Format von `s`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `provider`-Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, die zum Interpretieren `s`verwendet wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von seiner <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider>-Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode entweder das <xref:System.Globalization.CultureInfo>-Objekt oder das <xref:System.Globalization.DateTimeFormatInfo> Objekt zurückgibt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter enthält mindestens einen Member der <xref:System.Globalization.DateTimeStyles> Enumeration, der bestimmt, ob und wo von `format` nicht definierte Leerzeichen in `s` erscheinen und das genaue Verhalten des Analyse Vorgangs steuern können. In der folgenden Tabelle wird beschrieben, wie sich jedes Element der <xref:System.Globalization.DateTimeStyles> Enumeration auf den Vorgang der <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>-Methode auswirkt.  
  
|DateTimeStyles-Member|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und konvertiert Sie ggf. in UTC. Wenn `s` einen Zeit Zonen Offset enthält, oder wenn `s` keine Zeitzoneninformationen enthält, aber `styles` das <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> auf, um den zurückgegebenen <xref:System.DateTime> Wert in die UTC zu konvertieren. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. Wenn `s` angibt, dass es sich um UTC handelt, oder wenn `s` keine Zeitzoneninformationen enthält, `styles` jedoch das <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-Flag enthält, analysiert die Methode die Zeichenfolge, führt keine Zeit Zonen Konvertierung für den zurückgegebenen <xref:System.DateTime> Wert aus. , und legt die <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>fest. In allen anderen Fällen hat das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass der von `format` nicht definierte Leerraum zwischen einem einzelnen Date-oder Time-Element angezeigt werden kann.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerzeichen, die nicht von `format` definiert werden, am Anfang `s`vorkommen können.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerzeichen, die nicht von `format` definiert werden, am Ende `s`angezeigt werden können.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führende, innere und nachfolgende Leerzeichen enthalten kann, die nicht durch `format`definiert sind.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie eine Ortszeit darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Werts auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `s` keine Zeitzoneninformationen enthält, wird davon ausgegangen, dass Sie die UTC darstellen. Wenn das <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType>-Flag nicht vorhanden ist, konvertiert die-Methode den zurückgegebenen <xref:System.DateTime> Wert von UTC in Ortszeit und legt seine <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>fest.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` Zeit ohne Datumsangaben enthält, wird das Datum des Rückgabewerts auf `DateTime.MinValue.Date`festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.None>|Der `s`-Parameter wird mit Standardwerten analysiert. In `format` sind keine Leerzeichen zulässig, die in vorhanden sind. Wenn `s` eine Datums Komponente fehlt, wird das Datum des zurückgegebenen <xref:System.DateTime> Werts auf 1/1/0001 festgelegt. Wenn `s` keine Zeitzoneninformationen enthält, wird die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts auf <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>festgelegt. Wenn Zeitzoneninformationen in `s`vorhanden sind, wird die Uhrzeit in die Ortszeit konvertiert, und die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts wird auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Bei Zeichen folgen, die Zeitzoneninformationen enthalten, versucht, die Konvertierung in einen <xref:System.DateTime> Wert zu verhindern, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt ist. Dieses Flag verhindert hauptsächlich die Konvertierung von UTC-Zeiten in lokale Uhrzeiten.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>-Methode verwendet, um sicherzustellen, dass eine Zeichenfolge in mehreren möglichen Formaten erfolgreich analysiert werden kann.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
-or- 
 <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]gibt die <see cref="Overload:System.DateTime.TryParseExact" />-Methode <see langword="false" /> zurück, wenn die zu erteilende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The value of this constant is equivalent to 00:00:00.0000000 UTC, January 1, 1970, in the Gregorian calendar. <see cref="F:System.DateTime.UnixEpoch" /> defines the point in time when Unix time is equal to 0.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
        <value>Ein Objekt, dessen Wert die aktuelle Datums- und Uhrzeitangabe in UTC ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Auflösung dieser Eigenschaft hängt vom System Timer ab, der vom zugrunde liegenden Betriebssystem abhängt. Der Wert liegt tendenziell zwischen 0,5 und 15 Millisekunden.

 Beginnend mit der .NET Framework Version 2,0 ist der Rückgabewert ein <xref:System.DateTime>, dessen <xref:System.DateTime.Kind%2A>-Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>zurückgibt.

 Eine Alternative zur Verwendung von <xref:System.DateTime.UtcNow%2A> ist <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Während das erste-Objekt angibt, dass ein Datums-und Uhrzeitwert der UTC-Zeit (koordinierte Weltzeit) zugewiesen ist, indem <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> seiner <xref:System.DateTime.Kind%2A>-Eigenschaft zugewiesen wird, weist der letztere den Datums-und Uhrzeitwert der UTC-Zeit Abweichung (gleich <xref:System.TimeSpan.Zero?displayProperty=nameWithType>) zu.
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A>-Methode verwendet, um zu veranschaulichen, wie sich die <xref:System.DateTime.Kind%2A>-Eigenschaft auf die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Konvertierungs Methoden auswirkt  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the year component of the date represented by this instance.</summary>
        <value>Das Jahr zwischen 1 und 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Year%2A>-Eigenschaft gibt das Jahr der aktuellen Instanz im gregorianischen Kalender zurück. Das Jahr wird nicht mit dem Standardkalender der aktuellen Kultur zurückgegeben. Wenn Sie das Jahr mithilfe eines bestimmten Kalenders abrufen möchten, können Sie die `GetYear` Methode dieses Kalenders aufrufen, wie im folgenden Code gezeigt.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Year%2A>-Eigenschaft veranschaulicht.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>

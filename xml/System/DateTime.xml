<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1c87239c8b5b29a992083ca7f8f6276de0c5cd15" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51908740" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Zeitpunkt dar, der normalerweise durch Datum und Uhrzeit dargestellt wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Quicklinks zum Beispielcode

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Dieser Artikel enthält einige Beispiele, in denen die `DateTime` Typ:

**Beispiele für die Initialisierung**      
- [Aufrufen eines Konstruktors](#initialization-01)
- [Rufen Sie den impliziten Standardkonstruktor](#initialization-02)
- [Zuweisung von Rückgabewert](#initialization-03)
- [Analysieren einer Zeichenfolge, die ein Datum und Uhrzeit darstellt.](#initialization-04)
- [Visual Basic-Syntax zum Initialisieren von Datum und Uhrzeit](#initialization-05)

**Formatieren von `DateTime` Objekte als Zeichenfolge**  
- [Verwenden Sie das standardmäßige Datums-/ Uhrzeitformat](#formatting-01)
- [Formatieren von Datum und Uhrzeit, die eine bestimmte Kultur](#formatting-02)
- [Formatieren Sie einen Datum-Uhrzeit, die über eine standardmäßige oder benutzerdefinierte Formatzeichenfolge](#formatting-03)
- [Geben Sie sowohl eine Formatzeichenfolge als auch eine bestimmte Kultur](#formatting-04)
- [Formatieren Sie einen Datum-Uhrzeit, die mit dem ISO 8601-Standard für Webdienste](#formatting-05)

**Analysieren von Zeichenfolgen als `DateTime` Objekte**  
- [Verwendung `Parse` oder `TryParse` zum Konvertieren einer Zeichenfolge in ein Datum und Uhrzeit](#parsing-01)
- [Verwendung `ParseExact` oder `TryParseExact` zum Konvertieren einer Zeichenfolge in einem bekannten Format](#parsing-02)
- [Konvertieren von der Darstellung des ISO 8601-Zeichenfolge in ein Datum und Uhrzeit](#parsing-03)

**`DateTime` Auflösung**  
- [Untersuchen Sie die Auflösung des Datums-und Uhrzeitwerten](#resolution-01)
- [Vergleich, Gleichheit innerhalb einer Toleranz](#comparison-01)

**Kultur und Kalender**  
- [Zeigt Datum und Uhrzeit-Werte, die mit bestimmten Kalender Kultur](#calendars-01)
- [Analysieren von Zeichenfolgen anhand eines bestimmten Kalenders der Kultur](#calendars-02)
- [Initialisieren einer Datums- und Uhrzeitangabe von einer bestimmten Kultur Kalender](#calendars-03)
- [Zugreifen auf Datum und Uhrzeit-Eigenschaften, die mit einer bestimmten Kultur Kalender](#calendars-04)
- [Die Woche des Jahres mit bestimmten Kalender Kultur abrufen](#calendars-05)

**Persistenz**  
- [Beibehalten von Datum und Uhrzeit-Werte als Zeichenfolgen in die lokale Zeitzone](#persistence-01)
- [Beibehalten von Datum und Uhrzeit-Werte als Zeichenfolgen in einer invarianten Kultur und die Uhrzeit-format](#persistence-02)
- [Beibehalten von Datum und Uhrzeit-Werte als ganze Zahlen](#persistence-03)
- [Beibehalten von Datums- / Werte mithilfe der `XmlSerializer`](#persistence-04)
- [Beibehalten von Datums- / Werte mithilfe der `BinaryFormatter`](#persistence-05)
- [Beibehalten von Datum und Uhrzeit-Werte mit Zeitzone-Daten](#persistence-06)

## <a name="quick-links-to-remarks-topics"></a>Quicklinks zu Themen, in den Hinweisen.

Dieser Abschnitt enthält Themen, die für viele häufige Verwendungen von der `DateTime` Struktur:
  
- [Initialisiert eine `DateTime` Objekt](#initializing-a-datetime-object)
- [DateTime-Werte und deren Zeichenfolgenrepräsentationen](#datetime-values-and-their-string-representations)
- [Analysieren von DateTime-Werte von Zeichenfolgen](#parsing-datetime-values-from-strings)
- [DateTime-Werte](#datetime-values)
- ["DateTime"-Vorgänge](#datetime-operations)
- ["DateTime"-Lösung](#datetime-resolution)
- [DateTime-Werte und Kalender](#datetime-values-and-calendars)
- [Beibehalten von DateTime-Werte](#persisting-datetime-values)
- [DateTime-Wert im Vergleich zu timeSpan](#datetime-vs-timespan)
- [Vergleich, Gleichheit innerhalb des Toleranzbereichs](#comparing-for-equality-within-tolerance)
- [COM-interop-Überlegungen](#com-interop-considerations)
   
Die <xref:System.DateTime> Werttyp stellt Datumsangaben und Zeiten mit Werten zwischen 00:00:00 (Mitternacht) am 1. Januar 0001 nach Christus (Common Era) bis 23:59:59 Uhr, 31. Dezember 9999 n. Chr. (C.E.) im gregorianischen Kalender.  
  
Time-Werte werden in so genannten 100-Nanosekunden-Ticks gemessen. Ein bestimmtes Datum wird die Anzahl der Ticks seit 12:00 Mitternacht, 1. Januar 0001 n. Chr. (C.E.) in der <xref:System.Globalization.GregorianCalendar> Kalender. Die Anzahl schließt Ticks, die von Schaltsekunden hinzugefügt werden. Beispielsweise stellt einen Tickswert von 31241376000000000 das Datum Friday, Januar 01, 0100 00:00:00 Uhr. Ein <xref:System.DateTime> Wert wird immer im Kontext einer expliziten oder Standardkalender angegeben.  
  
> [!NOTE]
>  Wenn Sie mit einem Tickswert arbeiten, Sie in ein anderes Zeitintervall, wie z. B. Minuten oder Sekunden konvertieren möchten, verwenden Sie die <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, oder <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> Konstante, um die Konvertierung auszuführen. Beispielsweise die Anzahl der Sekunden hinzufügen dargestellt, um eine angegebene Anzahl von Ticks zum die <xref:System.DateTime.Second%2A> -Komponente eine <xref:System.DateTime> Wert verwenden Sie den Ausdruck `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Sehen Sie entweder die Quelle für die gesamte Gruppe der Beispiele in diesem Artikel [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) oder [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) aus docs-Repository auf GitHub.

> [!NOTE]
>  Eine Alternative zu den <xref:System.DateTime> -Struktur für das Arbeiten mit Datums-und Uhrzeitwerte in bestimmten Zeitzonen ist die <xref:System.DateTimeOffset> Struktur. Die <xref:System.DateTimeOffset> -Struktur speichert Datums-und Uhrzeitinformationen in einem privaten <xref:System.DateTime> Feld und die Anzahl der Minuten, die nach dem Datum und Uhrzeit, von UTC abweicht, in einem privaten <xref:System.Int16> Feld. Dies ermöglicht es einer <xref:System.DateTimeOffset> Wert entsprechend der die Zeit in einer bestimmten Zeitzone, während eine <xref:System.DateTime> Wert kann nur UTC und der lokalen Zeitzone eindeutig darstellen. Eine Erläuterung zur Verwendung der <xref:System.DateTime> Struktur oder das <xref:System.DateTimeOffset> Struktur, bei der Arbeit mit Datums-und Uhrzeitwerte, siehe [auswählen zwischen DateTime, DateTimeOffset, TimeSpan und TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Initialisieren ein DateTime-Objekt  

Sie können einen Anfangswert zuweisen, um ein neues `DateTime` Wert auf viele verschiedene Arten:

- Aufruf eines Konstruktors, einer, in dem Sie Argumente für die Werte angeben, oder verwenden Sie den impliziten Standardkonstruktor.
- Zuweisen einer `DateTime` auf den Rückgabewert einer Eigenschaft oder Methode.
- Analysieren einer `DateTime` Wert aus seiner Zeichenfolgendarstellung.
- Mithilfe von Visual Basic-spezifischen Sprachfeatures Instanziieren einer `DateTime`. 

Die folgenden Codeausschnitte zeigen Beispiele für die einzelnen:

#### <a name="invoke-constructors"></a>Aufrufen von Konstruktoren

Rufen Sie eine der Überladungen der <xref:System.DateTime> Konstruktors, der Elemente dem Wert für Datum und Uhrzeit (z. B. das Jahr, Monat und Tag oder die Anzahl der Ticks). Der folgende Code erstellt ein bestimmtes Datum unter Verwendung der <xref:System.DateTime> Konstruktor angeben, der Jahr, Monat, Tag, Stunde, Minute und Sekunde.  

<a name="initialization-01"></a>  
[!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Rufen Sie die `DateTime` -Struktur impliziten Standardkonstruktor, wenn Sie möchten eine `DateTime` auf seinen Standardwert initialisiert. (Weitere Informationen zu den impliziten Standardkonstruktor eines Werttyps, finden Sie unter [Werttypen](~/docs/csharp/language-reference/keywords/value-types.md).) Einige Compiler auch Unterstützung bei der Deklaration einer <xref:System.DateTime> Wert ohne explizit einen Wert zuweisen. Erstellen einen Wert ohne eine explizite Initialisierung auch führt der Standardwert. Das folgende Beispiel veranschaulicht die <xref:System.DateTime> impliziten Standardkonstruktor in c# und Visual Basic als auch ein <xref:System.DateTime> Deklaration ohne Zuweisung in Visual Basic.  

<a name="initialization-02"></a>  
[!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Zuweisen eines berechneten Werts

Sie können Zuweisen der <xref:System.DateTime> einen Datum und Uhrzeit-Wert einer Eigenschaft oder Methode zurückgegebenes Objekt. Das folgende Beispiel weist das aktuelle Datum und Zeit, das aktuelle Datum der koordinierten Weltzeit (Coordinated Universal Time, UTC) und das aktuelle Datum und Zeit auf drei neue <xref:System.DateTime> Variablen.  

<a name="initialization-03"></a>  
[!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analysieren einer Zeichenfolge, die einen datetime-Wert darstellt.

Die <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, und <xref:System.DateTime.TryParseExact%2A> alle Methoden Konvertieren einer Zeichenfolge in ihren entsprechenden Datums- und Uhrzeitwert. Die folgenden Beispiele verwenden die <xref:System.DateTime.Parse%2A> und <xref:System.DateTime.ParseExact%2A> Methoden, um eine Zeichenfolge zu analysieren und konvertieren Sie sie in einem <xref:System.DateTime> Wert. Das zweite Format verwendet eine Form, die von unterstützt die [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard für die Darstellung Datum und Uhrzeit im Zeichenfolgenformat. Diese standard-Darstellung wird häufig verwendet, um Datumsinformationen in Webdienste übertragen.

<a name="initialization-04"></a>  
[!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

Die <xref:System.DateTime.TryParse%2A> und <xref:System.DateTime.TryParseExact%2A> Methoden angeben, ob eine Zeichenfolge eine gültige Darstellung des ist eine <xref:System.DateTime> Wert und, wenn es sich handelt, führt die Konvertierung.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sprachspezifische Syntax für Visual Basic

Die folgende Visual Basic-Anweisung initialisiert eine neue <xref:System.DateTime> Wert.  

<a name="initialization-05"></a>  
[!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>DateTime-Werte und deren Zeichenfolgenrepräsentationen  

Intern werden alle <xref:System.DateTime> Werte dargestellt sind, als die Anzahl der Ticks (die Anzahl der 100-Nanosekunden-Intervalle), die seit 12:00:00 Mitternacht, 1. Januar 0001 verstrichen sind. Die tatsächliche <xref:System.DateTime> Wert ist unabhängig von der Methode, die in der dieser Wert wird angezeigt, wenn Sie angezeigt. Die Darstellung einer <xref:System.DateTime> Wert ist das Ergebnis eines Formatierungsvorgangs ab, der einen Wert in seine Zeichenfolgendarstellung konvertiert.  
  
Die Darstellung von Datums-und Uhrzeitwerte ist abhängig von der Kultur, internationale Standards, Anforderungen und Geschmackssache. Die <xref:System.DateTime> Struktur bietet Flexibilität beim Formatieren der Datums- / über Überladungen des <xref:System.DateTime.ToString%2A>. Der Standardwert <xref:System.DateTime.ToString?displayProperty=nameWithType> Methode gibt die Zeichenfolgendarstellung einer Datums- / -Wert, der aktuellen Kultur kurzes Datum und lange Uhrzeitformat zurück. Im folgenden Beispiel wird der Standardwert <xref:System.DateTime.ToString?displayProperty=nameWithType> Methode. Es zeigt das Datum und Uhrzeit im kurzen Datums- und des langen Uhrzeitformat für die aktuelle Kultur verwenden. Die Kultur En-US ist die aktuelle Kultur auf dem Computer, auf dem das Beispiel ausgeführt wurde.  
  
<a name="formatting-01"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Sie müssen Webszenarien zu unterstützen, in dem der Server in einer anderen Kultur vom Client möglicherweise, Datumsangaben in einer bestimmten Kultur zu formatieren. Sie geben die Kultur mit der <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> Methode, um das kurze Datum und lange Uhrzeit-Darstellungen in einer bestimmten Kultur zu erstellen. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> Methode zeigt das Datum und Uhrzeit verwenden das kurze Datum und langen Uhrzeitformat für die Kultur "fr-FR".  
  
<a name="formatting-02"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Andere Anwendungen erfordern möglicherweise andere zeichenfolgendarstellungen eines Datums. Die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Methode gibt eine Zeichenfolgendarstellung von einem standardmäßigen oder benutzerdefinierten Formatbezeichner, der Verwendung der Formatierungskonventionen der aktuellen Kultur definiert. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Kultur Methode, um das vollständige Datums- und Uhrzeitmuster, die für das de-de anzuzeigen, die die aktuelle Kultur auf dem Computer, auf denen das Beispiel ausgeführt wurde.  
  
<a name="formatting-03"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Schließlich können Sie angeben, sowohl für die Kultur als auch für die Verwendung des Formats der <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methode. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methode, um das vollständige Datums- und Uhrzeitmuster, die für die Kultur "fr-FR" anzuzeigen.  

<a name="formatting-04"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

Die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Überladung kann auch mit einer benutzerdefinierten Formatzeichenfolge verwendet werden, um andere Formate angeben. Das folgende Beispiel zeigt, wie Sie Formatieren einer Zeichenfolge mit der [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) Standardformat, die häufig für Webdienste verwendet. Iso 8601-Formats muss eine entsprechende Standardformat-Zeichenfolge nicht.

<a name="formatting-05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Weitere Informationen zur Formatierung <xref:System.DateTime> Werte finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Analysieren von DateTime-Werte von Zeichenfolgen

Analysieren von konvertiert die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in einem <xref:System.DateTime> Wert. Zeichenfolgen für Datum und Uhrzeit werden in der Regel zwei unterschiedliche Verwendungen in Anwendungen haben:  
  
-   Datum und Uhrzeit eine Vielzahl von Formen akzeptiert, und gibt die Konventionen der aktuellen Kultur oder einer bestimmten Kultur. Beispielsweise kann eine Anwendung einen Benutzer, dessen aktuelle Kultur En-US, geben Sie einen Datumswert als "12/15/2013" oder "15. Dezember 2013". Sie ermöglicht dem Benutzer, dessen aktuelle Kultur "En-gb, geben Sie einen Datumswert als" 12/15/2013"oder"15. Dezember 2013.""  
  
-   Datum und Uhrzeit wird in einem vordefinierten Format dargestellt. Eine Anwendung serialisiert z. B. ein Datum als "20130103" unabhängig von der Kultur, die auf der die app ausgeführt wird. Eine Anwendung möglicherweise Datumsangaben im kurzen Datumsformat der aktuellen Kultur eingegeben werden.
  
Sie verwenden die <xref:System.DateTime.Parse%2A> oder <xref:System.DateTime.TryParse%2A> Methode zum Konvertieren einer Zeichenfolge eines der allgemeinen Datums- und Zeitformate, die ein, die eine Kultur eine <xref:System.DateTime> Wert. Das folgende Beispiel zeigt, wie Sie verwenden können <xref:System.DateTime.TryParse%2A> Datumszeichenfolgen in verschiedenen Formaten von kulturspezifischen zum Konvertieren einer <xref:System.DateTime> Wert. Es wird die aktuelle Kultur auf Englisch (Großbritannien) und ruft die <xref:System.DateTime.GetDateTimeFormats> Methode, um ein Array von Zeichenfolgen für Datum und Uhrzeit zu generieren. Anschließend jedes Element im Array und übergibt die <xref:System.DateTime.TryParse%2A> Methode. Die Ausgabe des Beispiels zeigt, dass die Methode erfolgreich alle kulturabhängige Datums- und Uhrzeitzeichenfolgen konvertieren konnte.  
  
<a name="parsing-01"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Sie verwenden die <xref:System.DateTime.ParseExact%2A> und <xref:System.DateTime.TryParseExact%2A> Methoden zum Konvertieren einer Zeichenfolge, die ein bestimmtes Format oder die Formate, übereinstimmen muss eine <xref:System.DateTime> Wert. Geben Sie einen oder mehrere Datum und Uhrzeit-Formatzeichenfolgen, als Parameter an die Analysemethode. Im folgenden Beispiel wird die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Methode, um Zeichenfolgen zu konvertieren, die entweder in einem Format "JJJJMMTT" oder in ein Format "HHmmss", um sein müssen <xref:System.DateTime> Werte.  
  
<a name="parsing-02"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Ein gängiges Szenario für <xref:System.DateTime.ParseExact%2A> besteht darin, eine Zeichenfolgendarstellung von einem Webdienst in der Regel in konvertieren [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) Standardformat. Der folgende Code zeigt die richtige Format, die zu verwendende Zeichenfolge an:

<a name="parsing-03"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Wenn eine Zeichenfolge nicht analysiert werden kann, die <xref:System.DateTime.Parse%2A> und <xref:System.DateTime.ParseExact%2A> Methoden lösen eine Ausnahme. Die <xref:System.DateTime.TryParse%2A> und <xref:System.DateTime.TryParseExact%2A> Methoden zurückgeben einer <xref:System.Boolean> Wert, der angibt, ob die Konvertierung erfolgreich war oder fehlgeschlagen ist. Verwenden Sie die <xref:System.DateTime.TryParse%2A> oder <xref:System.DateTime.TryParseExact%2A> Methoden in Szenarien, in denen Leistung wichtig ist. Der Analysevorgang für Zeichenfolgen für Datum und Uhrzeit tendenziell eine hohe Fehlerrate und Behandeln von Ausnahmen ist teuer. Diese Methoden verwenden, wenn die Zeichenfolgen, die vom Benutzer eingegeben werden, oder von einer unbekannten Quelle stammen. 
  
Weitere Informationen zu Datums-und Uhrzeitwerte analysieren, finden Sie unter [Analysieren von Zeichenfolgen für Datum und Uhrzeit](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>DateTime-Werte

Beschreibungen der Time-Werten der <xref:System.DateTime> Typ werden häufig mithilfe von des Standards der koordinierten Weltzeit (Coordinated Universal Time, UTC) ausgedrückt. Koordinierte Weltzeit ist der international anerkannten Name für die Greenwich Mean Time (GMT). Koordinierte Weltzeit ist die Zeit gemessen Längengrad 0, den Ausgangspunkt der UTC. Sommerzeit gilt nicht in UTC.  
  
Lokale Zeit ist relativ zu einer bestimmten Zeitzone. Eine Zeitzone ist ein Zeitzonenoffset zugeordnet. Ein Zeitzonenoffset ist die Verschiebung der Zeitzone, gemessen in Stunden nach UTC-Ursprungspunkt. Darüber hinaus ist Ortszeit optional Sommerzeit betroffen hinzufügt oder eine Uhrzeit-Intervall-Anpassung subtrahiert. Lokale Zeit wird berechnet, durch das Hinzufügen des Zeitzonenoffsets zu UTC und der Sommerzeit bei Bedarf anpassen. Der Zeitzonenoffset zur UTC-Ursprungspunkt ist 0 (null).  
  
UTC-Zeit eignet sich für Berechnungen, Vergleiche, das Speichern von Datums- und Uhrzeitangaben in Dateien. Ortszeit eignet sich für die Anzeige in Benutzeroberflächen von desktopanwendungen. Zeitzonenfähigen Anwendungen (z. B. viele Webanwendungen) müssen auch mit einer Reihe von anderen Zeitzonen zu arbeiten.  
  
Wenn die <xref:System.DateTime.Kind%2A> Eigenschaft eine <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, ist nicht angegeben, ob die dargestellte Zeit die Ortszeit, UTC-Zeit oder eine Uhrzeit in einer anderen Zeitzone ist.  

### <a name="datetime-resolution"></a>"DateTime"-Lösung
  
> [!NOTE]
>  Als Alternative zum Durchführen von Datums- und uhrzeitarithmetik für <xref:System.DateTime> -Werten zum Messen der verstrichenen Zeit, können Sie die <xref:System.Diagnostics.Stopwatch> Klasse.  
  
Die <xref:System.DateTime.Ticks%2A> Eigenschaft ausdrückt, Datum und Uhrzeit-Werte in Einheiten von ein zehnmillionstel einer Sekunde. Die <xref:System.DateTime.Millisecond%2A> Eigenschaft gibt die Tausendstelsekunden in einem Datums- und Uhrzeitangabe zurück. Verwenden wiederholte Aufrufe von der <xref:System.DateTime.Now%2A?displayProperty=nameWithType> Eigenschaft zum Messen der verstrichenen Zeit ist abhängig von der Systemuhr. Die Systemuhr auf Systemen mit Windows 7 und Windows 8 verfügt über eine Auflösung von etwa 15 Millisekunden. Diese Lösung wirkt sich auf kleine Zeitintervalle weniger als 100 Millisekunden. 
  
Das folgende Beispiel veranschaulicht die Abhängigkeit von der aktuellen Uhrzeitwerte für Datum und der Auflösung der Systemuhr. Im Beispiel eine äußere Schleife wird 20-Mal wiederholt, und eine innere Schleife dient, um die äußere Schleife zu verzögern. Wenn der Wert des Zählers äußere Schleife 10, einen Aufruf der <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> Methode führt eine fünf-Millisekunden-Verzögerung. Das folgende Beispiel zeigt die Anzahl der Millisekunden zurückgegeben, die von der `DateTime.Now.Milliseconds` eigenschaftenänderungen nur nach dem Aufruf von <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a>  
[!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>"DateTime"-Vorgänge  

Eine Berechnung mit einem <xref:System.DateTime> Struktur, wie z. B. <xref:System.DateTime.Add%2A> oder <xref:System.DateTime.Subtract%2A>, ändert sich nicht auf den Wert der Struktur. Die Berechnung gibt stattdessen eine neue <xref:System.DateTime> Struktur, deren Wert das Ergebnis der Berechnung.  
  
Konvertierungsoperationen zwischen Zeitzonen (z. B. zwischen UTC und Ortszeit oder zwischen einer Zeitzone) wird die Sommerzeit berücksichtigt, arithmetischen und Vergleichsoperationen jedoch nicht.  
  
Die <xref:System.DateTime> Struktur selbst bietet eingeschränkte Unterstützung für die Konvertierung von einer Zeitzone in eine andere. Können Sie die <xref:System.DateTime.ToLocalTime%2A> -Methode zum Konvertieren von UTC in die Ortszeit ist, oder Sie können die <xref:System.DateTime.ToUniversalTime%2A> Methode, um die von der Ortszeit in UTC zu konvertieren. Ein vollständiger Satz von Methoden für die Zeitzone Konvertierung ist jedoch verfügbar, in der <xref:System.TimeZoneInfo> Klasse. Sie konvertieren die Zeit in einer beliebigen anderen Zeitzonen der Welt, in die Zeit in einer beliebigen anderen Zeitzone mit diesen Methoden.  
  
Berechnungen und Vergleiche von <xref:System.DateTime> Objekte sind sinnvoll, nur dann, wenn die Objekte Zeiten in der gleichen Zeitzone darstellen. Können Sie eine <xref:System.TimeZoneInfo> Objekt zur Darstellung einer <xref:System.DateTime> Uhrzeitwerts Time zone, obwohl die beiden lose gekoppelt sind. Ein <xref:System.DateTime> Objekt verfügt nicht über eine Eigenschaft, ein Objekt zurückgibt, der diesem Datums- / Uhrzeitwerts Zeitzone darstellt. Die <xref:System.DateTime.Kind%2A> Eigenschaft gibt an, ob eine `DateTime` UTC, Ortszeit darstellt, oder ist nicht angegeben. In einer Zeitzonen unterstützende Anwendung, müssen Sie eine verlassen auf einen externen Mechanismus, um zu bestimmen, die Zeitzone, in dem eine <xref:System.DateTime> Objekt erstellt wurde. Können Sie eine Struktur, die beide dient als Wrapper für die <xref:System.DateTime> Wert und die <xref:System.TimeZoneInfo> Objekt, das darstellt der <xref:System.DateTime> Zeitzone des Werts. Weitere Informationen zur Verwendung von UTC in Berechnungen und Vergleiche mit <xref:System.DateTime> Werte finden Sie unter [durchführen Arithmetischer Operationen mit Datums- und Uhrzeitangaben](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Jede <xref:System.DateTime> Member verwendet implizit den gregorianischen Kalender, um diesen Vorgang auszuführen. Ausnahmen sind Methoden, die implizit einen Kalenders anzugeben. Dazu gehören die Konstruktoren, die einen Kalenders anzugeben, Methoden und mit einem Parameter von <xref:System.IFormatProvider>, z. B. <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Vorgänge von einem Mitglied der <xref:System.DateTime> Typ berücksichtigen Einzelheiten wie z. B. Schaltjahre und die Anzahl der Tage im Monat.  

## <a name="datetime-values-and-calendars"></a>DateTime-Werte und Kalender  

Der .NET Framework-Klassenbibliothek enthält eine Reihe von Klassen für Kalender, die abgeleitet sind davon die <xref:System.Globalization.Calendar> Klasse.  Dies sind:  
  
-   Der <xref:System.Globalization.ChineseLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.EastAsianLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.GregorianCalendar>-Klasse.  
-   Der <xref:System.Globalization.HebrewCalendar>-Klasse.  
-   Der <xref:System.Globalization.HijriCalendar>-Klasse.  
-   Der <xref:System.Globalization.JapaneseCalendar>-Klasse.  
-   Der <xref:System.Globalization.JapaneseLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.JulianCalendar>-Klasse.  
-   Der <xref:System.Globalization.KoreanCalendar>-Klasse.  
-   Der <xref:System.Globalization.KoreanLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.PersianCalendar>-Klasse.  
-   Der <xref:System.Globalization.TaiwanCalendar>-Klasse.  
-   Der <xref:System.Globalization.TaiwanLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.ThaiBuddhistCalendar>-Klasse.  
-   Der <xref:System.Globalization.UmAlQuraCalendar>-Klasse.  
  
Jede Kultur verwendet einen Standardkalender, der definiert, die von der schreibgeschützten <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> Eigenschaft. Jede Kultur kann mindestens einen Kalender definiert, die von der schreibgeschützten unterstützen <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> Eigenschaft. Momentan verwendet von einem bestimmten Kalender <xref:System.Globalization.CultureInfo> Objekt wird definiert durch seine <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> Eigenschaft. Es muss sich um einen der finden Sie im Kalender das <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> Array.  
  
Aktueller Kalender einer Kultur wird in alle Formatierungsvorgängen für die jeweilige Kultur verwendet. Ist beispielsweise der Standardkalender der Kultur buddhistischen des thailändischer Buddhist Era-Kalenders, der durch dargestellt wird die <xref:System.Globalization.ThaiBuddhistCalendar> Klasse.  Wenn eine <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur buddhistischen darstellt, die in einem Datum und Uhrzeit-Format Vorgang verwendet wird, wird standardmäßig der thailändischer Buddhist Era-Kalender verwendet. Der gregorianische Kalender verwendet wird, nur dann, wenn der Kultur <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> -Eigenschaft geändert wird, wie im folgenden Beispiel gezeigt:  

<a name="calendars-01"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Aktueller Kalender einer Kultur wird auch in der alle Analyseoperationen für die jeweilige Kultur, wie im folgenden Beispiel gezeigt verwendet werden.  
  
<a name="calendars-02"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Instanziieren Sie ein <xref:System.DateTime> Wert mithilfe der Datums- / Elemente (Anzahl der Jahr, Monat und Tag) eines bestimmten Kalenders durch den Aufruf einer [DateTime-Konstruktor](xref:System.DateTime.%23ctor%2A) , enthält eine `calendar` Parameter und die Übergabe einer <xref:System.Globalization.CultureInfo.Calendar%2A>-Objekt, das diesen Kalender darstellt. Im folgenden Beispiel wird das Datum und Uhrzeit Elemente aus der <xref:System.Globalization.ThaiBuddhistCalendar> Kalender.  
  
<a name="calendars-03"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> Konstruktoren, die keine enthalten eine `calendar` Parameter wird davon ausgegangen, dass die Elemente von Datum und Uhrzeit als Einheiten im gregorianischen Kalender ausgedrückt werden.  
  
Alle anderen <xref:System.DateTime> Eigenschaften und Methoden verwenden den gregorianischen Kalender. Z. B. die <xref:System.DateTime.Year%2A?displayProperty=nameWithType> Eigenschaft gibt das Jahr im gregorianischen Kalender, und die <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> Methode setzt voraus, dass die `year` -Parameter ist ein Jahr im gregorianischen Kalender.  Jede <xref:System.DateTime> Member, der den gregorianischen Kalender wird verwendet, verfügt über einen entsprechenden Member der <xref:System.Globalization.CultureInfo.Calendar%2A> Klasse, die einen bestimmten Kalender verwendet. Z. B. die <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> Methode gibt das Jahr in einem bestimmten Kalender, und die <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> -Methode interpretiert die `year` Parameter als Jahreszahl in einem bestimmten Kalender. Im folgenden Beispiel wird sowohl die <xref:System.DateTime> und den entsprechenden Membern von der <xref:System.Globalization.ThaiBuddhistCalendar> Klasse.  
  
<a name="calendars-04"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

Die <xref:System.DateTime> Struktur enthält eine <xref:System.DateTime.DayOfWeek%2A> Eigenschaft, die den Tag der Woche im gregorianischen Kalender zurückgibt. Er umfasst kein Element, das Sie die Nummer der Woche des Jahres abrufen können. Um die Woche des Jahres zu abzurufen, rufen Sie die einzelnen Kalender <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> Methode. Dies wird im folgenden Beispiel veranschaulicht.  
  
<a name="calendars-05"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Weitere Informationen zu Datumsangaben und Kalender, finden Sie unter [arbeiten mit Kalendern](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Beibehalten von DateTime-Werte  

Sie können beibehalten <xref:System.DateTime> Werte in vier Möglichkeiten:  
  
-   Sie [in Zeichenfolgen konvertieren](#persisting-values-as-strings) und speichern Sie die Zeichenfolgen.  
-   Sie [in 64-Bit-Ganzzahlwerte konvertieren](#persisting-values-as-integers) (der Wert des der <xref:System.DateTime.Ticks%2A> Eigenschaft) und speichern Sie die ganzen Zahlen.  
-   Sie [serialisiert die Datums-/ Uhrzeitwerten](#serializing-dateTime-values).  
-   Sie [serialisiert die Datums-/ Uhrzeitwerten sowie Informationen zur Zeitzone](#serializing-datetime-and-time-zone-data).  
  
Sie müssen sicherstellen, dass die Routine, die wiederherstellt der <xref:System.DateTime> Werte keine Daten verloren gehen oder löst eine Ausnahme aus, unabhängig davon, welche Methode Sie wählen. <xref:System.DateTime> Werte sollten Round-Trip. D. h. sollte den ursprünglichen Wert und der wiederhergestellte Wert sein identisch. Und wenn die ursprüngliche <xref:System.DateTime> Wert stellt einen einzelnen Zeitinstanz dar, sie sollten ermitteln, den gleichen Moment Zeit, wenn sie wiederhergestellt wird.  
  
#### <a name="persisting-values-as-strings"></a>Beibehalten von Werten als Zeichenfolgen  

Erfolgreich wiederherstellen <xref:System.DateTime> Werte, die als Zeichenfolgen gespeichert werden, gelten folgende Regeln:  
  
-   Annahmen Sie die gleichen über die kulturabhängige Formatierung, wenn Sie die Zeichenfolge als Sie es der Beibehaltung wiederherstellen. Um sicherzustellen, dass eine Zeichenfolge in einem System wiederhergestellt werden kann, mit der aktuellen Kultur unterscheidet sich von der Kultur des Systems wurde auf Speichern, rufen Sie die <xref:System.DateTime.ToString%2A> -Überladung verwenden, um die Zeichenfolge mithilfe der Konventionen der invarianten Kultur zu speichern. Rufen Sie die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> oder <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> -Überladung verwenden, um die Zeichenfolge mithilfe der Konventionen der invarianten Kultur wiederherstellen. Verwenden Sie niemals die <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, oder <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> Überladungen, die die Konventionen der aktuellen Threadkultur verwendet.  
  
-   Wenn das Datum über einen einzigen Zeitpunkt darstellt, stellen Sie sicher, dass sie den gleichen Zeitpunkt darstellt, wenn sie auch auf einer anderen Zeitzone wiederhergestellt wurde. Konvertieren der <xref:System.DateTime> Wert in die koordinierte Weltzeit (UTC) vor dem Speichern. Sie können auch den Wert zusammen mit Zeitzoneninformationen zu serialisieren. Weitere Informationen zu diesem Verfahren finden Sie unter [Serialisieren von "DateTime" und die entsprechende Zeitzone Daten](#TimeZone).  
  
 Der häufigste Fehler, die vorgenommen werden, wenn das Beibehalten von <xref:System.DateTime> Werten als Zeichenfolgen wird die Formatierungskonventionen der standardmäßigen oder die aktuelle Kultur verwenden. Probleme entstehen, wenn die aktuelle Kultur unterschiedlich speichern und Wiederherstellen von Zeichenfolgen ist. Das folgende Beispiel veranschaulicht diese Probleme. Er speichert fünf Datumsangaben, die Verwendung der Formatierungskonventionen der aktuellen Kultur, die in diesem Fall Englisch (USA) ist. Wiederhergestellt, die Datumsangaben, die mithilfe der Formatierungskonventionen der einer anderen Kultur, die in diesem Fall Englisch (Großbritannien) ist. Da die Formatierungskonventionen der beiden Kulturen unterscheiden, zwei Datumsangaben können nicht wiederhergestellt werden und die verbleibenden drei Daten falsch interpretiert. Auch wenn die ursprünglichen Werte für Datum und Uhrzeit einzelne Zeitpunkte, der wiederhergestellten darstellen Zeiten sind falsch, da Zeitzoneninformationen verloren geht.  
  
<a name="persistence-01"></a>  
[!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Roundtrip <xref:System.DateTime> Werte erfolgreich, gehen Sie folgendermaßen vor:  
  
1.  Wenn die Werte die einzelne Minuten Zeit darstellen, konvertieren Sie sie von der Ortszeit in UTC durch Aufrufen der <xref:System.DateTime.ToUniversalTime%2A> Methode.  
1.  Konvertieren von Datumsangaben in deren Zeichenfolgenrepräsentationen durch Aufrufen der <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> überladen. Verwenden Sie die Formatierungskonventionen der invarianten Kultur durch Angabe <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> als die `provider` Argument. Geben Sie an, dass der Wert mit der Standardformatzeichenfolge "O" oder "R" Round-Trip sollte.  
  
Zum Wiederherstellen von dauerhaften <xref:System.DateTime> Werte ohne Datenverlust, gehen Sie folgendermaßen vor:  
  
1.  Analysieren die Daten durch Aufrufen der <xref:System.DateTime.ParseExact%2A> oder <xref:System.DateTime.TryParseExact%2A> überladen. Geben Sie <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> als die `provider` Argument, und verwenden, die die gleiche standardmäßige Formatzeichenfolge für die `format` Argument bei der Konvertierung. Enthalten die <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Wert in der `styles` Argument.  
1.  Wenn die <xref:System.DateTime> Werte darzustellen, einzelne Zeitpunkte, Aufruf der <xref:System.DateTime.ToLocalTime%2A> Methode, um das analysierte Datum in Ortszeit von UTC zu konvertieren.  
  
Im folgenden Beispiel wird die invariante Kultur und die Standardformatzeichenfolge "O", um sicherzustellen, dass <xref:System.DateTime> den gleichen Zeitpunkt unabhängig vom System, der Kultur oder der Zeitzone der Quell- und Zielsystemen zur Darstellung von Werten, die gespeichert und wiederhergestellt.  
  
<a name="persistence-02"></a>  
[!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Beibehalten von Werten als ganze Zahlen  

Sie können ein Datum und Uhrzeit als beibehalten einer <xref:System.Int64> Wert, der eine Anzahl von Ticks darstellt. In diesem Fall Sie haben nicht die Kultur der Systeme berücksichtigt die <xref:System.DateTime> Werte persistent gespeichert und wiederhergestellt werden.  
  
Beibehalten einer <xref:System.DateTime> Wert als ganze Zahl:  
  
-   Wenn die <xref:System.DateTime> Werte einzelne Zeitpunkte darstellen, konvertieren Sie sie in UTC durch Aufrufen der <xref:System.DateTime.ToUniversalTime%2A> Methode.  
-   Rufen Sie die Anzahl der Ticks, dargestellt durch die <xref:System.DateTime> Wert aus der <xref:System.DateTime.Ticks%2A> Eigenschaft.  
  
Zum Wiederherstellen einer <xref:System.DateTime> -Wert, der als ganze Zahl persistent gespeichert wurde:  
  
1.  Instanziieren Sie ein neues <xref:System.DateTime> -Objekts durch Übergeben der <xref:System.Int64> Wert der <xref:System.DateTime.%23ctor%28System.Int64%29> Konstruktor.  
1.  Wenn die <xref:System.DateTime> Wert stellt einen einzelnen Zeitpunkt dar, die sie von der UTC in die lokale Zeit konvertieren, durch Aufrufen der <xref:System.DateTime.ToLocalTime%2A> Methode.  
  
Im folgenden Beispiel wird weiterhin besteht, ein Array von <xref:System.DateTime> Werte als ganze Zahlen in einem System in den USA Zeitzone Pacific verwendet wird. Sie werden auf einem System in der UTC-Zone wiederhergestellt. Enthält die Datei, die ganzen Zahlen enthält, ein <xref:System.Int32> hodnota ukazuje, die Gesamtanzahl der <xref:System.Int64> Werte, die unmittelbar folgen.  
  
<a name="persistence-03"></a>  
[!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>Serialisieren von DateTime-Werte  

Sie können beibehalten <xref:System.DateTime> Werte über die Serialisierung in einen Stream oder Datei, und klicken Sie dann wiederherstellen werden durch Deserialisierung. <xref:System.DateTime> Daten werden in einem angegebenen Objekt-Format serialisiert. Die Objekte werden wiederhergestellt, wenn sie deserialisiert werden. Ein Formatierungsprogramm oder Serialisierer, wie z. B. <xref:System.Xml.Serialization.XmlSerializer> oder <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, verarbeitet die Serialisierung und Deserialisierung. Weitere Informationen zu Serialisierung und die Typen der Serialisierung von .NET Framework unterstützt werden, finden Sie unter [Serialisierung](~/docs/standard/serialization/index.md).
  
Im folgenden Beispiel wird die <xref:System.Xml.Serialization.XmlSerializer> Klasse zum Serialisieren und Deserialisieren <xref:System.DateTime> Werte. Die Werte stehen allen Schaltjahr Tage im 21. Jahrhundert. Die Ausgabe gibt das Ergebnis an das Beispiel auf einem System ausgeführt wird, dessen aktuelle Kultur Englisch (Großbritannien) ist. Da Sie deserialisiert haben die <xref:System.DateTime> Objekts selbst, der Code keine kulturelle Unterschiede in der Datums- und Zeitformate zu behandeln.  
  
<a name="persistence-04"></a>  
[!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

Im vorherige Beispiel enthält keine Informationen. Wenn eine <xref:System.DateTime> Wert einem bestimmten Zeitpunkt darstellt, und wird als lokale Zeit angegeben, die sie von der Ortszeit in UTC konvertieren, bevor die Serialisierung durch das Aufrufen der <xref:System.DateTime.ToUniversalTime%2A> Methode. Nachdem Sie die deserialisieren, Konvertieren von UTC in eine lokale Zeit durch Aufrufen der <xref:System.DateTime.ToLocalTime%2A> Methode. Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> Klasse zum Serialisieren <xref:System.DateTime> Daten auf einem System in den USA Zeitzone Pacific Standard Time und Deserialisierung wird in einem System in den USA Zentrale Standardzone.  
  
<a name="persistence-05"></a>  
[!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>Serialisieren von Daten für "DateTime" und Zeitzone  

In allen vorherigen Beispielen davon ausgegangen, dass <xref:System.DateTime> Werte werden als Ortszeiten angegeben. Der Code konvertiert die Werten zwischen UTC und Ortszeit aus, sodass sie den gleichen Zeitpunkt für die Quell- und Zielsystemen widerspiegeln. <xref:System.DateTime> Werte können auch Zeitpunkte in einer Zeitzone als Local und UTC. Da die <xref:System.DateTime> Struktur ist nicht für Zeitzonen unterstützen, müssen Sie sowohl den zum Serialisieren der <xref:System.DateTime> Wert und die <xref:System.TimeZoneInfo> Objekt, das die Zeitzone darstellt. Erstellen Sie einen Typ, dessen Felder enthalten, sowohl sind, der <xref:System.DateTime> Wert und die Zeitzone. Das folgende Beispiel definiert eine `DateWithTimeZone` Struktur.  
  
<a name="persistence-06"></a>  
[!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  Die `DateWithTimeZone` Struktur wird verwendet, in den nächsten beiden Beispielen wird das Serialisieren und Deserialisieren ein Array von `DateWithTimeZone` Objekte. Sehen Sie entweder die Quelle für die gesamte Gruppe der Beispiele in diesem Artikel [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) oder [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) aus docs-Repository auf GitHub.
  
Mithilfe der `DateWithTimeZone` Struktur, Sie können dann beibehalten, Datum und die Uhrzeit sowie Informationen zur Zeitzone. Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> Klasse, um ein Array von Serialisieren `DateWithTimeZone` Objekte.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

Das folgende Beispiel ruft dann die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> Methode zu deserialisieren.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime-Wert im Vergleich zu TimeSpan  

Die <xref:System.DateTime> und <xref:System.TimeSpan> Werttypen unterscheiden sich in, das eine <xref:System.DateTime> rechtzeitig einen Zeitpunkt darstellt, während eine <xref:System.TimeSpan> stellt ein Zeitintervall dar. Sie können eine Instanz des subtrahieren <xref:System.DateTime> von einem anderen zum Abrufen einer <xref:System.TimeSpan> -Objekt, das Zeitintervall zwischen ihnen darstellt. Oder Sie können ein positives Ergebnis hinzufügen <xref:System.TimeSpan> mit dem aktuellen <xref:System.DateTime> zum Abrufen einer <xref:System.DateTime> Wert, der ein zukünftiges Datum darstellt.  
  
Sie können addieren oder Subtrahieren von einem Zeitintervall aus einem <xref:System.DateTime> Objekt. Zeitintervalle können negativ oder positiv sein und in Einheiten wie z. B. Zeiteinheiten ausgedrückt werden können Sekunden oder als eine <xref:System.TimeSpan> Objekt.  

### <a name="comparing-for-equality-within-tolerance"></a>Vergleich, Gleichheit innerhalb des Toleranzbereichs

Für die Durchführung von Gleichheitsvergleichen <xref:System.DateTime> Werte sind genau. Das bedeutet, dass zwei Werte ausgedrückt werden müssen, als die gleiche Anzahl von Ticks als gleich betrachtet werden. Dass mit einfacher Genauigkeit häufig unnötiger oder sogar falsch für viele Anwendungen. Häufig möchten Sie getestet, ob <xref:System.DateTime> Objekte sind **ungefähr gleich**. 

Im folgende Beispiel wird veranschaulicht, wie etwa verglichen entsprechende <xref:System.DateTime> . Er akzeptiert einen kleineren Rand Unterschied gleich zulässig.  
  
<a name="comparison-02"></a>  
[!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>COM-interop-Überlegungen  

Ein <xref:System.DateTime> -Wert, der auf eine COM-Anwendung übertragen wird, und klicken Sie dann zurück an die einer verwalteten Anwendung übertragen wird als Roundtrip bezeichnet. Allerdings eine <xref:System.DateTime> -Wert, der nur eine Uhrzeit angibt, jedoch nicht Round-Trip wie zu erwarten.  
  
Wenn Sie einen Roundtrip nur eine Uhrzeit z.B. 15: 00 Uhr, das letzte Datum und Uhrzeit 30. Dezember 1899 unserer Zeitrechnung ist 3:00 Uhr, anstelle der 1. Januar 0001 unserer Zeitrechnung 3:00 Uhr Die .NET Framework- und COM-angenommen ein Standarddatum, wenn nur eine Uhrzeit angegeben wird. Setzt jedoch voraus im COM-System als Basisdatum 30. Dezember 1899 unserer Zeitrechnung, während .NET Framework eine Basis Datum der 1. Januar 0001 unserer Zeitrechnung annimmt.  
  
Wenn nur eine Uhrzeit in .NET Framework an COM übergeben wird, wird spezielle Verarbeitung ausgeführt, der die Zeit in das Format von COM verwendet konvertiert Wenn nur eine Uhrzeit von COM an .NET Framework übergeben wird, wird keine spezielle Verarbeitung ausgeführt, da, die legitime Datums- und Uhrzeitangaben, die am oder vor dem 30. Dezember 1899 wieder beschädigt würden. Wenn ein Datum den Roundtrip von COM gestartet wird, behalten die .NET Framework- und COM-das Datum aus.  
  
Das Verhalten der .NET Framework und COM-bedeutet, dass bei Ihrer Anwendung Roundtrips eine <xref:System.DateTime> , die nur eine Uhrzeit angibt, die Ihre Anwendung muss daran denken, zu ändern oder zu ignorieren die von der letzten <xref:System.DateTime> Objekt.  
     
 ]]></format>
    </remarks>
    <threadsafe>Alle Member dieses Typs sind threadsicher. Mitglieder, die angezeigt werden, so ändern Sie den Zustand der Instanz zurück tatsächlich eine neue Instanz initialisiert wird, mit dem neuen Wert an. Wie bei jeder anderen Art werden lesen und Schreiben in eine freigegebene Variable, die eine Instanz dieses Typs enthält durch eine Sperre um Threadsicherheit zu gewährleisten geschützt.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Auswählen zwischen "DateTime", "DateTimeOffset", "TimeSpan" und "TimeZoneInfo"</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">Arbeiten mit Kalendern</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Beispiel: .NET Framework 4-Hilfsprogramm zur Formatierung</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Ein Datum und eine Uhrzeit, die als Anzahl der 100-Nanosekunden-Intervalle ausgedrückt werden, die seit dem 1. Januar 0001, 00:00:00.000, im gregorianischen Kalender vergangen sind.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit einer angegebenen Anzahl von Ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie die entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eines der <xref:System.DateTime> Konstruktoren.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">Ein Datum und eine Uhrzeit, die als Anzahl der 100-Nanosekunden-Intervalle ausgedrückt werden, die seit dem 1. Januar 0001, 00:00:00.000, im gregorianischen Kalender vergangen sind.</param>
        <param name="kind">Einer der Enumerationswerte, der angibt, ob <c>ticks</c> eine Ortszeit, die koordinierte Weltzeit (Coordinated Universal Time, UTC) oder keine von beiden angibt</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit einer angegebenen Anzahl von Ticks und koordinierter Weltzeit (UTC) oder lokaler Zeit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie die entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> entspricht keinem der <see cref="T:System.DateTimeKind" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit dem angegebenen Jahr, Monat und Tag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert `year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Instanziiert eine <xref:System.DateTime> Wert, indem Sie das Jahr, Monat und Tag in einem anderen Kalender, Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor.  
  
 Die Tageszeit für die resultierende <xref:System.DateTime> ist Mitternacht (00: 00:00). Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> initialisiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert. Das Beispiel veranschaulicht auch, dass diese Überladung erstellt ein <xref:System.DateTime> Wert, dessen Zeitkomponente gleich Mitternacht ist (oder 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner als 1 oder größer als 9999.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als 12.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis zur Anzahl der Jahre in <c>calendar</c>)</param>
        <param name="month">Der Monat (1 bis zur Anzahl der Monate in <c>calendar</c>)</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <param name="calendar">Der Kalender, der zum Interpretieren von <c>year</c>, <c>month</c> und <c>day</c> verwendet wird</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit dem angegebenen Jahr, Monat und Tag für den angegebenen Kalender.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Tageszeit für die resultierende <xref:System.DateTime> ist Mitternacht (00: 00:00). Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`, und `day` hängen `calendar`. Eine Ausnahme ausgelöst, wenn das angegebene Datum und die Uhrzeit mit ausgedrückt werden können `calendar`.  
  
 Die <xref:System.Globalization> Namespace stellt mehrere Kalender, einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor zum Instanziieren zweier zweimal <xref:System.DateTime> Werte. Der erste Aufruf instanziiert ein <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.PersianCalendar> Objekt. Da der Persische Kalender als Standardkalender für eine Kultur festgelegt werden kann, erfordert das Anzeigen eines Datums im persischen Kalender einzelne Aufrufe an die <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> Methoden. Der zweite Aufruf an den Konstruktor instanziiert ein <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.HijriCalendar> Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) und ändert sich der aktuellen Kultur Standardkalender in den Hijri-Kalender. Da Hijri Standardkalender für die aktuelle Kultur, ist die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet er zum Formatieren des Datums. Wenn die vorherige aktuelle Kultur (Englisch (Vereinigte Staaten) in diesem Fall ist) wiederhergestellt wird, die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode, die der aktuellen Kultur standardmäßigen gregorianischen Kalenders verwendet, um das Datum zu formatieren.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> befindet sich nicht im von <paramref name="calendar" /> unterstützten Bereich.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als die Anzahl der Monate in <paramref name="calendar" />.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute und Sekunde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Dieser Konstruktor interpretiert`year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Instanziiert eine <xref:System.DateTime> Wert, indem Sie das Jahr, Monat und Tag in einem anderen Kalender, Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie die entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%2A> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner als 1 oder größer als 9999.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als 12.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="kind">Einer der Enumerationswerte, der angibt, ob <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> und <c>second</c> eine Ortszeit, die koordinierte Weltzeit (Coordinated Universal Time, UTC) oder keines von beiden enthalten.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde und koordinierte Weltzeit (Coordinated Universal Time, UTC) oder Ortszeit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Instanziiert eine <xref:System.DateTime> Wert, indem Sie das Jahr, Monat und Tag in einem anderen Kalender, Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> Konstruktor.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie die entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner als 1 oder größer als 9999.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als 12.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> entspricht keinem der <see cref="T:System.DateTimeKind" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis zur Anzahl der Jahre in <c>calendar</c>)</param>
        <param name="month">Der Monat (1 bis zur Anzahl der Monate in <c>calendar</c>)</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="calendar">Der Kalender, der zum Interpretieren von <c>year</c>, <c>month</c> und <c>day</c> verwendet wird</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute und Sekunde für den angegebenen Kalender.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`, und `day` hängen `calendar`. Eine Ausnahme ausgelöst, wenn das angegebene Datum und die Uhrzeit mit ausgedrückt werden können `calendar`.  
  
 Die <xref:System.Globalization> Namespace stellt mehrere Kalender, einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor zum Instanziieren zweier zweimal <xref:System.DateTime> Werte. Der erste Aufruf instanziiert ein <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.PersianCalendar> Objekt. Da der Persische Kalender als Standardkalender für eine Kultur festgelegt werden kann, erfordert das Anzeigen eines Datums im persischen Kalender einzelne Aufrufe an die <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> Methoden. Der zweite Aufruf an den Konstruktor instanziiert ein <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.HijriCalendar> Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) und ändert sich der aktuellen Kultur Standardkalender in den Hijri-Kalender. Da Hijri Standardkalender für die aktuelle Kultur, ist die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet er zum Formatieren des Datums. Wenn die vorherige aktuelle Kultur (Englisch (Vereinigte Staaten) in diesem Fall ist) wiederhergestellt wird, die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode, die der aktuellen Kultur standardmäßigen gregorianischen Kalenders verwendet, um das Datum zu formatieren.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> befindet sich nicht im von <paramref name="calendar" /> unterstützten Bereich.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als die Anzahl der Monate in <paramref name="calendar" />.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23. 
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="millisecond">Die Millisekunden (0 bis 999).</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde und Millisekunde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Instanziiert eine <xref:System.DateTime> Wert, indem Sie das Jahr, Monat und Tag in einem anderen Kalender, Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor.  
  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie die entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner als 1 oder größer als 9999.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als 12.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="millisecond" /> ist kleiner als 0 (null) oder größer als 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="millisecond">Die Millisekunden (0 bis 999).</param>
        <param name="kind">Einer der Enumerationswerte, der angibt, ob <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> und <c>millisecond</c> eine Ortszeit, die koordinierte Weltzeit (Coordinated Universal Time, UTC) oder keines von beiden enthalten.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde, Millisekunde und koordinierte Weltzeit (Coordinated Universal Time, UTC) oder Ortszeit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Instanziiert eine <xref:System.DateTime> Wert, indem Sie das Jahr, Monat und Tag in einem anderen Kalender, Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> Konstruktor.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie die entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner als 1 oder größer als 9999.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als 12.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="millisecond" /> ist kleiner als 0 (null) oder größer als 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> entspricht keinem der <see cref="T:System.DateTimeKind" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis zur Anzahl der Jahre in <c>calendar</c>)</param>
        <param name="month">Der Monat (1 bis zur Anzahl der Monate in <c>calendar</c>)</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="millisecond">Die Millisekunden (0 bis 999).</param>
        <param name="calendar">Der Kalender, der zum Interpretieren von <c>year</c>, <c>month</c> und <c>day</c> verwendet wird</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde und Millisekunde für den angegebenen Kalender.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`, und `day` hängen `calendar`. Eine Ausnahme ausgelöst, wenn das angegebene Datum und die Uhrzeit mit ausgedrückt werden können `calendar`.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie die entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
 Die <xref:System.Globalization> Namespace stellt mehrere Kalender, einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor zum Instanziieren zweier zweimal <xref:System.DateTime> Werte. Der erste Aufruf instanziiert ein <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.PersianCalendar> Objekt. Da der Persische Kalender als Standardkalender für eine Kultur festgelegt werden kann, erfordert das Anzeigen eines Datums im persischen Kalender einzelne Aufrufe an die <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> Methoden. Der zweite Aufruf an den Konstruktor instanziiert ein <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.HijriCalendar> Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) und ändert sich der aktuellen Kultur Standardkalender in den Hijri-Kalender. Da Hijri Standardkalender für die aktuelle Kultur, ist die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet er zum Formatieren des Datums. Wenn die vorherige aktuelle Kultur (Englisch (Vereinigte Staaten) in diesem Fall ist) wiederhergestellt wird, die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode, die der aktuellen Kultur standardmäßigen gregorianischen Kalenders verwendet, um das Datum zu formatieren.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> befindet sich nicht im von <paramref name="calendar" /> unterstützten Bereich.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als die Anzahl der Monate in <paramref name="calendar" />.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="millisecond" /> ist kleiner als 0 (null) oder größer als 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis zur Anzahl der Jahre in <c>calendar</c>)</param>
        <param name="month">Der Monat (1 bis zur Anzahl der Monate in <c>calendar</c>)</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <c>month</c>)</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="millisecond">Die Millisekunden (0 bis 999).</param>
        <param name="calendar">Der Kalender, der zum Interpretieren von <c>year</c>, <c>month</c> und <c>day</c> verwendet wird</param>
        <param name="kind">Einer der Enumerationswerte, der angibt, ob <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> und <c>millisecond</c> eine Ortszeit, die koordinierte Weltzeit (Coordinated Universal Time, UTC) oder keines von beiden enthalten.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTime" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde, Millisekunde und koordinierte Weltzeit (Coordinated Universal Time, UTC) oder Ortszeit für den angegebenen Kalender.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zulässigen Werte für `year`, `month`, und `day` Parameter hängen von der `calendar` Parameter. Eine Ausnahme ausgelöst, wenn das angegebene Datum und die Uhrzeit mit ausgedrückt werden können `calendar`.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie die entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
 Die <xref:System.Globalization> Namespace stellt mehrere Kalender, einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> Konstruktor zum Instanziieren zweier zweimal <xref:System.DateTime> Werte. Der erste Aufruf instanziiert ein <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.PersianCalendar> Objekt. Da der Persische Kalender als Standardkalender für eine Kultur festgelegt werden kann, erfordert das Anzeigen eines Datums im persischen Kalender einzelne Aufrufe an die <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> Methoden. Der zweite Aufruf an den Konstruktor instanziiert ein <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.HijriCalendar> Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) und ändert sich der aktuellen Kultur Standardkalender in den Hijri-Kalender. Da Hijri Standardkalender für die aktuelle Kultur, ist die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet er zum Formatieren des Datums. Wenn die vorherige aktuelle Kultur (Englisch (Vereinigte Staaten) in diesem Fall ist) wiederhergestellt wird, die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode, die der aktuellen Kultur standardmäßigen gregorianischen Kalenders verwendet, um das Datum zu formatieren.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> befindet sich nicht im von <paramref name="calendar" /> unterstützten Bereich.  
  
- oder -  
 <paramref name="month" /> ist kleiner als 1 oder größer als die Anzahl der Monate in <paramref name="calendar" />.  
  
- oder -  
 <paramref name="day" /> ist kleiner als 1 oder größer als die Anzahl der Tage in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="millisecond" /> ist kleiner als 0 (null) oder größer als 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> entspricht keinem der <see cref="T:System.DateTimeKind" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Ein positives oder negatives Zeitintervall.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der den Wert des angegebenen <see cref="T:System.TimeSpan" />-Werts zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und dem durch <paramref name="value" /> dargestellten Zeitintervall ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.DateTime.Add%2A> Methode, um mehr als eine Art des Zeitfensters (Tage, Stunden, Minuten, Sekunden oder Millisekunden) in einem einzigen Vorgang hinzuzufügen. Das Verhalten dieser Methode ist identisch mit der Addition-Operator. Die <xref:System.DateTime> Struktur unterstützt auch spezielle Additionsmethoden (z. B. <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, und <xref:System.DateTime.AddMinutes%2A>) für jedes Zeitintervall.  
  
 Die <xref:System.DateTime.Add%2A> Methode berücksichtigt die Schaltjahren und die Anzahl der Tage in einem Monat, die beim Ausführen von arithmetischen Datum.  
  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , deren Wert ist das Ergebnis dieses Vorgangs. Die <xref:System.DateTime.Kind%2A> -Eigenschaft des neuen <xref:System.DateTime> Instanz ist mit der aktuellen Instanz identisch.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Add%2A> Methode. Berechnet den Tag der Woche, die 36 Tage (864 Stunden) an diesem Zeitpunkt sind.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Zahl, die aus ganzen Tagen und dem Bruchteil eines Tages besteht. Der <c>value</c>-Parameter kann negativ oder positiv sein.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der die angegebene Anzahl von Tagen zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und der durch <paramref name="value" /> dargestellten Anzahl von Tagen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , deren Wert ist das Ergebnis dieses Vorgangs.  
  
 Der Bruchteil des `value` der Bruchteil eines Tages ist. 4.5 entspricht z. B. 4 Tage, 12 Stunden, 0 Minuten, 0 Sekunden, 0 Millisekunden und 0 Takten.  
  
 Die `value` -Parameter wird auf die nächste Millisekunde gerundet.  
  
 Die <xref:System.DateTime.AddDays%2A> Methode berücksichtigt die Schaltjahren und die Anzahl der Tage in einem Monat, die beim Ausführen von arithmetischen Datum.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddDays%2A> Methode, um zu bestimmen, den Tag der Woche 36 Tage nach dem aktuellen Datum.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Zahl, die aus ganzen Stunden und dem Bruchteil einer Stunde besteht. Der <c>value</c>-Parameter kann negativ oder positiv sein.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der die angegebene Anzahl von Stunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und der durch <paramref name="value" /> dargestellten Anzahl von Stunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , deren Wert ist das Ergebnis dieses Vorgangs. Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt ist identisch mit der `value`.  
  
 Der Bruchteil des `value` der Bruchteil einer Stunde ist. 4.5 entspricht z. B. 4 Stunden, 30 Minuten, 0 Sekunden, 0 Millisekunden und 0 Takten.  
  
 Die `value` -Parameter wird auf die nächste Millisekunde gerundet.  
  
 Konvertieren von Zeitintervallen von weniger als einer Stunde auf einen Bruchteil kann ein Genauigkeitsverlust umfassen, wenn das Ergebnis nicht endenden wiederholter Dezimalzahl ist. (Eine Minute ist z. B. 0,016667 von einer Stunde.) Wenn dies problematisch ist, können Sie die <xref:System.DateTime.Add%2A> Methode, die ermöglicht Ihnen die Angabe von mehr als eine Art von Zeitintervallen in einem einzelnen Methodenaufruf und entfällt die Notwendigkeit, die Zeitintervalle zu Bruchteile einer Stunde zu konvertieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddHours%2A> -Methode einer Datums- und Uhrzeitangabe eine Anzahl von ganzen Tagen und Bruchteilen von Werten hinzu. Darüber hinaus veranschaulicht er die Genauigkeitsverlust verursacht durch Übergabe von der Methode einen Wert, der eine Nachkommastelle einschließt.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Zahl, die aus ganzen Millisekunden und dem Bruchteil einer Millisekunde besteht. Der <c>value</c>-Parameter kann negativ oder positiv sein. Beachten Sie, dass dieser Wert auf die nächste Ganzzahl gerundet wird.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der die angegebene Anzahl von Millisekunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und der durch <paramref name="value" /> dargestellten Anzahl von Millisekunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , deren Wert ist das Ergebnis dieses Vorgangs.  
  
 Der Bruchteil des `value` ist der Bruchteil einer Millisekunde. 4.5 entspricht z. B. 4 Millisekunden und 5000 Ticks, wobei 1 Millisekunde 10.000 Ticks.  
  
 Die `value` -Parameter wird auf die nächste Ganzzahl gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddMilliseconds%2A> Methode zum Hinzufügen einer Millisekunde und 1,5 Millisekunden, die eine <xref:System.DateTime> Wert. Klicken Sie dann jeden neuen Wert anzeigt, und zeigt den Unterschied zwischen diesem und den ursprünglichen Wert. Der Unterschied wird sowohl als einen Zeitraum eine Anzahl von Ticks angezeigt. Im Beispiel wird eine Millisekunde 10.000 Ticks entspricht deutlich. Es zeigt außerdem, dass die Bruchteile von Millisekunden vor dem Ausführen der Addition gerundet werden; die <xref:System.DateTime> Wert, der aus der Addition von 1,5 Millisekunden auf das ursprüngliche Datum ergibt, ist 2 Millisekunden größer als das ursprüngliche Datum.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Zahl, die aus ganzen Minuten und dem Bruchteil einer Minute besteht. Der <c>value</c>-Parameter kann negativ oder positiv sein.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der die angegebene Anzahl von Minuten zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und der durch <paramref name="value" /> dargestellten Anzahl von Minuten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , deren Wert ist das Ergebnis dieses Vorgangs.  
  
 Der Bruchteil des `value` ist der Bruchteil einer Minute. 4.5 entspricht z. B. 4 Minuten, 30 Sekunden, 0 Millisekunden und 0 Takten.  
  
 Die `value` -Parameter wird auf die nächste Millisekunde gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddMinutes%2A> -Methode einer Datums- und Uhrzeitangabe eine Anzahl von ganzen Tagen und Bruchteilen von Werten hinzu.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Eine Anzahl von Monaten. Der <c>months</c>-Parameter kann negativ oder positiv sein.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der die angegebene Anzahl von Monaten zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und <paramref name="months" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime> Objekt. Stattdessen gibt es eine neue <xref:System.DateTime> Objekt, dessen Wert das Ergebnis dieses Vorgangs.  
  
 Die <xref:System.DateTime.AddMonths%2A> Methode ermittelt den resultierenden Monat und Berücksichtigung von Schaltjahren und die Anzahl der Tage im Monat, Jahr passt dann die Tagesangabe des resultierenden <xref:System.DateTime> Objekt. Wenn der resultierende Tag nicht im resultierenden Monat einen gültigen Tag ist, wird der letzte gültige Tag des berechneten Monats verwendet. Beispiel: 31. März + 1 Monat = April 30. und 31. März - 1 Monat = für eine kein Schaltjahr am 28. Februar und vom Februar 29 für ein Schaltjahr.  
  
 Die Zeit des Tages Teil der resultierenden <xref:System.DateTime> Objekt bleibt dieser Instanz identisch.  
  
   
  
## Examples  
 Das folgende Beispiel fügt zwischen 0 und 15 Monate bis zum letzten Tag von Dezember 2015. In diesem Fall die AddMonths-Methode gibt das Datum des letzten Tags des Monats zurück, und Schaltjahre erfolgreich behandelt.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.  
  
- oder -  
 <paramref name="months" /> ist kleiner als –120.000 oder größer als 120.000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Zahl, die aus ganzen Sekunden und dem Bruchteil einer Sekunde besteht. Der <c>value</c>-Parameter kann negativ oder positiv sein.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der die angegebene Anzahl von Sekunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und der durch <paramref name="value" /> dargestellten Anzahl von Sekunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , deren Wert ist das Ergebnis dieses Vorgangs.  
  
 Der Bruchteil des `value` der Bruchteil einer Sekunde ist. Beispielsweise ist 4.5 gleichbedeutend mit 0 Takten, 4 Sekunden und 500 Millisekunden.  
  
 Die `value` -Parameter wird auf die nächste Millisekunde gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddSeconds%2A> -Methode zum Hinzufügen von 30 Sekunden und die Anzahl der Sekunden an einem Tag auf eine <xref:System.DateTime> Wert. Klicken Sie dann jeden neuen Wert anzeigt, und zeigt den Unterschied zwischen diesem und den ursprünglichen Wert. Der Unterschied wird sowohl als einen Zeitraum eine Anzahl von Ticks angezeigt.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von 100-Nanosekunden-Ticks. Der <c>value</c>-Parameter kann positiv oder negativ sein.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der die angegebene Anzahl von Ticks zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und der durch <paramref name="value" /> dargestellten Zeit ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , deren Wert ist das Ergebnis dieses Vorgangs.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Jahren. Der <c>value</c>-Parameter kann negativ oder positiv sein.</param>
        <summary>Gibt einen neuen <see cref="T:System.DateTime" />-Wert zurück, der die angegebene Anzahl von Jahren zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der von dieser Instanz dargestellten Datums- und Uhrzeitangabe und der durch <paramref name="value" /> dargestellten Anzahl von Jahren ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime> Objekt. Stattdessen gibt es eine neue <xref:System.DateTime> Objekt, dessen Wert das Ergebnis dieses Vorgangs.  
  
 Die <xref:System.DateTime.AddYears%2A> -Methode berechnet die resultierende Jahr Berücksichtigung von Schaltjahren. Der Monat und Zeit des Tages Teil der resultierenden <xref:System.DateTime> Objekt bleibt dieser Instanz identisch.  
  
 Wenn die aktuelle Instanz der Schalttag in einem Schaltjahr darstellt, hängt der Rückgabewert Zieldatum ab:  
  
-   Wenn `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> ist auch ein Schaltjahr, die den Rückgabewert der Schalttag in diesem Jahr darstellt. Wenn vier Jahren hinzugefügt wird, zum 29. Februar 2012, ist das zurückgegebene Datum z. B. 29. Februar 2016.  
  
-   Wenn `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> ist keinem Schaltjahr, der zurückgegebene Wert stellt den Tag vor der Schalttag in diesem Jahr. Wenn ein Jahr lang 29. Februar 2012, hinzugefügt wird ist das zurückgegebene Datum z. B. 28. Februar 2013.  
  
 Im folgende Beispiel veranschaulicht die Verwendung der <xref:System.DateTime.AddYears%2A> -Methode mit einem <xref:System.DateTime> -Wert, der einen Schaltjahr Tag darstellt. Es zeigt das Datum an, für den 15 Jahren vor und die 15 Jahre, die Folgen 29. Februar 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> oder der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Objekt.</param>
        <param name="t2">Das zweite zu vergleichende Objekt.</param>
        <summary>Vergleicht zwei Instanzen von <see cref="T:System.DateTime" /> und gibt eine ganze Zahl zurück, die angibt, ob die erste Instanz früher oder später als die zweite Instanz ist oder ob sie mit dieser identisch ist.</summary>
        <returns>Eine Zahl mit Vorzeichen, die die relativen Werte von <paramref name="t1" /> und <paramref name="t2" /> angibt.  
  
 <list type="table"><listheader><term> Werttyp 
 </term><description> Bedingung 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description><paramref name="t1" /> liegt vor <paramref name="t2" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="t1" /> entspricht <paramref name="t2" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description><paramref name="t1" /> ist später als <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Beziehung zwischen `t1` zu `t2`, <xref:System.DateTime.Compare%2A> -Methode vergleicht die <xref:System.DateTime.Ticks%2A> Eigenschaft `t1` und `t2` ignoriert jedoch ihre <xref:System.DateTime.Kind%2A> Eigenschaft. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Compare%2A> Methode.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Vergleicht den Wert dieser Instanz mit einem angegebenen <see cref="T:System.DateTime" />-Wert und gibt an, ob diese Instanz vor oder nach dem angegebenen <see cref="T:System.DateTime" />-Wert liegt oder diesem entspricht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die beiden Überladungen der der <xref:System.DateTime.CompareTo%2A> Methodenrückgabewert eine Zahl mit Vorzeichen, der den relativen Wert dieser Instanz angibt und die `value` -Arguments zu, wie in der folgenden Tabelle dargestellt.  
  
|Wert|Beschreibung |  
|-----------|-----------------|  
|Kleiner als 0 (null)|Diese Instanz liegt vor `value`.|  
|Zero|Diese Instanz entspricht `value`.|  
|Größer als 0 (null)|Diese Instanz liegt nach `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <summary>Vergleicht den Wert dieser Instanz mit einem angegebenen <see cref="T:System.DateTime" />-Wert und gibt eine Ganzzahl zurück, die angibt, ob diese Instanz vor oder nach dem angegebenen <see cref="T:System.DateTime" />-Wert liegt oder diesem entspricht.</summary>
        <returns>Eine Zahl mit Vorzeichen, die das Verhältnis zwischen dem Wert dieser Instanz und dem Wert des <paramref name="value" />-Parameters angibt.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Beschreibung  
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description> Diese Instanz liegt vor <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> Diese Instanz entspricht <paramref name="value" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description> Diese Instanz liegt nach <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Beziehung zwischen der aktuellen Instanz `value`, <xref:System.DateTime.CompareTo%2A> -Methode vergleicht die <xref:System.DateTime.Ticks%2A> -Eigenschaft der aktuellen Instanz und `value` ignoriert jedoch ihre <xref:System.DateTime.Kind%2A> Eigenschaft.  Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie vergleichen der Werte von ihren <xref:System.DateTime.Kind%2A> Eigenschaften.  
  
 Diese Methode implementiert die <xref:System.IComparable%601?displayProperty=nameWithType> -Schnittstelle und führt etwas bessere Leistung als die <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> Methode zu überladen, da es keine konvertieren die `value` Parameter für ein Objekt.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert drei <xref:System.DateTime> Objekte, eines heute für Datum, ein weiteres, das das Datum ein Jahr zuvor darstellt, und eine dritte, die das Datum ein Jahr in der Zukunft darstellt. Es ruft dann die <xref:System.DateTime.CompareTo%28System.DateTime%29> Methode und das Ergebnis des Vergleichs angezeigt.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Ein zu vergleichendes geschachteltes Objekt oder <see langword="null" />.</param>
        <summary>Vergleicht den Wert dieser Instanz mit einem angegebenen Objekt, das einen angegebenen <see cref="T:System.DateTime" />-Wert enthält, und gibt eine Ganzzahl zurück, die angibt, ob diese Instanz vor oder nach dem angegebenen <see cref="T:System.DateTime" />-Wert liegt oder diesem entspricht.</summary>
        <returns>Eine Zahl mit Vorzeichen, die das Verhältnis zwischen dem Wert dieser Instanz und <paramref name="value" /> angibt.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Beschreibung  
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description> Diese Instanz liegt vor <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> Diese Instanz entspricht <paramref name="value" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description> Diese Instanz liegt nach <paramref name="value" />, oder <paramref name="value" /> ist <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Beziehung zwischen der aktuellen Instanz `value`, <xref:System.DateTime.CompareTo%2A> -Methode vergleicht die <xref:System.DateTime.Ticks%2A> -Eigenschaft der aktuellen Instanz und `value` ignoriert jedoch ihre <xref:System.DateTime.Kind%2A> Eigenschaft. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie vergleichen der Werte von ihren <xref:System.DateTime.Kind%2A> Eigenschaften.  
  
 Jede Instanz von <xref:System.DateTime>, unabhängig von seinem Wert wird als größer betrachtet `null`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.CompareTo%2A> Methode.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist keine <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Datumskomponente dieser Instanz ab.</summary>
        <value>Ein neues Objekt mit demselben Datum wie diese Instanz und einer Uhrzeit von Mitternacht (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert ist identisch mit der der aktuellen Instanz.  
  
 Da die <xref:System.DateTime> Typ darstellt, beide Datumsangaben und Zeiten in einen einzelnen Typ, ist es wichtig, zu vermeiden, ein Datum vom Formatelementen der <xref:System.DateTime.Date%2A> Eigenschaft als Datum und Uhrzeit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Date%2A> zu die Datumskomponente des zu extrahierende Eigenschaft eine <xref:System.DateTime> Wert mit der Zeitkomponente auf 0 (null) festgelegt (oder 0:00:00 Uhr oder Mitternacht). Es veranschaulicht auch, dass, abhängig von der Formatzeichenfolge, die zum Anzeigen der <xref:System.DateTime> Wert die Zeitkomponente kann weiterhin in der formatierten Ausgabe angezeigt.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tag des Monats ab, der durch diese Instanz dargestellt wird.</summary>
        <value>Die Tagkomponente als Wert zwischen 1 und 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Day%2A> Eigenschaft gibt immer den Tag des Monats zurück, in dem gregorianischen Kalender, auch wenn die aktuelle <xref:System.DateTime> Wert mit einem anderen Kalender instanziiert wurde, oder wenn die aktuelle Standardkalender thread ist nicht dem gregorianischen Kalender. Um den Tag des Monats eines bestimmten Datums mit einem anderen Kalender zu abzurufen, rufen Sie im Kalender <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> Methode. Im folgenden Beispiel wird sowohl die <xref:System.DateTime.Day%2A> Eigenschaft und die <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> Methode zum Abrufen des Tages des Monats für ein <xref:System.DateTime> Wert, der mit den Hijri-Kalender instanziiert wird.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Auf ähnliche Weise, die im folgenden Beispiel wird sowohl die <xref:System.DateTime.Day%2A> Eigenschaft und die <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> Methode, um den Tag des Monats abzurufen, wenn die aktuelle Threadkultur Ar-SA, der Hijri-Kalender als Standardkalender verwendet wird.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Day%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wochentag ab, der durch diese Instanz dargestellt wird.</summary>
        <value>Eine Enumerationskonstante, die den Wochentag dieses <see cref="T:System.DateTime" />-Werts angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der Konstanten in der <xref:System.DayOfWeek> Enumeration liegt zwischen <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> zu <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Bei der Umwandlung in eine ganze Zahl, der Wert 0 (null) (womit <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) auf sechs (womit <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Die <xref:System.DateTime.DayOfWeek%2A> Eigenschaft gibt eine aufgezählte Konstante zurück; er berücksichtigt nicht die Regions- und spracheinstellungen des Systems-Einstellungen. Um eine Zeichenfolge mit einer lokalisierten Wochentagsnamen für ein bestimmtes Datum abzurufen, rufen Sie eine der Überladungen der der <xref:System.DateTime.ToString%2A> Methode, enthält eine `format` Parameter, und übergeben sie entweder die `ddd` oder `dddd` benutzerdefinierte Formatzeichenfolgen. Weitere Informationen finden Sie unter [wie: Extrahieren des Tags der Woche aus einem bestimmten Datum](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.DayOfWeek%2A> Eigenschaft und die <xref:System.DayOfWeek?displayProperty=nameWithType> Enumeration.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tag des Jahres ab, der durch diese Instanz dargestellt wird.</summary>
        <value>Der Tag des Jahres als Wert zwischen 1 und 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.DayOfYear%2A> Eigenschaft werden Schaltjahre berücksichtigt, wenn sie den Tag des Jahres berechnet. Der Tag des Jahres im gregorianischen Kalender, unabhängig von der aktuellen Kalender für die aktuelle Threadkultur stellt immer den Wert der Eigenschaft dar. Um den Tag des Jahres in einem anderen Kalender abzurufen, rufen die <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> Methode dieses Kalenders.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den Tag des Jahres aus dem 31. Dezember 2010-2020 Jahren im gregorianischen Kalender. Beachten Sie, dass das Beispiel zeigt, dass dem 31. Dezember der 366. Tag des Jahres im Schaltjahr ist.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr.</param>
        <param name="month">Der Monat (eine Zahl zwischen 1 und 12).</param>
        <summary>Gibt die Anzahl der Tage im angegebenen Monat und Jahr zurück.</summary>
        <returns>Die Anzahl der Tage in <paramref name="month" /> für das angegebene <paramref name="year" />.  
  
Wenn <paramref name="month" /> gleich 2 für Februar ist, ist der Rückgabewert 28 oder 29, abhängig davon, ob <paramref name="year" /> ein Schaltjahr ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.DaysInMonth%2A> Methode immer interpretiert `month` und `year` als Monat und Jahr des gregorianischen Kalender "Kalender" selbst wenn dem gregorianischen Kalender nicht als aktueller Kalender der aktuellen Kultur ist. Um die Anzahl der Tage im angegebenen Monat eines bestimmten Kalenders zu erhalten, rufen Sie im Kalender <xref:System.Globalization.Calendar.GetDaysInMonth%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.DateTime.DaysInMonth%2A> Methode, um zu bestimmen, die Anzahl von Tagen im Juli 2001, Februar 1998 (eine kein Schaltjahr), und Februar 1996 (ein Schaltjahr).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 Das folgende Beispiel zeigt die Anzahl der Tage in jedem Monat eines Jahres in ein Array von Ganzzahlen angegeben.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> ist kleiner als 1 oder größer als 12.  
  
- oder -  
 <paramref name="year" /> ist kleiner als 1 oder größer als 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.DateTime" />-Objekte oder eine <see cref="T:System.DateTime" />-Instand und ein anderes Objekt oder <see cref="T:System.DateTime" /> den selben Wert besitzen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Das mit dieser Instanz zu vergleichende Objekt.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob der Wert dieser Instanz gleich dem Wert der angegebenen <see cref="T:System.DateTime" />-Instanz ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="value" /> dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Instanz und `value` sind gleich, wenn ihre <xref:System.DateTime.Ticks%2A> Werte gleich sind. Ihre <xref:System.DateTime.Kind%2A> Eigenschaftswerte in den Test auf Gleichheit nicht berücksichtigt.  
  
 Diese Methode implementiert die <xref:System.IEquatable%601?displayProperty=nameWithType> -Schnittstelle und führt etwas bessere Leistung als die <xref:System.DateTime.Equals%2A> Methode da die `value` Parameter muss nicht auf ein Objekt konvertiert werden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das mit dieser Instanz zu vergleichende Objekt.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="value" /> eine Instanz von <see cref="T:System.DateTime" /> ist, deren Wert gleich dem Wert dieser Instanz ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Instanz und `value` sind gleich, wenn ihre <xref:System.DateTime.Ticks%2A> Werte gleich sind. Ihre <xref:System.DateTime.Kind%2A> Eigenschaftswerte in den Test auf Gleichheit nicht berücksichtigt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Objekt.</param>
        <param name="t2">Das zweite zu vergleichende Objekt.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.DateTime" />-Instanzen denselben Datum- und Zeitwert besitzen.</summary>
        <returns>
          <see langword="true" />, wenn die beiden Werte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` und `t2` sind gleich, wenn ihre <xref:System.DateTime.Ticks%2A> Werte gleich sind. Ihre <xref:System.DateTime.Kind%2A> Eigenschaftswerte in den Test auf Gleichheit nicht berücksichtigt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">Eine 64-Bit-Ganzzahl mit Vorzeichen, die die <see cref="P:System.DateTime.Kind" />-Eigenschaft in ein 2-Bit-Feld und die <see cref="P:System.DateTime.Ticks" />-Eigenschaft in ein 62-Bit-Feld codiert.</param>
        <summary>Deserialisiert einen 64-Bit-Binärwert und erstellt ein ursprüngliches serialisiertes <see cref="T:System.DateTime" />-Objekt neu.</summary>
        <returns>Ein Objekt, das dem <see cref="T:System.DateTime" />-Objekt entspricht, das von der <see cref="M:System.DateTime.ToBinary" />-Methode serialisiert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.DateTime.ToBinary%2A> Methode zum Konvertieren des Werts des aktuellen <xref:System.DateTime> Objekt in einen Binärwert. Anschließend verwenden Sie den binären Wert und die <xref:System.DateTime.FromBinary%2A> -Methode zum Neuerstellen des ursprünglichen <xref:System.DateTime> Objekt.  
  
> [!IMPORTANT]
>  In einigen Fällen die <xref:System.DateTime> von zurückgegebene Wert die <xref:System.DateTime.FromBinary%2A> Methode ist nicht mit dem Original identisch <xref:System.DateTime> für bereitgestellte Wert der <xref:System.DateTime.ToBinary%2A> Methode. Weitere Informationen finden Sie im nächsten Abschnitt, "Ortszeit Anpassung".  
  
## <a name="local-time-adjustment"></a>Anpassung der lokalen  
 Eine Ortszeit, die eine koordinierte Weltzeit, die an die lokale Zeitzone angepasst ist, wird durch dargestellt eine <xref:System.DateTime> Struktur, deren <xref:System.DateTime.Kind%2A> Eigenschaft hat den Wert <xref:System.DateTimeKind.Local>. Beim Wiederherstellen von einer lokales <xref:System.DateTime> Wert aus der binären Darstellung, die von erzeugt wird die <xref:System.DateTime.ToBinary%2A> -Methode, die <xref:System.DateTime.FromBinary%2A> Methode kann den neu erstellten Wert so anpassen, dass es nicht auf den ursprünglichen Wert gleich ist. Dieser Fall kann unter den folgenden Bedingungen eintreten:  
  
-   Wenn eine lokale <xref:System.DateTime> Objekt wird serialisiert in einer Zeitzone von der <xref:System.DateTime.ToBinary%2A> -Methode, und klicken Sie dann in einer anderen Zeitzone durch deserialisiert die <xref:System.DateTime.FromBinary%2A> -Methode, die lokale Zeit dargestellt, die durch das resultierende <xref:System.DateTime> Objekt wird automatisch angepasst. um die zweite Zeitzone.  
  
     Betrachten Sie beispielsweise eine <xref:System.DateTime> -Objekt, das lokale Zeit von 15: 00 Uhr darstellt. Eine Anwendung, die in den USA ausgeführt wird Zeitzone Pacific verwendet die <xref:System.DateTime.ToBinary%2A> konvertiert, die Methode <xref:System.DateTime> Objekt in einen Binärwert. Eine andere Anwendung, die in den USA ausgeführt wird Anschließend verwendet der Zeitzone Eastern Time die <xref:System.DateTime.FromBinary%2A> -Methode zum Konvertieren von des Binärwerts in eine neue <xref:System.DateTime> Objekt. Der Wert der neuen <xref:System.DateTime> Objekt ist 18: 00 Uhr, die die gleiche Punktmenge wie die ursprüngliche 15: 00 Uhr darstellt. Wert, aber in die Ortszeit in der Zeitzone Eastern Time angepasst wird.  
  
-   Wenn die binäre Darstellung von einer lokalen <xref:System.DateTime> Wert eine ungültige Zeit darstellt, in der lokalen Zeitzone des Systems, auf dem <xref:System.DateTime.FromBinary%2A> wird aufgerufen, die Zeit wird so angepasst, dass er gültig ist.  
  
     Beispielsweise tritt auf, die Umstellung von Standardzeit auf Sommerzeit in der pazifischen Zeitzone der USA am 14. März 2010, um 2:00 Uhr, wenn die Zeit von einer Stunde, um 3:00 Uhr Diese Stunden-Intervall ist eine ungültige Zeit an, d. h. ein Zeitintervall an, die in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass dieser Bereich einen binären Wert, wenn eine Zeit, die innerhalb konvertiert wird der <xref:System.DateTime.ToBinary%2A> Methode und wird dann wiederhergestellt werden, indem die <xref:System.DateTime.FromBinary%2A> -Methode, den ursprünglichen Wert wird angepasst, um eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmtes Datum und Uhrzeit-Wert je nach Änderung möglicherweise durch Übergabe an die <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> -Methode, wie im Beispiel veranschaulicht.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Version-Überlegungen  
 Ab .NET Framework, Version 2.0, eine <xref:System.DateTime> Struktur besteht aus einem privaten Kind-Feld gibt an, ob die angegebene Zeit Ortszeit, koordinierter Weltzeit (UTC) oder keines von beiden, verkettet wird mit einem privaten Feld der Ticks, die enthält die Anzahl der 100-Nanosekunden-Ticks, die ein Datum und eine Uhrzeit angeben. Die Anzahl der Ticks zugegriffen werden kann, mit der <xref:System.DateTime.Ticks%2A> mit Feld-Eigenschaft und TheKind zugegriffen werden die <xref:System.DateTime.Kind%2A> Eigenschaft.  
  
 Vor .NET Framework 2.0, wenn Sie serialisiert eine <xref:System.DateTime> Objekt manuell statt mit Serialisierungsschnittstelle wie <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, mussten Sie nur die Ticks-Daten in Serialisieren der <xref:System.DateTime>. Ab .NET Framework 2.0, müssen Sie auch die Kind-Daten serialisieren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Eine Windows-Dateizeit in Ticks.</param>
        <summary>Konvertiert die angegebene Windows-Dateizeit in eine entsprechende Ortszeit.</summary>
        <returns>Ein Objekt, das die Ortszeit darstellt, die der Datums- und Uhrzeitangabe entspricht, die durch den <paramref name="fileTime" />-Parameter dargestellt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Koordinierte Weltzeit (UTC). Windows verwendet eine Zeit, um aufzuzeichnen, wenn eine Anwendung erstellt, greift auf oder in eine Datei geschrieben.  
  
 Die `fileTime` Parameter gibt an, eine Dateizeit in 100-Nanosekunden-Ticks.  
  
 Ab .NET Framework, Version 2.0 wird der Rückgabewert ist ein <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.FromFileTime%2A> Methode.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> ist kleiner als 0 oder stellt eine Uhrzeit dar, die größer als <see cref="F:System.DateTime.MaxValue" /> ist.</exception>
        <block subset="none" type="usage">
          <para>Normalerweise die <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> Methode stellt eine <see cref="T:System.DateTime" /> -Wert, der von gespeichert wurden die <see cref="M:System.DateTime.ToFileTime" /> Methode. Allerdings können zwischen den beiden Werten in den folgenden Situationen: 
-If die Serialisierung und Deserialisierung der <see cref="T:System.DateTime" /> in verschiedenen Zeitzonen sein. Z. B. wenn ein <see cref="T:System.DateTime" /> Wert mit einer Uhrzeit 12:30 Uhr in den USA Zeitzone Eastern Time serialisiert und deserialisiert dann in den USA Pacific-Zeitzone, die den ursprünglichen Wert von 12:30 Uhr um 9:30 Uhr wird angepasst werden. um den Unterschied zwischen den beiden Zeitzonen widerzuspiegeln.  
  
-If die <see cref="T:System.DateTime" /> -Wert, der serialisiert wird, eine ungültige Zeit in die lokale Zeitzone darstellt. In diesem Fall die <see cref="M:System.DateTime.ToFileTime" /> Methode passt der wiederhergestellten <see cref="T:System.DateTime" /> Wert, sodass es eine gültige Zeit in die lokale Zeitzone darstellt.  
  
Beispielsweise tritt die Umstellung von Standardzeit auf Sommerzeit in den USA Am 14. März 2010 um 2:00 Uhr, wenn die Zeit von einer Stunde, um 3:00 Uhr Pazifische Zeitzone Diese Stunden-Intervall ist eine ungültige Zeit an, d. h. ein Zeitintervall an, die in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass dieser Bereich einen langen ganzzahligen Wert, wenn eine Zeit, die innerhalb konvertiert wird der <see cref="M:System.DateTime.ToFileTime" /> Methode und wird dann wiederhergestellt werden, indem die <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> -Methode, den ursprünglichen Wert wird angepasst, um eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmtes Datum und Uhrzeit-Wert je nach Änderung möglicherweise durch Übergabe an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> -Methode, wie im Beispiel veranschaulicht.  
  
[! Code-Csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! Code – Vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Eine Windows-Dateizeit in Ticks.</param>
        <summary>Konvertiert die angegebene Windows-Dateizeit in eine entsprechende UTC-Zeit.</summary>
        <returns>Ein Objekt, das die UTC-Zeit darstellt, die der Datums- und Uhrzeitangabe entspricht, die durch den <paramref name="fileTime" />-Parameter dargestellt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Koordinierte Weltzeit (UTC). Windows verwendet eine Zeit, um aufzuzeichnen, wenn eine Anwendung erstellt, greift auf oder in eine Datei geschrieben.  
  
 Die `fileTime` Parameter gibt an, eine Dateizeit in 100-Nanosekunden-Ticks.  
  
 Ab .NET Framework, Version 2.0 wird der Rückgabewert ist ein <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> ist kleiner als 0 oder stellt eine Uhrzeit dar, die größer als <see cref="F:System.DateTime.MaxValue" /> ist.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Ein Datumswert für die OLE-Automatisierung.</param>
        <summary>Gibt eine <see cref="T:System.DateTime" /> zurück, die dem angegebenen Datum für die OLE-Automatisierung entspricht.</summary>
        <returns>Ein Objekt, das das gleiche Datum und die gleiche Uhrzeit wie <paramref name="d" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `d` -Parameter ist eine Gleitkommazahl mit doppelter Genauigkeit, die ein Datum als die Anzahl der Tage vor oder nach dem Basisdatum, Mitternacht am 30. Dezember 1899 darstellt. Der Anmeldung und der integrale Teil `d` codieren Sie das Datum als eine positive oder negative Tag-Verschiebung vom 30. Dezember 1899 und den absoluten Wert der Bruchteil des `d` codiert die Uhrzeit als Dezimalbruch der eine Verschiebung Tages von Mitternacht. `d` ein Wert zwischen 657435,0 negative und positive 2958465.99999999 muss sein.  
  
 Beachten Sie, dass aufgrund der Art und Weise, die Datumsangaben codiert werden, es gibt zwei Möglichkeiten zur Darstellung einer bestimmten Tageszeit am 30. Dezember 1899. 0,5 und 0,5 bedeutet mittags am 30. Dezember 1899 z. B. weil eine Tag-Verschiebung von Plus oder minus NULL Tagen aus dem Basisdatum nach wie vor dem Basisdatum ist und eine halben Tag Verschiebung von Mitternacht Mittag.  
  
 Finden Sie unter <xref:System.DateTime.ToOADate%2A> für Weitere Informationen über OLE-Automatisierung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Das Datum ist kein gültiger Datumswert für die OLE-Automatisierung.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert den Wert dieser Instanz in alle Zeichenfolgendarstellungen, die von den Standardformatbezeichnern für Datum und Uhrzeit unterstützt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Sie sollten nicht davon ausgehen, dass mehrere Aufrufe an die <xref:System.DateTime.GetDateTimeFormats%2A> Überladungen identische Daten zurück. Abhängig von der speziellen Überladung können die von dieser Methode zurückgegebene Daten ändern, wenn die aktuelle Kultur ändert, der Benutzer überschreibt einzelne kultureinstellungen oder ein Updates tritt auf, um die Daten des Systems kulturellen.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert dieser Instanz in alle Zeichenfolgendarstellungen, die von den Standardformatbezeichnern für Datum und Uhrzeit unterstützt werden.</summary>
        <returns>Ein Array von Zeichenfolgen, in dem jedes Element eine mit einem der Standardformatbezeichner für Datum und Uhrzeit formatierte Darstellung des Werts dieser Instanz ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zurückgegebene Zeichenfolgenarray die <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> Methode entspricht der Kombination der Zeichenfolgenarrays zurückgegeben, die durch separate Aufrufe der <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> -Methode mit der "d", "D", "f", "F", "g", "G", "m", "o", "R", "s", "t", "T", "u", "U" und "y" standard verwendete Formatzeichenfolgen. Weitere Informationen zu den Standardformatbezeichnern, finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird mit Informationen aus der aktuellen Kultur formatiert. Weitere Informationen zu kulturspezifische Formatierungsinformationen für die aktuelle Kultur, finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Da diese Methode kulturabhängige Daten verwendet wird, sollten Sie nicht davon ausgehen, dass mehrere Aufrufe an die Methode dieselben Daten zurückgeben. Die Daten, die von dieser Methode zurückgegebene können ändern, wenn die aktuelle Kultur ändert, der Benutzer überschreibt einzelne kultureinstellungen oder ein Updates tritt auf, um die Daten des Systems kulturellen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> Methode. Die angegebene Zeichenfolgendarstellung eines Datums mithilfe von alle möglichen Standardformatzeichenfolgen für Datum und Uhrzeit-Formate in des Computers aktuelle Kultur, die in diesem Fall ist der de-de angezeigt.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 Im Beispiel wird die folgende Ausgabe:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">Standardformatzeichenfolgen für Datum und Uhrzeit</param>
        <summary>Konvertiert den Wert dieser Instanz in alle Zeichenfolgendarstellungen, die von den angegebenen Standardformatbezeichnern für Datum und Uhrzeit unterstützt werden.</summary>
        <returns>Ein Array von Zeichenfolgen, in dem jedes Element eine mit dem <paramref name="format" />-Standardformatbezeichner für Datum und Uhrzeit formatierte Darstellung des Werts dieser Instanz ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` Parameter kann einen der Standardformatbezeichner für Datum und Uhrzeit sein. Dazu gehören, d, D, f, F, g, G, M (oder m),-o (oder o), R (oder R), s, t, T, u, U, und Y (oder y). Weitere Informationen finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird mit Informationen aus der aktuellen Kultur formatiert. Weitere Informationen zu kulturspezifische Formatierungsinformationen für die aktuelle Kultur, finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Da diese Methode kulturabhängige Daten verwendet wird, sollten Sie nicht davon ausgehen, dass mehrere Aufrufe an die Methode dieselben Daten zurückgeben. Die Daten, die von dieser Methode zurückgegebene können ändern, wenn die aktuelle Kultur ändert, der Benutzer überschreibt einzelne kultureinstellungen oder ein Updates tritt auf, um die Daten des Systems kulturellen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> Methode. Die angegebene Zeichenfolgendarstellung eines Datums mithilfe der langen Datumsformat Formatbezeichner ("D") für die aktuelle Kultur angezeigt.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> ist kein gültiges Standardzeichen des Formatbezeichners für Datum und Uhrzeit.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das kulturabhängige Formatierungsinformationen über diese Instanz liefert.</param>
        <summary>Konvertiert den Wert dieser Instanz in alle Zeichenfolgendarstellungen, die von den Standardformatbezeichnern für Datum und Uhrzeit und den angegebenen kulturspezifischen Formatierungsinformationen unterstützt werden.</summary>
        <returns>Ein Array von Zeichenfolgen, in dem jedes Element eine mit einem der Standardformatbezeichner für Datum und Uhrzeit formatierte Darstellung des Werts dieser Instanz ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zurückgegebene Zeichenfolgenarray die <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> Methode entspricht der Kombination der Zeichenfolgenarrays zurückgegeben, die durch separate Aufrufe der <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> -Methode mit der "d", "D", "f", "F", "g", "G", "m", "o", "R", "s", "t", "T", "u", "U" und "y" standard verwendete Formatzeichenfolgen. Weitere Informationen zu den Standardformatbezeichnern, finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird formatiert mit kulturspezifische Informationen, die vom `provider`.  
  
> [!IMPORTANT]
>  Da diese Methode kulturabhängige Daten verwendet wird, sollten Sie nicht annehmen, dass mehrere Aufrufe der Methode identische Daten zurückgeben, es sei denn, `provider` ist eine <xref:System.Globalization.CultureInfo> -Objekt, das die invariante Kultur darstellt. Die Daten, die von dieser Methode zurückgegebene können ändern, wenn der Benutzer die einzelnen kultureinstellungen der überschreibt `provider` oder bei ein Updates auf dem System kulturellen Daten für auftreten `provider`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> Methode. Die angegebene Zeichenfolgendarstellung eines Datums mithilfe von allen möglichen standard Datums- und Zeitformate für die Kultur "fr-FR" angezeigt.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 Im Beispiel wird die folgende Ausgabe:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Eine Formatzeichenfolge für Datum und Uhrzeit.</param>
        <param name="provider">Ein Objekt, das kulturabhängige Formatierungsinformationen über diese Instanz liefert.</param>
        <summary>Konvertiert den Wert dieser Instanz in alle Zeichenfolgenentsprechungen, die von dem angegebenen Standardformatbezeichner für Datum und Uhrzeit und den angegebenen kulturspezifischen Formatierungsinformationen unterstützt werden.</summary>
        <returns>Ein Array von Zeichenfolgen, in dem jedes Element eine mit einem der Standardformatbezeichner für Datum und Uhrzeit formatierte Darstellung des Werts dieser Instanz ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Parameter "Format" kann einen der Standardformatbezeichner für Datum und Uhrzeit sein. Dazu gehören, d, D, f, F, g, G, M (oder m),-o (oder o), R (oder R), s, t, T, u, U, und Y (oder y). Weitere Informationen finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird formatiert mit kulturspezifische Informationen, die vom `provider`.  
  
> [!IMPORTANT]
>  Da diese Methode kulturabhängige Daten verwendet wird, sollten Sie nicht annehmen, dass mehrere Aufrufe der Methode identische Daten zurückgeben, es sei denn, `provider` ist eine <xref:System.Globalization.CultureInfo> -Objekt, das die invariante Kultur darstellt. Die Daten, die von dieser Methode zurückgegebene können ändern, wenn der Benutzer die einzelnen kultureinstellungen der überschreibt `provider` oder bei ein Updates auf dem System kulturellen Daten für auftreten `provider`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> Methode. Die Zeichenfolgendarstellung eines Datums mit dem kurzen Datumsformat Formatbezeichner ("d") für die Kultur "fr-FR" angezeigt.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> ist kein gültiges Standardzeichen des Formatbezeichners für Datum und Uhrzeit.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den <see cref="T:System.TypeCode" /> für den Werttyp <see cref="T:System.DateTime" /> zurück.</summary>
        <returns>Die Enumerationskonstante <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Komponente für die Stunden des Datums ab, das durch diese Instanz dargestellt wird.</summary>
        <value>Die Stundenkomponente als Wert zwischen 0 und 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.DateTime.Hour%2A> Eigenschaft wird immer ausgedrückt 24-Stunden-Format. Um eine Zeichenfolge abzurufen, die die Stunde für Datum und Uhrzeit im 12-Stunden-Format darstellt, rufen die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> oder <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> -Methode mit der benutzerdefinierte Formatbezeichner "h". Zum Beispiel:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Hour%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, ob sich diese Instanz von <see cref="T:System.DateTime" /> im Sommerzeitbereich für die aktuelle Zeitzone befindet.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von der <see cref="P:System.DateTime.Kind" />-Eigenschaft <see cref="F:System.DateTimeKind.Local" /> oder <see cref="F:System.DateTimeKind.Unspecified" /> ist und der Wert dieser Instanz von <see cref="T:System.DateTime" /> innerhalb des Sommerzeitbereichs für die lokale Zeitzone liegt. <see langword="false" />, wenn <see cref="P:System.DateTime.Kind" /><see cref="F:System.DateTimeKind.Utc" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bestimmt, ob die aktuelle <xref:System.DateTime> Wert liegt innerhalb des Bereichs der Sommerzeit der lokalen Zeitzone, der zurückgegeben wird, durch die <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> Eigenschaft. Sie können bestimmen, ob es sich bei eine Zeitzone Sommerzeit unterstützt, durch Abrufen des Werts, der die <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> Eigenschaft. Für Zeitzonen, die Sommerzeit, Sie können bestimmen, wann die Umstellung von Sommerzeit und durch Abrufen der <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> von der Standardzeit der Zeitzone zurückgegebene Array <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Wenn die aktuelle <xref:System.DateTime> Wert werden entweder eines mehrdeutigen oder eine ungültige Zeit in die lokale Zeitzone darstellt, der Methodenrückgabe `false`.  
  
 Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die <xref:System.DateTime.IsDaylightSavingTime%2A> Methode erkennt nur die aktuelle Anpassungsregel bestimmen, ob die aktuelle Instanz eine Sommerzeit darstellt. Daher kann meldet die Methode nicht genau, ob die aktuelle Instanz eine Sommerzeit für Zeiträume ist, bevor die aktuelle Anpassungsregel wirksam wurde.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Eine vierstellige Jahresangabe.</param>
        <summary>Gibt eine Angabe darüber zurück, ob das angegebene Jahr ein Schaltjahr ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="year" /> ein Schaltjahr ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` angegeben als 4-stelliges Zahl zur Basis 10 ist. Beispiel: 1996.  
  
 `year` wird immer als ein Jahr im gregorianischen Kalender interpretiert werden. Um zu bestimmen, ob ein bestimmtes Jahr ein Schaltjahr in einem anderen Kalender war, rufen Sie diese Kalenderobjekt `IsLeapYear` Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.IsLeapYear%2A> Methode, um zu bestimmen, welche Jahre 2014 bis 1994 Schaltjahre sind. Das Beispiel veranschaulicht auch das Ergebnis bei der <xref:System.DateTime.AddYears%2A> Methode wird verwendet, um ein Schalttag ein Jahr hinzugefügt.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner als 1 oder größer als 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die durch diese Instanz dargestellte Zeit auf lokaler Zeit, koordinierter Weltzeit (UTC) oder keinem von beiden basiert.</summary>
        <value>Einer der Enumerationswerte, der angibt, welche Zeit von der aktuellen Uhrzeit dargestellt wird. Der Standardwert ist <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Explizit festlegen der <xref:System.DateTime.Kind%2A> -Eigenschaft eines neuen <xref:System.DateTime> Wert auf einen bestimmten <xref:System.DateTimeKind> -Wert durch Aufrufen der <xref:System.DateTime.SpecifyKind%2A> Methode.  
  
 Die <xref:System.DateTime.Kind%2A> Eigenschaft ermöglicht eine <xref:System.DateTime> Wert, der koordinierten Weltzeit (Coordinated Universal Time, UTC) oder der lokalen Zeit eindeutig darstellen. Im Gegensatz dazu die <xref:System.DateTimeOffset> Struktur kann eindeutig jederzeit in eine beliebige Zeitzone als ein einziger Zeitpunkt darstellen, in Zeit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode, um zu veranschaulichen wie das <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den größtmöglichen Wert von <see cref="T:System.DateTime" /> dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten entspricht 23:59:59.9999999 UTC, 31. Dezember 9999 im gregorianischen Kalender, genau eine 100-Nanosekunden-Takt vor dem 1. Januar 10000 00:00:00 UTC.  
  
 Einige Kalender, z. B. die <xref:System.Globalization.ThaiBuddhistCalendar>, unterstützen einen oberen Datumsbereich, die älter als <xref:System.DateTime.MaxValue>. In diesen Fällen versucht, den Zugriff auf <xref:System.DateTime.MaxValue> variablenzuweisungen oder formatieren und Analysieren Vorgänge auslösen kann eine <xref:System.ArgumentOutOfRangeException>. Anstatt das Abrufen des Werts der <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, können Sie den Wert der angegebenen Kultur aktuellen gültigen Datumswert von Abrufen der <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.DateTime> Objekt durch Übergeben des Konstruktors einer <xref:System.Int64> Wert, der eine Anzahl von Ticks darstellt. Im Beispiel wird vor dem Aufrufen des Konstruktors wird sichergestellt, dass dieser Wert größer als oder gleich `DateTime.MinValue.Ticks` und kleiner als oder gleich `DateTime.MaxValue.Ticks`. Wenn nicht, löst eine <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Komponente für die Millisekunden des Datums ab, das durch diese Instanz dargestellt wird.</summary>
        <value>Die Millisekundenkomponente als Wert zwischen 0 und 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können anzeigen, die Zeichenfolgendarstellung der <xref:System.DateTime.Millisecond%2A> Eigenschaft mit dem Formatbezeichner "fff". Der folgende Code zeigt z. B. eine Zeichenfolge, die Anzahl der Millisekunden in einem Datum und Uhrzeit in der Konsole enthält.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Sie können auch die Millisekundenkomponente zusammen mit der anderen Komponenten dieser einen Wert für Datum und Zeit anzeigen, mit der Standardformatbezeichner "o". Zum Beispiel:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Der Formatbezeichner "o" ist jedoch weniger für die Anzeige als für die Roundtrip-Funktion oder das Speichern von vorgesehen eine <xref:System.DateTime> Wert. Sie können auch Millisekunden zusammen mit anderen Datums- und Zeitkomponenten anzeigen, mit der eine benutzerdefinierte Formatzeichenfolge, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Millisecond%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Komponente für die Minuten des Datums ab, das durch diese Instanz dargestellt wird.</summary>
        <value>Die Minutenkomponente als Wert zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Minute%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den kleinstmöglichen Wert von <see cref="T:System.DateTime" /> dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten entspricht 00:00:00.0000000 UTC, 1. Januar 0001, im gregorianischen Kalender.  
  
 <xref:System.DateTime.MinValue> definiert das Datum und Uhrzeit, die zugewiesen ist, ein nicht initialisiertes <xref:System.DateTime> Variable. Dies wird anhand des folgenden Beispiels veranschaulicht.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 Die <xref:System.DateTime.MinValue> und <xref:System.DateTime.MaxValue> Eigenschaften können verwendet werden, um sicherzustellen, dass ein Wert innerhalb des unterstützten Bereichs liegt, vor der Übergabe an eine <xref:System.DateTime> Konstruktor. Der Code im Beispielabschnitt wird diese Verwendung veranschaulicht.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.DateTime> Objekt durch Übergeben des Konstruktors einer <xref:System.Int64> Wert, der eine Anzahl von Ticks darstellt. Im Beispiel wird vor dem Aufrufen des Konstruktors wird sichergestellt, dass dieser Wert größer als oder gleich `DateTime.MinValue.Ticks` und kleiner als oder gleich `DateTime.MaxValue.Ticks`. Wenn nicht, löst eine <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Komponente für den Monat des Datums ab, das durch diese Instanz dargestellt wird.</summary>
        <value>Die Monatskomponente als Wert zwischen 1 und 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Month%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.DateTime" />-Objekt ab, das auf das aktuelle Datum und die aktuelle Zeit auf dem lokalen Rechner als Ortszeit festgelegt ist.</summary>
        <value>Ein Objekt, dessen Wert die aktuelle lokale Datums- und Uhrzeitangabe ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Now%2A> -Eigenschaft gibt eine <xref:System.DateTime> Wert, der das aktuelle Datum und die Uhrzeit auf dem lokalen Computer darstellt. Beachten Sie, dass es ein Unterschied zwischen einer <xref:System.DateTime> Wert, der die Anzahl der Ticks darstellt, die seit Mitternacht des 1. Januar 0001 verstrichen sind und die Zeichenfolgendarstellung dieses <xref:System.DateTime> -Wert, der einen Wert für Datum und Uhrzeit in drückt eine spezifische-kulturspezifischen Format. Informationen für Formatierung Werte für Datum und Uhrzeit finden Sie in der <xref:System.DateTime.ToString%2A> Methode. Das folgende Beispiel zeigt das kurze Datum und Uhrzeit-Zeichenfolge in einer Reihe kulturspezifische Formate.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 Die Auflösung dieser Eigenschaft hängt von den systemtimer, der von dem zugrunde liegenden Betriebssystem abhängig ist. Es ist meist zwischen 0,5 und 15 Millisekunden. Daher wiederholte Aufrufe von der <xref:System.DateTime.Now%2A> Eigenschaft in einem kurzen Zeitintervall, z. B. in einer Schleife kann derselbe Wert zurückgegeben.  
  
 Die <xref:System.DateTime.Now%2A> Eigenschaft wird häufig verwendet, um die Leistung zu messen. Allerdings ist es aufgrund seiner geringen Auflösung ist nicht für die Verwendung als Benchmarktool geeignet. Eine bessere Alternative ist die Verwendung der <xref:System.Diagnostics.Stopwatch> Klasse.  
  
 Ab .NET Framework, Version 2.0 wird der Rückgabewert ist ein <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> -Eigenschaft gibt <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Sie können auch die <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> Eigenschaft, um das aktuelle lokale Datum und die Uhrzeit abzurufen. Sie können eine lokale Uhrzeit eindeutig als ein einziger Zeitpunkt in Zeit ausgedrückt werden also wiederum diese Zeitwert tragbaren Computern bereitgestellt werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Now%2A> und <xref:System.DateTime.UtcNow%2A> Eigenschaften zum Abrufen die aktuelle lokale Datums- und Uhrzeitangabe und der aktuellen universelle koordinierte (UTC), Datum und Uhrzeit. Es werden die Formatierungskonventionen einer Reihe von Kulturen klicken Sie dann zum Anzeigen von der Zeichenfolgen, zusammen mit den Werten der der ihre <xref:System.DateTime.Kind%2A> Eigenschaften.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Der Datums- und Uhrzeitwert, der hinzugefügt werden soll.</param>
        <param name="t">Das hinzuzufügende Zeitintervall.</param>
        <summary>Addiert ein angegebenes Zeitintervall zu einer Datums- und Uhrzeitangabe und gibt eine neue Datums- und Uhrzeitangabe zurück.</summary>
        <returns>Ein Objekt, dessen Wert die Summe der Werte von <paramref name="d" /> und <paramref name="t" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel zeigt die Addition-Operator.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Das erste zu vergleichende Objekt.</param>
        <param name="d2">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob zwei angegebene Instanzen von <see cref="T:System.DateTime" /> gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="d1" /> und <paramref name="d2" /> dasselbe Datum und dieselbe Uhrzeit darstellen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_Equality%2A> Operator bestimmt, ob zwei <xref:System.DateTime> Werte gleich sind, durch die Anzahl der Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel zeigt den Equality-Operator.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Objekt.</param>
        <param name="t2">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob eine angegebene <see cref="T:System.DateTime" /> später als eine andere angegebene <see cref="T:System.DateTime" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="t1" /> später als <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_GreaterThan%2A> Operator bestimmt die Beziehung zwischen zwei <xref:System.DateTime> Werte durch die Anzahl der Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Objekt.</param>
        <param name="t2">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob eine vorliegende <see cref="T:System.DateTime" />-Angabe eine Datums- und Uhrzeitangabe darstellt, die gleichzeitig oder später als eine andere vorliegende <see cref="T:System.DateTime" />-Angabe ist.</summary>
        <returns>
          <see langword="true" /> wenn <paramref name="t1" /> gleich oder später als <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_GreaterThanOrEqual%2A> Operator bestimmt die Beziehung zwischen zwei <xref:System.DateTime> Werte durch die Anzahl der Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Das erste zu vergleichende Objekt.</param>
        <param name="d2">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob zwei angegebene Instanzen von <see cref="T:System.DateTime" /> nicht gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="d1" /> und <paramref name="d2" /> nicht dasselbe Datum und dieselbe Uhrzeit darstellen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_Inequality%2A> Operator bestimmt, ob zwei <xref:System.DateTime> Werte ungleich sind, indem deren Anzahl von Ticks verglichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Objekt.</param>
        <param name="t2">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob eine angegebene <see cref="T:System.DateTime" /> früher als eine andere angegebene <see cref="T:System.DateTime" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="t1" /> früher als <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_LessThan%2A> Operator bestimmt die Beziehung zwischen zwei <xref:System.DateTime> Werte durch die Anzahl der Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Objekt.</param>
        <param name="t2">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob eine vorliegende <see cref="T:System.DateTime" />-Angabe eine Datums- und Uhrzeitangabe darstellt, die gleichzeitig oder früher als eine andere vorliegende <see cref="T:System.DateTime" />-Angabe ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="t1" /> gleich oder früher als <paramref name="t2" /> ist; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_LessThanOrEqual%2A> Operator bestimmt die Beziehung zwischen zwei <xref:System.DateTime> Werte durch die Anzahl der Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrahiert eine angegebene <see cref="T:System.DateTime" /> oder <see cref="T:System.TimeSpan" /> von einer angegebenen <see cref="T:System.DateTime" />.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Der Datums- und Uhrzeitwert, von dem subtrahiert werden soll (der Minuend).</param>
        <param name="d2">Der Datums- und Uhrzeitwert, der subtrahiert werden soll (der Subtrahend).</param>
        <summary>Subtrahiert eine Datums- und Uhrzeitangabe von einer anderen Datums- und Uhrzeitangabe und gibt ein Zeitintervall zurück.</summary>
        <returns>Das Zeitintervall zwischen <paramref name="d1" /> und <paramref name="d2" />, d. h. <paramref name="d1" /> minus <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> Methode berücksichtigt nicht den Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft der beiden <xref:System.DateTime> Werte beim Ausführen der Subtraktion. Vor der Subtraktion <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Andernfalls wird das Ergebnis den Unterschied zwischen Zeitzonen aufgenommen werden.  
  
> [!NOTE]
>  Die <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> Methode den Unterschied zwischen Zeitzonen, die beim Ausführen der Subtraktion.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Subtract%2A> -Methode und der Subtraktionsoperator.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Der Datums- und Uhrzeitwert, von dem subtrahiert werden soll.</param>
        <param name="t">Das Zeitintervall, das subtrahiert werden soll.</param>
        <summary>Subtrahiert ein angegebenes Zeitintervall von einer Datums- und Uhrzeitangabe und gibt eine neue Datums- und Uhrzeitangabe zurück.</summary>
        <returns>Ein Objekt, dessen Wert der Wert von <paramref name="d" /> minus dem Wert von <paramref name="t" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode subtrahiert den Wert für die Teilstriche von `t` aus der Teilstrichwert des `d`.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Subtract%2A> -Methode und der Subtraktionsoperator.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTime" />-Wert ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die entsprechende <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Abschnitt  
  
- [Welche Methode rufe ich?](#Tasks)
- [Die zu analysierende Zeichenfolge](#StringToParse)
- [Analysieren und kulturelle Konventionen](#Culture)
- [Elemente analysieren und formatieren](#Styles)
- [Der Rückgabewert und DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Welche Methode rufe ich?  
  
|Beschreibung|Call|  
|--------|----------|  
|Analysieren Sie eine Datum und Uhrzeit-Zeichenfolge mithilfe der Konventionen der aktuellen Kultur.|<xref:System.DateTime.Parse%28System.String%29>-Überladung|  
|Analysieren Sie eine Datum und Uhrzeit-Zeichenfolge mit den Konventionen einer bestimmten Kultur.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> überladen (siehe [analysieren und kulturelle Konventionen](#Culture))|  
|Analysieren Sie eine Datum und Uhrzeit-Zeichenfolge mit speziellen Stilelemente (z.B. Leerzeichen oder keine Leerzeichen).|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Überladung|  
|Analysieren Sie eine Datum und Uhrzeit-Zeichenfolge, die in einem bestimmten Format sein muss.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> oder <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analysiert eine Zeichenfolge für Datum und Uhrzeit aus, und führen Sie eine Konvertierung in UTC-Zeit oder Ortszeit.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Überladung|  
|Analysieren Sie eine Datum und Uhrzeit-Zeichenfolge ohne Ausnahmebehandlung.|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>-Methode|  
|Stellen Sie wieder her (Roundtrip) ein Datum und Uhrzeit-Wert erstellt, durch einen Formatierungsvorgang.|Übergeben Sie die "o" oder "R" Standardformat-Zeichenfolge, die <xref:System.DateTime.ToString%28System.String%29> -Methode, und rufen die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> -Überladung mit <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analysieren einer Datums- und Uhrzeitzeichenfolge in einem festen Format Computer (und möglicherweise kulturellen) hinweg.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> oder <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> Methode|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>Die zu analysierende Zeichenfolge  
 Die <xref:System.DateTime.Parse%2A> -Methode versucht, die Zeichenfolgendarstellung eines Werts für Datum und Uhrzeit, konvertieren die <xref:System.DateTime> entspricht. Er versucht, die Eingabezeichenfolge vollständig ohne auszulösen Analysieren einer <xref:System.FormatException> Ausnahme.  
  
> [!IMPORTANT]
>  Fällt der Analysevorgang aufgrund einer nicht erkannten Zeichenfolgenformat der <xref:System.DateTime.Parse%2A> -Methode löst eine <xref:System.FormatException>, während die <xref:System.DateTime.TryParse%2A> Methodenrückgabe `false`. Da die Ausnahmebehandlung teuer sein kann, sollten Sie verwenden <xref:System.DateTime.Parse%2A> bei wird der Analysevorgang erfolgreich ist, da die Eingabequelle als vertrauenswürdig eingestuft wird erwartet. <xref:System.DateTime.TryParse%2A> ist vorzuziehen, wenn Fehler bei der Analyse wahrscheinlich sind, insbesondere deshalb, weil eine Eingabequelle nicht vertrauenswürdig ist, oder Sie sinnvolle Standardwerte als Ersatz für Zeichenfolgen, die nicht erfolgreich analysiert haben.   

 Die zu analysierende Zeichenfolge kann eines der folgenden Formen annehmen:  
  
-   Eine Zeichenfolge mit einer Datums- und Zeitangabe.  
  
-   Eine Zeichenfolge mit der ein Datum, aber keine Komponente. Wenn die Komponente nicht vorhanden ist, nimmt die Methode 00:00 Uhr an. Wenn die Datumskomponente auf eine zweistellige Jahresangabe verfügt, wird eine Konvertierung in ein Jahr auf der Grundlage der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> aktueller Kalender der aktuellen Kultur oder der angegebenen Kultur des aktuellen Kalenders (Wenn Sie eine Überladung mit einer nicht-Null verwenden `provider` Argument).  
  
- Eine Zeichenfolge mit einer Datumskomponente, die nur den Monat und Jahr enthält, aber keine Komponente "Tag". Die Methode wird der erste Tag des Monats angenommen.

- Eine Zeichenfolge mit der eine Datumskomponente, die nur den Monat und Tag enthält jedoch keine Komponente "Jahr". Die Methode wird das aktuelle Jahr angenommen.

-   Eine Zeichenfolge mit einer Uhrzeit, aber ohne Datumskomponente. Die Methode wird das aktuelle Datum angenommen, es sei denn, Sie rufen die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> überladen und umfassen <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> in die `styles` -Argument, in dem Fall die Methode geht davon aus einem Datum des 1. Januars 0001.  

- Eine Zeichenfolge mit einer Komponente, die nur die Stunde und einer AM/PM-Kennzeichner, mit ohne Datumskomponente enthält. Die Methode setzt voraus, das aktuelle Datum und eine Uhrzeit mit keine Minuten und ohne Sekunden. Sie können dieses Verhalten ändern, durch den Aufruf der <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> überladen und umfassen <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> in die `styles` -Argument, in dem Fall die Methode geht davon aus einem Datum des 1. Januars 0001.

-   Eine Zeichenfolge, die Zeitzoneninformationen enthält und ISO 8601 entspricht. In den folgenden Beispielen wird die erste Zeichenfolge kennzeichnet den Coordinated Universal Time (UTC), und die zweite bezieht sich auf die Zeit in einer Zeitzone, die sieben Stunden vor UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Eine Zeichenfolge, die den GMT-Bezeichner enthält und das RFC 1123-Zeitformat entspricht; Zum Beispiel:  
  
     "SA, 01. November 2008 19:35:00 GMT"  
  
-   Eine Zeichenfolge, die das Datum und Uhrzeit sowie Zeitzone Offsetinformationen enthält. Zum Beispiel:  
  
     "03/01/2009 05:42:00 Uhr -5:00"  

Im folgenden Beispiel werden Zeichenfolgen in jeder der folgenden Formate mithilfe der Formatierungskonventionen der aktuellen Kultur, die in diesem Fall wird von der Kultur En-US analysiert:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Wenn die Eingabezeichenfolge ein Schalttag in einem Schaltjahr im Kalender ein, die die Methode darstellt (finden Sie unter [analysieren und kulturelle Konventionen](#Culture)), wird die <xref:System.DateTime.Parse%2A> Methode die Zeichenfolge erfolgreich analysiert. Wenn die Eingabezeichenfolge einen Schalttag in einem nicht-Schaltjahr darstellt, löst die Methode eine <xref:System.FormatException>.  
  
 Da die <xref:System.DateTime.Parse%2A> Methode versucht, die Zeichenfolgendarstellung eines Datums zu analysieren und anhand der Regeln zur Formatierung der aktuellen oder einer angegebenen Kultur, die beim Analysieren einer Zeichenfolge in verschiedenen Kulturen kann ein Fehler auftreten. Um ein bestimmtes Datum und Uhrzeit-Format in verschiedenen Gebietsschemas zu analysieren, verwenden Sie eine der Überladungen der <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> Methode, und geben Sie einen Formatbezeichner.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Analysieren und kulturelle Konventionen  
 Alle Überladungen der der <xref:System.DateTime.Parse%2A> Methode sind kulturabhängig, wenn die Zeichenfolge analysiert werden soll (dargestellt durch `s` in der folgenden Tabelle) entspricht dem ISO 8601-Muster. Der Analysevorgang verwendet den Formatierungsinformationen in eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das wie folgt abgeleitet ist:  
  
|Wenn Sie aufrufen|Und `provider` ist|Informationen über die Formatierung wird von abgeleitet.|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|Die aktuelle Threadkultur (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> Eigenschaft)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt|Das angegebene <xref:System.Globalization.DateTimeFormatInfo> Objekt|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|Die aktuelle Threadkultur (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> Eigenschaft)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Ein <xref:System.Globalization.CultureInfo> Objekt|Die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft.|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Benutzerdefinierte <xref:System.IFormatProvider> Implementierung|Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> -Methode|  
  
 Wenn die Informationen zur Formatierung von abgeleitet ist eine <xref:System.Globalization.DateTimeFormatInfo> Objekt der <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> Eigenschaft definiert, den Kalender, die in den Analysevorgang verwendet.  
  
 Wenn Sie mit eine Datums- und Uhrzeitzeichenfolge Analysieren einer <xref:System.Globalization.DateTimeFormatInfo> Objekt mit benutzerdefinierten Einstellungen, die sich von denen einer standardmäßigen Kultur unterscheiden, verwenden Sie die <xref:System.DateTime.ParseExact%2A> -Methode anstelle der <xref:System.DateTime.Parse%2A> Methode, um die Wahrscheinlichkeit für eine erfolgreiche Konvertierung zu verbessern. Eine nicht standardmäßige Datums- und Zeitzeichenfolge möglich komplizierten und schwer zu analysieren. Die <xref:System.DateTime.Parse%2A> Methode versucht, eine Zeichenfolge mit mehrerer impliziter Analysemuster analysieren alle möglicherweise fehlschlagen. Im Gegensatz dazu die <xref:System.DateTime.ParseExact%2A> Methode müssen Sie mindestens eine exakte Analysemuster angeben, die voraussichtlich erfolgreich sein werden. Weitere Informationen finden Sie im Abschnitt "DateTimeFormatInfo und dynamischer Daten" in der <xref:System.Globalization.DateTimeFormatInfo> Thema.  
  
> [!IMPORTANT]
>  Beachten Sie, dass die Formatierungskonventionen für eine bestimmte Kultur dynamisch sind und können jederzeit geändert werden. Dies bedeutet, die angeben, Analyseoperationen, die abhängig von der Formatierungskonventionen der die Standardkultur (aktuellen) oder dass eine <xref:System.IFormatProvider> -Objekt, das eine Kultur als der invarianten Kultur darstellt kann unerwartet fehlschlagen, wenn eine der folgenden auftritt:  
>   
> -   Die kulturspezifische Daten zwischen Haupt- oder Nebenversion von Versionen von .NET Framework oder als Ergebnis ein Update der vorhandenen Version von .NET Framework geändert.  
> -   Die kulturspezifische Daten widerspiegelt, benutzereinstellungen, die von Computer zu Computer oder die Sitzung variieren können.  
> -   Die kulturspezifische Daten darstellt, eine Ersatzkultur, die die Einstellungen der eine Standardkultur oder eine benutzerdefinierte Kultur überschreibt.  
>   
>  Um zu verhindern, dass die schwierigkeiten bei der Analyse von Daten und die Uhrzeit-Zeichenfolgen, die Änderungen in den kulturellen Daten zugeordnet sind, können Sie Zeichenfolgen für Datum und Uhrzeit mit der invarianten Kultur analysieren, oder Sie rufen die <xref:System.DateTime.ParseExact%2A> oder <xref:System.DateTime.TryParseExact%2A> Methode, und geben Sie das genaue Format der zu analysierende Zeichenfolge. Wenn Sie sind serialisieren und Deserialisieren von Datums-und Uhrzeitdaten, Sie die Formatierungskonventionen der invarianten Kultur verwenden können, oder Sie serialisieren und Deserialisieren können die <xref:System.DateTime> Wert in einem binären Format.  
>   
>  Weitere Informationen finden Sie im Abschnitt "dynamische Kulturdaten" in der <xref:System.Globalization.CultureInfo> Thema und die "beibehalten" DateTime "Werte" im Abschnitt der <xref:System.DateTime> Thema.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Elemente analysieren und formatieren  
 Alle <xref:System.DateTime.Parse%2A> Überladungen ignorieren führende, interne und nachfolgende Leerzeichen in der Eingabezeichenfolge (dargestellt durch `s` in der folgenden Tabelle). Datum und Uhrzeit können mit einem Paar aus der führende und nachfolgende Nummernzeichen-Zeichen ("#", U + 0023) gekennzeichnet werden und eingeschlossen werden können, mit einem oder mehreren NULL-Zeichen (U + 0000).  
  
 Darüber hinaus die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Überladung hat eine `styles` Parameter, der eine oder mehrere Member besteht aus den <xref:System.Globalization.DateTimeStyles> Enumeration. Dieser Parameter definiert wie `s` interpretiert werden soll und wie der Analysevorgang konvertieren soll `s` in ein Datum und Uhrzeit. Die folgende Tabelle beschreibt die Auswirkungen der einzelnen <xref:System.Globalization.DateTimeStyles> Element in den Analysevorgang.  
  
|DateTimeStyles-Element|Auswirkungen auf die Konvertierung|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, eine Konvertierung in UTC, wie folgt:<br /><br /> -If `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Zeitzoneninformationen aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> zurückgegebenen konvertieren <xref:System.DateTime> Wert UTC-Zeit, und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-If `s` gibt an, dass es sich um UTC, darstellt oder wenn `s` enthält keine Informationen zur Zeitzone aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal> Flag Methode analysiert die Zeichenfolge, die keine zeitzonenkonvertierung ausführt, für das zurückgegebene <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-In allen anderen Fällen hat das Flag keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Dieser Wert wird ignoriert. Interne Leerzeichen sind immer zulässig, in den Elementen für Datum und Uhrzeit des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Dieser Wert wird ignoriert. Führendes Leerzeichen ist immer zulässig, in den Elementen für Datum und Uhrzeit des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Dieser Wert wird ignoriert. Nachfolgende Leerzeichen ist immer zulässig, in den Elementen für Datum und Uhrzeit des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führenden, inneren und nachgestellte Leerzeichen enthalten kann. Dies ist das Standardverhalten. Es kann nicht überschrieben werden, durch Angeben eines restriktiveren <xref:System.Globalization.DateTimeStyles> Enumerationswert wie z. B. <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` Zeitzoneninformation, lokale Zeit wird davon ausgegangen, dass fehlt. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> Flag vorhanden ist, ist die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` besitzt Informationen zur Zeitzone auf UTC wird angenommen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> Flag vorhanden ist, wird die Methode konvertiert die zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl gültig ist, wird dieser Wert ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung einer Zeichenfolge für Datum und Uhrzeit in eine <xref:System.DateTime> -Wert, der eine lokale Zeit mit der <xref:System.DateTime.Kind%2A> -Eigenschaft auf festgelegt <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. In der Regel wird durch Aufrufen eine solchen Zeichenfolge erstellt die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Methode und mithilfe der Standardformatbezeichner "o", "R" oder "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>Der Rückgabewert und DateTime.Kind

Die `DateTime.Parse` überlädt die Rückgabe einer <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind> Eigenschaft enthält Informationen zur Zeitzone. Es kann darauf hinweisen, dass die Zeit:

- Koordinierte Weltzeit (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- Die Zeit in die lokale Zeitzone (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- Die Zeit in einer unbekannten Zeitzone (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 Im Allgemeinen die <xref:System.DateTime.Parse%2A> Methode gibt eine <xref:System.DateTime> Objekt, dessen <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Allerdings die <xref:System.DateTime.Parse%2A> Methode kann auch zeitzonenkonvertierung durchführen, und legen Sie den Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft unterschiedlich, je nach den Werten der der `s` und `styles` Parameter:  
  
|If|Zeitzonenkonvertierung|Kind-Eigenschaft|  
|--------|--------------------------|-------------------|  
|`s` enthält Informationen zur Zeitzone an.|Das Datum und die Uhrzeit wird auf die Zeit in die lokale Zeitzone konvertiert.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` enthält Informationen, die Zeitzone und `styles` enthält die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> Flag.|Das Datum und die Uhrzeit wird in die koordinierte Weltzeit (UTC) konvertiert.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` Der Kennzeichner des Z oder GMT-Zeitzone enthält und `styles` enthält die <xref:System.Globalization.DateTimeStyles.RoundtripKind> Flag.|Datum und Uhrzeit interpretiert werden als UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 Im folgende Beispiel wird die Datumszeichenfolgen, die auf die Zeit in die lokale Zeitzone Zeitzoneninformationen konvertiert:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Sie können auch beibehalten, den Wert von Datum und Uhrzeit <xref:System.DateTime.Kind%2A> -Eigenschaft während einer Formatierung und Analyse Vorgang unter Verwendung der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag. Im folgende Beispiel wird veranschaulicht, wie die <xref:System.Globalization.DateTimeStyles.RoundtripKind> Flag wirkt sich auf den Analysevorgang auf <xref:System.DateTime> Werte, die in Zeichenfolgen konvertiert werden, indem Sie mit dem Formatbezeichner "o", "R" oder "u".  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Zahlreiche Beispiele, die aufgerufen werden die `DateTime.Parse` Methode in der gesamten vermischt werden die ["Hinweise"](#remarks) Abschnitt dieses Artikels und in der Dokumentation für die einzelnen `DateTime.Parse` Überladungen.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

Sie können auch einen vollständigen Satz von `DateTime.Parse` Beispiele, die im enthalten sind ein [.NET Core 2.0-Projekt für C#-Code](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip) und [.NET Core 2.0-Projekt für Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), aus der [Dotnet / GitHub-beispielrepository](https://github.com/dotnet/samples).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält. Weitere Informationen finden Sie unter [Die zu analysierende Zeichenfolge](#StringToParse).</param>
        <summary>Konvertiert die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe anhand der Konventionen für die aktuelle Threadkultur in die entsprechende <see cref="T:System.DateTime" />.</summary>
        <returns>Ein Objekt, das mit der in <paramref name="s" /> enthaltenen Datums- und Uhrzeitangabe identisch ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Wenn `s` Zeitzoneninformationen, enthält diese Methode gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> und konvertiert die Datums- und Uhrzeitangabe im `s` in die lokale Zeit. Andernfalls führt keine Konvertierung Zeitzone aus und gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Diese Überladung versucht, zu analysieren `s` unter Verwendung der Formatierungskonventionen der aktuellen Kultur. Die aktuelle Kultur wird angegeben, indem die <xref:System.Globalization.CultureInfo.CurrentCulture> Eigenschaft. Um eine Zeichenfolge, die Verwendung der Formatierungskonventionen einer bestimmten Kultur zu analysieren, rufen Sie die <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> oder <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> Überladungen.

Diese Überladung versucht, zu analysieren `s` mit <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> Stil.

## <a name="example"></a>Beispiel

Im folgenden Beispiel analysiert die angegebene Zeichenfolgendarstellung mehrere Datum und Uhrzeit-Werte von:

- Verwenden den Standardanbieter für die Format, bietet das die Formatierungskonventionen der aktuellen Threadkultur des Computers verwendet, um die Beispielausgabe zu erzeugen. Die Ausgabe in diesem Beispiel gibt die Formatierungskonventionen der Kultur En-US.

- Mit dem Standardwert für die Formatvorlage, handelt es sich <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Es behandelt die <xref:System.FormatException> Ausnahme wird ausgelöst, wenn die Methode versucht, die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung von anderen Kultur analysiert die Formatierungskonventionen. Es wird gezeigt, wie erfolgreich einen Datum und Uhrzeit-Wert analysiert werden, der nicht die Formatierungskonventionen der aktuellen Threadkultur verwendet.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält. Weitere Informationen finden Sie unter [Die zu analysierende Zeichenfolge](#StringToParse).</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <c>s</c> bereitstellt.  Siehe [Analysieren und kulturelle Konventionen](#Culture)</param>
        <summary>Konvertiert die Zeichenfolgendarstellungen einer Datums- und Uhrzeitangabe unter Verwendung der kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.DateTime" />.</summary>
        <returns>Ein Objekt, das der in <paramref name="s" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="provider" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Wenn `s` Zeitzoneninformationen, enthält diese Methode gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> und konvertiert die Datums- und Uhrzeitangabe im `s` in die lokale Zeit. Andernfalls führt keine Konvertierung Zeitzone aus und gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Diese Überladung versucht, zu analysieren `s` mithilfe der <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> Stil.

## <a name="example"></a>Beispiel

Im folgende Beispiel werden ein Array von Zeichenfolgen mithilfe der Konventionen von der En-US, fr-FR und de-DE Kulturen analysiert. Es zeigt, dass die zeichenfolgendarstellungen für ein einzelnes Datum in verschiedenen Kulturen unterschiedlich interpretiert werden können.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält. Weitere Informationen finden Sie unter [Die zu analysierende Zeichenfolge](#StringToParse).</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <c>s</c> bereitstellt.  Siehe [Analysieren und kulturelle Konventionen](#Culture)</param>
        <param name="styles">Eine bitweise Kombination der Enumerationswerte, die die Stilelemente angibt, die in <c>s</c> vorhanden sein können, sodass der Analysevorgang erfolgreich abgeschlossen werden kann. Zudem wird festgelegt, wie das analysierte Datum in Bezug auf die aktuelle Zeitzone oder das aktuelle Datum interpretiert werden soll. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der kulturspezifischen Formatierungsinformationen und eines Formatierungsstil in die entsprechende <see cref="T:System.DateTime" />.</summary>
        <returns>Ein Objekt, das der in <paramref name="s" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="provider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Diese methodenüberladung konvertiert, das Datum und Uhrzeit im `s` und legt die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Wert wie folgt:

|If |Zeitzonenkonvertierung|Kind-Eigenschaft|   
|-----|-----|-----|  
|`s` enthält keine Zeitzoneninformationen.|Keine|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` enthält Informationen zur Zeitzone an.|Um die Zeit in die lokale Zeitzone|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` enthält Informationen, die Zeitzone und "Styles enthält die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag.|Um ausdrückt UTC (Coordinated Time)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` Der Kennzeichner des Z oder GMT-Zeitzone enthält und `styles` enthält die <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|Keine|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Beispiel

Das folgende Beispiel zeigt die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Methode und zeigt den Wert der <xref:System.DateTime.Kind%2A> -Eigenschaft des resultierenden <xref:System.DateTime> Werte.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> enthält eine ungültige Kombination von <see cref="T:System.Globalization.DateTimeStyles" />-Werten. Beispielsweise sowohl <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> als auch <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">Gewusst wie: Roundtrip-Datums- und -Uhrzeitwerte</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die <see cref="T:System.DateTime" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss einem bestimmten Format genau entsprechen. Andernfalls wird eine Ausnahme ausgelöst.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erforderliche Format von <c>s</c> definiert. Weitere Informationen finden Sie im Abschnitt "Hinweise".</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <c>s</c> bereitstellt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung des angegebenen Formats und der angegebenen kulturabhängigen Formatierungsinformationen in die entsprechende <see cref="T:System.DateTime" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Objekt, das der in <paramref name="s" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="format" /> und <paramref name="provider" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der das Format von definiert sein muss die `format` Parameter. Sie erfordert außerdem, dass die \<Datum > und \<Zeit > der Zeichenfolgendarstellung einer Datums-und Uhrzeitangabe in der vom angegebenen Reihenfolge angezeigt `format`, und dass `s` haben keine Leerstellen als einfache von erlaubten`format`. Wenn `format` definiert ein Datum mit kein Zeitelement und die Analyse erfolgreich ist, die resultierende <xref:System.DateTime> Wert hat eine Zeit von Mitternacht (00: 00:00). Wenn `format` definiert eine Uhrzeit mit Datumselement und die Analyse erfolgreich ist, die resultierende <xref:System.DateTime> Wert hat ein `DateTime.Now.Date`.  
  
 Wenn `s` nicht darstellen, die eine Uhrzeit in einer bestimmten Zeitzone und der Analysevorgang erfolgreich ist, wird die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn `s` stellt die Zeit in einer bestimmten Zeitzone dar und `format` Zeitzoneninformationen vorhanden sein können (z. B. wenn `format` entspricht der "o", "R" oder der Standardformatbezeichner "u", oder wenn sie das "Z", "Zz" und "Zzz" enthält. benutzerdefinierte Formatbezeichner), die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 Die `format` Parameter ist eine Zeichenfolge, enthält entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `s`. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oder [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Wenn `format` ist ein benutzerdefiniertes Formatmuster, die keine Datums- oder Uhrzeitwert Trennzeichen (z. B. "YyyyMMddHHmm") enthalten, für die invariante Kultur verwenden die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Formatmuster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
 Die und Zeit-Symbole und Zeichenfolgen für Datum (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) in verwendet `s` werden definiert, indem die `provider` Parameter, ebenso wie das genaue Format der `s` Wenn `format` ist ein Standardformat Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur, die zum Interpretieren von darstellt `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode gibt entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ParseExact%2A> Methode.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> oder <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> oder <paramref name="format" /> ist eine leere Zeichenfolge.  
  
- oder -  
 <paramref name="s" /> enthält keine Datum/Uhrzeit-Angabe, die dem im <paramref name="format" /> angegebenen Muster entspricht.  
  
- oder -  
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="s" /> stimmen nicht überein.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erforderliche Format von <c>s</c> definiert. Weitere Informationen finden Sie im Abschnitt "Hinweise".</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <c>s</c> bereitstellt.</param>
        <param name="style">Eine bitweise Kombination der Enumerationswerte, die zusätzliche Informationen über <c>s</c>, über möglicherweise in <c>s</c> vorhandene Stilelemente oder über die Konvertierung von<c>s</c> in einen <see cref="T:System.DateTime" />-Wert bereitstellt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in die entsprechende <see cref="T:System.DateTime" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen. Andernfalls wird eine Ausnahme ausgelöst.</summary>
        <returns>Ein Objekt, das der in <paramref name="s" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="format" />, <paramref name="provider" /> und <paramref name="style" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der in einem Format, das durch definiert sein muss die `format` Parameter. Sie erfordert außerdem, dass die Datums- und Uhrzeitelemente in `s` werden in der Reihenfolge gemäß `format`. Wenn `s` entspricht nicht das Muster der `format` -Parameter mit allen Varianten von definiert die `style` Parameter, löst die Methode eine <xref:System.FormatException>. Im Gegensatz dazu die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums in einem der Formate von des Formatanbieters erkannten <xref:System.Globalization.DateTimeFormatInfo> Objekt. Die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode berücksichtigt auch die Datums- und Uhrzeitelemente in `s` in beliebiger Reihenfolge angezeigt werden.  
  
 Wenn die `s` -Parameter enthält nur eine Uhrzeit aus, und kein Datum, an das aktuelle Datum verwendet wird, wenn die `style` Parameter enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> kennzeichnen, in diesem Fall das Standarddatum (`DateTime.Date.MinValue`) verwendet wird. Wenn die `s` -Parameter enthält nur ein Datum und keine Uhrzeit, Mitternacht (00: 00:00) verwendet wird. Die `style` Parameter auch bestimmt, ob die `s` Parameter kann die führende, innere oder nachgestellten Leerzeichen enthalten.  
  
 Wenn `s` keine Zeitzoneninformationen enthält die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> gekennzeichnet wird, gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` Zeitzoneninformationen, enthält die Zeit wird in Ortszeit, konvertiert, falls erforderlich, und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag Coordinated Universal Time (UTC) nicht in die lokale Zeit konvertieren und Festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Die `format` Parameter definiert das erforderliche Muster von den `s` Parameter. Sie können aus einem oder mehreren benutzerdefinierten Formatbezeichnern aus bestehen die [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) Tabelle oder einen einzelnen standardbuild-Formatbezeichner, der ein vordefinierten Muster bezeichnet die [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) Tabelle.  
  
 Wenn Sie nicht in ein benutzerdefiniertes Formatmuster Datums- oder Uhrzeitwert Trennzeichen verwenden, verwenden Sie die invariante Kultur für die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Muster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
> [!NOTE]
>  Statt, muss `s` entsprechen, die in ein einzelnes Format, damit der Analysevorgang erfolgreich ist, rufen Sie die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode, und geben Sie mehrere zulässige Formate. Dadurch wird den größere Erfolgsaussichten Analysevorgang.  
  
 Die `styles` Parameter enthält einen oder mehrere Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration, die bestimmen, ob und wo Leerzeichen nicht definiert `format` in angezeigt werden können `s` sowie steuern, das genaue Verhalten des Analysevorgangs. In der folgende Tabelle wird beschrieben, wie die einzelnen Member der <xref:System.Globalization.DateTimeStyles> Enumeration wirkt sich auf den Betrieb der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Methode.  
  
|DateTimeStyles-Element|Beschreibung |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, eine Konvertierung in UTC. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Zeitzoneninformationen aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> zurückgegebenen konvertieren <xref:System.DateTime> Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC, darstellt oder wenn `s` enthält keine Informationen zur Zeitzone aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, die keine zeitzonenkonvertierung ausführt, für das zurückgegebene <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen hat das Flag keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass Leerraum nicht vom definiert `format` können zwischen den einzelnen Datums- oder Zeitelement angezeigt werden.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerraum nicht vom definiert `format` stehen am Anfang des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerraum nicht vom definiert `format` können angezeigt werden, am Ende der `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` darf führenden, inneren und nachfolgende Leerstellen, die nicht vom definiert `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um eine lokale Zeit darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, ist die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um die UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die Methode konvertiert die zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` enthält Zeit ohne Datumsinformationen, das Datum des Rückgabewerts festgelegt ist, um `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Die `s` Parameter wird unter Verwendung von Standardwerten analysiert. Keine Leerstellen als einfache, vorhanden im `format` ist zulässig. Wenn `s` eine Datumskomponente, das Datum des zurückgegebenen <xref:System.DateTime> Wert auf 1/1/0001 festgelegt wird. Wenn `s` keine Zeitzoneninformationen enthält die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn Informationen zur Zeitzone in vorhanden ist `s`, die Uhrzeit wird in die Ortszeit konvertiert und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung in einen <xref:System.DateTime> Wert von Datum und die Uhrzeit mit der <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Flag wird in erster Linie verhindert, dass die Konvertierung der UTC-Zeit, die lokalen Zeiten.|  
  
 Die und Zeit-Symbole und Zeichenfolgen für Datum (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) in verwendet `s` werden definiert, indem die `provider` Parameter, ebenso wie das genaue Format der `s` Wenn `format` ist ein Standardformat Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur, die zum Interpretieren von darstellt `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode gibt entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode. Beachten Sie, dass die Zeichenfolge "5/01/2009 8:30 Uhr" nicht erfolgreich analysiert werden bei der `styles` entspricht <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> da Leerzeichen nicht zulässig sind `format`. Darüber hinaus die Zeichenfolge "5/01/2009 09:00 Uhr" nicht erfolgreich analysiert werden, mit einer `format` von "MM/TT/Yyyyhh:mm", da die nicht die Zahl mit führender Null an, für den Monat als Datumszeichenfolge `format` erfordert.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> oder <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> oder <paramref name="format" /> ist eine leere Zeichenfolge.  
  
- oder -  
 <paramref name="s" /> enthält keine Datum/Uhrzeit-Angabe, die dem im <paramref name="format" /> angegebenen Muster entspricht.  
  
- oder -  
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="s" /> stimmen nicht überein.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> enthält eine ungültige Kombination von <see cref="T:System.Globalization.DateTimeStyles" />-Werten. Beispielsweise sowohl <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> als auch <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formats">Ein Array mit den zulässigen Formaten von <c>s</c>. Weitere Informationen finden Sie im Abschnitt "Hinweise".</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <c>s</c> bereitstellt.</param>
        <param name="style">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <c>s</c> angibt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung des angegebenen Formatarrays, der kulturspezifischen Formatierungsinformationen und des Stils in die <see cref="T:System.DateTime" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss mindestens einem der angegebenen Formate genau entsprechen. Andernfalls wird eine Ausnahme ausgelöst.</summary>
        <returns>Ein Objekt, das der in <paramref name="s" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="formats" />, <paramref name="provider" /> und <paramref name="style" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der eine der zugewiesenen Muster entspricht der `formats` Parameter. Wenn die Zeichenfolge `s` entspricht nicht eines dieser Muster, mit der Varianten von definiert die `styles` Parameter, löst die Methode eine <xref:System.FormatException>. Abgesehen von Vergleichen `s` mit mehreren Formatierungsmustern, statt auf einem einzelnen Formatierungsmuster, diese Überladung verhält sich genauso wie die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode.  
  
 Die `s` Parameter enthält das Datum und Uhrzeit, zu analysieren. Wenn die `s` -Parameter enthält nur eine Uhrzeit aus, und kein Datum, an das aktuelle Datum verwendet wird, wenn die `style` Parameter enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> kennzeichnen, in diesem Fall das Standarddatum (`DateTime.Date.MinValue`) verwendet wird. Wenn die `s` -Parameter enthält nur ein Datum und keine Uhrzeit, Mitternacht (00: 00:00) verwendet wird. Die `style` Parameter auch bestimmt, ob die `s` Parameter kann führende enthalten, auch andere als die nicht den von der die Formatzeichenfolgen im inneren oder nachstehende Leerzeichen Zeichen `formats`.  
  
 Wenn `s` keine Zeitzoneninformationen enthält die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> gekennzeichnet wird, gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` Zeitzoneninformationen, enthält die Zeit wird in Ortszeit, konvertiert, falls erforderlich, und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag nicht Coordinated Universal Time (UTC) in eine lokale Zeit konvertieren und Festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Die `formats` -Parameter enthält ein Array von Mustern verwenden, von denen `s` übereinstimmen, genau, wenn der Analysevorgang erfolgreich ist. Die Muster in den `formats` -Parameter besteht aus einem oder mehreren benutzerdefinierten Formatbezeichnern aus der [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) Tabelle oder einen einzelnen standardbuild-Formatbezeichner, der ein vordefinierten Muster bezeichnet die [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) Tabelle.  
  
 Wenn Sie nicht in ein benutzerdefiniertes Formatmuster Datums- oder Uhrzeitwert Trennzeichen verwenden, verwenden Sie die invariante Kultur für die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Muster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
 Die `styles` Parameter enthält einen oder mehrere Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration, die bestimmen, ob und wo Leerzeichen nicht definiert `format` in angezeigt werden können `s` sowie steuern, das genaue Verhalten des Analysevorgangs. In der folgende Tabelle wird beschrieben, wie die einzelnen Member der <xref:System.Globalization.DateTimeStyles> Enumeration wirkt sich auf den Betrieb der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Methode.  
  
|DateTimeStyles-Element|Beschreibung |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, eine Konvertierung in UTC. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Zeitzoneninformationen aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> zurückgegebenen konvertieren <xref:System.DateTime> Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC, darstellt oder wenn `s` enthält keine Informationen zur Zeitzone aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, die keine zeitzonenkonvertierung ausführt, für das zurückgegebene <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen hat das Flag keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass Leerraum nicht vom definiert `format` können zwischen den einzelnen Datums- oder Zeitelement angezeigt werden.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerraum nicht vom definiert `format` stehen am Anfang des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerraum nicht vom definiert `format` können angezeigt werden, am Ende der `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` darf führenden, inneren und nachfolgende Leerstellen, die nicht vom definiert `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um eine lokale Zeit darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, ist die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um die UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die Methode konvertiert die zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` enthält Zeit ohne Datumsinformationen, das Datum des Rückgabewerts festgelegt ist, um `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Die `s` Parameter wird unter Verwendung von Standardwerten analysiert. Keine Leerstellen als einfache, vorhanden im `format` ist zulässig. Wenn `s` eine Datumskomponente, das Datum des zurückgegebenen <xref:System.DateTime> Wert auf 1/1/0001 festgelegt wird. Wenn `s` keine Zeitzoneninformationen enthält die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn Informationen zur Zeitzone in vorhanden ist `s`, die Uhrzeit wird in die Ortszeit konvertiert und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung in ein Datum und Zeit mit seiner <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Flag wird in erster Linie verhindert, dass die Konvertierung der UTC-Zeit, die lokalen Zeiten.|  
  
 Die und Zeit-Symbole und Zeichenfolgen für Datum (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) in verwendet `s` werden definiert, indem die `provider` Parameter, ebenso wie das genaue Format der `s` Wenn `format` ist ein Standardformat Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur, die zum Interpretieren von darstellt `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode gibt entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode, um sicherzustellen, dass eine Zeichenfolge in eine Anzahl von möglichen Formate erfolgreich analysiert werden kann.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> oder <paramref name="formats" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> ist eine leere Zeichenfolge.  
  
- oder -  
Ein Element von <paramref name="formats" /> ist eine leere Zeichenfolge.  
  
- oder -  
 <paramref name="s" /> enthält keine Datum/Uhrzeit-Angabe, die einem Element von <paramref name="formats" /> entspricht.  
  
- oder -  
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="s" /> stimmen nicht überein.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> enthält eine ungültige Kombination von <see cref="T:System.Globalization.DateTimeStyles" />-Werten. Beispielsweise sowohl <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> als auch <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Komponente für die Sekunden des Datums ab, das durch diese Instanz dargestellt wird.</summary>
        <value>Die Sekundenkomponente als Wert zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Second%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">Ein Datum und eine Uhrzeit.</param>
        <param name="kind">Einer der Enumerationswerte, der angibt, ob das neue Objekt Ortszeit, UTC oder keines von beiden darstellt.</param>
        <summary>Erstellt ein neues <see cref="T:System.DateTime" />-Objekt, das über die gleiche Anzahl von Ticks wie die angegebene <see cref="T:System.DateTime" /> verfügt, aber entsprechend dem <see cref="T:System.DateTimeKind" />-Wert in Ortszeit, koordinierter Weltzeit (Coordinated Universal Time, UTC) oder keinem von beiden angegeben ist.</summary>
        <returns>Ein neues Objekt, das über die gleiche Anzahl von Ticks verfügt wie das Objekt, das durch den <paramref name="value" />-Parameter und den durch den <see cref="T:System.DateTimeKind" />-Parameter angegebenen <paramref name="kind" />-Wert dargestellt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.DateTime> Objekt besteht aus einem Kind-Feld, der angibt, ob der Zeitwert in Ortszeit, koordinierter Weltzeit (UTC) oder keines von beiden basiert, und einem Ticks-Feld, das Time-Werten enthält, in 100-Nanosekunden-Ticks gemessen. Die <xref:System.DateTime.SpecifyKind%2A> Methode erstellt ein neues <xref:System.DateTime> -Objekt mit dem angegebenen `kind` Parameter und der ursprüngliche Uhrzeitwert.  
  
> [!IMPORTANT]
>  Das zurückgegebene <xref:System.DateTime> Wert nicht die gleiche darstellen instant wie die `value` -Parameter und <xref:System.DateTime.SpecifyKind%2A> ist keine Methode zum Konvertieren von einer Zeitzone. Stattdessen den festgelegten Zeitpunkt überlässt das `value` nicht geändert, und legt die <xref:System.DateTime.Kind%2A> Eigenschaft `kind`. Weitere Informationen zu zeitzonenkonvertierungen, finden Sie unter [Konvertieren von Uhrzeiten zwischen Zeitzonen](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 Die <xref:System.DateTime.SpecifyKind%2A> Methode ist nützlich in Interoperabilitätsszenarien von Bedeutung, in dem Sie empfangen, eine <xref:System.DateTime> Objekt mit einem nicht definierten Typ-Feld, aber Sie können bestimmen, indem unabhängige bedeutet, dass das Feld Ticks Ortszeit oder UTC darstellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode, um zu veranschaulichen wie das <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">COM-Interoperabilität in .NET Framework-Anwendungen (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrahiert die angegebene Zeit oder Dauer von dieser Instanz.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Der Datums- und Uhrzeitwert, der subtrahiert werden soll.</param>
        <summary>Subtrahiert die angegebene Datums- und Uhrzeitangabe von dieser Instanz.</summary>
        <returns>Ein Zeitintervall, das der von dieser Instanz dargestellten Datums- und Uhrzeitangabe minus der durch <paramref name="value" /> dargestellten Datums- und Uhrzeitangabe entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Subtract%28System.DateTime%29> Methode bestimmt die Differenz zwischen zwei Datumsangaben. Um einem Zeitintervall aus der aktuellen Instanz subtrahiert werden soll, rufen Sie die <xref:System.DateTime.Subtract%28System.TimeSpan%29> Methode. Um ein bestimmtes Zeitintervall aus der aktuellen Instanz subtrahiert werden soll, rufen Sie die Methode, die dieses Zeitintervall auf das aktuelle Datum addiert, und geben Sie einen negativen Wert als Methodenargument. Beispielsweise um zwei Monaten ab dem aktuellen Datum subtrahiert werden soll, rufen Sie die <xref:System.DateTime.AddMonths%28System.Int32%29> Methode mit dem Wert-2.  
  
 Wenn das Datum und die Uhrzeit der aktuellen Instanz liegt vor `value`, gibt die Methode eine <xref:System.TimeSpan> -Objekt, eine negative Zeitspanne darstellt. D. h. den Wert aller Eigenschaften ungleich Null (z. B. <xref:System.TimeSpan.Days%2A> oder <xref:System.TimeSpan.Ticks%2A>) ist ein negativer Wert.  
  
 Die <xref:System.DateTime.Subtract%28System.DateTime%29> Methode berücksichtigt nicht den Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft der beiden <xref:System.DateTime> Werte beim Ausführen der Subtraktion. Vor der Subtraktion <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Andernfalls wird das Ergebnis den Unterschied zwischen Zeitzonen aufgenommen werden.  
  
> [!NOTE]
>  Die <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> Methode den Unterschied zwischen Zeitzonen, die beim Ausführen der Subtraktion.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Subtract%2A> -Methode und der Subtraktionsoperator.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Das Ergebnis ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Das Zeitintervall, das subtrahiert werden soll.</param>
        <summary>Subtrahiert die angegebene Dauer von dieser Instanz.</summary>
        <returns>Ein Objekt, das der von dieser Instanz dargestellten Datums- und Uhrzeitangabe minus dem durch <paramref name="value" /> dargestellten Zeitintervall entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Subtract%28System.TimeSpan%29> Methode gibt das Datum, das angegebene Intervall Zeitdifferenz zwischen diesem aus der aktuellen Instanz zurück. Um das Zeitintervall zwischen zwei Datumsangaben, die zu ermitteln, rufen die <xref:System.DateTime.Subtract%28System.DateTime%29> Methode. Um ein bestimmtes Zeitintervall aus der aktuellen Instanz subtrahiert werden soll, rufen Sie die Methode, die dieses Zeitintervall auf das aktuelle Datum addiert, und geben Sie einen negativen Wert als Methodenargument. Beispielsweise um zwei Monaten ab dem aktuellen Datum subtrahiert werden soll, rufen Sie die <xref:System.DateTime.AddMonths%28System.Int32%29> Methode mit dem Wert-2.  
  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , deren Wert ist das Ergebnis dieses Vorgangs.  
  
 Normalerweise die <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Methode subtrahiert einen <xref:System.TimeSpan> Objekt, das eine positive Zeitspanne darstellt, und gibt, eine <xref:System.DateTime> -Wert, der älter als das Datum und die Uhrzeit der aktuellen Instanz ist. Jedoch wenn die <xref:System.TimeSpan> Objekt darstellt, eine negative Zeitspanne, die <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Methode gibt eine <xref:System.DateTime> -Wert, der älter ist als das Datum und die Uhrzeit der aktuellen Instanz.  
  
 Die <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Methode können Sie ein Zeitintervall subtrahiert werden soll, die aus mehr als eine Einheit der Zeit, z. B. (einer bestimmten Anzahl von Stunden) und eine angegebene Anzahl von Minuten besteht. Subtrahiert eine Einheit (z. B. Jahre, Monate oder Tage) aus der <xref:System.DateTime> Instanz, Sie können einen negativen numerischen Wert als Parameter an übergeben einer der folgenden Methoden:  
  
-   <xref:System.DateTime.AddYears%2A>, um eine bestimmte Anzahl von Jahren, aus der aktuellen Instanz von Datums- / subtrahieren.  
  
-   <xref:System.DateTime.AddMonths%2A>, um eine bestimmte Anzahl von Monaten ab der aktuellen Instanz von Datums- und Uhrzeitwert zu subtrahieren.  
  
-   <xref:System.DateTime.AddDays%2A>, um eine bestimmte Anzahl von Tagen aus der aktuellen Instanz von Datums- und Uhrzeitwert zu subtrahieren.  
  
-   <xref:System.DateTime.AddHours%2A>, um eine bestimmte Anzahl von Stunden von der aktuellen Instanz von Datums- und Uhrzeitwert zu subtrahieren.  
  
-   <xref:System.DateTime.AddMinutes%2A>, um eine bestimmte Anzahl von Minuten zwischen der aktuellen Instanz von Datums- / subtrahieren.  
  
-   <xref:System.DateTime.AddSeconds%2A>, um eine bestimmte Anzahl von Sekunden, die von der aktuellen Instanz von Datums- und Uhrzeitwert zu subtrahieren.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, um eine bestimmte Anzahl von Millisekunden, die von der aktuellen Instanz von Datums- und Uhrzeitwert zu subtrahieren.  
  
-   <xref:System.DateTime.AddTicks%2A>, um eine bestimmte Anzahl von Ticks, die von der aktuellen Instanz von Datums- und Uhrzeitwert zu subtrahieren.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Subtract%2A> -Methode und der Subtraktionsoperator.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Das Ergebnis ist kleiner als <see cref="F:System.DateTime.MinValue" /> oder größer als <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Gibt das aktuelle <see cref="T:System.DateTime" />-Objekt zurück.</summary>
        <returns>Das aktuelle Objekt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">Der gewünschte Typ.</param>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Konvertiert das aktuelle <see cref="T:System.DateTime" />-Objekt in ein Objekt vom angegebenen Typ.</summary>
        <returns>Ein Objekt von dem durch den <paramref name="type" />-Parameter angegebenen Typ und mit einem Wert, der dem aktuellen <see cref="T:System.DateTime" />-Objekt entspricht.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Diese Konvertierung wird für den <see cref="T:System.DateTime" />-Typ nicht unterstützt.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das die <see cref="T:System.IFormatProvider" />-Schnittstelle implementiert. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Diese Konvertierung wird nicht unterstützt. Bei dem Versuch der Verwendung dieser Methode wird eine <see cref="T:System.InvalidCastException" /> ausgelöst.</summary>
        <returns>Der Rückgabewert für diesen Member wird nicht verwendet.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In allen Fällen.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Das mit Daten zu füllende Objekt.</param>
        <param name="context">Das Ziel dieser Serialisierung. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
        <summary>Füllt ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den für das Serialisieren des aktuellen <see cref="T:System.DateTime" />-Objekts erforderlichen Daten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode füllt den `info` Parameter mit dem <xref:System.DateTime.Ticks%2A> und <xref:System.DateTime.Kind%2A> Eigenschaftswerte.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> ist <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Ticks ab, die Datum und Uhrzeit dieser Instanz darstellen.</summary>
        <value>Die Anzahl der Ticks, die Datum und Uhrzeit dieser Instanz darstellen. Der Wert liegt zwischen <see langword="DateTime.MinValue.Ticks" /> und <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein einzelnen Teilstrich stellt 100 Nanosekunden oder ein zehnmillionstel einer Sekunde dar. 10.000 Teilstriche in einer Millisekunde oder 10 Millionen Ticks pro Sekunde sind vorhanden.  
  
 Der Wert dieser Eigenschaft darstellt, die Anzahl der 100-Nanosekunden-Intervalle, die seit 12:00:00 Mitternacht, 1. Januar 0001 verstrichen sind (0: 00:00 UTC am 1. Januar 0001, im gregorianischen Kalender), die darstellt, <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Es umfasst nicht die Anzahl der Ticks, die auf Sekunden leap zurückzuführen sind.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Ticks%2A> -Eigenschaft die Anzahl der Ticks, die seit dem Beginn im 21. Jahrhundert, vergangen sind, angezeigt und zum Instanziieren einer <xref:System.TimeSpan> Objekt. Die <xref:System.TimeSpan> Objekt wird dann verwendet, um die verstrichene Zeit, die mithilfe verschiedener anderer Zeitintervalle anzuzeigen.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Uhrzeit für diese Instanz ab.</summary>
        <value>Ein Zeitintervall, das den seit Mitternacht vergangenen Teil des Tages darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Gegensatz zu den <xref:System.DateTime.Date%2A> Eigenschaft. Gibt eine <xref:System.DateTime> -Wert, der ein Datum ohne die Zeitkomponente darstellt der <xref:System.DateTime.TimeOfDay%2A> -Eigenschaft gibt eine <xref:System.TimeSpan> Wert, der darstellt eine <xref:System.DateTime> Uhrzeitkomponente des Werts.  
  
 Wenn Sie die Uhrzeit anzuzeigen oder die Zeichenfolgendarstellung der Tageszeit abrufen möchten eine <xref:System.DateTime> Wert können Sie stattdessen eine Überladung aufrufen der <xref:System.DateTime.ToString%2A> Methode mit einer `format` Parameter, oder Verwenden der [kombinierte Formatierung ](~/docs/standard/base-types/composite-formatting.md) Feature, mit dem "t" oder "T" Standardformatzeichenfolge.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den Wert des der <xref:System.DateTime.TimeOfDay%2A> -Eigenschaft für ein Array von <xref:System.DateTime> Werte. Im Gegensatz dazu auch des zurückgegebenen Wert mit der Zeichenfolge, die von der standardmäßigen Formatzeichenfolge "t" in einem zusammengesetzten Formatierungsvorgang zurückgegeben.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serialisiert das aktuelle <see cref="T:System.DateTime" />-Objekt in einen 64-Bit-Binärwert, der dann zum erneuten Erstellen des <see cref="T:System.DateTime" />-Objekts verwendet werden kann.</summary>
        <returns>Eine 64-Bit-Ganzzahl mit Vorzeichen, die die Eigenschaften <see cref="P:System.DateTime.Kind" /> und <see cref="P:System.DateTime.Ticks" /> codiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.DateTime.ToBinary%2A> Methode zum Konvertieren des Werts des aktuellen <xref:System.DateTime> Objekt in einen Binärwert. Anschließend verwenden Sie den binären Wert und die <xref:System.DateTime.FromBinary%2A> -Methode zum Neuerstellen des ursprünglichen <xref:System.DateTime> Objekt.  
  
> [!IMPORTANT]
>  In einigen Fällen die <xref:System.DateTime> von zurückgegebene Wert die <xref:System.DateTime.FromBinary%2A> Methode ist nicht mit dem Original identisch <xref:System.DateTime> für bereitgestellte Wert der <xref:System.DateTime.ToBinary%2A> Methode. Weitere Informationen finden Sie im nächsten Abschnitt, "Ortszeit Anpassung".  
  
## <a name="local-time-adjustment"></a>Anpassung der lokalen  
 Eine Ortszeit, die eine koordinierte Weltzeit, die an die lokale Zeitzone angepasst ist, wird durch dargestellt eine <xref:System.DateTime> Struktur, deren <xref:System.DateTime.Kind%2A> Eigenschaft hat den Wert <xref:System.DateTimeKind.Local>. Beim Wiederherstellen von einer lokales <xref:System.DateTime> Wert aus der binären Darstellung, die von erzeugt wird die <xref:System.DateTime.ToBinary%2A> -Methode, die <xref:System.DateTime.FromBinary%2A> Methode kann den neu erstellten Wert so anpassen, dass es nicht auf den ursprünglichen Wert gleich ist. Dieser Fall kann unter den folgenden Bedingungen eintreten:  
  
-   Wenn eine lokale <xref:System.DateTime> Objekt wird serialisiert in einer Zeitzone von der <xref:System.DateTime.ToBinary%2A> -Methode, und klicken Sie dann in einer anderen Zeitzone durch deserialisiert die <xref:System.DateTime.FromBinary%2A> -Methode, die lokale Zeit dargestellt, die durch das resultierende <xref:System.DateTime> Objekt wird automatisch angepasst. um die zweite Zeitzone.  
  
     Betrachten Sie beispielsweise eine <xref:System.DateTime> -Objekt, das lokale Zeit von 15: 00 Uhr darstellt. Eine Anwendung, die in den USA ausgeführt wird Zeitzone Pacific verwendet die <xref:System.DateTime.ToBinary%2A> konvertiert, die Methode <xref:System.DateTime> Objekt in einen Binärwert. Eine andere Anwendung, die in den USA ausgeführt wird Zeitzone Eastern Time verwendet die <xref:System.DateTime.FromBinary%2A> -Methode zum Konvertieren von des Binärwerts in eine neue <xref:System.DateTime> Objekt. Der Wert der neuen <xref:System.DateTime> Objekt ist 18: 00 Uhr, die die gleiche Punktmenge wie die ursprüngliche 15: 00 Uhr darstellt. Wert, aber in die Ortszeit in der Zeitzone Eastern Time angepasst wird.  
  
-   Wenn die binäre Darstellung von einer lokalen <xref:System.DateTime> Wert eine ungültige Zeit darstellt, in der lokalen Zeitzone des Systems, auf dem <xref:System.DateTime.FromBinary%2A> wird aufgerufen, die Zeit wird so angepasst, dass er gültig ist.  
  
     Beispielsweise tritt die Umstellung von Standardzeit auf Sommerzeit in den USA Am 14. März 2010 um 2:00 Uhr, wenn die Zeit von einer Stunde, um 3:00 Uhr Pazifische Zeitzone Diese Stunden-Intervall ist eine ungültige Zeit an, d. h. ein Zeitintervall an, die in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass dieser Bereich einen binären Wert, wenn eine Zeit, die innerhalb konvertiert wird der <xref:System.DateTime.ToBinary%2A> Methode und wird dann wiederhergestellt werden, indem die <xref:System.DateTime.FromBinary%2A> -Methode, den ursprünglichen Wert wird angepasst, um eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmtes Datum und Uhrzeit-Wert je nach Änderung möglicherweise durch Übergabe an die <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> -Methode, wie im Beispiel veranschaulicht.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Version-Überlegungen  
 Ab .NET Framework, Version 2.0, eine <xref:System.DateTime> Struktur besteht aus einem privaten Kind-Feld ein, der angibt, ob der angegebene Zeitwert in Ortszeit, koordinierter Weltzeit (UTC) oder keines von beiden basiert, und ein privates Feld der Ticks, die enthält die Anzahl der 100-Nanosekunden-Ticks, die ein Datum und eine Uhrzeit angeben. Die Ticks-Feld mit zugegriffen werden die <xref:System.DateTime.Ticks%2A> -Eigenschaft und das Kind-Feld mit zugegriffen werden kann die <xref:System.DateTime.Kind%2A> Eigenschaft.  
  
 Vor .NET Framework 2.0, wenn Sie serialisiert eine <xref:System.DateTime> Objekt manuell statt mit Serialisierungsschnittstelle wie <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, mussten Sie nur die Ticks-Daten in Serialisieren der <xref:System.DateTime> Struktur. Ab Version 2.0, müssen Sie auch die Kind-Daten serialisieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das aktuelle Datum ab.</summary>
        <value>Ein Objekt, das auf das heutige Datum mit einer auf 00:00:00 festgelegten Zeitkomponente festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ab .NET Framework, Version 2.0 wird der Rückgabewert ist ein <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> -Eigenschaft gibt <xref:System.DateTimeKind.Local>.  
  
 Da sie das aktuelle Datum ohne die aktuelle Uhrzeit zurückgibt, die <xref:System.DateTime.Today%2A> Eigenschaft eignet sich für die Verwendung in Anwendungen, die nur mit Daten arbeiten. Weitere Informationen finden Sie unter [auswählen zwischen DateTime, DateTimeOffset, TimeSpan und TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Im Gegensatz dazu die <xref:System.DateTime.TimeOfDay%2A> Eigenschaft zurückgibt, die aktuelle Zeit ohne dem aktuellen Datum und die <xref:System.DateTime.Now%2A> Eigenschaft zurückgegeben wird, sowohl das aktuelle Datum und die aktuelle Uhrzeit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Date%2A> Eigenschaft, um das aktuelle Datum abzurufen. Darüber hinaus veranschaulicht es wie ein <xref:System.DateTime> Wert kann mit einigen Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen formatiert werden. Beachten Sie, dass die Ausgabe durch den dritten Aufruf erzeugt die <xref:System.DateTime.ToString%28System.String%29> Methode den g-Formatbezeichner verwendet, um die Zeitkomponente einzuschließen, die 0 (null) ist.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in eine Windows-Dateizeit.</summary>
        <returns>Der Wert des aktuellen <see cref="T:System.DateTime" />-Objekts als Windows-Dateizeit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Koordinierte Weltzeit (UTC). Windows verwendet eine Zeit, um aufzuzeichnen, wenn eine Anwendung erstellt, greift auf oder in eine Datei geschrieben.  
  
 Die <xref:System.DateTime.ToFileTime%2A> -Methode verwendet die <xref:System.DateTime.Kind%2A> Eigenschaft, um zu bestimmen, ob die aktuelle <xref:System.DateTime> Objekt ist eine Ortszeit, UTC-Zeit oder eine nicht angegebene Art der Zeit, die als lokale Zeit behandelt wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToFileTime%2A> Methode.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die resultierende Dateizeitangabe würde ein Datum und eine Uhrzeit vor 24:00 Uhr am 1. Januar 1601 UTC unserer Zeitrechnung darstellen .</exception>
        <block subset="none" type="usage">
          <para>Normalerweise die <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> Methode stellt eine <see cref="T:System.DateTime" /> -Wert, der von gespeichert wurden die <see cref="M:System.DateTime.ToFileTime" /> Methode. Allerdings können zwischen den beiden Werten in den folgenden Situationen: 
-If die Serialisierung und Deserialisierung der <see cref="T:System.DateTime" /> in verschiedenen Zeitzonen sein. Z. B. wenn ein <see cref="T:System.DateTime" /> Wert mit einer Uhrzeit 12:30 Uhr in den USA Zeitzone Eastern Time serialisiert und deserialisiert dann in den USA Pacific-Zeitzone, die den ursprünglichen Wert von 12:30 Uhr um 9:30 Uhr wird angepasst werden. um den Unterschied zwischen den beiden Zeitzonen widerzuspiegeln.  
  
-If die <see cref="T:System.DateTime" /> -Wert, der serialisiert wird, eine ungültige Zeit in die lokale Zeitzone darstellt. In diesem Fall die <see cref="M:System.DateTime.ToFileTime" /> Methode passt der wiederhergestellten <see cref="T:System.DateTime" /> Wert, sodass es eine gültige Zeit in die lokale Zeitzone darstellt.  
  
Beispielsweise tritt die Umstellung von Standardzeit auf Sommerzeit in den USA Am 14. März 2010 um 2:00 Uhr, wenn die Zeit von einer Stunde, um 3:00 Uhr Pazifische Zeitzone Diese Stunden-Intervall ist eine ungültige Zeit an, d. h. ein Zeitintervall an, die in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass dieser Bereich einen langen ganzzahligen Wert, wenn eine Zeit, die innerhalb konvertiert wird der <see cref="M:System.DateTime.ToFileTime" /> Methode und wird dann wiederhergestellt werden, indem die <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> -Methode, den ursprünglichen Wert wird angepasst, um eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmtes Datum und Uhrzeit-Wert je nach Änderung möglicherweise durch Übergabe an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> -Methode, wie im Beispiel veranschaulicht.  
  
[! Code-Csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! Code – Vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in eine Windows-Dateizeit.</summary>
        <returns>Der Wert des aktuellen <see cref="T:System.DateTime" />-Objekts als Windows-Dateizeit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Koordinierte Weltzeit (UTC). Windows verwendet eine Zeit, um aufzuzeichnen, wenn eine Anwendung erstellt, greift auf oder in eine Datei geschrieben.  
  
 Die <xref:System.DateTime.ToFileTimeUtc%2A> -Methode verwendet die <xref:System.DateTime.Kind%2A> Eigenschaft, um zu bestimmen, ob die aktuelle <xref:System.DateTime> Objekt ist eine Ortszeit, UTC-Zeit oder eine nicht angegebene Art der Zeit, die als UTC-Zeit behandelt wird. Wenn es sich um eine lokale Zeit ist, konvertiert es die Zeit in UTC vor dem Ausführen der Konvertierung in eine Windows-Dateizeit.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die resultierende Dateizeitangabe würde ein Datum und eine Uhrzeit vor 24:00 Uhr am 1. Januar 1601 UTC unserer Zeitrechnung darstellen .</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToFileTimeUtc" /> Methode wird manchmal verwendet, um eine Ortszeit in UTC zu konvertieren und anschließend für die wiederherzustellenden durch Aufrufen der <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> Methode, gefolgt von der <see cref="M:System.DateTime.ToLocalTime" /> Methode. Allerdings, wenn die ursprüngliche Zeit eine ungültige Zeit in die lokale Zeitzone darstellt, werden die beiden Werte für die lokale Zeit nicht gleich sein. Weitere Informationen finden Sie unter der <see cref="M:System.DateTime.ToLocalTime" /> Methode.</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in die Ortszeit.</summary>
        <returns>Ein Objekt, dessen <see cref="P:System.DateTime.Kind" />-Eigenschaft <see cref="F:System.DateTimeKind.Local" /> ist und dessen Wert die Ortszeit ist, die dem Wert des aktuellen <see cref="T:System.DateTime" />-Objekts entspricht, oder <see cref="F:System.DateTime.MaxValue" />, wenn der konvertierte Wert zu groß ist, um von einem <see cref="T:System.DateTime" />-Objekt dargestellt zu werden, oder <see cref="F:System.DateTime.MinValue" />, wenn der konvertierte Wert zu klein ist, um als <see cref="T:System.DateTime" />-Objekt dargestellt zu werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die lokale Zeit ist die Zeit (Coordinated Universal Time, UTC) sowie die UTC-zeitverschiebung gleich. Weitere Informationen zu die UTC-zeitverschiebung, finden Sie unter <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. Die Konvertierung berücksichtigt auch die Sommerzeit-Regel, die für die Zeitdauer, die vom aktuellen gilt <xref:System.DateTime> Objekt.  
  
> [!IMPORTANT]
>  Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die <xref:System.DateTime.ToLocalTime%2A> Methode erkennt nur die aktuelle Anpassungsregel, bei der Konvertierung von der UTC in eine lokale Zeit. Konvertierungen für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde können daher nicht genau den Unterschied zwischen UTC und Ortszeit wider.  
  
 Ab .NET Framework, Version 2.0, den Rückgabewert von der <xref:System.DateTime.ToLocalTime%2A> Methode richtet sich nach der <xref:System.DateTime.Kind%2A> Eigenschaft des aktuellen <xref:System.DateTime> Objekt. Die folgende Tabelle beschreibt die möglichen Ergebnisse.  
  
|Art|Ergebnisse|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Diese Instanz von <xref:System.DateTime> wird in die Ortszeit konvertiert.|  
|<xref:System.DateTimeKind.Local>|Es wird keine Konvertierung durchgeführt.|  
|<xref:System.DateTimeKind.Unspecified>|Diese Instanz von <xref:System.DateTime> wird als eine UTC-Zeit und die Konvertierung erfolgt wie <xref:System.DateTime.Kind%2A> wurden <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  Die <xref:System.DateTime.ToLocalTime%2A> Methode konvertiert ein <xref:System.DateTime> Wert zwischen UTC und Ortszeit. Um die Zeit in einer beliebigen Zeitzone in eine lokale Zeit zu konvertieren, verwenden die <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> Methode.  
  
 Der von der Konvertierung zurückgegebene Wert ist eine <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> -Eigenschaft gibt immer <xref:System.DateTimeKind.Local>. Infolgedessen ein gültiges Ergebnis wird zurückgegeben, auch wenn <xref:System.DateTime.ToLocalTime%2A> wiederholt angewendet wird, auf die gleiche <xref:System.DateTime>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLocalTime%2A> Methode. Beachten Sie, dass die genaue Ausgabe hängt von der aktuellen Kultur und der lokalen Zeitzone des Systems auf dem er ausgeführt wird.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode, um zu veranschaulichen wie das <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Sie können die <see cref="M:System.DateTime.ToLocalTime" /> Verfahren zum Wiederherstellen, ein lokaler Datums- und Uhrzeitwert, der in UTC konvertiert wurde die <see cref="M:System.DateTime.ToUniversalTime" /> oder <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> Methode. Wenn die ursprüngliche Zeit eine ungültige Zeit in die lokale Zeitzone darstellt, wird es den wiederhergestellten Wert nicht übereinstimmen. Wenn die <see cref="M:System.DateTime.ToLocalTime" /> Methode konvertiert eine Zeit von UTC an, in der lokalen Zeitzone, es wird auch die Zeit, die mit gültigen in die lokale Zeitzone angepasst.  
  
Beispielsweise tritt die Umstellung von Standardzeit auf Sommerzeit in den USA Am 14. März 2010 um 2:00 Uhr, wenn die Zeit von einer Stunde, um 3:00 Uhr Pazifische Zeitzone Diese Stunden-Intervall ist eine ungültige Zeit an, d. h. ein Zeitintervall an, die in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass wenn eine Zeit, die innerhalb dieses Bereichs in UTC konvertiert ist die <see cref="M:System.DateTime.ToUniversalTime" /> Methode und wird dann wiederhergestellt werden, indem die <see cref="M:System.DateTime.ToLocalTime" /> -Methode, den ursprünglichen Wert wird angepasst, um eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmtes Datum und Uhrzeit-Wert je nach Änderung möglicherweise durch Übergabe an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> -Methode, wie im Beispiel veranschaulicht.  
  
[! Code-Csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! Code – Vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in die entsprechende Zeichenfolgendarstellung im langen Datumsformat.</summary>
        <returns>Eine Zeichenfolge, die eine Darstellung des aktuellen <see cref="T:System.DateTime" />-Objekts im langen Datumsformat enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des Musters von definiert formatiert die <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> Eigenschaft der aktuellen Threadkultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der von der Angabe des "D" zurückgegeben [standardmäßige DateTime-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29> Methode.  
  
> [!IMPORTANT]
>  Die zurückgegebene Zeichenfolge den <xref:System.DateTime.ToLongDateString%2A> -Methode ist kulturabhängig. Es gibt das Muster, die von der aktuellen Kultur definiert <xref:System.Globalization.DateTimeFormatInfo> Objekt. Beispielsweise lautet das standardmäßige lange Datumsformat für die Kultur En-US "Dddd", "MMMMdd, Yyyy"; für die Kultur de-DE ist es "Dddd, d. MMMMyyyy"; für die Kultur ja-JP, ist es "Yyyy"? " M "?" d'? ' ". Die spezifische Formatzeichenfolge auf einem bestimmten Computer kann auch angepasst werden, damit es die standardmäßige lange Datumsformat-Zeichenfolge unterscheidet.  
  
 Weitere Informationen zu die aktuelle Threadkultur, finden Sie unter den <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft. Weitere Informationen zum Formatieren von Zeichen, Formatierungsmuster und der Ausgabe finden Sie unter den [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md) Thema. Weitere Informationen zum Ändern der zugeordneten Formatzeichen Formatmuster finden Sie unter den <xref:System.Globalization.DateTimeFormatInfo> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLongDateString%2A> Methode.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in die entsprechende Zeichenfolgendarstellung im langen Zeitformat.</summary>
        <returns>Eine Zeichenfolge, die eine Darstellung des aktuellen <see cref="T:System.DateTime" />-Objekts im langen Zeitformat enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des Musters von definiert formatiert die <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> Eigenschaft der aktuellen Threadkultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der zurückgegeben werden, indem Sie das "T" angeben [Formatzeichenfolge für Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29> Methode.  
  
> [!IMPORTANT]
>  Die zurückgegebene Zeichenfolge den <xref:System.DateTime.ToLongTimeString%2A> -Methode ist kulturabhängig. Es reflektiert von definierte Muster der <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> Eigenschaft von der aktuellen Kultur <xref:System.Globalization.DateTimeFormatInfo> Objekt. Beispielsweise ist dem standard langen Datumsmuster für die Kultur En-US "hh: mm: Tt"; für die Kultur de-DE ist es "Hh: mm:"; für die Kultur ja-JP ist es "Hh" ein. Die spezifische Formatzeichenfolge auf einem bestimmten Computer kann auch angepasst werden, damit sie sich von der Formatzeichenfolge standard lange unterscheidet.  
  
 Weitere Informationen zu die aktuelle Threadkultur, finden Sie unter den <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft. Weitere Informationen zum Formatieren von Zeichen, Formatierungsmuster und der Ausgabe finden Sie unter den [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md) Thema. Weitere Informationen zum Ändern der zugeordneten Formatzeichen Formatmuster finden Sie unter den <xref:System.Globalization.DateTimeFormatInfo> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLongTimeString%2A> Methode.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert dieser Instanz in das entsprechende Datum für OLE-Automatisierung.</summary>
        <returns>Eine Gleitkommazahl mit doppelter Genauigkeit, die das dem Wert dieser Instanz entsprechende Datum für OLE-Automatisierung darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein OLE-Automatisierungsdatum wird als Gleitkommazahl implementiert, deren integrale Komponente ist die Anzahl der Tage vor oder nach Mitternacht am 30. Dezember 1899 und dessen Nachkommastelle stellt die Zeit an diesem Tag durch 24 geteilt. Z. B., wird Mitternacht, 31. Dezember 1899 dargestellt mit 1,0; 6 Uhr, wird 1. Januar 1900 durch 2.25 dargestellt; um Mitternacht wird am 29. Dezember 1899 durch den Bereich von -1,0 dargestellt; und 6 Uhr, am 29. Dezember 1899 wird durch-1.25 dargestellt.  
  
 Das grundlegende Datum für OLE-Automatisierung ist Mitternacht am 30. Dezember 1899. Das kleinstmögliche Datum für OLE-Automatisierung ist Mitternacht, 1. Januar 0100. Die maximale OLE-Automatisierungsdatum entspricht <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, der dem letzten Moment des 31. Dezember 9999.  
  
 Die <xref:System.DateTime.ToOADate%2A> -Methode löst eine <xref:System.OverflowException> , wenn die aktuelle Instanz ein Datum darstellt, die älter ist als <xref:System.DateTime.MinValue> und Mitternacht am 1. Januar 0100 vor. Allerdings ist der Wert der aktuellen Instanz <xref:System.DateTime.MinValue>, die Methode gibt 0 zurück.  
  
 Weitere Informationen zu OLE-Automatisierung, finden Sie unter den [MSDN-Bibliothek](https://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der Wert dieser Instanz kann nicht als Datum für die OLE-Automatisierung dargestellt werden.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in die entsprechende Zeichenfolgendarstellung im kurzen Datumsformat.</summary>
        <returns>Eine Zeichenfolge, die eine Darstellung des aktuellen <see cref="T:System.DateTime" />-Objekts im kurzen Datumsformat enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des Musters von definiert formatiert die <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> Eigenschaft der aktuellen Threadkultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der von der Angabe des "d" zurückgegeben [standardmäßige DateTime-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29> Methode.  
  
> [!IMPORTANT]
>  Die zurückgegebene Zeichenfolge den <xref:System.DateTime.ToShortDateString%2A> -Methode ist kulturabhängig. Es gibt das Muster, die von der aktuellen Kultur definiert <xref:System.Globalization.DateTimeFormatInfo> Objekt. Beispielsweise ist das standardmäßige kurze Datumsmuster für die Kultur En-US "M/Yyyy"; für die Kultur de-DE ist es "dd. MM.yyyy"; für die Kultur ja-JP ist es "Yyyy/M/d". Die spezifische Formatzeichenfolge auf einem bestimmten Computer kann auch angepasst werden, sodass sie von der Formatzeichenfolge für kurzes Datum unterscheidet.  
  
 Weitere Informationen zu die aktuelle Threadkultur, finden Sie unter den <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft. Weitere Informationen zum Formatieren von Zeichen, Formatierungsmuster und der Ausgabe finden Sie unter den [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md) Thema. Weitere Informationen zum Ändern der zugeordneten Formatzeichen Formatmuster finden Sie unter den <xref:System.Globalization.DateTimeFormatInfo> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToShortDateString%2A> Methode. Es zeigt auch, die das Ergebnis des Aufrufs der <xref:System.DateTime.ToShortDateString%2A> Methode entspricht dem Aufrufen der <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> -Methode mit "d" als Format-Parameter.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in die entsprechende Zeichenfolgendarstellung im kurzen Zeitformat.</summary>
        <returns>Eine Zeichenfolge, die eine Darstellung des aktuellen <see cref="T:System.DateTime" />-Objekts im kurzen Zeitformat enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des Musters von definiert formatiert die <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> Eigenschaft der aktuellen Threadkultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der zurückgegeben werden, indem Sie das "t" angeben [standardmäßige DateTime-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29> Methode.  
  
> [!IMPORTANT]
>  Die zurückgegebene Zeichenfolge den <xref:System.DateTime.ToShortTimeString%2A> -Methode ist kulturabhängig. Es gibt das Muster, die von der aktuellen Kultur definiert <xref:System.Globalization.DateTimeFormatInfo> Objekt. Beispielsweise ist der standard Kurzes Zeitmuster für die Kultur En-US "h: mm-Tt"; für die Kultur de-DE ist es "Hh: mm"; für die Kultur ja-JP ist es "H: mm". Die spezifische Formatzeichenfolge auf einem bestimmten Computer kann auch angepasst werden, sodass sie von der Formatzeichenfolge standard kurze Zeit unterscheidet.  
  
 Weitere Informationen zu die aktuelle Threadkultur, finden Sie unter den <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft. Weitere Informationen zum Formatieren von Zeichen, Formatierungsmuster und der Ausgabe finden Sie unter den [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md) Thema. Weitere Informationen zum Ändern der zugeordneten Formatzeichen Formatmuster finden Sie unter den <xref:System.Globalization.DateTimeFormatInfo> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToShortTimeString%2A> Methode.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts unter Verwendung der Formatierungskonventionen der aktuellen Kultur in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTime" />-Objekts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des allgemeinen Datum und Uhrzeit-Formatbezeichner ("G") formatiert. Rufen Sie zum Formatieren mit einem bestimmten Datum und Uhrzeit der <xref:System.DateTime.ToString%28System.String%29> Methode. Um mithilfe des allgemeinen Datum und Uhrzeit-Formatbezeichner ("G") für eine bestimmte Kultur zu formatieren, rufen Sie die <xref:System.DateTime.ToString%28System.IFormatProvider%29> Methode. Um es mit einem bestimmten Datum und Uhrzeit und den Konventionen einer bestimmten Kultur zu formatieren, rufen Sie die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> Methode.  
  
 Diese Methode verwendet die Formatierungsinformationen, die von der aktuellen Kultur abgeleitet. Insbesondere die benutzerdefinierten Formatzeichenfolgen, die vom kombiniert die <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> und <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der `Thread.CurrentThread.CurrentCulture.DateTimeFormat` Eigenschaft. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Andere Überladungen der <xref:System.DateTime.ToString%2A> Methode können Sie die Kultur angeben, verwenden und das Ausgabe-Muster von definieren, deren Formatierung den <xref:System.DateTime> Wert.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie die angegebene Zeichenfolgendarstellung einer <xref:System.DateTime> Rückgabewert von der <xref:System.DateTime.ToString> Methode hängt von der aktuellen Threadkultur. Es ändert die aktuelle Threadkultur von En-US, fr-FR auf ja-JP. und in jedem Fall ruft die <xref:System.DateTime.ToString> Methode, um die Zeichenfolgendarstellung eines Werts Datum und Uhrzeit, die mit dieser Kultur zurückzugeben.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die von dem Kalender unterstützt werden, der von der aktuellen Kultur verwendet wird.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToString" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit zurück, in der von der aktuellen Kultur verwendeten Kalenders. Wenn der Wert des aktuellen <see cref="T:System.DateTime" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Es versucht, ein Datum zu formatieren, die außerhalb des Bereichs von ist das <see cref="T:System.Globalization.HijriCalendar" /> Klasse, wenn die aktuelle Kultur Arabisch (Syrien) ist.  
  
[! Code-Csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)] [! Code – Vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTime" />-Objekts entsprechend der Angabe in <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt formatiert ist, mithilfe der allgemeinen Datum und Zeit-Formatbezeichner "G", die das Muster für kurzes Datum mit dem langen Datumsmuster Ausgabe formatiert.  
  
 Das Format des kurzen Datums- und langen Uhrzeitformat wird definiert, durch die `provider` Parameter. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt der aktuellen Kultur zugeordnet werden. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Zeichenfolgendarstellung einer Datums- und Zeit mit <xref:System.Globalization.CultureInfo> Objekte, die fünf verschiedene Kulturen darstellen.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die vom Kalender unterstützt werden, der von <paramref name="provider" /> verwendet wird.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit im Kalender verwendet, die von der Kultur, dargestellt durch die <paramref name="provider" /> Parameter. Der Kalender wird definiert, indem die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> Eigenschaft. Wenn der Wert des aktuellen <see cref="T:System.DateTime" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Es versucht, ein Datum zu formatieren, die außerhalb des Bereichs von ist das <see cref="T:System.Globalization.JapaneseCalendar" /> Klasse.  
  
[! Code-Csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)] [! Code – Vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Eine Standard- oder benutzerdefinierte Formatzeichenfolge für Datum und Uhrzeit.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts unter Verwendung des angegebenen Formats und der Formatierungskonventionen der aktuellen Kultur in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTime" />-Objekts entsprechend der Angabe in <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ToString%28System.String%29> Methode gibt eine Zeichenfolgendarstellung eines Werts für Datum und Uhrzeit in einem bestimmten Format, das die Formatierungskonventionen der aktuellen Kultur; Weitere Informationen zu verwendet, finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 Die `format` -Parameter sollte entweder einen einzelnen Formatbezeichner enthalten (finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) oder ein benutzerdefiniertes Formatmuster (finden Sie unter [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ), definiert das Format der zurückgegebenen Zeichenfolge. Wenn `format` ist `null` oder eine leere Zeichenfolge und der allgemeine Formatbezeichner "G" verwendet wird.  
  
 Einige Verwendungsmöglichkeiten für diese Methode sind:  
  
-   Abrufen von einer Zeichenfolge mit zeigt Datum und Uhrzeit in der aktuellen Kultur kurzes Datum und Uhrzeit-Format. Zu diesem Zweck verwenden Sie den Formatbezeichner "G".  
  
-   Abrufen von einer Zeichenfolge mit enthält nur den Monat und Jahr. Zu diesem Zweck verwenden Sie die Formatzeichenfolge "MM/Yyyy". Die Formatzeichenfolge wird die aktuelle Kultur Datumstrennzeichen verwendet.  
  
-   Einer Zeichenfolge angezeigt wird, enthält Datum und Uhrzeit in einem bestimmten Format. Z. B. die "MM/TT/YyyyHH:mm" Formatzeichenfolge zeigt die Datum und Uhrzeit-Zeichenfolge in einem festen Format z. B. "19 / / 03 / / 2013 18:06". Verwendet die Formatzeichenfolge "/" als ein festgelegtes Datumstrennzeichen unabhängig von Kultur--Einstellungen.  
  
-   Ein Datum in einem komprimierten Format angezeigt wird, kann für die Serialisierung einer Datumszeichenfolge verwendet werden. Die Formatzeichenfolge "JJJJMMTT" zeigt z. B. eine vierstellige Jahresangabe, eine zweistellige Monatsangabe und eine zweistellige Tagesangabe gefolgt, ohne Datum-Trennzeichen.  
  
 Im folgenden Beispiel wird diese drei Formatzeichenfolgen, um einen Datums- und Uhrzeitangabe anhand der Konventionen der Kulturen En-US und fr-FR anzuzeigen.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird jede Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen und eine Auswahl von Datum und Uhrzeit-Formatzeichenfolgen anzuzeigende die angegebene Zeichenfolgendarstellung einer <xref:System.DateTime> Wert. Die aktuelle Threadkultur für das Beispiel wird En-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Die Länge des <paramref name="format" /> ist 1, und es ist keines der Formatbezeichnerzeichen, die für <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiert sind.  
  
- oder -  
 <paramref name="format" /> enthält kein gültiges benutzerdefiniertes Formatmuster.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die von dem Kalender unterstützt werden, der von der aktuellen Kultur verwendet wird.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToString(System.String)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit zurück, in der von der aktuellen Kultur verwendeten Kalenders. Wenn der Wert des aktuellen <see cref="T:System.DateTime" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Es versucht, ein Datum zu formatieren, die außerhalb des Bereichs von ist das <see cref="T:System.Globalization.HebrewCalendar" /> Klasse, wenn die aktuelle Kultur Hebräisch (Israel) ist.  
  
[! Code-Csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)] [! Code – Vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Eine Standard- oder benutzerdefinierte Formatzeichenfolge für Datum und Uhrzeit.</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts unter Verwendung des angegebenen Formats sowie der kulturabhängigen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTime" />-Objekts entsprechend der Angabe in <paramref name="format" /> und <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` Parameter kann entweder einen einzelnen Formatbezeichner enthalten (finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) oder ein benutzerdefiniertes Formatmuster (finden Sie unter [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Wenn `format` ist `null` oder eine leere Zeichenfolge (""), wird der Standardformatbezeichner "G", verwendet.  
  
 Die `provider` Parameter definiert das Muster, entspricht die Standardformatbezeichner als auch die Symbole und die Namen der Datums- und Zeitkomponenten. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> verknüpft ist, mit der aktuellen Kultur verwendet. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird jede der Standardformatbezeichner für Datum-Uhrzeit-Formatzeichenfolgen, die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe für vier verschiedene Kulturen angezeigt.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 Das folgende Beispiel zeigt verschiedene Möglichkeiten zum Formatieren einer <xref:System.DateTime> Wert verwenden die invariante <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Die Länge des <paramref name="format" /> ist 1, und es ist keines der Formatbezeichnerzeichen, die für <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiert sind.  
  
- oder -  
 <paramref name="format" /> enthält kein gültiges benutzerdefiniertes Formatmuster.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die vom Kalender unterstützt werden, der von <paramref name="provider" /> verwendet wird.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit im Kalender ein, die die <paramref name="provider" /> Parameter. Der Kalender wird definiert, indem die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> Eigenschaft. Wenn der Wert des aktuellen <see cref="T:System.DateTime" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Es versucht, ein Datum zu formatieren, die außerhalb des Bereichs von ist das <see cref="T:System.Globalization.UmAlQuraCalendar" /> Klasse.  
  
[! Code-Csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)] [! Code – Vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Beispiel: .NET Framework 4-Hilfsprogramm zur Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTime" />-Objekts in koordinierte Weltzeit (UTC).</summary>
        <returns>Ein Objekt, dessen <see cref="P:System.DateTime.Kind" />-Eigenschaft <see cref="F:System.DateTimeKind.Utc" /> ist und dessen Wert die UTC-Zeit ist, die dem Wert des aktuellen <see cref="T:System.DateTime" />-Objekts entspricht, oder <see cref="F:System.DateTime.MaxValue" />, wenn der konvertierte Wert zu groß ist, um von einem <see cref="T:System.DateTime" />-Objekt dargestellt zu werden, oder <see cref="F:System.DateTime.MinValue" />, wenn der konvertierte Wert zu klein ist, um von einem <see cref="T:System.DateTime" />-Objekt dargestellt zu werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Coordinated Universal Time (UTC) ist die lokale Zeit abzüglich der UTC-Offset gleich. Weitere Informationen zu die UTC-zeitverschiebung, finden Sie unter <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. Die Konvertierung berücksichtigt auch die Sommerzeit-Regel, die für die Zeitdauer, die vom aktuellen gilt <xref:System.DateTime> Objekt.  
  
> [!IMPORTANT]
>  Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die <xref:System.DateTime.ToUniversalTime%2A> Methode erkennt nur die aktuelle Anpassungsregel, bei der Konvertierung von der Ortszeit in UTC. Konvertierungen für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde können daher nicht genau den Unterschied zwischen Ortszeit und UTC angezeigt.  
  
 Ab .NET Framework, Version 2.0, den Rückgabewert von der <xref:System.DateTime.ToUniversalTime%2A> Methode richtet sich nach der <xref:System.DateTime.Kind%2A> Eigenschaft des aktuellen <xref:System.DateTime> Objekt. Die folgende Tabelle beschreibt die möglichen Ergebnisse.  
  
|Art|Ergebnisse|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Es wird keine Konvertierung durchgeführt.|  
|<xref:System.DateTimeKind.Local>|Die aktuelle <xref:System.DateTime> Objekt wird in UTC konvertiert.|  
|<xref:System.DateTimeKind.Unspecified>|Die aktuelle <xref:System.DateTime> Objekt wird als lokale Zeit aus, und die Konvertierung erfolgt wie <xref:System.DateTime.Kind%2A> wurden <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  Die <xref:System.DateTime.ToUniversalTime%2A> Methode konvertiert ein <xref:System.DateTime> Wert von der Ortszeit in UTC. Um die Zeit in einer nicht lokalen Zeitzone in UTC konvertieren, verwenden die <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> Methode. Um eine Uhrzeit zu konvertieren, dessen Offset von UTC bekannt ist, verwenden Sie die <xref:System.DateTimeOffset.ToUniversalTime%2A> Methode.  
  
 Wenn der Wert für Datum und Uhrzeit-Instanz eine mehrdeutige Zeit ist, wird diese Methode davon ausgegangen, dass es sich um eine Standardzeit ist. (Eine mehrdeutige Zeit ist, die entweder auf eine Standardzeit oder eine Sommerzeit in die lokale Zeitzone zugeordnet werden können) Wenn der Wert für Datum und Uhrzeit-Instanz eine ungültige Zeit ist, subtrahiert diese Methode einfach der lokalen Zeit aus der lokalen Zeitzone UTC-offset zur UTC zurück. (Eine ungültige Zeit ist, die aufgrund der Anwendung von Anpassungsregeln für die Sommerzeit nicht vorhanden ist.)  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToUniversalTime%2A> Methode.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode, um zu veranschaulichen wie das <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToUniversalTime" /> Methode wird manchmal verwendet, um eine Ortszeit in UTC zu konvertieren. Die <see cref="M:System.DateTime.ToLocalTime" /> Methode wird aufgerufen, um die ursprüngliche Local Time-Wiederherstellung. Allerdings, wenn die ursprüngliche Zeit eine ungültige Zeit in die lokale Zeitzone darstellt, werden die beiden Werte für die lokale Zeit nicht gleich sein. Weitere Informationen und ein Beispiel finden Sie unter den <see cref="M:System.DateTime.ToLocalTime" /> Methode.  
  
Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die <see cref="M:System.DateTime.ToUniversalTime" /> Methode erkennt nur die aktuelle Anpassungsregel für die lokale Zeitzone, die er gilt für alle Datumsangaben, einschließlich der kompatiblen Datumsangaben (d. h., Datumsangaben, die älter als das Startdatum der aktuellen Anpassung sind Regel). Anwendungen auf [!INCLUDE[winxp](~/includes/winxp-md.md)] , erfordern in der Vergangenheit genaue Lokales Datum und zeitberechnungen müssen umgehen, dieses Verhalten mithilfe der <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> Methode zum Abrufen einer <see cref="T:System.TimeZoneInfo" /> Objekt, das der lokalen Zeitzone entspricht und das Aufrufen die <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> Methode.  
  
Das folgende Beispiel veranschaulicht den Unterschied zwischen der <see cref="M:System.DateTime.ToUniversalTime" /> und <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> Methoden für eine [!INCLUDE[winxp](~/includes/winxp-md.md)] System in den USA Zeitzone Pacific verwendet wird. Die ersten zwei Methodenaufrufe gelten die aktuelle Zeitzone Anpassungsregel (die in Kraft treten in 2007 ist ein Fehler aufgetreten) in ein Datum im Jahr 2006. Die aktuelle Anpassungsregel bietet für die Umstellung auf Sommerzeit am zweiten Sonntag im März; die vorherige Regel, die in Kraft war im Jahr 2006 bereitgestellt, die für die Umstellung auf Sommerzeit am ersten Sonntag im April ausgeführt. Nur der dritte Methodenaufruf führt genau dieser historisches Datum und Uhrzeit-Konvertierung.  
  
[! Code-Csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! Code – Vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in deren <see cref="T:System.DateTime" />-Entsprechung und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich ausgeführt wurde.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="result">Diese Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTime" />-Wert zurück, der dem Datum und der Zeit in <c>s</c> entspricht, oder <see cref="F:System.DateTime.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <c>s</c>-Parameter <see langword="null" /> bzw. eine leere Zeichenfolge ("") ist oder keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in deren <see cref="T:System.DateTime" />-Entsprechung und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich ausgeführt wurde.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="s" />-Parameter erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode ähnelt der <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> -Methode, außer dass die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> Methode löst keine Ausnahme aus, wenn die Konvertierung schlägt fehl.  
  
 Die Zeichenfolge `s` wird mithilfe von Formatierungsinformationen in die aktuelle analysiert <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das implizit durch die aktuelle Threadkultur bereitgestellt wird.  
  
 Diese Methode versucht, die nicht erkannte Daten zu ignorieren, wenn möglich, und füllt fehlende Monat, Tag und Jahr Informationen mit dem aktuellen Datum. Wenn `s` enthält nur ein Datum und keine Zeit, diese Methode setzt voraus, die Zeit ist 00:00 Uhr. Wenn `s` umfasst eine Datumskomponente durch eine zweistellige Jahresangabe wird eine Konvertierung in ein Jahr im aktuellen Kalender von der aktuellen Kultur basierend auf den Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Alle führenden, inneren oder nachfolgende Leerzeichen in `s` wird ignoriert. Datum und Uhrzeit können mit einem Paar aus der führende und nachfolgende Nummernzeichen-Zeichen ("#", U + 0023) gekennzeichnet werden und eingeschlossen werden können, mit einem oder mehreren NULL-Zeichen (U + 0000).  
  
 Da die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode versucht, die Zeichenfolgendarstellung eines Datums zu analysieren und mit den Formatierungsregeln für die aktuelle Kultur, die beim Analysieren von einer bestimmten Zeichenfolge in verschiedenen Kulturen kann entweder erfolgreich sein oder andere Ergebnisse zurückgeben. Wenn ein bestimmtes Datum und Uhrzeit-Format in verschiedenen Gebietsschemas analysiert werden soll, verwenden Sie die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> -Methode oder eine der Überladungen der der <xref:System.DateTime.TryParseExact%2A> Methode, und geben Sie einen Formatbezeichner.  
  
 Wenn `s` ist die Zeichenfolgendarstellung des ein Schalttag in einem Schaltjahr im aktuellen Kalender, die Methode analysiert `s` erfolgreich. Wenn `s` ist die Zeichenfolgendarstellung des ein Schalttag in einem nicht-Schaltjahr im aktuellen Kalender der aktuellen Kultur, der Analysevorgang misslingt, und die Methode gibt `false`.  
  
 Wenn `s` enthält keine Zeitzoneninformationen `result` enthält eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> bei Rückgabe der Methode. Wenn die Zeichenfolge, die analysiert werden Zeitzoneninformationen, soll `result` enthält eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> bei Rückgabe der Methode.  
  
   
  
## Examples  
 Das folgende Beispiel übergibt eine Reihe von Datum und Uhrzeit-Zeichenfolgen, die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Die Formatierung wird durch die Eigenschaften des aktuellen beeinflusst <see cref="T:System.Globalization.DateTimeFormatInfo" /> -Objekt, das standardmäßig von abgeleitet werden die **Regions- und Sprachoptionen** Element in der Systemsteuerung. Die <see cref="Overload:System.DateTime.TryParse" /> Methode unerwartet fehl und zurückgeben kann <see langword="False" /> Wenn die aktuelle <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> und <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> Eigenschaften auf den gleichen Wert festgelegt werden.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Beispiel: .NET Framework 4-Hilfsprogramm zur Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <c>s</c> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die festlegt, wie das analysierte Datum in Bezug auf die aktuelle Zeitzone oder das aktuelle Datum interpretiert werden soll. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Diese Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTime" />-Wert zurück, der dem Datum und der Zeit in <c>s</c> entspricht, oder <see cref="F:System.DateTime.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <c>s</c>-Parameter <see langword="null" /> bzw. eine leere Zeichenfolge ("") ist oder keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen und des Formatierungsstils in die entsprechende <see cref="T:System.DateTime" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="s" />-Parameter erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> -Methode analysiert eine Zeichenfolge, Datum, Uhrzeit und Zeitzone Informationen enthalten kann. Es ähnelt der <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode, außer dass die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode löst keine Ausnahme aus, wenn die Konvertierung schlägt fehl.  
  
 Diese Methode versucht, die nicht erkannten Daten und Analyse ignorieren `s` vollständig. Wenn `s` enthält eine Uhrzeit, aber kein Datum, die Methode standardmäßig das aktuelle Datum oder, wenn Sie `styles` enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> , ersetzt `DateTime.Date.MinValue`. Wenn `s` enthält ein Datum, aber keine Zeit, 12:00 Mitternacht als die Standardzeit verwendet wird. Wenn ein Datum vorhanden ist, aber die Jahreskomponente aus nur zwei Ziffern besteht, wird eine Konvertierung in ein Jahr in die `provider` aktuellen Kalender des Parameters basierend auf den Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Alle führenden, inneren oder nachfolgende Leerzeichen in `s` werden ignoriert. Datum und Uhrzeit können mit einem Paar aus der führende und nachfolgende Nummernzeichen-Zeichen ("#", U + 0023) gekennzeichnet werden und eingeschlossen werden können, mit einem oder mehreren NULL-Zeichen (U + 0000).  
  
 Spezifische gültige Formate für Datum und Uhrzeitelemente, als auch die Namen und Symbole der Datums- und Uhrzeitangaben, werden von definiert die `provider` -Parameter, der eine der folgenden sein kann:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierung, in verwendet wird, der `s` Parameter. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft wird definiert, die in verwendete Formatierung `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die in verwendete Formatierung `s`.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider>-Implementierung. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die in verwendete Formatierung `s`.  
  
 Wenn `provider` `null` ist, wird die aktuelle Kultur verwendet.  
  
 Wenn `s` ist die Zeichenfolgendarstellung des ein Schalttag in einem Schaltjahr im aktuellen Kalender, die Methode analysiert `s` erfolgreich. Wenn `s` ist die Zeichenfolgendarstellung des ein Schalttag in einem nicht-Schaltjahr im aktuellen Kalender der `provider`, wird der Analysevorgang misslingt, und die Methode gibt `false`.  
  
 Die `styles` Parameter definiert die genaue Interpretation der analysierten Zeichenfolge und wie der Analysevorgang verarbeiten soll. Es kann sein, ein oder mehrere Elemente von der <xref:System.Globalization.DateTimeStyles> Enumeration, wie in der folgenden Tabelle beschrieben.  
  
|DateTimeStyles-Element|Beschreibung |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, eine Konvertierung in UTC. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Zeitzoneninformationen aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> zurückgegebenen konvertieren <xref:System.DateTime> Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC, darstellt oder wenn `s` enthält keine Informationen zur Zeitzone aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, die keine zeitzonenkonvertierung ausführt, für das zurückgegebene <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen hat das Flag keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Interne Leerzeichen sind zulässig, in den Elementen für Datum und Uhrzeit des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Führendes Leerzeichen sind zulässig, in den Elementen für Datum und Uhrzeit des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Nachfolgende Leerzeichen ist zulässig, in den Elementen für Datum und Uhrzeit des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führenden, inneren und nachgestellte Leerzeichen enthalten kann. Dies ist das Standardverhalten. Es kann nicht überschrieben werden, durch Angeben eines restriktiveren <xref:System.Globalization.DateTimeStyles> Enumerationswert wie z. B. <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um eine lokale Zeit darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, ist die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um die UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die Methode konvertiert die zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl gültig ist, wird dieser Wert ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung einer Zeichenfolge für Datum und Uhrzeit in einer <xref:System.DateTime> Wert mit einer der <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. In der Regel wird durch Aufrufen eine solchen Zeichenfolge erstellt die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Methode mithilfe der Standardformatbezeichner "o", "R" oder "u".|  
  
 Wenn `s` enthält keine Zeitzoneninformationen der <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> es sei denn, eine `styles` Flag nichts anderes angegeben. Wenn `s` Zeitzone oder Offset Zeitzoneninformationen, enthält die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode führt Konvertierung erforderlichen Zeit und gibt einen der folgenden zurück:  
  
-   Ein <xref:System.DateTime> Wert, dessen Datum und Uhrzeit der Ortszeit und deren entsprechend <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   Oder, wenn Sie `styles` enthält die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> Flag ein <xref:System.DateTime> , dessen Datum und Uhrzeit, UTC und deren widerspiegeln, Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Dieses Verhalten kann überschrieben werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag.  
  
## <a name="parsing-custom-cultures"></a>Analysieren von Kulturen  
 Verwenden Sie eine Datum und Uhrzeit-Zeichenfolge, die für eine benutzerdefinierte Kultur generiert analysieren die <xref:System.DateTime.TryParseExact%2A> -Methode anstelle der <xref:System.DateTime.TryParse%2A> Methode, um die Wahrscheinlichkeit zu verbessern, die der Analysevorgang erfolgreich ist. Eine benutzerdefinierte Kultur Datums- und Uhrzeitzeichenfolge möglich komplizierten und schwer zu analysieren. Die <xref:System.DateTime.TryParse%2A> -Methode versucht, eine Zeichenfolge anhand mehrerer implizite Analysemuster zu analysieren, die fehlschlagen. Im Gegensatz dazu die <xref:System.DateTime.TryParseExact%2A> Methode müssen Sie mindestens eine exakte Analysemuster angeben, die voraussichtlich erfolgreich sein werden.  
  
 Weitere Informationen zu benutzerdefinierten Kulturen, finden Sie unter den <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> ist kein gültiger <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
- oder -  
 <paramref name="styles" /> enthält eine ungültige Kombination von <see cref="T:System.Globalization.DateTimeStyles" />-Werten (z. B. <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> und <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> eine neutrale Kultur und kann nicht in einem Analysevorgang verwendet werden.</exception>
        <block subset="none" type="usage">
          <para>Die Formatierung wird durch die Eigenschaften des aktuellen beeinflusst <see cref="T:System.Globalization.DateTimeFormatInfo" /> -Objekt, das vom bereitgestellt wird die <paramref name="provider" /> Parameter. Die <see cref="Overload:System.DateTime.TryParse" /> Methode unerwartet fehl und zurückgeben kann <see langword="False" /> Wenn die aktuelle <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> und <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> Eigenschaften auf den gleichen Wert festgelegt werden.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die <see cref="T:System.DateTime" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss einem angegebenen Format genau entsprechen. Die Methode gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Das erforderliche Format von <c>s</c>.</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <c>s</c> bereitstellt.</param>
        <param name="style">Eine bitweise Kombination eines oder mehrerer Enumerationswerte, die das für <c>s</c> zulässige Format angeben.</param>
        <param name="result">Diese Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTime" />-Wert zurück, der dem Datum und der Zeit in <c>s</c> entspricht, oder <see cref="F:System.DateTime.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <c>s</c>-Parameter oder der <c>format</c>-Parameter <see langword="null" /> entspricht, eine leere Zeichenfolge ist oder keine Datums- und Zeitangabe in dem in <c>format</c> angegebenen Format enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in die entsprechende <see cref="T:System.DateTime" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen. Die Methode gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="s" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der das Format von definiert sein muss die `format` Parameter. Es ähnelt der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode, außer dass die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Methode löst keine Ausnahme aus, wenn die Konvertierung schlägt fehl.  
  
 Die `s` -Parameter enthält das Datum und Uhrzeit, zu analysieren und muss in einem Format von definiert die `format` Parameter. Wenn Datum, Uhrzeit und Zeitzone Elemente vorhanden sind `s`, müssen sie auch in der vom angegebenen Reihenfolge erscheinen `format`. Wenn `format` definiert ein Datum mit kein Zeitelement und die Analyse erfolgreich ist, die resultierende <xref:System.DateTime> Wert hat eine Zeit von Mitternacht (00: 00:00). Wenn `format` definiert eine Uhrzeit mit Datumselement und die Analyse erfolgreich ist, die resultierende <xref:System.DateTime> Wert standardmäßig verfügt ein `DateTime.Now.Date`, oder verfügt über ein `DateTime.MinValue.Date` Wenn `styles` enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> Flag. Die `style` Parameter bestimmt, ob die `s` Parameter kann die führende, innere oder nachgestellten Leerzeichen enthalten.  
  
 Wenn `s` keine Zeitzoneninformationen enthält die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> gekennzeichnet wird, gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn s Zeitzoneninformationen enthält, wird die Zeit in die Ortszeit, konvertiert, falls erforderlich, und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag nicht Coordinated Universal Time (UTC) in eine lokale Zeit konvertieren und Festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Die `format` -Parameter enthält ein Muster, die das erwartete Format von entspricht, dem `s` Parameter. Das Muster in den `format` -Parameter besteht aus einem oder mehreren benutzerdefinierten Formatbezeichnern aus der [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) Tabelle oder einen einzelnen standardbuild-Formatbezeichner, der ein vordefinierten Muster bezeichnet die [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) Tabelle.  
  
 Wenn Sie nicht in ein benutzerdefiniertes Formatmuster Datums- oder Uhrzeitwert Trennzeichen verwenden, verwenden Sie die invariante Kultur für die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Muster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
> [!NOTE]
>  Statt, muss `s` entsprechen, die in ein einzelnes Format, damit der Analysevorgang erfolgreich ist, rufen Sie die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode, und geben Sie mehrere zulässige Formate. Dadurch wird den größere Erfolgsaussichten Analysevorgang.  
  
 Die und Zeit-Symbole und Zeichenfolgen für Datum (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) in verwendet `s` werden definiert, indem die `provider` Parameter, ebenso wie das genaue Format der `s` Wenn `format` ist ein Standardformat Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur, die zum Interpretieren von darstellt `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode gibt entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter enthält einen oder mehrere Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration, die bestimmen, ob und wo Leerzeichen nicht definiert `format` in angezeigt werden können `s` sowie steuern, das genaue Verhalten des Analysevorgangs. In der folgende Tabelle wird beschrieben, wie die einzelnen Member der <xref:System.Globalization.DateTimeStyles> Enumeration wirkt sich auf den Betrieb der <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Methode.  
  
|DateTimeStyles-Element|Beschreibung |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, eine Konvertierung in UTC. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Zeitzoneninformationen aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> zurückgegebenen konvertieren <xref:System.DateTime> Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC, darstellt oder wenn `s` enthält keine Informationen zur Zeitzone aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, die keine zeitzonenkonvertierung ausführt, für das zurückgegebene <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen hat das Flag keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass Leerraum nicht vom definiert `format` können zwischen den einzelnen Datums- oder Zeitelement angezeigt werden.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerraum nicht vom definiert `format` stehen am Anfang des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerraum nicht vom definiert `format` können angezeigt werden, am Ende der `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` darf führenden, inneren und nachfolgende Leerstellen, die nicht vom definiert `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um eine lokale Zeit darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, ist die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um die UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die Methode konvertiert die zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` enthält Zeit ohne Datumsinformationen, das Datum des Rückgabewerts festgelegt ist, um `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Die `s` Parameter wird unter Verwendung von Standardwerten analysiert. Keine Leerstellen als einfache, vorhanden im `format` ist zulässig. Wenn `s` eine Datumskomponente, das Datum des zurückgegebenen <xref:System.DateTime> Wert auf 1/1/0001 festgelegt wird. Wenn `s` keine Zeitzoneninformationen enthält die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn Informationen zur Zeitzone in vorhanden ist `s`, die Uhrzeit wird in die Ortszeit konvertiert und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung in einen <xref:System.DateTime> Wert mit einer der <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Flag wird in erster Linie verhindert, dass die Konvertierung der UTC-Zeit, die lokalen Zeiten.|  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode. Beachten Sie, dass die Zeichenfolge "5/01/2009 8:30 Uhr" nicht erfolgreich analysiert werden bei der `styles` entspricht <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> da Leerzeichen nicht zulässig sind `format`. Darüber hinaus die Zeichenfolge "5/01/2009 09:00 Uhr" nicht erfolgreich analysiert werden, mit einer `format` von "MM/TT/Yyyyhh:mm", da die nicht die Zahl mit führender Null an, für den Monat als Datumszeichenfolge `format` erfordert.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> ist kein gültiger <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
- oder -  
 <paramref name="styles" /> enthält eine ungültige Kombination von <see cref="T:System.Globalization.DateTimeStyles" />-Werten (z. B. <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> und <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> Methodenrückgabe <see langword="false" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formats">Ein Array mit den zulässigen Formaten von <c>s</c>.</param>
        <param name="provider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <c>s</c> bereitstellt.</param>
        <param name="style">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <c>s</c> angibt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Diese Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTime" />-Wert zurück, der dem Datum und der Zeit in <c>s</c> entspricht, oder <see cref="F:System.DateTime.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn <c>s</c> oder <c>formats</c><see langword="null" />, <c>s</c> ist oder ein Element von <c>formats</c> eine leere Zeichenfolge ist, oder wenn das Format von <c>s</c> nicht mindestens einem der Formatmuster in <c>formats</c> genau entspricht. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung des angegebenen Formatarrays, der kulturspezifischen Formatierungsinformationen und des Stils in die <see cref="T:System.DateTime" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss mindestens einem der angegebenen Formate genau entsprechen. Die Methode gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="s" />-Parameter erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der eine der zugewiesenen Muster entspricht der `formats` Parameter. Es ist wie die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode, mit Ausnahme der <xref:System.DateTime.TryParseExact%2A> Methode löst keine Ausnahme aus, wenn die Konvertierung schlägt fehl.  
  
 Die `s` Parameter enthält das Datum und Uhrzeit, zu analysieren. Wenn die `s` -Parameter enthält nur eine Uhrzeit aus, und kein Datum, an das aktuelle Datum verwendet wird, wenn die `style` Parameter enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> kennzeichnen, in diesem Fall das Standarddatum (`DateTime.Date.MinValue`) verwendet wird. Wenn die `s` -Parameter enthält nur ein Datum und keine Uhrzeit, Mitternacht (00: 00:00) verwendet wird. Die `style` Parameter auch bestimmt, ob die `s` Parameter kann führende enthalten, auch andere als die nicht den von der die Formatzeichenfolgen im inneren oder nachstehende Leerzeichen Zeichen `formats`.  
  
 Wenn `s` keine Zeitzoneninformationen enthält die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> gekennzeichnet wird, gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn s Zeitzoneninformationen enthält, wird die Zeit in die Ortszeit, konvertiert, falls erforderlich, und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag nicht Coordinated Universal Time (UTC) in eine lokale Zeit konvertieren und Festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Die `formats` -Parameter enthält ein Array von Mustern verwenden, von denen `s` übereinstimmen, genau, wenn der Analysevorgang erfolgreich ist. Die Muster in den `formats` Parameter bestehen aus einem oder mehreren benutzerdefinierten Formatbezeichnern aus der [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) Tabelle oder einen einzelnen standardbuild-Formatbezeichner, der ein vordefinierten Muster bezeichnet die [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) Tabelle.  
  
 Wenn Sie nicht in ein benutzerdefiniertes Formatmuster Datums- oder Uhrzeitwert Trennzeichen verwenden, verwenden Sie die invariante Kultur für die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Muster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
 Die und Zeit-Symbole und Zeichenfolgen für Datum (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) in verwendet `s` werden definiert, indem die `provider` Parameter, ebenso wie das genaue Format der `s` Wenn `format` ist ein Standardformat Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur, die zum Interpretieren von darstellt `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methode gibt entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter enthält einen oder mehrere Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration, die bestimmen, ob und wo Leerzeichen nicht definiert `format` in angezeigt werden können `s` sowie steuern, das genaue Verhalten des Analysevorgangs. In der folgende Tabelle wird beschrieben, wie die einzelnen Member der <xref:System.Globalization.DateTimeStyles> Enumeration wirkt sich auf den Betrieb der <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Methode.  
  
|DateTimeStyles-Element|Beschreibung |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, eine Konvertierung in UTC. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Zeitzoneninformationen aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> zurückgegebenen konvertieren <xref:System.DateTime> Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC, darstellt oder wenn `s` enthält keine Informationen zur Zeitzone aber `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, die keine zeitzonenkonvertierung ausführt, für das zurückgegebene <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen hat das Flag keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass Leerraum nicht vom definiert `format` können zwischen den einzelnen Datums- oder Zeitelement angezeigt werden.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerraum nicht vom definiert `format` stehen am Anfang des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerraum nicht vom definiert `format` können angezeigt werden, am Ende der `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` darf führenden, inneren und nachfolgende Leerstellen, die nicht vom definiert `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um eine lokale Zeit darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, ist die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um die UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die Methode konvertiert die zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` enthält Zeit ohne Datumsinformationen, das Datum des Rückgabewerts festgelegt ist, um `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Die `s` Parameter wird unter Verwendung von Standardwerten analysiert. Keine Leerstellen als einfache, vorhanden im `format` ist zulässig. Wenn `s` eine Datumskomponente, das Datum des zurückgegebenen <xref:System.DateTime> Wert auf 1/1/0001 festgelegt wird. Wenn `s` keine Zeitzoneninformationen enthält die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn Informationen zur Zeitzone in vorhanden ist `s`, die Uhrzeit wird in die Ortszeit konvertiert und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt nastaven NA hodnotu <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung in einen <xref:System.DateTime> Wert mit einer der <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Flag wird in erster Linie verhindert, dass die Konvertierung der UTC-Zeit, die lokalen Zeiten.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode, um sicherzustellen, dass eine Zeichenfolge in eine Anzahl von möglichen Formate erfolgreich analysiert werden kann.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> ist kein gültiger <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
- oder -  
 <paramref name="styles" /> enthält eine ungültige Kombination von <see cref="T:System.Globalization.DateTimeStyles" />-Werten (z. B. <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> und <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> Methodenrückgabe <see langword="false" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analysieren von Zeichenfolgen für Datum und Uhrzeit in .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.DateTime" />-Objekt ab, das auf die aktuelle Datums- und Uhrzeitangabe auf diesem Rechner als koordinierte Weltzeit (UTC) festgelegt ist.</summary>
        <value>Ein Objekt, dessen Wert die aktuelle Datums- und Uhrzeitangabe in UTC ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Auflösung dieser Eigenschaft hängt von den systemtimer, der von dem zugrunde liegenden Betriebssystem abhängig ist. Es ist meist zwischen 0,5 und 15 Millisekunden.

 Ab .NET Framework, Version 2.0 wird der Rückgabewert ist ein <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> -Eigenschaft gibt <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Eine Alternative zur Verwendung <xref:System.DateTime.UtcNow%2A> ist <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Während der erste Wert gibt an, dass ein Datum und Uhrzeit-Wert (Coordinated Universal Time, UTC) durch Zuweisen von <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> auf seine <xref:System.DateTime.Kind%2A> -Eigenschaft, letztere weist das Datum und Uhrzeit-Wert die UTC-Zeit der Abweichung (gleich <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode, um zu veranschaulichen wie das <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Komponente für das Jahr des Datums ab, das durch diese Instanz dargestellt wird.</summary>
        <value>Das Jahr zwischen 1 und 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Year%2A> Eigenschaft gibt das Jahr des die aktuelle Instanz zurück, im gregorianischen Kalender. Es gibt keine Jahres mithilfe des Standardkalenders der aktuellen Kultur zurück. Sie können zum Abrufen des Jahres mithilfe eines bestimmten Kalenders des Kalenders aufrufen `GetYear` Methode, wie im folgenden Code gezeigt.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.DateTime.Year%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>
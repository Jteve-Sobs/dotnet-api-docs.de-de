<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17335cf7a00859f035135c41af24fcd3718d5ca9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434295" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents an instant in time, typically expressed as a date and time of day.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Links zu Beispielcode

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Dieser Artikel enthält einige Beispiele, in denen die `DateTime` Typ:

**Beispiele für die Initialisierung**      
 [Aufrufen eines Konstruktors](#initialization-01)     
 [Rufen Sie die impliziten Standardkonstruktor](#initialization-02)     
 [Zuweisung von Rückgabewert](#initialization-03)     
 [Analysieren Sie eine Zeichenfolge, die einer Datums- und Uhrzeitangabe darstellt.](#initialization-04)     
 [Visual Basic-Syntax einer Datums- und Uhrzeitangabe initialisiert werden](#initialization-05)     

**Formatieren von `DateTime` Objekte als Zeichenfolgen**  
 [Verwenden Sie das Standardformat für Datum Uhrzeit](#formatting-01)     
 [Formatieren von Datum und Uhrzeit, die eine bestimmte Kultur](#formatting-02)     
 [Formatieren Sie einen Datum-Uhrzeit, die eine standardmäßige oder benutzerdefinierte Formatzeichenfolge verwenden](#formatting-03)     
 [Geben Sie sowohl eine Formatzeichenfolge als auch eine bestimmte Kultur](#formatting-04)     
 [Formatieren Sie einen Datum-Uhrzeit, die mit dem ISO 8601-Standard für Webdienste](#formatting-05)     

**Analysieren von Zeichenfolgen als `DateTime` Objekte**  
 [Verwendung `Parse` oder `TryParse` zum Konvertieren einer Zeichenfolge in ein Datum und Uhrzeit](#parsing-01)     
 [Verwendung `ParseExact` oder `TryParseExact` zum Konvertieren einer Zeichenfolge in einem bekannten Format](#parsing-02)     
 [In einer Datums- und Uhrzeitangabe von der ISO 8601-Zeichenfolgendarstellung konvertieren](#parsing-03)     

**`DateTime` Auflösung**  
 [Untersuchen Sie die Auflösung der Datums-und Uhrzeitwerte](#resolution-01)     
 [Vergleichen von Gleichheit innerhalb einer Toleranz](#comparison-01)     

**Kultur und Kalender**  
 [Zeigt Datum und Uhrzeit-Werte, die mit bestimmten Kalender Kultur](#calendars-01)     
 [Analysieren von Zeichenfolgen gemäß einer bestimmten Kultur-Kalender](#calendars-02)     
 [Initialisieren von einer Datums- und Uhrzeitangabe von einer bestimmten Kultur Kalender](#calendars-03)     
 [Zugreifen auf Datum und Uhrzeit-Eigenschaften, die mit einer bestimmten Kultur Kalender](#calendars-04)     
 [Die Woche des Jahres mit bestimmten Kalender Kultur abrufen](#calendars-05)     

**Persistenz**  
 [Beibehalten von Datum und Uhrzeit-Werte als Zeichenfolgen in die lokale Zeitzone](#persistence-01)     
 [Beibehalten von Datum und Uhrzeit-Werte als Zeichenfolgen in einem invariante Kultur und die Uhrzeit-format](#persistence-02)     
 [Beibehalten von Datum und Uhrzeit-Werte als ganze Zahlen](#persistence-03)     
 [Beibehalten von Datums- und Uhrzeitangabe Werte mithilfe der `XmlSerializer`](#persistence-04)     
 [Beibehalten von Datums- und Uhrzeitangabe Werte mithilfe der `BinaryFormatter`](#persistence-05)     
 [Beibehalten von Datum und Uhrzeit-Werte mit Zeitzonendaten](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Quicklinks zu Themen, die "Hinweise".

Dieser Abschnitt enthält Hilfethemen für viele häufige Verwendungsmöglichkeiten von der `DateTime` Struktur:
  
 [Initialisieren einer `DateTime` Objekt](#initializing-a-datetime-object)   
 [DateTime-Werte und deren zeichenfolgendarstellungen](#datetime-values-and-their-string-representations)   
 [Analysieren von DateTime-Werte von Zeichenfolgen](#parsing-datetime-values-from-strings)   
 [DateTime-Werte](#datetime-values)   
 ["DateTime"-Vorgänge](#datetime-operations)   
 ["DateTime" Auflösung](#datetime-resolution)   
 [DateTime-Werte und Kalender](#datetime-values-and-calendars)   
 [Beibehalten von DateTime-Werte](#persisting-datetime-values)   
 [Im Vergleich mit "DateTime" TimeSpan](#datetime-vs-timespan)   
 [Vergleichen von Gleichheit innerhalb des Toleranzbereichs](#comparing-for-equality-within-tolerance) [COM-Interop-Überlegungen](#com-interop-considerations)  
   
Die <xref:System.DateTime> Werttyp stellt Datumsangaben und Zeiten mit Werten im Bereich von 00:00:00 (Mitternacht), 1. Januar 0001 nach Christus (Common Era) und 11:59:59, 31. Dezember 9999 n. Chr. (C.E.) im gregorianischen Kalender.  
  
Zeitwerte werden in so genannten 100-Nanosekunden-Ticks gemessen. Ein bestimmtes Datum wird die Anzahl der Ticks seit 12:00 Uhr, 1. Januar 0001 n. Chr. (C.E.) in der <xref:System.Globalization.GregorianCalendar> Kalender. Die Zahl schließt Ticks, die von Schaltsekunden hinzugefügt werden würden. Beispielsweise stellt einen Tickswert von 31241376000000000 das Datum Freitag, 01 Januar 0100 12:00:00 Uhr. Ein <xref:System.DateTime> Wert wird immer im Kontext einer expliziten oder Standardkalender angegeben.  
  
> [!NOTE]
>  Wenn Sie mit einem Tickswert arbeiten werden, dass Sie in ein anderes Zeitintervall, z. B. Minuten oder Sekunden konvertieren möchten, verwenden Sie die <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, oder <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> Konstante zum Durchführen der Konvertierung. Z. B. die Anzahl der Sekunden hinzufügen dargestellt durch eine angegebene Anzahl von Ticks zum der <xref:System.DateTime.Second%2A> -Komponente eine <xref:System.DateTime> Wert können Sie den Ausdruck `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Sie können die Quelle für die gesamte Gruppe der Beispiele in diesem Artikel anzeigen, entweder in [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) oder [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) aus dem Docs-Repository auf GitHub.

> [!NOTE]
>  Eine Alternative zu den <xref:System.DateTime> -Struktur zum Arbeiten mit Datums-und Uhrzeitwerte in bestimmten Zeitzonen ist die <xref:System.DateTimeOffset> Struktur. Die <xref:System.DateTimeOffset> -Struktur speichert Datums-und Uhrzeitinformationen in einem privaten <xref:System.DateTime> Feld und die Anzahl der Minuten, die nach dem Datum und Uhrzeit, von UTC abweicht, in einem privaten <xref:System.Int16> Feld. Dies macht es möglich, dass eine <xref:System.DateTimeOffset> Wert, der die Zeit in einer bestimmten Zeitzone widerspiegeln, wohingegen ein <xref:System.DateTime> Wert reflektiert eindeutig nur UTC und die lokale Zeitzone. Nähere Informationen zur Verwendung der <xref:System.DateTime> Struktur oder das <xref:System.DateTimeOffset> -Struktur bei der Arbeit mit Datums-und Uhrzeitwerte, finden Sie unter [Choosing Between DateTime, DateTimeOffset TimeSpan und "TimeZoneInfo"](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Initialisieren ein DateTime-Objekt  

Sie können einen Anfangswert zuweisen, um ein neues `DateTime` Wert auf viele verschiedene Arten:

- Aufruf eines Konstruktors, der einen in dem Sie die Argumente für Werte angeben oder den impliziten Standardkonstruktor verwenden.
- Zuweisen einer `DateTime` auf den Wert einer Eigenschaft oder Methode.
- Analysieren einer `DateTime` Wert aus seiner Zeichenfolgendarstellung.
- Verwenden bestimmte Visual Basic-Sprachfunktionen zum Instanziieren einer `DateTime`. 

Die folgenden Codeausschnitte veranschaulichen die Beispiele der einzelnen:

#### <a name="invoke-constructors"></a>Aufrufen von Konstruktoren

Rufen Sie eine der Überladungen der der <xref:System.DateTime> Konstruktor, der Elemente des Wert für Datum und Uhrzeit (z. B. dem Jahr, Monat und Tag oder die Anzahl der Ticks) angegeben. Der folgende Code erstellt ein bestimmtes Datum mit dem <xref:System.DateTime> Konstruktor angeben, der Jahr, Monat, Tag, Stunde, Minute und Sekunde.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Rufen Sie die `DateTime` Struktur des impliziten Standardkonstruktor, wenn Sie möchten eine `DateTime` auf seinen Standardwert initialisiert. (Ausführliche Informationen zu den impliziten Standardkonstruktor eines Werttyps, finden Sie unter [Werttypen](~/docs/csharp/language-reference/keywords/value-types.md).) Bei einigen Compilern unterstützen auch Deklarieren einer <xref:System.DateTime> Wert ohne explizit einen Wert zuzuweisen. Erstellen einen Wert ohne eine explizite Initialisierung auch führt der Standardwert. Das folgende Beispiel veranschaulicht die <xref:System.DateTime> impliziten Standardkonstruktor in c# und Visual Basic als auch eine <xref:System.DateTime> Deklaration ohne Zuweisung in Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Zuweisen eines berechneten Werts

Sie können Zuweisen der <xref:System.DateTime> einen Datum und Uhrzeit-Wert einer Eigenschaft oder Methode zurückgegebenes Objekt. Im folgende Beispiel weist das aktuelle Datum und Zeit, die aktuelle Coordinated Universal Time (UTC) Datum und Zeit und dem aktuellen Datum drei neue <xref:System.DateTime> Variablen.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analysieren Sie eine Zeichenfolge, die einen datetime-Wert darstellt.

Die <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, und <xref:System.DateTime.TryParseExact%2A> alle Methoden Konvertieren einer Zeichenfolge in ihren entsprechenden Datums- und Uhrzeitwert. Die folgenden Beispiele verwenden die <xref:System.DateTime.Parse%2A> und <xref:System.DateTime.ParseExact%2A> Methoden, um eine Zeichenfolge zu analysieren und konvertieren Sie sie in einem <xref:System.DateTime> Wert. Das zweite Format kommt eine Form, die von unterstützt die [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard für darstellen Datum und Uhrzeit im Zeichenfolgenformat. Diese standard-Darstellung wird häufig verwendet, um Datumsinformationen in Web Services zu übertragen.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

Die <xref:System.DateTime.TryParse%2A> und <xref:System.DateTime.TryParseExact%2A> Methoden geben an, ob eine Zeichenfolge eine gültige Darstellung des ein <xref:System.DateTime> Wert und, wenn dies der Fall, führt die Konvertierung.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sprachspezifische Syntax für Visual Basic

Die folgende Visual Basic-Anweisung initialisiert eine neue <xref:System.DateTime> Wert.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>DateTime-Werte und deren zeichenfolgendarstellungen  

Intern werden alle <xref:System.DateTime> Werte dargestellt werden, als die Anzahl der Ticks (die Anzahl der 100-Nanosekunden-Intervallen), die seit 12:00:00 Mitternacht, 1. Januar 0001 vergangen sind. Die tatsächlichen <xref:System.DateTime> Wert unabhängig von der Methode, die sich dieser Wert wird angezeigt, wenn angezeigt wird. Die Darstellung einer <xref:System.DateTime> Wert ist das Ergebnis eines Formatierungsvorgangs, die einen Wert in seine Zeichenfolgendarstellung konvertiert.  
  
Die Darstellung von Datums-und Uhrzeitwerte ist abhängig von der Kultur, internationalen Normen anwendungsanforderungen und persönlichen Vorlieben. Die <xref:System.DateTime> Struktur bietet Flexibilität bei der Formatierung von Datum und Uhrzeit-Werte über Überladungen des <xref:System.DateTime.ToString%2A>. Die Standardeinstellung <xref:System.DateTime.ToString?displayProperty=nameWithType> Methode gibt die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe-Wert, mit der aktuellen Kultur kurzes Datum und langes Zeitmuster. Im folgenden Beispiel wird die Standardeinstellung <xref:System.DateTime.ToString?displayProperty=nameWithType> Methode. Es zeigt das Datum und die Uhrzeit an, indem das kurze Datum und lange Uhrzeitmuster für die aktuelle Kultur. Die Kultur En-US ist die aktuelle Kultur auf dem Computer, auf dem das Beispiel ausgeführt wurde.  
  
<a name="formatting-01"></a> [!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Sie müssen möglicherweise Datumsangaben in einer bestimmten Kultur, Web-Szenarien zu unterstützen, in dem der Server in einer anderen Kultur vom Client möglicherweise, formatiert. Sie geben die Kultur mit der <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> Methode, um das kurze Datum und lange Zeit Darstellung in einer bestimmten Kultur zu erstellen. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> zeigt das Datum und Uhrzeit, mit dem kurzen Datumsformat und langes Zeitmuster für die Kultur fr-FR-Methode.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Andere Anwendungen möglicherweise andere zeichenfolgendarstellungen eines Datums. Die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Methode gibt die Zeichenfolge durch eine standardmäßige oder benutzerdefinierte Formatbezeichner, der Verwendung der Formatierungskonventionen der aktuellen Kultur definiert. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Kultur Methode, um das vollständige Datums- und Uhrzeitmuster für En-US anzuzeigen, die die aktuelle Kultur auf dem Computer, auf dem das Beispiel ausgeführt wurde.  
  
<a name="formatting-03"></a> [!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Schließlich können Sie angeben, sowohl die Kultur und das Format mithilfe der <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methode. Im folgenden Beispiel wird die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methode, um das vollständige Datums- und Uhrzeitmuster für die Kultur fr-FR anzuzeigen.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

Die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Überladung kann auch mit einer benutzerdefinierten Formatzeichenfolge verwendet werden, um andere Formate anzugeben. Im folgende Beispiel wird gezeigt, wie zum Formatieren einer Zeichenfolge mit der [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) Standardformat häufig für Webdienste verwendet. Iso 8601-Formats muss eine entsprechende Standardformatzeichenfolge nicht.

<a name="formatting05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Weitere Informationen zur Formatierung <xref:System.DateTime> -Werte finden Sie in [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Analysieren von DateTime-Werte von Zeichenfolgen

Analysieren von konvertiert die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in einem <xref:System.DateTime> Wert. Datum- und Uhrzeitzeichenfolgen werden in der Regel zwei verschiedene Verwendungen in Anwendungen haben:  
  
-   Datum und Uhrzeit akzeptiert verschiedene Formen und gibt den Konventionen der aktuellen Kultur oder einer bestimmten Kultur wieder. Beispielsweise kann eine Anwendung einen Benutzer, dessen aktuelle Kultur En-US, um einen Date-Wert als "12/15/2013" oder "15. Dezember 2013" eingegeben wird. Sie ermöglicht dem Benutzer, dessen aktuelle Kultur "En-gb für die Eingabe von einem Datumswert als" 12/15/2013"oder"15 Dezember 2013.""  
  
-   Datum und Uhrzeit wird in einem vordefinierten Format dargestellt. Eine Anwendung serialisiert z. B. ein Datum als "20130103" unabhängig von der Kultur, die auf der die app ausgeführt wird. Eine Anwendung erfordert möglicherweise eine Datumsangaben im kurzen Datumsformat der aktuellen Kultur eingegeben werden.
  
Verwenden Sie die <xref:System.DateTime.Parse%2A> oder <xref:System.DateTime.TryParse%2A> Methode zum Konvertieren einer Zeichenfolge aus einem der allgemeinen Datums- und Zeitformate, die durch eine Kultur verwendet eine <xref:System.DateTime> Wert. Das folgende Beispiel zeigt, wie Sie verwenden können <xref:System.DateTime.TryParse%2A> Datumszeichenfolgen in verschiedene kulturspezifische Formate zum Konvertieren einer <xref:System.DateTime> Wert. Es ändert die aktuelle Kultur auf Englisch (Großbritannien) und in Aufrufen der <xref:System.DateTime.GetDateTimeFormats> Methode zum Generieren der ein Array von Zeichenfolgen für Datum und Uhrzeit. Es übergibt dann jedes Element im Array der <xref:System.DateTime.TryParse%2A> Methode. Die Ausgabe des Beispiels zeigt, dass die Analysemethode erfolgreich einzelnen kulturabhängige Datums- und Uhrzeitzeichenfolgen konvertieren konnte.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Verwenden Sie die <xref:System.DateTime.ParseExact%2A> und <xref:System.DateTime.TryParseExact%2A> Methoden zum Konvertieren einer Zeichenfolge, die mit einem bestimmten Format oder Formate, die übereinstimmen müssen eine <xref:System.DateTime> Wert. Geben Sie eine oder mehrere Datum und Uhrzeit-Formatzeichenfolgen, als Parameter an die Analysemethode. Im folgenden Beispiel wird die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Methode, um Zeichenfolgen zu konvertieren, die entweder in einem "JJJJMMTT" Format "oder" Format "HHmmss", sein müssen <xref:System.DateTime> Werte.  
  
<a name="parsing-02"></a> [!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Eine häufige Verwendung von <xref:System.DateTime.ParseExact%2A> besteht darin, eine Zeichenfolgendarstellung von einem Webdienst in der Regel in konvertieren [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) Standardformat. Der folgende Code zeigt die richtige Formatzeichenfolge verwenden:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Wenn eine Zeichenfolge kann nicht analysiert werden, die <xref:System.DateTime.Parse%2A> und <xref:System.DateTime.ParseExact%2A> Methoden eine Ausnahme auslösen. Die <xref:System.DateTime.TryParse%2A> und <xref:System.DateTime.TryParseExact%2A> -Methoden zurückgeben einer <xref:System.Boolean> Wert, der angibt, ob die Konvertierung erfolgreich war oder nicht. Verwenden Sie die <xref:System.DateTime.TryParse%2A> oder <xref:System.DateTime.TryParseExact%2A> Methoden in Szenarien, in denen Leistung wichtig ist. Der Analysevorgang für Datum- und Uhrzeitzeichenfolgen tendenziell auch eine hohe Fehlerrate und Behandlung von Ausnahmen ist teuer. Diese Methoden verwenden, wenn die Zeichenfolgen vom Benutzer eingegeben werden, oder aus einer unbekannten Quelle stammen. 
  
Weitere Informationen zum Analysieren von Datums-und Uhrzeitwerte finden Sie unter [Analysieren von Zeichenfolgen für Datum und Uhrzeit](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>DateTime-Werte

Beschreibungen der Time-Werten der <xref:System.DateTime> sind häufig ausgedrückt wird mit den standardmäßigen Coordinated Universal Time (UTC). Koordinierte Weltzeit heißt International für Greenwich Mean Time (GMT). Koordinierte Weltzeit ist die Zeit auf 0 (null) Längengrad der UTC-Ursprungspunkt gemessen. Sommerzeit gilt nicht in UTC.  
  
Ortszeit ist relativ zu einer bestimmten Zeitzone. Eine Zeitzone ist ein Zeitzonenoffset zugeordnet. Ein Zeitzonenoffset ist die Verschiebung der Zeitzone, gemessen in Stunden zwischen UTC-Ursprungspunkt. Darüber hinaus wird Ortszeit optional die Sommerzeit, beeinflusst hinzufügt, oder subtrahiert einen Zeitunterschied Intervall. Ortszeit wird berechnet, indem Sie den Zeitzonenoffset (UTC) und für die Sommerzeit bei Bedarf anpassen. Der Zeitzonenoffset zur UTC-Ursprungspunkt ist 0 (null).  
  
UTC-Zeit eignet sich für Berechnungen, Vergleiche, das Speichern von Datums- und Uhrzeitangaben in Dateien. Ortszeit eignet sich für die Anzeige in Benutzeroberflächen von desktopanwendungen. Zeitzonenfähigen Anwendungen (z. B. viele Webanwendungen) müssen auch eine Reihe von anderen Zeitzonen arbeiten.  
  
Wenn die <xref:System.DateTime.Kind%2A> Eigenschaft eine <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, es ist nicht angegeben, ob die Zeitangabe Ortszeit, UTC-Zeit oder eine Uhrzeit in einer anderen Zeitzone ist.  

### <a name="datetime-resolution"></a>"DateTime" Auflösung
  
> [!NOTE]
>  Als Alternative zum Ausführen von Datums- und uhrzeitberechnungen auf <xref:System.DateTime> Werte zum Messen der verstrichenen Zeit, können Sie die <xref:System.Diagnostics.Stopwatch> Klasse.  
  
Die <xref:System.DateTime.Ticks%2A> Eigenschaft ausdrückt, Datum und Uhrzeit-Werte in der Einheit ein zehnmillionstel einer Sekunde. Die <xref:System.DateTime.Millisecond%2A> Eigenschaft gibt die Tausendstelsekunden in einem Datums- und Uhrzeitangabe zurück. Wiederholte Aufrufe mithilfe der <xref:System.DateTime.Now%2A?displayProperty=nameWithType> Eigenschaft zum Messen der verstrichenen Zeit ist abhängig von der Systemuhr. Die Systemuhr auf Windows 7 und Windows 8 verfügt über eine Auflösung von ca. 15 Millisekunden. Diese Lösung wirkt sich auf kleine Zeiträume, in weniger als 100 Millisekunden. 
  
Das folgende Beispiel veranschaulicht die Abhängigkeit des aktuellen Datums- und Uhrzeitwerten von der Auflösung der Systemuhr. Im Beispiel eine äußere Schleife wird 20-Mal wiederholt, und eine innere Schleife dient, um die äußere Schleife zu verzögern. Wenn der Wert des Leistungsindikators äußere Schleife 10, einen Aufruf der <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> Methode führt eine fünf Millisekunden-Verzögerung. Das folgende Beispiel zeigt die Anzahl der Millisekunden zurückgegeben, durch die `DateTime.Now.Milliseconds` eigenschaftenänderungen nur nach dem Aufruf von <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>"DateTime"-Vorgänge  

Eine Berechnung mit einem <xref:System.DateTime> strukturieren, wie z. B. <xref:System.DateTime.Add%2A> oder <xref:System.DateTime.Subtract%2A>, ändert sich nicht auf den Wert der Struktur. Die Berechnung gibt stattdessen ein neues <xref:System.DateTime> -Struktur, deren Wert das Ergebnis der Berechnung ist.  
  
Konvertierungsoperationen zwischen Zeitzonen (z. B. zwischen UTC und Ortszeit oder zwischen einer Zeitzone) wird die Sommerzeit berücksichtigt, arithmetische und Vergleich jedoch nicht.  
  
Die <xref:System.DateTime> Struktur selbst bietet eingeschränkte Unterstützung für die Konvertierung von einer Zeitzone in eine andere. Können Sie die <xref:System.DateTime.ToLocalTime%2A> -Methode zum Konvertieren von UTC in Ortszeit, oder Sie können die <xref:System.DateTime.ToUniversalTime%2A> Methode, um von der Ortszeit in UTC konvertieren. Ein breites Spektrum an Methoden für die Konvertierung von Zeitzone ist jedoch verfügbar, in der <xref:System.TimeZoneInfo> Klasse. In die Zeit in einer beliebigen anderen Zeitzone mit diesen Methoden konvertieren Sie die Zeit in einer beliebigen anderen Zeitzonen der Welt.  
  
Berechnungen und Vergleiche von <xref:System.DateTime> Objekte sind von Bedeutung, nur dann, wenn die Objekte Zeiten in der gleichen Zeitzone darstellen. Können Sie eine <xref:System.TimeZoneInfo> Objekt zur Darstellung einer <xref:System.DateTime> Zeitwerts Time zone, obwohl die beiden lose miteinander verbunden sind. Ein <xref:System.DateTime> Objekt verfügt nicht über die Eigenschaft, die ein Objekt zurückgibt, die die Zeitzone, Datum und Uhrzeit-Wert darstellt. Die <xref:System.DateTime.Kind%2A> Eigenschaft gibt an, ob eine `DateTime` Ortszeit oder UTC darstellt, oder ist nicht angegeben. In zeitzonenfähigen Anwendungen müssen Sie basieren auf einen externen Mechanismus aus, um zu bestimmen, die Zeitzone, in dem ein <xref:System.DateTime> Objekt erstellt wurde. Können Sie eine Struktur, die beide dient als Wrapper für die <xref:System.DateTime> Wert und die <xref:System.TimeZoneInfo> Objekt, das darstellt der <xref:System.DateTime> Zeitzone des Werts. Weitere Informationen zur Verwendung von UTC in Berechnungen und Vergleiche mit <xref:System.DateTime> -Werte finden Sie in [Ausführen von arithmetischen Operationen mit Datumsangaben und Uhrzeiten](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Jede <xref:System.DateTime> Member verwendet implizit den gregorianischen Kalender, die für den Vorgang. Ausnahmen sind Methoden, die implizit einen Kalender angeben. Dazu gehören Konstruktoren, die einen Kalender angeben, Methoden und mit einem Parameter von <xref:System.IFormatProvider>, wie z. B. <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Vorgänge, die von einem Mitglied der <xref:System.DateTime> Typ berücksichtigen Einzelheiten wie Schaltjahren und die Anzahl von Tagen im Monat.  

## <a name="datetime-values-and-calendars"></a>DateTime-Werte und Kalender  

Der .NET Framework-Klassenbibliothek umfasst eine Reihe von Klassen für Kalender, die abgeleitet sind die <xref:System.Globalization.Calendar> Klasse.  Dies sind:  
  
-   Der <xref:System.Globalization.ChineseLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.EastAsianLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.GregorianCalendar>-Klasse.  
-   Der <xref:System.Globalization.HebrewCalendar>-Klasse.  
-   Der <xref:System.Globalization.HijriCalendar>-Klasse.  
-   Der <xref:System.Globalization.JapaneseCalendar>-Klasse.  
-   Der <xref:System.Globalization.JapaneseLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.JulianCalendar>-Klasse.  
-   Der <xref:System.Globalization.KoreanCalendar>-Klasse.  
-   Der <xref:System.Globalization.KoreanLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.PersianCalendar>-Klasse.  
-   Der <xref:System.Globalization.TaiwanCalendar>-Klasse.  
-   Der <xref:System.Globalization.TaiwanLunisolarCalendar>-Klasse.  
-   Der <xref:System.Globalization.ThaiBuddhistCalendar>-Klasse.  
-   Der <xref:System.Globalization.UmAlQuraCalendar>-Klasse.  
  
Jede Kultur verwendet einen Standardkalender, durch dessen schreibgeschützt definierten <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> Eigenschaft. Jede Kultur unterstützen möglicherweise mindestens ein Kalender, die durch seine schreibgeschützt definierten <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> Eigenschaft. Der derzeit durch ein bestimmtes verwendete Kalender <xref:System.Globalization.CultureInfo> Objekt definiert ist, durch dessen <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> Eigenschaft. Muss es sich um eine finden im Kalender das <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> Array.  
  
Aktueller Kalender einer Kultur wird in allen Formatierungsvorgänge für die jeweilige Kultur verwendet. Beispielsweise ist der Standardkalender der Kultur buddhistischen Thai buddhistischen Zeitraum Kalender der dargestellt wird, indem Sie die <xref:System.Globalization.ThaiBuddhistCalendar> Klasse.  Wenn ein <xref:System.Globalization.CultureInfo> -Objekt, das den buddhistischen Kultur darstellt, in einem Datums- und uhrzeitformatierung Vorgang verwendet wird, der Kalender Thai buddhistischen Zeitraum wird standardmäßig verwendet. Der gregorianische Kalender verwendet wird, nur dann, wenn der Kultur <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> Eigenschaft geändert wird, wie im folgenden Beispiel gezeigt:  

<a name="calendars-01"></a> [!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Aktueller Kalender einer Kultur wird auch in allen Analysevorgänge für die jeweilige Kultur verwendet, wie im folgenden Beispiel gezeigt.  
  
<a name="calendars-02"></a> [!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Instanziieren Sie ein <xref:System.DateTime> -Wert mit Datum und Uhrzeit Elemente (Anzahl der Jahr, Monat und Tag) für einen bestimmten Kalender durch Aufrufen einer ["DateTime"-Konstruktor](xref:System.DateTime.%23ctor%2A) , umfasst eine `calendar` Parameter und zur Übergabe an ein <xref:System.Globalization.CultureInfo.Calendar%2A>-Objekt, das diesen Kalender darstellt. Im folgenden Beispiel wird das Datum und Uhrzeit Elemente aus der <xref:System.Globalization.ThaiBuddhistCalendar> Kalender.  
  
<a name="calendars-03"></a> [!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> Konstruktoren, die keine `calendar` Parameter wird davon ausgegangen, dass die Datums- und Uhrzeitangabe Elemente als Einheiten im gregorianischen Kalender ausgedrückt werden.  
  
Alle anderen <xref:System.DateTime> Eigenschaften und Methoden verwenden den gregorianischen Kalender. Z. B. die <xref:System.DateTime.Year%2A?displayProperty=nameWithType> Eigenschaft gibt das Jahr im gregorianischen Kalender und die <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> Methode setzt voraus, dass die `year` Parameter ist ein Jahr im gregorianischen Kalender.  Jede <xref:System.DateTime> Element, das den gregorianischen Kalender verwendet wurde, einen entsprechenden Member der der <xref:System.Globalization.CultureInfo.Calendar%2A> -Klasse, die einen bestimmten Kalender verwendet. Z. B. die <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> Methodenrückgabe des Jahres in einem bestimmten Kalender und die <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> -Methode interpretiert die `year` Parameter als eine Zahl in einem bestimmten dar. Im folgenden Beispiel wird sowohl die <xref:System.DateTime> und den entsprechenden Mitgliedern von der <xref:System.Globalization.ThaiBuddhistCalendar> Klasse.  
  
<a name="calendars-04"></a> [!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

Die <xref:System.DateTime> Struktur umfasst eine <xref:System.DateTime.DayOfWeek%2A> Eigenschaft, die den Tag der Woche im gregorianischen Kalender zurückgibt. Es umfasst nicht Mitglied, das Sie die Nummer der Woche des Jahres abrufen können. Um die Woche des Jahres zu abzurufen, rufen Sie die einzelnen Kalender <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> Methode. Dies wird im folgenden Beispiel veranschaulicht.  
  
<a name="calendars-05"></a> [!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Weitere Informationen zu Datumsangaben und Kalender, finden Sie unter [arbeiten mit Kalendern](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Beibehalten von DateTime-Werte  

Sie können beibehalten <xref:System.DateTime> Werte gibt es vier Möglichkeiten:  
  
-   Sie [in Zeichenfolgen konvertiert werden](#persisting-values-as-strings) und Beibehalten von Zeichenfolgen.  
-   Sie [Konvertieren von 64-Bit-Ganzzahlwerte](#persisting-values-as-integers) (der Wert von der <xref:System.DateTime.Ticks%2A> Eigenschaft) und Beibehalten von ganzen Zahlen.  
-   Sie [serialisieren die Datums-/ Uhrzeitwerten](#serializing-dateTime-values).  
-   Sie [Serialisieren der DateTime-Werte zusammen mit Informationen zur Zeitzone](#serializing-datetime-and-time-zone-data).  
  
Sie müssen sicherstellen, dass die Routine, die wiederherstellt der <xref:System.DateTime> Werte keine Daten verloren gehen oder löst eine Ausnahme, die unabhängig davon, welche Methode Sie auswählen. <xref:System.DateTime> Werte sollten Roundtrip. D. h. sollte den ursprünglichen Wert und der wiederhergestellte Wert identisch sein. Und wenn die ursprüngliche <xref:System.DateTime> Wert stellt eine einzelne Zeitinstanz, muss es identifizieren, die gleichen Moment Zeit, wenn sie wiederhergestellt wird.  
  
#### <a name="persisting-values-as-strings"></a>Beibehalten von Werten als Zeichenfolgen  

Erfolgreich wiederherstellen <xref:System.DateTime> Werte, die als Zeichenfolgen beibehalten werden folgende Regeln zu beachten:  
  
-   Annahmen Sie die gleichen über die kulturabhängige Formatierung, wenn Sie die Zeichenfolge als wenn Sie sie beibehalten wiederherstellen. Stellen Sie sicher, dass eine Zeichenfolge in einem System wiederhergestellt werden kann, dessen aktuelle Kultur unterscheidet sich von der Kultur des Systems auf gespeicherten, Aufrufen der <xref:System.DateTime.ToString%2A> Überladung, um die Zeichenfolge mit den Konventionen der invarianten Kultur zu speichern. Rufen Sie die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> oder <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> methodenüberladung, um die Zeichenfolge wiederherstellen, indem Sie mit den Konventionen der invarianten Kultur. Verwenden Sie niemals die <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, oder <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> Überladungen, die die Konventionen der aktuellen Threadkultur verwendet.  
  
-   Wenn das Datum über einen einzigen Zeitpunkt darstellt, stellen Sie sicher, dass sie den gleichen Zeitpunkt darstellt, wenn es auch in einer anderen Zeitzone wiederhergestellt, ist. Konvertieren der <xref:System.DateTime> Wert (Coordinated Universal Time, UTC), und speichern Sie es. Sie können auch den Wert zusammen mit Zeitzoneninformationen zu serialisieren. Weitere Informationen zu diesem Verfahren finden Sie unter [Daten serialisieren, "DateTime" und Zeitzone](#TimeZone).  
  
 Der häufigste Fehler, die durchgeführt wird, wenn beibehalten <xref:System.DateTime> Werten als Zeichenfolgen ist, um auf die Formatierungskonventionen der standardmäßigen oder der aktuellen Kultur basieren. Probleme auftreten, wenn die aktuelle Kultur anders aus, wenn speichern und Wiederherstellen von Zeichenfolgen ist. Das folgende Beispiel veranschaulicht diese Probleme. Es speichert fünf Datumsangaben, die Verwendung der Formatierungskonventionen der aktuellen Kultur, die in diesem Fall Englisch (Vereinigte Staaten) ist. Es stellt wieder her, die Datumsangaben, die Verwendung der Formatierungskonventionen der einer anderen Kultur, die in diesem Fall Englisch (Großbritannien) ist. Da die Formatierungskonventionen der Kulturen zwei unterschiedlich sind, zwei Datumsangaben nicht wiederhergestellt werden, und die verbleibenden drei Datumsangaben falsch interpretiert werden. Darüber hinaus handelt es sich bei der ursprünglichen Werte für Datum und Uhrzeit einzelne Momente beziehen, die wiederhergestellte Zeiten sind falsch, da die Zeitzoneninformationen verloren geht.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Für den roundtripvorgang <xref:System.DateTime> Werte erfolgreich, gehen Sie folgendermaßen vor:  
  
1.  Wenn die Werte die einzelne Minuten Zeit darstellen, konvertieren Sie sie aus der lokalen Zeit in UTC durch Aufrufen der <xref:System.DateTime.ToUniversalTime%2A> Methode.  
1.  Konvertieren von Datumsangaben in deren zeichenfolgendarstellungen durch Aufrufen der <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> überladen. Verwenden Sie die Formatierungskonventionen der invarianten Kultur durch Angabe <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> als die `provider` Argument. Geben Sie, dass der Wert mit der Standardformatzeichenfolge "O" oder "R" zurückkonvertiert werden sollte.  
  
Zum Wiederherstellen des beibehaltenen <xref:System.DateTime> Werte ohne Datenverlust, gehen Sie folgendermaßen vor:  
  
1.  Die Daten analysieren, durch Aufrufen der <xref:System.DateTime.ParseExact%2A> oder <xref:System.DateTime.TryParseExact%2A> überladen. Geben Sie <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> als die `provider` Argument, und verwenden Sie die gleiche Standardformat Zeichenfolge für die `format` Argument bei der Konvertierung. Enthalten die <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Wert in der `styles` Argument.  
1.  Wenn die <xref:System.DateTime> Werte darzustellen, einzelne Momente beziehen, rufen die <xref:System.DateTime.ToLocalTime%2A> Methode, um das analysierte Datum von UTC in die Ortszeit zu konvertieren.  
  
Im folgenden Beispiel wird die invariante Kultur und die Standardformatzeichenfolge "O", um sicherzustellen, dass <xref:System.DateTime> Werte gespeichert und wiederhergestellt darstellen, den gleichen Zeitpunkt unabhängig vom System, die Kultur oder die Zeitzone der Quell- und Ziel-Systeme.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Beibehalten von Werten als ganze Zahlen  

Sie können ein Datum und eine Uhrzeit als beibehalten einer <xref:System.Int64> Wert, der eine Anzahl von Ticks darstellt. In diesem Fall Sie haben nicht die Kultur der Systeme zu berücksichtigen die <xref:System.DateTime> Werte beibehalten und auf wiederhergestellt werden.  
  
Beibehalten einer <xref:System.DateTime> Wert als ganze Zahl:  
  
-   Wenn die <xref:System.DateTime> Werte stehen für einzelne Momente beziehen, diese in UTC konvertieren, durch Aufrufen der <xref:System.DateTime.ToUniversalTime%2A> Methode.  
-   Die Anzahl der Ticks Abrufen der <xref:System.DateTime> Wert aus der <xref:System.DateTime.Ticks%2A> Eigenschaft.  
  
Zum Wiederherstellen einer <xref:System.DateTime> -Wert, der als ganze Zahl persistent gespeichert wurde:  
  
1.  Instanziieren Sie ein neues <xref:System.DateTime> -Objekt durch Übergeben der <xref:System.Int64> -Wert an die <xref:System.DateTime.%23ctor%28System.Int64%29> Konstruktor.  
1.  Wenn die <xref:System.DateTime> Wert stellt einen einzelnen Zeitpunkt dar, konvertieren Sie diesen von UTC in die lokale Uhrzeit, durch Aufrufen der <xref:System.DateTime.ToLocalTime%2A> Methode.  
  
Im folgenden Beispiel wird weiterhin besteht, ein Array von <xref:System.DateTime> Werte als ganze Zahlen in einem System in den USA Zeitzone Pacific verwendet wird. Sie werden auf einem System in der UTC-Zone wiederhergestellt. Enthält die Datei, die ganze Zahlen enthält, ein <xref:System.Int32> -Wert, der die Gesamtzahl der <xref:System.Int64> Werte, die unmittelbar folgen.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>Serialisieren von DateTime-Werte  

Sie können beibehalten <xref:System.DateTime> Werte mittels Serialisierung an einen Stream oder Datei, und klicken Sie dann wiederherstellen werden durch Deserialisierung. <xref:System.DateTime> Daten werden in einem angegebenen Objekt-Format serialisiert. Die Objekte werden wiederhergestellt, wenn sie deserialisiert werden. Ein Formatierungsprogramm oder Serialisierer, wie z. B. <xref:System.Xml.Serialization.XmlSerializer> oder <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, verarbeitet die Serialisierung und Deserialisierung durchzuführen. Weitere Informationen zu Serialisierung und die Art der Serialisierung von .NET Framework unterstützt, finden Sie unter [Serialisierung](~/docs/standard/serialization/index.md).
  
Im folgenden Beispiel wird die <xref:System.Xml.Serialization.XmlSerializer> Klasse zum Serialisieren und Deserialisieren <xref:System.DateTime> Werte. Die Werte stellen alle Schaltjahr Tage in dem 21. Jahrhundert dar. Die Ausgabe stellt das Ergebnis dar, wenn das Beispiel auf einem System ausgeführt wird, dessen aktuelle Kultur Englisch (Großbritannien) ist. Da Sie deserialisiert haben die <xref:System.DateTime> Objekt selbst, den Code nicht muss, um kulturelle Unterschiede in der Datums- und Zeitformate zu behandeln.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

Im vorherige Beispiel ist Zeitinformationen nicht enthalten. Wenn eine <xref:System.DateTime> Wert stellt einen Zeitpunkt dar und wird als lokale Zeit angegeben, es von der Ortszeit in UTC konvertieren, bevor Sie dementsprechend die Serialisierung durch Aufrufen der <xref:System.DateTime.ToUniversalTime%2A> Methode. Nachdem Sie die deserialisieren, Konvertieren von UTC in die Ortszeit durch Aufrufen der <xref:System.DateTime.ToLocalTime%2A> Methode. Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> Klasse zur Serialisierung <xref:System.DateTime> Daten auf einem System in den USA Zeitzone Pacific Standard Time und Deserialisierung wird auf einem System in den USA Zentrale Standardzone.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>Serialisieren von Daten für "DateTime" und Zeitzone  

In den vorherigen Beispielen, die alle davon ausgegangen, dass <xref:System.DateTime> Werte werden als lokale Zeit ausgedrückt. Der Code konvertiert die Werte zwischen UTC und Ortszeit so sie den gleichen Zeitpunkt auf den Quell- und Ziel-Systemen weisen. <xref:System.DateTime> in einer Zeitzone als Local und UTC Momente beziehen kann ebenfalls berücksichtigt werden. Da die <xref:System.DateTime> Struktur ist nicht zeitzonenfähigen, müssen Sie sowohl serialisiert die <xref:System.DateTime> Wert und die <xref:System.TimeZoneInfo> -Objekt, das die Zeitzone darstellt. Erstellen Sie einen Typ, dessen Felder enthalten, sowohl sind, der <xref:System.DateTime> Wert und seiner Zeitzone. Das folgende Beispiel definiert eine `DateWithTimeZone` Struktur.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  Die `DateWithTimeZone` Struktur werden in den nächsten beiden Beispielen, die Serialisierung und Deserialisierung ein Array von `DateWithTimeZone` Objekte. Sie können die Quelle für die gesamte Gruppe der Beispiele in diesem Artikel anzeigen, entweder in [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) oder [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) aus dem Docs-Repository auf GitHub.
  
Mithilfe der `DateWithTimeZone` -Struktur, Sie können dann persistent gespeichert, Datums- und Uhrzeitwert zusammen mit Informationen zur Zeitzone. Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> Klasse, um ein Array von Serialisieren `DateWithTimeZone` Objekte.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

Im folgende Beispiel ruft dann die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> -Methode zu deserialisieren.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>Im Vergleich mit "DateTime" TimeSpan  

Die <xref:System.DateTime> und <xref:System.TimeSpan> Werttypen unterscheiden sich hinsichtlich der, die eine <xref:System.DateTime> zeitlich stellt einen Zeitpunkt dar, während eine <xref:System.TimeSpan> stellt ein Zeitintervall dar. Können Sie eine Instanz des subtrahieren <xref:System.DateTime> voneinander zum Abrufen einer <xref:System.TimeSpan> -Objekt, das Zeitintervall zwischen ihnen darstellt. Könnten Sie eine Positive hinzufügen <xref:System.TimeSpan> mit dem aktuellen <xref:System.DateTime> zum Abrufen einer <xref:System.DateTime> Wert, der ein zukünftiges Datum darstellt.  
  
Sie können addieren oder subtrahieren Sie ein Zeitintervall von einer <xref:System.DateTime> Objekt. Zeitintervalle können negativ oder positiv sein und in Einheiten wie z. B. Zeiteinheiten ausgedrückt werden können Sekunden oder als eine <xref:System.TimeSpan> Objekt.  

### <a name="comparing-for-equality-within-tolerance"></a>Vergleichen von Gleichheit innerhalb des Toleranzbereichs

Übereinstimmungsvergleiche für <xref:System.DateTime> Werte sind genau. Das bedeutet, dass zwei Werte ausgedrückt werden müssen, als die gleiche Anzahl von Ticks als gleich betrachtet werden. Dass die Genauigkeit ist häufig nicht benötigten oder sogar falsch für viele Anwendungen. Häufig soll getestet, ob <xref:System.DateTime> Objekte sind **ungefähr gleich**. 

Im folgende Beispiel wird veranschaulicht, wie etwa verglichen entsprechende <xref:System.DateTime> . Er akzeptiert einen kleineren Rand Unterschied, wenn sie gleich zu deklarieren.  
  
<a name="comparison-02"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>COM-Interop-Überlegungen  

Ein <xref:System.DateTime> für den roundtripvorgang herrscht die verbreitete Wert, der auf eine COM-Anwendung übertragen wird, und klicken Sie dann wieder auf einer verwalteten Anwendung übertragen wird. Allerdings eine <xref:System.DateTime> Wert, der nur eine Zeit angibt, hat keinen Roundtrip, wie zu erwarten.  
  
Wenn Round-Trip nur einen Zeitraum, etwa 15: 00 Uhr, Enddatum und Uhrzeit am 30. Dezember 1899 unserer Zeitrechnung ist um 3:00 Uhr, anstelle der 1. Januar 0001 unserer Zeitrechnung 3:00 Uhr Die .NET Framework- und COM angenommen ein Standarddatum, wenn nur eine Uhrzeit angegeben wird. Setzt jedoch voraus das com-System als Basisdatum am 30. Dezember 1899 unserer Zeitrechnung, während der .NET Framework als Basisdatum den 1. Januar 0001 unserer Zeitrechnung annimmt.  
  
Wenn nur ein Mal aus .NET Framework an COM übergeben wird, ist besondere Verarbeitung ausgeführt, die die Zeit in das vom COM verwendete Format konvertiert Wenn nur eine Uhrzeit in .NET Framework aus COM übergeben wird, wird keine besondere Verarbeitung ausgeführt, da, die gültige Datumsangaben und Uhrzeiten am oder vor dem 30. Dezember 1899 wieder beschädigt würden. Wenn ein Datum den Roundtrip aus COM startet, behalten die .NET Framework- und COM das Datum.  
  
Das Verhalten der .NET Framework- und COM bedeutet, dass bei Ihrer Anwendung Roundtrips eine <xref:System.DateTime> , die nur eine Zeit angibt, die Ihre Anwendung denken, ändern oder zu ignorieren die von der letzten <xref:System.DateTime> Objekt.  
     
 ]]></format>
    </remarks>
    <threadsafe>Alle Member dieses Typs sind threadsicher. Elemente, die angezeigt werden, so ändern Sie den Zustand der Instanz zurückgeben tatsächlich eine neue Instanz mit dem neuen Wert initialisiert. Als müssen mit einem beliebigen anderen Typ Lesen und Schreiben in eine freigegebene Variable, die eine Instanz dieses Typs enthält durch ein Schloss auf Threadsicherheit geschützt werden.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie das entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eines der <xref:System.DateTime> Konstruktoren.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <param name="kind">One of the enumeration values that indicates whether <c>ticks</c> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie das entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert `year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Beim Instanziieren einer <xref:System.DateTime> Wert mit Jahr, Monat und Tag im Kalender mit einem anderen Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor.  
  
 Die Tageszeit für die resultierende <xref:System.DateTime> ist Mitternacht (00: 00:00). Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> initialisiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert. Das Beispiel veranschaulicht auch, dass diese Überladung erstellt ein <xref:System.DateTime> Wert, dessen Zeitkomponente Mitternacht entspricht (oder 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Tageszeit für die resultierende <xref:System.DateTime> ist Mitternacht (00: 00:00). Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`, und `day` richten sich nach `calendar`. Eine Ausnahme wird ausgelöst, wenn das angegebene Datum und die Uhrzeit mit ausgedrückt werden können `calendar`.  
  
 Die <xref:System.Globalization> Namespace stellt mehrere Kalender einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor zweimal zum Instanziieren zweier <xref:System.DateTime> Werte. Der erste Aufruf instanziiert einen <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.PersianCalendar> Objekt. Persische Kalender als Standardkalender für eine Kultur festgelegt werden kann, Anzeigen eines Datums im persischen Kalender Quellformat, sodass einzelne Aufrufe an die <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> Methoden. Der zweite Aufruf an den Konstruktor instanziiert einen <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.HijriCalendar> Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) und ändert sich der Standardkalender der aktuellen Kultur in der Hijri-Kalender dar. Da Hidschra der Standardkalender der aktuellen Kultur, ist die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet, um das Datum zu formatieren. Wenn die vorherige aktuelle Kultur (Englisch (Vereinigte Staaten) in diesem Fall ist) wiederhergestellt wird, die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet die aktuelle Kultur gregorianischen Standardkalender zum Formatieren des Datums.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Dieser Konstruktor interpretiert`year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Beim Instanziieren einer <xref:System.DateTime> Wert mit Jahr, Monat und Tag im Kalender mit einem anderen Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie das entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%2A> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> and <c>second</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Beim Instanziieren einer <xref:System.DateTime> Wert mit Jahr, Monat und Tag im Kalender mit einem anderen Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> Konstruktor.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie das entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`, und `day` richten sich nach `calendar`. Eine Ausnahme wird ausgelöst, wenn das angegebene Datum und die Uhrzeit mit ausgedrückt werden können `calendar`.  
  
 Die <xref:System.Globalization> Namespace stellt mehrere Kalender einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor zweimal zum Instanziieren zweier <xref:System.DateTime> Werte. Der erste Aufruf instanziiert einen <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.PersianCalendar> Objekt. Persische Kalender als Standardkalender für eine Kultur festgelegt werden kann, Anzeigen eines Datums im persischen Kalender Quellformat, sodass einzelne Aufrufe an die <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> Methoden. Der zweite Aufruf an den Konstruktor instanziiert einen <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.HijriCalendar> Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) und ändert sich der Standardkalender der aktuellen Kultur in der Hijri-Kalender dar. Da Hidschra der Standardkalender der aktuellen Kultur, ist die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet, um das Datum zu formatieren. Wenn die vorherige aktuelle Kultur (Englisch (Vereinigte Staaten) in diesem Fall ist) wiederhergestellt wird, die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet die aktuelle Kultur gregorianischen Standardkalender zum Formatieren des Datums.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Beim Instanziieren einer <xref:System.DateTime> Wert mit Jahr, Monat und Tag im Kalender mit einem anderen Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor.  
  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie das entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>, and <c>millisecond</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert`year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Beim Instanziieren einer <xref:System.DateTime> Wert mit Jahr, Monat und Tag im Kalender mit einem anderen Aufruf der <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> Konstruktor.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie das entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> Konstruktor zum Instanziieren einer <xref:System.DateTime> Wert.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft wird mit <xref:System.DateTimeKind.Unspecified> initialisiert.  
  
 Die zulässigen Werte für `year`, `month`, und `day` richten sich nach `calendar`. Eine Ausnahme wird ausgelöst, wenn das angegebene Datum und die Uhrzeit mit ausgedrückt werden können `calendar`.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie das entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
 Die <xref:System.Globalization> Namespace stellt mehrere Kalender einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> Konstruktor zweimal zum Instanziieren zweier <xref:System.DateTime> Werte. Der erste Aufruf instanziiert einen <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.PersianCalendar> Objekt. Persische Kalender als Standardkalender für eine Kultur festgelegt werden kann, Anzeigen eines Datums im persischen Kalender Quellformat, sodass einzelne Aufrufe an die <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> Methoden. Der zweite Aufruf an den Konstruktor instanziiert einen <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.HijriCalendar> Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) und ändert sich der Standardkalender der aktuellen Kultur in der Hijri-Kalender dar. Da Hidschra der Standardkalender der aktuellen Kultur, ist die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet, um das Datum zu formatieren. Wenn die vorherige aktuelle Kultur (Englisch (Vereinigte Staaten) in diesem Fall ist) wiederhergestellt wird, die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet die aktuelle Kultur gregorianischen Standardkalender zum Formatieren des Datums.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>, and <c>millisecond</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zulässigen Werte für `year`, `month`, und `day` Parameter hängen von der `calendar` Parameter. Eine Ausnahme wird ausgelöst, wenn das angegebene Datum und die Uhrzeit mit ausgedrückt werden können `calendar`.  
  
 Für Anwendungen, die in die Portabilität von Datums-und Uhrzeitdaten oder eine eingeschränkte Unterstützung für die Zeitzone Bewusstsein wichtig ist, können Sie das entsprechende <xref:System.DateTimeOffset> Konstruktor.  
  
 Die <xref:System.Globalization> Namespace stellt mehrere Kalender einschließlich <xref:System.Globalization.GregorianCalendar> und <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> Konstruktor zweimal zum Instanziieren zweier <xref:System.DateTime> Werte. Der erste Aufruf instanziiert einen <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.PersianCalendar> Objekt. Persische Kalender als Standardkalender für eine Kultur festgelegt werden kann, Anzeigen eines Datums im persischen Kalender Quellformat, sodass einzelne Aufrufe an die <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, und <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> Methoden. Der zweite Aufruf an den Konstruktor instanziiert einen <xref:System.DateTime> Wert mithilfe einer <xref:System.Globalization.HijriCalendar> Objekt. Im Beispiel wird die aktuelle Kultur in Arabisch (Syrien) und ändert sich der Standardkalender der aktuellen Kultur in der Hijri-Kalender dar. Da Hidschra der Standardkalender der aktuellen Kultur, ist die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet, um das Datum zu formatieren. Wenn die vorherige aktuelle Kultur (Englisch (Vereinigte Staaten) in diesem Fall ist) wiederhergestellt wird, die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode verwendet die aktuelle Kultur gregorianischen Standardkalender zum Formatieren des Datums.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">A positive or negative time interval.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.DateTime.Add%2A> Methode, um mehr als eine Art des Zeitintervalls (Tage, Stunden, Minuten, Sekunden oder Millisekunden) in einem einzigen Vorgang hinzuzufügen. Das Verhalten dieser Methode ist identisch mit dem Additionsoperator. Die <xref:System.DateTime> Struktur unterstützt auch spezielle Additionsmethoden (z. B. <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, und <xref:System.DateTime.AddMinutes%2A>) für jedes Zeitintervall.  
  
 Die <xref:System.DateTime.Add%2A> Methode berücksichtigt die Schaltjahren und die Anzahl der Tage in einem Monat, die beim Ausführen von arithmetischen Datum.  
  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , dessen Wert ist das Ergebnis dieses Vorgangs. Die <xref:System.DateTime.Kind%2A> -Eigenschaft der neuen <xref:System.DateTime> Instanz entspricht, die der aktuellen Instanz.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Add%2A> Methode. Berechnet die den Tag der Woche, die von diesem Zeitpunkt 36 Tage (864 Stunden) ist.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional days. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , dessen Wert ist das Ergebnis dieses Vorgangs.  
  
 Der Bruchteil des `value` wird der Bruchteil eines Tages. Beispielsweise entspricht 4.5 4 Tage, 12 Stunden, 0 Minuten, 0 Sekunden, 0 Millisekunden und 0 Ticks.  
  
 Die `value` -Parameter wird auf die nächste Millisekunde gerundet.  
  
 Die <xref:System.DateTime.AddDays%2A> Methode berücksichtigt die Schaltjahren und die Anzahl der Tage in einem Monat, die beim Ausführen von arithmetischen Datum.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddDays%2A> Methode, um den Tag der Woche 36 Tage nach dem aktuellen Datum zu bestimmen.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional hours. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , dessen Wert ist das Ergebnis dieses Vorgangs. Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt ist identisch mit der `value`.  
  
 Der Bruchteil des `value` Bruchteil einer Stunde ausgeführt wird. 4.5 entspricht z. B. 4 Stunden, 30 Minuten, 0 Sekunden, 0 Millisekunden und 0 Ticks.  
  
 Die `value` -Parameter wird auf die nächste Millisekunde gerundet.  
  
 Konvertieren von Zeitintervallen von weniger als einer Stunde in einem Bruchteil kann ein Genauigkeitsverlust umfassen, wenn das Ergebnis ohne Abbruch wiederholter Dezimalzahl ist. (Beispielsweise ist eine Minute 0,016667 von einer Stunde.) Wenn dies problematisch ist, können Sie mithilfe der <xref:System.DateTime.Add%2A> Methode, die ermöglicht Ihnen die Angabe von mehr als eine Art des Zeitintervalls in einem einzelnen Methodenaufruf und entfällt die Notwendigkeit, die Zeiträume in Bruchteile einer Stunde zu konvertieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddHours%2A> -Methode einer Datums- und Uhrzeitangabe eine Anzahl von ganzen Tagen und Bruchteilen von Werten hinzu. Darüber hinaus wird den Verlust an Genauigkeit zurückzuführen sind, übergeben Sie die Methode einen Wert, der eine nachkommakomponente enthält veranschaulicht.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional milliseconds. The <c>value</c> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , dessen Wert ist das Ergebnis dieses Vorgangs.  
  
 Der Bruchteil des `value` wird der Bruchteil einer Millisekunde. 4.5 entspricht z. B. 4 Millisekunden und 5000 Ticks, wobei 1 Millisekunde 10.000 Ticks.  
  
 Die `value` -Parameter wird auf die nächste Ganzzahl gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddMilliseconds%2A> Methode zum Hinzufügen einer Millisekunde und 1,5 Millisekunden, die eine <xref:System.DateTime> Wert. Anschließend wird jeder neue Wert angezeigt und zeigt den Unterschied zwischen diesem und den ursprünglichen Wert an. Der Unterschied wird als eine Zeitspanne und als eine Anzahl von Ticks angezeigt. Im Beispiel wird eine Millisekunde 10.000 Ticks entspricht verdeutlichen. Es zeigt auch, dass Bruchteile von Millisekunden vor dem Ausführen der Addition gerundet werden; die <xref:System.DateTime> -Wert, der aus der Addition von 1,5 Millisekunden zum ursprünglichen Datum ist größer als das ursprüngliche Datum 2 Millisekunden.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional minutes. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , dessen Wert ist das Ergebnis dieses Vorgangs.  
  
 Der Bruchteil des `value` wird der Bruchteil einer Minute. Beispielsweise entspricht 4.5 4 Minuten, 30 Sekunden, 0 Millisekunden und 0 Ticks.  
  
 Die `value` -Parameter wird auf die nächste Millisekunde gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddMinutes%2A> -Methode einer Datums- und Uhrzeitangabe eine Anzahl von ganzen Tagen und Bruchteilen von Werten hinzu.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">A number of months. The <c>months</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime> Objekt. Stattdessen gibt es eine neue <xref:System.DateTime> Objekt, dessen Wert das Ergebnis dieses Vorgangs.  
  
 Die <xref:System.DateTime.AddMonths%2A> Methode berechnet den resultierenden Monat und Jahr, Berücksichtigung von Schaltjahren und die Anzahl der Tage in einem Monat passt klicken Sie dann den Tagesteil des resultierenden <xref:System.DateTime> Objekt. Der resultierende Tag nicht um einen gültigen Tag im resultierenden Monat ist, wird der letzte gültige Tag des Monats resultierende verwendet. Beispiel: 31. März + 1 Monat = 30. April und am 31. März - 1 Monat = 28. Februar für ein nicht-Schaltjahr und Februar 29 für ein Schaltjahr.  
  
 Die Zeit des Tages Teil der resultierenden <xref:System.DateTime> Objekt bleibt die gleiche wie diese Instanz.  
  
   
  
## Examples  
 Das folgende Beispiel fügt zwischen 0 und 15 Monate bis zum letzten Tag des Dezember 2015. In diesem Fall die AddMonths-Methode gibt das Datum des letzten Tags des Monats zurück und Schaltjahren erfolgreich behandelt.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.  -or-  <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional seconds. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , dessen Wert ist das Ergebnis dieses Vorgangs.  
  
 Der Bruchteil des `value` wird der Bruchteil einer Sekunde. Beispielsweise entspricht 4.5 4 Sekunden, 500 Millisekunden und 0 Ticks.  
  
 Die `value` -Parameter wird auf die nächste Millisekunde gerundet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.AddSeconds%2A> -Methode zum Hinzufügen von 30 Sekunden und die Anzahl der Sekunden in einem Tag in einem <xref:System.DateTime> Wert. Anschließend wird jeder neue Wert angezeigt und zeigt den Unterschied zwischen diesem und den ursprünglichen Wert an. Der Unterschied wird als eine Zeitspanne und als eine Anzahl von Ticks angezeigt.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">A number of 100-nanosecond ticks. The <c>value</c> parameter can be positive or negative.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , dessen Wert ist das Ergebnis dieses Vorgangs.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A number of years. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime> Objekt. Stattdessen gibt es eine neue <xref:System.DateTime> Objekt, dessen Wert das Ergebnis dieses Vorgangs.  
  
 Die <xref:System.DateTime.AddYears%2A> Methode berechnet das resultierende Jahr unter Berücksichtigung von Schaltjahren. Der Monat und Zeit des Tages Teil der resultierenden <xref:System.DateTime> Objekt bleibt die gleiche wie diese Instanz.  
  
 Wenn die aktuelle Instanz der Schalttag in einem Schaltjahr darstellt, hängt der Rückgabewert der Zieldatum:  
  
-   Wenn `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> ist auch ein Schaltjahr der zurückgegebene Wert stellt die Schalttag in diesem Jahr. Beispielsweise ist vier Jahren 29 Februar 2012 hinzugefügt wird das zurückgegebene Datum 29. Februar 2016.  
  
-   Wenn `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> ist es sich nicht um ein Schaltjahr Rückgabewert darstellt, der Tag vor der Schalttag in diesem Jahr. Wenn ein Jahr 29 Februar 2012 hinzugefügt wird ist das zurückgegebene Datum z. B. 28 Februar 2013.  
  
 Im folgende Beispiel wird die Verwendung der <xref:System.DateTime.AddYears%2A> Methode mit einem <xref:System.DateTime> -Wert, der einen Schaltjahr Tag darstellt. Es zeigt das Datum an, für die 15 Jahre vor und den 15 Jahren, die Folgen 29. Februar 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
        <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Value Type  </term><description> Condition  </description></listheader><item><term> Less than zero  </term><description><paramref name="t1" /> is earlier than <paramref name="t2" />.  </description></item><item><term> Zero  </term><description><paramref name="t1" /> is the same as <paramref name="t2" />.  </description></item><item><term> Greater than zero  </term><description><paramref name="t1" /> is later than <paramref name="t2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Beziehung der `t1` auf `t2`, die <xref:System.DateTime.Compare%2A> -Methode vergleicht die <xref:System.DateTime.Ticks%2A> Eigenschaft `t1` und `t2` ignoriert jedoch ihre <xref:System.DateTime.Kind%2A> Eigenschaft. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Compare%2A> Methode.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die beiden Überladungen der der <xref:System.DateTime.CompareTo%2A> Methodenrückgabewert eine Zahl mit Vorzeichen, der den relativen Wert dieser Instanz angibt und die `value` -Arguments zu, wie in der folgenden Tabelle dargestellt.  
  
|Wert|Beschreibung|  
|-----------|-----------------|  
|Kleiner als 0 (null)|Diese Instanz liegt vor `value`.|  
|Zero|Diese Instanz entspricht `value`.|  
|Größer als 0 (null)|Diese Instanz liegt nach `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to the current instance.</param>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.  
  
 <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is earlier than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is the same as <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is later than <paramref name="value" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Beziehung der aktuellen Instanz in `value`, die <xref:System.DateTime.CompareTo%2A> -Methode vergleicht die <xref:System.DateTime.Ticks%2A> Eigenschaft der aktuellen Instanz und `value` ignoriert jedoch ihre <xref:System.DateTime.Kind%2A> Eigenschaft.  Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie durch Vergleichen der Werte von ihren <xref:System.DateTime.Kind%2A> Eigenschaften.  
  
 Diese Methode implementiert die <xref:System.IComparable%601?displayProperty=nameWithType> Schnittstelle und führt etwas bessere Leistung als die <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> Methode zu überladen, da sie keinen konvertieren die `value` Parameter für ein Objekt.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert drei <xref:System.DateTime> Objekte, eines mit heutigen Datum, ein weiteres, der das Datum ein Jahr zuvor darstellt, und eine dritte, die das Datum in der Zukunft ein Jahr darstellt. Er ruft dann die <xref:System.DateTime.CompareTo%28System.DateTime%29> Methode und das Ergebnis des Vergleichs angezeigt.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A boxed object to compare, or <see langword="null" />.</param>
        <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is earlier than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is the same as <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is later than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Beziehung der aktuellen Instanz in `value`, die <xref:System.DateTime.CompareTo%2A> -Methode vergleicht die <xref:System.DateTime.Ticks%2A> Eigenschaft der aktuellen Instanz und `value` ignoriert jedoch ihre <xref:System.DateTime.Kind%2A> Eigenschaft. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie durch Vergleichen der Werte von ihren <xref:System.DateTime.Kind%2A> Eigenschaften.  
  
 Jede Instanz von <xref:System.DateTime>, unabhängig vom Wert wird als größer betrachtet `null`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.CompareTo%2A> Methode.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date component of this instance.</summary>
        <value>Ein neues Objekt mit demselben Datum wie diese Instanz und einer Uhrzeit von Mitternacht (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert, der die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert ist identisch mit der aktuellen Instanz.  
  
 Da die <xref:System.DateTime> Typ darstellt, beide Datumsangaben und Uhrzeiten in einem einzelnen Typ, es ist wichtig, zu vermeiden, ein Datum zurückgegebenes Formatelementen der <xref:System.DateTime.Date%2A> Eigenschaft als Datum und Uhrzeit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Date%2A> Eigenschaft, um die Datumskomponente des Extrahieren einer <xref:System.DateTime> Wert mit der Zeitkomponente auf 0 (null) festgelegt (oder 0:00:00 oder Mitternacht). Es veranschaulicht auch, dass, abhängig von der Formatzeichenfolge verwendet beim Anzeigen der <xref:System.DateTime> Wert, der Zeitkomponente kann weiterhin in der formatierten Ausgabe angezeigt werden.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the month represented by this instance.</summary>
        <value>Die Tagkomponente als Wert zwischen 1 und 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Day%2A> Eigenschaft gibt immer den Tag des Monats im gregorianischen Kalender, auch wenn die aktuelle <xref:System.DateTime> Wert mit einem anderen Kalender instanziiert wurde, oder wenn die aktuelle Standardkalender thread ist nicht dem gregorianischen Kalender. Rufen Sie zum Abrufen der Tag des Monats für ein bestimmtes Datum mit einem anderen Kalender des Kalenders <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> Methode. Im folgenden Beispiel wird sowohl die <xref:System.DateTime.Day%2A> Eigenschaft und die <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> Methode zum Abrufen der Tag des Monats für eine <xref:System.DateTime> -Wert, der mit den Hijri-Kalender instanziiert wird.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Auf ähnliche Weise, im folgenden Beispiel wird sowohl die <xref:System.DateTime.Day%2A> Eigenschaft und die <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> Methode, um den Tag des Monats abzurufen, wenn die aktuelle Threadkultur Ar-SA, der Hijri als Standardkalender verwendet wird.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Day%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the week represented by this instance.</summary>
        <value>Eine Enumerationskonstante, die den Wochentag dieses <see cref="T:System.DateTime" />-Werts angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der Konstanten in der <xref:System.DayOfWeek> Enumeration reicht von <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> auf <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Bei der Umwandlung in eine ganze Zahl, dessen Wert von null (gibt an <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) und sechs (womit <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Die <xref:System.DateTime.DayOfWeek%2A> Eigenschaft gibt eine Enumerationskonstante; nicht reflektiert, dass ein System Regions- und Sprachoptionen Einstellungen. Um eine Zeichenfolge, die den lokalisierten Wochentagsnamen für ein bestimmtes Datum darstellt abzurufen, rufen Sie eine der Überladungen der der <xref:System.DateTime.ToString%2A> Methode, enthält eine `format` Parameter und übergibt ihn dann entweder die `ddd` oder `dddd` benutzerdefinierte Formatzeichenfolgen. Weitere Informationen finden Sie unter [Vorgehensweise: Extrahieren Sie den Tag der Woche aus einem bestimmten Datum](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.DayOfWeek%2A> Eigenschaft und die <xref:System.DayOfWeek?displayProperty=nameWithType> Enumeration.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the year represented by this instance.</summary>
        <value>Der Tag des Jahres als Wert zwischen 1 und 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.DayOfYear%2A> -Eigenschaft nimmt Schaltjahren berücksichtigt, wenn sie den Tag des Jahres berechnet. Den Wert der Eigenschaft gibt immer wieder den Tag des Jahres im gregorianischen Kalender, unabhängig von der aktuellen Kalender für die aktuelle Threadkultur verwendet. Um den Tag des Jahres in einem anderen Kalender abzurufen, rufen Sie die <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> Methode, die von diesem Kalender.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den Tag des Jahres aus dem 31. Dezember für die Jahre 2010 2020 im gregorianischen Kalender. Beachten Sie, dass im Beispiel wird gezeigt, dass dem 31. Dezember den 366th Tag des Jahres im Schaltjahr ist.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year.</param>
        <param name="month">The month (a number ranging from 1 to 12).</param>
        <summary>Returns the number of days in the specified month and year.</summary>
        <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.  For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.DaysInMonth%2A> Methode immer interpretiert `month` und `year` als Monat und Jahr der gregorianischen Kalender "Kalender", selbst wenn der gregorianische Kalender nicht als aktueller Kalender der aktuellen Kultur ist. Um die Anzahl der Tage im angegebenen Monat eines bestimmten Kalender zu erhalten, rufen Sie im Kalender <xref:System.Globalization.Calendar.GetDaysInMonth%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.DateTime.DaysInMonth%2A> Methode, um zu bestimmen, die Anzahl der Tage im Juli 2001 Februar 1998 (ein nicht-Schaltjahr) und Februar 1996 (ein Schaltjahr).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 Das folgende Beispiel zeigt die Anzahl der Tage in jedem Monat eines Jahres in einem ganzzahligen Array angegeben.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> objects, or a <see cref="T:System.DateTime" /> instance and another object or <see cref="T:System.DateTime" />, have the same value.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:System.DateTime" /> instance.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="value" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Instanz und `value` sind gleich, wenn ihre <xref:System.DateTime.Ticks%2A> Eigenschaftswerte gleich sind. Ihre <xref:System.DateTime.Kind%2A> Eigenschaftswerte werden nicht berücksichtigt, in der Test auf Gleichheit.  
  
 Diese Methode implementiert die <xref:System.IEquatable%601?displayProperty=nameWithType> Schnittstelle, und führt etwas bessere Leistung als die <xref:System.DateTime.Equals%2A> Methode da die `value` Parameter enthält keinen in ein Objekt konvertiert werden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Instanz und `value` sind gleich, wenn ihre <xref:System.DateTime.Ticks%2A> Eigenschaftswerte gleich sind. Ihre <xref:System.DateTime.Kind%2A> Eigenschaftswerte werden nicht berücksichtigt, in der Test auf Gleichheit.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> instances  have the same date and time value.</summary>
        <returns>
          <see langword="true" /> if the two values are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` und `t2` sind gleich, wenn ihre <xref:System.DateTime.Ticks%2A> Eigenschaftswerte gleich sind. Ihre <xref:System.DateTime.Kind%2A> Eigenschaftswerte werden nicht berücksichtigt, in der Test auf Gleichheit.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Equals%2A> Methode.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field.</param>
        <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
        <returns>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.DateTime.ToBinary%2A> Methode zum Konvertieren des Werts des aktuellen <xref:System.DateTime> Objekt in einen Binärwert. Anschließend verwenden Sie den binären Wert und die <xref:System.DateTime.FromBinary%2A> -Methode zum Neuerstellen der ursprünglichen <xref:System.DateTime> Objekt.  
  
> [!IMPORTANT]
>  In einigen Fällen die <xref:System.DateTime> zurückgegebene Wert den <xref:System.DateTime.FromBinary%2A> Methode ist nicht mit dem Original identisch <xref:System.DateTime> für bereitgestellte Wert der <xref:System.DateTime.ToBinary%2A> Methode. Weitere Informationen finden Sie im nächsten Abschnitt, "Ortszeit Anpassung".  
  
## <a name="local-time-adjustment"></a>Ortszeit Anpassung  
 Eine Ortszeit, die eine Coordinated Universal Time, die auf der lokalen Zeitzone angepasst ist, wird durch dargestellt eine <xref:System.DateTime> Struktur, deren <xref:System.DateTime.Kind%2A> Eigenschaft hat den Wert <xref:System.DateTimeKind.Local>. Beim Wiederherstellen einer lokales <xref:System.DateTime> Wert aus der binären Darstellung, die vom erzeugt wird die <xref:System.DateTime.ToBinary%2A> -Methode, die <xref:System.DateTime.FromBinary%2A> Methode möglicherweise die neu erstellte Wert anpassen, sodass er nicht mit den ursprünglichen Wert übereinstimmt. Dieser Fall kann unter den folgenden Bedingungen eintreten:  
  
-   Wenn eine lokale <xref:System.DateTime> Objekt erfolgt die Serialisierung in einer Zeitzone von der <xref:System.DateTime.ToBinary%2A> -Methode, und klicken Sie dann in einer anderen Zeitzone von deserialisiert die <xref:System.DateTime.FromBinary%2A> -Methode, die lokale Zeit dargestellt, die durch das resultierende <xref:System.DateTime> Objekt wird automatisch so angepasst um die zweite Zeitzone.  
  
     Betrachten Sie beispielsweise eine <xref:System.DateTime> -Objekt, das lokale Zeit von 15: 00 Uhr darstellt. Eine Anwendung, die in den USA ausgeführt wird Zeitzone Pacific Time verwendet die <xref:System.DateTime.ToBinary%2A> Methode zu, die zu konvertierende <xref:System.DateTime> Objekt in einen Binärwert. Eine andere Anwendung, die in den USA ausgeführt wird Zeitzone Eastern Time verwendet dann die <xref:System.DateTime.FromBinary%2A> -Methode zum Konvertieren von des Binärwerts in eine neue <xref:System.DateTime> Objekt. Der Wert der neuen <xref:System.DateTime> Objekt ist 18: 00 Uhr, die denselben Zeitpunkt wie die ursprüngliche 3 Uhr darstellt Wert, aber in die Ortszeit in der Zeitzone Eastern Time angepasst wird.  
  
-   Wenn die binäre Darstellung eines lokalen <xref:System.DateTime> Wert stellt eine ungültige Zeit in der lokalen Zeitzone des Systems auf dem <xref:System.DateTime.FromBinary%2A> wird aufgerufen, wird die Zeit angepasst, damit es gültig ist.  
  
     Beispielsweise tritt auf, der Übergang von Normalzeit zu Sommerzeit in der Zeitzone Pacific Time der Vereinigten Staaten am 14. März 2010, um 2:00 Uhr, wenn die Zeit um eine Stunde, um 3:00 Uhr Diese Stunden-Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass wenn eine Zeit, die innerhalb dieses Bereichs in einen Binärwert konvertiert wird die <xref:System.DateTime.ToBinary%2A> Methode und wird dann wiederhergestellt werden, indem Sie die <xref:System.DateTime.FromBinary%2A> -Methode, den ursprünglichen Wert so angepasst, dass eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmter Datums- und Uhrzeitwert Änderungen unterliegen möglicherweise durch Übergabe an die <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> -Methode, wie im Beispiel veranschaulicht.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Version-Überlegungen  
 Beginnend mit .NET Framework, Version 2.0, einem <xref:System.DateTime> Struktur besteht aus einem privaten Kind Feld, der angibt, ob die angegebene Zeit Ortszeit, koordinierter Weltzeit (UTC) oder keinem von beiden verkettet wird auf ein privates Feld für die Teilstriche, die enthält die Anzahl der 100-Nanosekunden-Ticks, die ein Datum und eine Uhrzeit angeben. Die Anzahl der Ticks zugegriffen werden kann, mit der <xref:System.DateTime.Ticks%2A> Eigenschaft und jedes öffentliche TheKind Feld kann zugegriffen werden, mit der <xref:System.DateTime.Kind%2A> Eigenschaft.  
  
 Vor .NET Framework 2.0, wenn Sie serialisiert eine <xref:System.DateTime> Objekt manuell statt mit Serialisierungsschnittstelle wie <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, mussten Sie nur die Ticks-Daten in Serialisieren der <xref:System.DateTime>. Beginnend mit .NET Framework 2.0, müssen Sie auch die Kind-Daten serialisieren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent local time.</summary>
        <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Uhr, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Coordinated Universal Time (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wenn eine Anwendung erstellt werden, greift auf oder in eine Datei schreibt.  
  
 Die `fileTime` Parameter gibt an, eine Dateizeit in 100-Nanosekunden-Ticks.  
  
 Beginnend mit .NET Framework, Version 2.0, der Rückgabewert ist eine <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.FromFileTime%2A> Methode.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>Normalerweise die <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> Methode Wiederherstellungen ein <see cref="T:System.DateTime" /> -Wert, der vom gespeichert wurde die <see cref="M:System.DateTime.ToFileTime" /> Methode. Allerdings die beiden Werte in den folgenden Situationen abweichen:: Wenn die Serialisierung und Deserialisierung von der <see cref="T:System.DateTime" /> in verschiedenen Zeitzonen sein. Z. B. wenn ein <see cref="T:System.DateTime" /> Wert mit einer Uhrzeit 12:30 Uhr in den USA Zeitzone Eastern Time serialisiert und deserialisiert dann in den USA Zeitzone Pacific Time, den ursprünglichen Wert von 12:30 Uhr wird um 9:30 Uhr den Unterschied zwischen den beiden Zeitzonen entsprechend angepasst.  -If der <see cref="T:System.DateTime" /> -Wert, der serialisiert wird, eine ungültige Zeit in die lokale Zeitzone darstellt. In diesem Fall die <see cref="M:System.DateTime.ToFileTime" /> Methode passt die wiederhergestellte <see cref="T:System.DateTime" /> Wert, sodass es eine gültige Zeit in die lokale Zeitzone darstellt.  Beispielsweise erfolgt der Übergang von Normalzeit zu Sommerzeit in den USA Zeitzone Pacific Time am 14. März 2010 um 2:00 Uhr, wenn die Zeit um eine Stunde, um 3:00 Uhr Diese Stunden-Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass wenn eine Zeit, die innerhalb dieses Bereichs einen langen ganzzahligen Wert konvertiert wird die <see cref="M:System.DateTime.ToFileTime" /> Methode und wird dann wiederhergestellt werden, indem Sie die <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> -Methode, den ursprünglichen Wert so angepasst, dass eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmter Datums- und Uhrzeitwert Änderungen unterliegen möglicherweise durch Übergabe an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> -Methode, wie im Beispiel veranschaulicht.  [! code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
        <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Uhr, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Coordinated Universal Time (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wenn eine Anwendung erstellt werden, greift auf oder in eine Datei schreibt.  
  
 Die `fileTime` Parameter gibt an, eine Dateizeit in 100-Nanosekunden-Ticks.  
  
 Beginnend mit .NET Framework, Version 2.0, der Rückgabewert ist eine <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">An OLE Automation Date value.</param>
        <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</summary>
        <returns>An object that represents the same date and time as <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `d` Parameter ist eine Gleitkommazahl mit doppelter Genauigkeit, die ein Datum als die Anzahl der Tage vor oder nach dem Basisdatum, Mitternacht am 30. Dezember 1899 darstellt. Die Anmeldung und der ganzzahlige Teil des `d` codieren Sie das Datum als eine positive oder negative Tag Verschiebung aus am 30. Dezember 1899 und der Absolute-Wert, der den Bruchteil der `d` codiert die Tageszeit, als Bruchzahl eine Verschiebung Tages von Mitternacht. `d` ein Wert zwischen minus 657435,0 positive 2958465.99999999 muss sein.  
  
 Beachten Sie, dass aufgrund der Art und Weise, die Datumsangaben codiert werden, es zwei Möglichkeiten gibt, um einer beliebigen Uhrzeit am 30. Dezember 1899 darzustellen. Beispielsweise bedeuten 0.5 und 0.5 Mittag am 30. Dezember 1899, da eine Verschiebung Tag von Plus oder minus 0 Tage vom Basisdatum ist immer noch mit dem Basisdatum und eine halben Tag Verschiebung zwischen Mitternacht und Mittag.  
  
 Finden Sie unter <xref:System.DateTime.ToOADate%2A> Weitere Informationen über OLE-Automatisierung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Sie sollten nicht davon ausgehen, mehrere Aufrufe der <xref:System.DateTime.GetDateTimeFormats%2A> Überladungen identische Daten zurück. Abhängig von der speziellen Überladung können die Daten, die von dieser Methode zurückgegebene ändern, wenn die aktuelle Kultur ändert, der Benutzer überschreibt einzelne kultureinstellungen oder ein Update auf das System kulturellen Daten auftritt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das zurückgegebene Array von Zeichenfolgen die <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> Methode entspricht der Kombination der Zeichenfolgenarrays zurückgegebenes separate Aufrufe der <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> Methode mit der "d", "D", "f", "F", "g", "G", "m", "o", "R", "s", "t", "T", "u", "U" und "y" Standardformatzeichenfolgen. Weitere Informationen zu den Standardformatbezeichnern, finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird mithilfe von Informationen aus der aktuellen Kultur formatiert. Weitere Informationen zu kulturspezifische Formatierungsinformationen für die aktuelle Kultur, finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Da diese Methode kulturabhängige Daten verwendet wird, sollten Sie nicht davon ausgehen, dass mehrere Aufrufe der Methode identische Daten zurückgeben. Die Daten, die von dieser Methode zurückgegebene können ändern, wenn die aktuelle Kultur ändert, der Benutzer überschreibt einzelne kultureinstellungen oder ein Update auf das System kulturellen Daten auftritt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> Methode. Es zeigt die Zeichenfolgendarstellung eines Datums, das alle möglichen Standardformatbezeichner für Datum und Uhrzeit-Formate verwenden, in dem Computer aktuelle Kultur ist, die in diesem Fall En-US ist.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 Im Beispiel wird die folgende Ausgabe:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">A standard date and time format string.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` Parameter kann eine der Standardformatbezeichner für Datum und Uhrzeit. Dazu gehören d, D, f, F, g, G, M (m), O (oder o), R (oder R), s, t, T, u, U, und Y bzw. y). Weitere Informationen finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird mithilfe von Informationen aus der aktuellen Kultur formatiert. Weitere Informationen zu kulturspezifische Formatierungsinformationen für die aktuelle Kultur, finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Da diese Methode kulturabhängige Daten verwendet wird, sollten Sie nicht davon ausgehen, dass mehrere Aufrufe der Methode identische Daten zurückgeben. Die Daten, die von dieser Methode zurückgegebene können ändern, wenn die aktuelle Kultur ändert, der Benutzer überschreibt einzelne kultureinstellungen oder ein Update auf das System kulturellen Daten auftritt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> Methode. Die angegebene Zeichenfolgendarstellung eines Datums mit dem langen Datumsformat-Formatbezeichner ("D") für die aktuelle Kultur angezeigt.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das zurückgegebene Array von Zeichenfolgen die <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> Methode entspricht der Kombination der Zeichenfolgenarrays zurückgegebenes separate Aufrufe der <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methode mit der "d", "D", "f", "F", "g", "G", "m", "o", "R", "s", "t", "T", "u", "U" und "y" Standardformatzeichenfolgen. Weitere Informationen zu den Standardformatbezeichnern, finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird mithilfe von kulturspezifischen Informationen, die vom formatiert `provider`.  
  
> [!IMPORTANT]
>  Da diese Methode kulturabhängige Daten verwendet, Sie sollten nicht davon ausgehen, dass mehrere Aufrufe der Methode identische Daten zurückgeben, es sei denn, `provider` ist ein <xref:System.Globalization.CultureInfo> -Objekt, das die invariante Kultur darstellt. Die Daten, die von dieser Methode zurückgegebene können ändern, wenn der Benutzer die einzelnen kulturellen Einstellungen überschreibt `provider` oder bei ein Updates auf dem System kulturellen Daten für auftreten `provider`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> Methode. Die angegebene Zeichenfolgendarstellung eines Datums mit alle möglichen Standardformatbezeichner für Datum und Uhrzeit-Formate für die Kultur fr-FR angezeigt.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 Im Beispiel wird die folgende Ausgabe:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Formatparameter kann eine der Standardformatbezeichner für Datum und Uhrzeit sein. Dazu gehören d, D, f, F, g, G, M (m), O (oder o), R (oder R), s, t, T, u, U, und Y bzw. y). Weitere Informationen finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Jedes Element des Rückgabewerts wird mithilfe von kulturspezifischen Informationen, die vom formatiert `provider`.  
  
> [!IMPORTANT]
>  Da diese Methode kulturabhängige Daten verwendet, Sie sollten nicht davon ausgehen, dass mehrere Aufrufe der Methode identische Daten zurückgeben, es sei denn, `provider` ist ein <xref:System.Globalization.CultureInfo> -Objekt, das die invariante Kultur darstellt. Die Daten, die von dieser Methode zurückgegebene können ändern, wenn der Benutzer die einzelnen kulturellen Einstellungen überschreibt `provider` oder bei ein Updates auf dem System kulturellen Daten für auftreten `provider`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> Methode. Die zeichenfolgendarstellungen ein Datum unter Verwendung den Formatbezeichner kurzes Datum ("d") für die Kultur fr-FR angezeigt.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
        <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hour component of the date represented by this instance.</summary>
        <value>Die Stundenkomponente als Wert zwischen 0 und 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert, der die <xref:System.DateTime.Hour%2A> Eigenschaft wird immer mithilfe von 24-Stunden-Format ausgedrückt. Um eine Zeichenfolge abzurufen, die die Stunde von einer Datums- und Uhrzeitangabe im 12-Stunden-Format darstellt, rufen Sie die <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> oder <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methode mit der benutzerdefinierte Formatbezeichner "h". Zum Beispiel:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Hour%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</summary>
        <returns>
          <see langword="true" /> if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; <see langword="false" /> if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bestimmt, ob die aktuelle <xref:System.DateTime> Wert liegt innerhalb des Bereichs der Sommerzeit für die lokale Zeitzone zurückgegeben, durch die <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> Eigenschaft. Sie können bestimmen, ob eine Zeitzone Sommerzeit unterstützt, durch das Abrufen des Werts der <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> Eigenschaft. Für Zeitzonen, die Sommerzeit berücksichtigt, können Sie bestimmen, tritt der Übergang in und aus der Sommerzeit durch Abrufen der <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> von der Zeitzone zurückgegebene Array <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Wenn die aktuelle <xref:System.DateTime> Wert stellt einen mehrdeutigen oder eine ungültige Zeit in der lokalen Zeitzone dar, der Methodenrückgabe `false`.  
  
 Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die <xref:System.DateTime.IsDaylightSavingTime%2A> Methode erkennt nur die aktuelle Anpassungsregel beim bestimmen, ob die aktuelle Instanz eine Sommerzeit ist. Daher kann die Methode nicht genau melden kann, ob die aktuelle Instanz eine Sommerzeit für Zeiträume ist, bevor die aktuelle Anpassungsregel wirksam wurde.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">A 4-digit year.</param>
        <summary>Returns an indication whether the specified year is a leap year.</summary>
        <returns>
          <see langword="true" /> if <paramref name="year" /> is a leap year; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` als 4 zweistellige Zahl zur Basis 10 angegeben ist. Beispiel: 1996.  
  
 `year` wird immer als ein Jahr im gregorianischen Kalender interpretiert. Um zu bestimmen, ob ein bestimmtes Jahr ein Schaltjahr in einem anderen Kalender war, rufen Sie dieses Kalenderobjekt `IsLeapYear` Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.IsLeapYear%2A> Methode, um zu bestimmen, welche Jahre zwischen 1994 und 2014 Schaltjahren sind. Das Beispiel veranschaulicht außerdem das Ergebnis bei der <xref:System.DateTime.AddYears%2A> Methode wird verwendet, um ein Schalttag ein Jahr hinzugefügt.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
        <value>Einer der Enumerationswerte, der angibt, welche Zeit von der aktuellen Uhrzeit dargestellt wird. Die Standardeinstellung ist <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie explizit festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft eines neuen <xref:System.DateTime> Wert zu einem bestimmten <xref:System.DateTimeKind> -Wert durch Aufrufen der <xref:System.DateTime.SpecifyKind%2A> Methode.  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft kann einen <xref:System.DateTime> Wert Coordinated Universal Time (UTC) oder Ortszeit eindeutig darstellen. Im Gegensatz dazu die <xref:System.DateTimeOffset> Struktur kann eindeutig jederzeit in eine beliebige Zeitzone als einen einzelnen Punkt darstellen, zeitlich.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode zur Veranschaulichung der Funktion wie die <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten entspricht 23:59:59.9999999 UTC, 31. Dezember 9999 im gregorianischen Kalender, genau eine 100-Nanosekunden-Ticks vor dem 1. Januar 10000 00:00:00 UTC.  
  
 Einige Kalender, wie z. B. die <xref:System.Globalization.ThaiBuddhistCalendar>, unterstützen einen oberen Datumsbereich, die älter ist als <xref:System.DateTime.MaxValue>. In diesen Fällen versucht, den Zugriff auf <xref:System.DateTime.MaxValue> variablenzuweisungen oder formatieren und Analysieren Vorgänge auslösen können eine <xref:System.ArgumentOutOfRangeException>. Anstatt das Abrufen des Werts <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, können Sie den Wert der angegebenen Kultur aktuellen gültigen Datumswert aus Abrufen der <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert einen <xref:System.DateTime> -Objekt durch Übergeben des Konstruktors einer <xref:System.Int64> Wert, der eine Anzahl von Ticks darstellt. Vor dem Aufrufen des Konstruktors wird im Beispiel wird sichergestellt, dass dieser Wert größer als oder gleich `DateTime.MinValue.Ticks` und kleiner oder gleich `DateTime.MaxValue.Ticks`. Wenn nicht, löst eine <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the milliseconds component of the date represented by this instance.</summary>
        <value>Die Millisekundenkomponente als Wert zwischen 0 und 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können anzeigen, die Zeichenfolgendarstellung der <xref:System.DateTime.Millisecond%2A> Eigenschaft, indem Sie mit dem Formatbezeichner "fff". Der folgende Code zeigt z. B. eine Zeichenfolge, die die Anzahl der Millisekunden in einem Datums- und Uhrzeitangabe in die Konsole enthält.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 Sie können auch die Millisekundenkomponente zusammen mit anderen Komponenten von Datums-und Zeit anzeigen, mit der Standardformatbezeichner "o". Zum Beispiel:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Der Formatbezeichner "o" ist jedoch weniger für die Anzeige als für Round-Tripping oder Speichern von vorgesehen ein <xref:System.DateTime> Wert. Sie können auch Millisekunden zusammen mit anderen Datums- und Zeitkomponenten anzeigen, indem eine benutzerdefinierte Formatzeichenfolge verwenden, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Millisecond%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minute component of the date represented by this instance.</summary>
        <value>Die Minutenkomponente als Wert zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Minute%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten entspricht 00:00:00.0000000 (UTC), 1. Januar 0001, im gregorianischen Kalender.  
  
 <xref:System.DateTime.MinValue> definiert das Datum und Uhrzeit, die zugewiesen wird, eine nicht initialisierte <xref:System.DateTime> Variable. Dies wird anhand des folgenden Beispiels veranschaulicht.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 Die <xref:System.DateTime.MinValue> und <xref:System.DateTime.MaxValue> Eigenschaften verwendet werden können, um sicherzustellen, dass ein Wert innerhalb des unterstützten Bereichs liegt, vor der Übergabe an eine <xref:System.DateTime> Konstruktor. Im Code im Beispielabschnitt wird diese Verwendung veranschaulicht.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert einen <xref:System.DateTime> -Objekt durch Übergeben des Konstruktors einer <xref:System.Int64> Wert, der eine Anzahl von Ticks darstellt. Vor dem Aufrufen des Konstruktors wird im Beispiel wird sichergestellt, dass dieser Wert größer als oder gleich `DateTime.MinValue.Ticks` und kleiner oder gleich `DateTime.MaxValue.Ticks`. Wenn nicht, löst eine <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the month component of the date represented by this instance.</summary>
        <value>Die Monatskomponente als Wert zwischen 1 und 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Month%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
        <value>Ein Objekt, dessen Wert die aktuelle lokale Datums- und Uhrzeitangabe ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Now%2A> -Eigenschaft gibt ein <xref:System.DateTime> Wert, der das aktuelle Datum und die Uhrzeit auf dem lokalen Computer darstellt. Beachten Sie, dass es ein Unterschied zwischen einer <xref:System.DateTime> -Wert, der die Anzahl der Ticks darstellt, die seit Mitternacht des 1. Januar 0001, vergangen sind und der Zeichenfolgendarstellung, <xref:System.DateTime> -Wert, der einen Wert für Datum und Uhrzeit in drückt einen spezifische-kulturabhängigen Format. Informationen für Formatierung Datums- und Uhrzeitwerte finden Sie unter der <xref:System.DateTime.ToString%2A> Methode. Das folgende Beispiel zeigt das kurze Datum und Uhrzeit-Zeichenfolge in einer Reihe kulturspezifische Formate.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 Die Lösung für diese Eigenschaft hängt von der Systemzeitgeber, abhängig von der zugrunde liegenden Betriebssystem ab. Es ist voraussichtlich zwischen 0,5 und 15 Millisekunden. Folglich wiederholte Aufrufe von der <xref:System.DateTime.Now%2A> Eigenschaft in einem kurzen Zeitintervall, z. B. in einer Schleife möglicherweise den gleichen Wert zurück.  
  
 Die <xref:System.DateTime.Now%2A> Eigenschaft wird häufig verwendet, um die Leistung zu messen. Aufgrund seiner geringen Auflösung ist es jedoch nicht für die Verwendung als Tool zum Durchführen von Vergleichstests geeignet. Eine bessere Alternative ist die Verwendung der <xref:System.Diagnostics.Stopwatch> Klasse.  
  
 Beginnend mit .NET Framework, Version 2.0, der Rückgabewert ist eine <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> -Eigenschaft gibt <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Sie können auch die <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> Eigenschaft, um das aktuelle Datum und die Uhrzeit abzurufen. Sie können eine Ortszeit eindeutig als einen einzelnen Fehlerpunkt zeitlich, ausgedrückt werden, wodurch wiederum diese Zeitwert portable computerübergreifend.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Now%2A> und <xref:System.DateTime.UtcNow%2A> die aktuelle lokale Datums- und Uhrzeitangabe und der aktuellen Universal abzurufenden Eigenschaften koordiniert (UTC) Datum und Uhrzeit. Es verwendet dann die Formatierungskonventionen der Kulturen diverse anzuzeigenden Zeichenfolgen, zusammen mit den Werten der ihre <xref:System.DateTime.Kind%2A> Eigenschaften.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to add.</param>
        <param name="t">The time interval to add.</param>
        <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
        <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, den Addition-Operator.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_Equality%2A> Operator bestimmt, ob zwei <xref:System.DateTime> Werte gleich sind, indem Sie deren Anzahl von Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel veranschaulicht den Gleichheitsoperator.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_GreaterThan%2A> Operator bestimmt, die Beziehung zwischen zwei <xref:System.DateTime> Werte, indem Sie deren Anzahl von Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_GreaterThanOrEqual%2A> Operator bestimmt, die Beziehung zwischen zwei <xref:System.DateTime> Werte, indem Sie deren Anzahl von Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_Inequality%2A> Operator bestimmt, ob zwei <xref:System.DateTime> Werte ungleich sind, indem deren Anzahl von Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_LessThan%2A> Operator bestimmt, die Beziehung zwischen zwei <xref:System.DateTime> Werte, indem Sie deren Anzahl von Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is the same as or earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_LessThanOrEqual%2A> Operator bestimmt, die Beziehung zwischen zwei <xref:System.DateTime> Werte, indem Sie deren Anzahl von Ticks vergleichen. Vor dem Vergleich von <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Hierzu können Sie die Werte ihrer <xref:System.DateTime.Kind%2A>-Eigenschaft vergleichen.  
  
 Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified <see cref="T:System.DateTime" /> or<see cref="T:System.TimeSpan" /> from a specified <see cref="T:System.DateTime" />.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The date and time value to subtract from (the minuend).</param>
        <param name="d2">The date and time value to subtract (the subtrahend).</param>
        <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
        <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> Methode berücksichtigt nicht den Wert der <xref:System.DateTime.Kind%2A> Eigenschaft der beiden <xref:System.DateTime> Werte beim Ausführen der Subtraktion. Vor dem subtrahieren <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Andernfalls wird das Ergebnis den Unterschied zwischen Zeitzonen enthalten.  
  
> [!NOTE]
>  Die <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> Methode wird den Unterschied zwischen den Zeitzonen, die beim Ausführen der Subtraktion berücksichtigt.  
  
 Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Subtract%2A> -Methode und der Subtraktionsoperator.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to subtract from.</param>
        <param name="t">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
        <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode subtrahiert den Tickswert `t` aus dem Tickswert `d`.  
  
 Die entsprechende Methode für diesen Operator ist. <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Subtract%2A> -Methode und der Subtraktionsoperator.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Abschnitt  
  
 [Welche Methode werden aufgerufen?](#Tasks)   
 [Die zu analysierende Zeichenfolge](#StringToParse)   
 [Analysieren und kulturellen Konventionen](#Culture)   
 [Elemente analysieren und formatieren](#Styles)   
 [Der Rückgabewert und DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Welche Methode werden aufgerufen?  
  
|Beschreibung|Call|  
|--------|----------|  
|Mit den Konventionen der aktuellen Kultur, um eine Datums- und Uhrzeitzeichenfolge zu analysieren.|<xref:System.DateTime.Parse%28System.String%29>-Überladung|  
|Mit den Konventionen einer bestimmten Kultur, um einen Datums- und Uhrzeitzeichenfolge zu analysieren.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> überladen (siehe [Analyse und kulturellen Konventionen](#Culture))|  
|Analysieren einer Datums- und Uhrzeitzeichenfolge mit speziellen Style-Elemente (z. B. leer- oder keine Leerzeichen).|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Überladung|  
|Analysieren Sie eine Datum und Uhrzeit-Zeichenfolge, die in einem bestimmten Format vorliegen muss.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> oder <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Ein Datums- und Uhrzeitzeichenfolge analysiert, und führen Sie eine Konvertierung in UTC-Zeit oder Ortszeit.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Überladung|  
|Ein Datums- und Uhrzeitzeichenfolge ohne Behandeln von Ausnahmen zu analysieren.|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>-Methode|  
|Stellen Sie wieder her (Roundtrip) einen erstellten Datum und Uhrzeit-Wert, durch einen Formatierungsvorgang.|Übergeben Sie die "o" oder "R"-Standardformat-Zeichenfolge, die <xref:System.DateTime.ToString%28System.String%29> -Methode, und rufen die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> -Überladung mit <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analysieren einer Datums- und Uhrzeitzeichenfolge in einem festen Format Computer (und möglicherweise kulturellen) hinweg.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> oder <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> Methode|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>Die zu analysierende Zeichenfolge  
 Die <xref:System.DateTime.Parse%2A> Methode versucht, die Zeichenfolgendarstellung eines Werts für Datum und Uhrzeit, konvertieren die <xref:System.DateTime> entspricht. Er versucht, die Eingabezeichenfolge vollständig ohne auszulösen Analysieren einer <xref:System.FormatException> Ausnahme.  
  
> [!IMPORTANT]
>  Bei der Analyse aufgrund einer nicht erkannten Zeichenfolgenformat Vorgangsfehler der <xref:System.DateTime.Parse%2A> -Methode löst eine <xref:System.FormatException>, während die <xref:System.DateTime.TryParse%2A> -Methode zurückkehrt `false`. Da Ausnahmebehandlung teuer sein kann, sollten Sie verwenden <xref:System.DateTime.Parse%2A> Wenn der Analysevorgang muss bereitgestellt werden, da die Eingabequelle als vertrauenswürdig eingestuft wird. <xref:System.DateTime.TryParse%2A> ist vorzuziehen, wenn Fehler bei der Analyse wahrscheinlich sind, insbesondere, da der Eingabequelle ist nicht vertrauenswürdig, oder Sie haben angemessene Standardwerte als Ersatz für Zeichenfolgen, die nicht erfolgreich analysiert.   

 Die Zeichenfolge, die analysiert werden, kann eine der folgenden Formen annehmen:  
  
-   Eine Zeichenfolge mit einer Datums- und Zeitangabe.  
  
-   Eine Zeichenfolge mit einem Datum, aber keine Zeitkomponente. Die Zeitkomponente nicht vorhanden ist, nimmt die Methode 12:00 Uhr an. Verfügt die Datumskomponente eine zweistellige Jahresangabe, konvertiert es bis zu einem Jahr basierend auf den <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> aktueller Kalender der aktuellen Kultur oder der angegebenen Kultur aktuellen Kalender (Wenn Sie eine Überladung mit einer nicht-Null verwenden `provider` Argument).  
  
- Eine Zeichenfolge mit der ein Datum, das nur den Monat und Jahr enthält aber keine Tagkomponente. Die Methode geht davon aus den ersten Tag des Monats.

- Eine Zeichenfolge mit der ein Datum, das nur den Monat und Tag enthält aber keine Jahreskomponente. Die Methode setzt voraus, das aktuelle Jahr.

-   Eine Zeichenfolge mit einer Zeit, aber keine Datumskomponente. Die Methode das aktuelle Datum angenommen, es sei denn, Sie rufen die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> überladen und umfassen <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> in die `styles` Argument, in dem Fall die Methode geht davon aus einem Datum der 1. Januar 0001.  

- Eine Zeichenfolge mit einer Zeitkomponente, die nur die Stunde und einer AM/PM-Kennzeichner mit keine Datumskomponente enthält. Die Methode setzt voraus, das aktuelle Datum und eine Uhrzeit mit keine Minuten und keine Sekunden. Sie können dieses Verhalten ändern, durch Aufrufen der <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> überladen und umfassen <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> in die `styles` Argument, in dem Fall die Methode geht davon aus einem Datum der 1. Januar 0001.

-   Eine Zeichenfolge, die Zeitzoneninformationen enthält und ISO 8601 entspricht. In den folgenden Beispielen wird die erste Zeichenfolge kennzeichnet Coordinated Universal Time (UTC), und die zweite bezieht sich auf die Zeit in einer anderen Zeitzone, die sieben Stunden vor UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Eine Zeichenfolge, die enthält den GMT-Kennzeichner und entspricht dem RFC 1123-Uhrzeitformat; Zum Beispiel:  
  
     "Sat, 01 November 2008 19:35:00 Uhr GMT"  
  
-   Eine Zeichenfolge, die das Datum und Zeit zusammen mit Offset Zeitzoneninformationen enthält; Zum Beispiel:  
  
     "03/01/2009 05:42:00 – 5:00"  

Im folgenden Beispiel werden Zeichenfolgen in jeder der folgenden Formate mithilfe der Formatierungskonventionen der aktuellen Kultur, die in diesem Fall wird von der Kultur En-US analysiert:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Wenn die Eingabezeichenfolge ein Schalttag in einem Schaltjahr im Kalender verwendet, die für die Analysemethode darstellt (finden Sie unter [Analyse- und kulturellen Konventionen](#Culture)), wird die <xref:System.DateTime.Parse%2A> Methode die Zeichenfolge erfolgreich analysiert. Wenn die Eingabezeichenfolge einen Schalttag in Leap Jahr darstellt, löst die Methode eine <xref:System.FormatException>.  
  
 Da die <xref:System.DateTime.Parse%2A> Methode versucht, die Zeichenfolgendarstellung eines Datums zu analysieren und anhand von Formatierungsregeln der aktuellen oder einer angegebenen Kultur, bei dem Versuch, eine Zeichenfolge analysieren können über unterschiedliche Kulturen kann fehlschlagen. Um ein bestimmtes Datum und Uhrzeit-Format für verschiedene Gebietsschemas zu analysieren, verwenden Sie eine der Überladungen der die <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> Methode, und geben Sie einen Formatbezeichner.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Analysieren und kulturellen Konventionen  
 Alle Überladungen der der <xref:System.DateTime.Parse%2A> -Methode ist kulturabhängig, wenn die Zeichenfolge, die analysiert werden (die dargestellte `s` in der folgenden Tabelle) entspricht dem ISO 8601-Muster. Der Analysevorgang verwendet den Formatierungsinformationen in eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das wie folgt abgeleitet wird:  
  
|Beim Aufrufen|Und `provider` ist|Informationen über die Formatierung wird abgeleitet.|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|Die aktuelle Threadkultur (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> Eigenschaft)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt|Das angegebene <xref:System.Globalization.DateTimeFormatInfo> Objekt|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|Die aktuelle Threadkultur (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> Eigenschaft)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Ein <xref:System.Globalization.CultureInfo> Objekt|Die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft.|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> oder <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Benutzerdefinierte <xref:System.IFormatProvider> Implementierung|Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>-Methode|  
  
 Wenn Formatierungsinformationen stammt aus einer <xref:System.Globalization.DateTimeFormatInfo> -Objekt, die <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> Eigenschaft definiert den Kalender, die in den Analysevorgang verwendet.  
  
 Wenn Sie mit einer Datums- und Uhrzeitzeichenfolge Analysieren einer <xref:System.Globalization.DateTimeFormatInfo> Objekt mit benutzerdefinierten Einstellungen, die sich von einer standardmäßigen Kultur unterscheiden, verwenden Sie die <xref:System.DateTime.ParseExact%2A> -Methode anstelle der <xref:System.DateTime.Parse%2A> Methode, um die Chancen für eine erfolgreiche Konvertierung zu verbessern. Eine nicht standardmäßige Datums- und Zeitzeichenfolge kann komplex und schwer zu analysieren. Die <xref:System.DateTime.Parse%2A> Methode versucht, eine Zeichenfolge mit mehreren impliziter Analysemuster zu analysieren, alle möglicherweise fehlschlagen. Im Gegensatz dazu die <xref:System.DateTime.ParseExact%2A> Methode erfordert, dass Sie mindestens eine exakte Analysemuster explizit zu bestimmen, die wahrscheinlich erfolgreich sind. Weitere Informationen finden Sie im Abschnitt "DateTimeFormatInfo und Dynamic Data" in der <xref:System.Globalization.DateTimeFormatInfo> Thema.  
  
> [!IMPORTANT]
>  Beachten Sie, dass die Formatierungskonventionen für eine bestimmte Kultur dynamisch sind und können geändert werden können. Dies bedeutet, die angeben, Analysevorgänge, die abhängig von der Formatierungskonventionen der die Standardkultur (aktueller) oder dass ein <xref:System.IFormatProvider> -Objekt, das eine Kultur als der invarianten Kultur darstellt, kann auftreten, wenn keines der folgenden auftritt:  
>   
> -   Die kulturspezifische Daten zwischen Haupt- oder Nebenversion von Versionen von .NET Framework oder als Ergebnis eines Updates auf die vorhandene Version von .NET Framework geändert haben.  
> -   Die kulturspezifischen wider benutzereinstellungen, die von einem Computer oder Sitzung variieren können.  
> -   Die kulturspezifische Daten stellt eine Ersatzkultur, die die Einstellungen eine standardmäßige oder eine benutzerdefinierte Kultur überschreibt.  
>   
>  Um zu verhindern, dass die Probleme beim Analysieren von Daten und die Uhrzeit-Zeichenfolgen, die Änderungen im kulturellen Daten zugeordnet sind, Sie können Datum- und Uhrzeitzeichenfolgen analysieren, indem Sie mit der invarianten Kultur, oder Sie rufen die <xref:System.DateTime.ParseExact%2A> oder <xref:System.DateTime.TryParseExact%2A> Methode, und geben Sie das genaue Format der zu analysierende Zeichenfolge. Wenn Sie sind serialisieren und Deserialisieren von Datums-und Uhrzeitdaten, Sie die Formatierungskonventionen der invarianten Kultur verwenden können, oder Sie serialisieren und Deserialisieren können die <xref:System.DateTime> Wert in ein binäres Format.  
>   
>  Weitere Informationen finden Sie im Abschnitt "dynamische Kulturdaten" in der <xref:System.Globalization.CultureInfo> Thema und die "Persisting" DateTime "Werte" im Abschnitt der <xref:System.DateTime> Thema.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Elemente analysieren und formatieren  
 Alle <xref:System.DateTime.Parse%2A> Überladungen ignorieren führende, innere oder nachfolgende Leerzeichen in der Eingabezeichenfolge (durch dargestellt `s` in der folgenden Tabelle). Datum und Uhrzeit können mit einem Paar führende und nachfolgende Nummernzeichen ("#", U + 0023) Klammern werden und eingeschlossen werden können, mit einem oder mehreren NULL-Zeichen (U + 0000).  
  
 Darüber hinaus die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Überladung verfügt über eine `styles` Parameter, der einen oder mehrere Member besteht aus den <xref:System.Globalization.DateTimeStyles> Enumeration. Dieser Parameter definiert, wie `s` interpretiert werden soll und wie der Analysevorgang konvertieren soll `s` in ein Datum und Uhrzeit. Die folgende Tabelle beschreibt die Auswirkungen der einzelnen <xref:System.Globalization.DateTimeStyles> Element auf der Analysevorgang.  
  
|DateTimeStyles-Element|Auswirkungen auf die Konvertierung|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, konvertiert es in UTC, wie folgt:<br /><br /> -If `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> konvertieren das zurückgegebene <xref:System.DateTime> Wert UTC-Zeit und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-If `s` gibt an, dass es sich um UTC darstellt oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal> Flag Methode analysiert die Zeichenfolge, führt keine Konvertierung für die Zeitzone für den zurückgegebenen <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-In allen anderen Fällen ist das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Dieser Wert wird ignoriert. Innerer Leerraum ist immer zulässig, in den Datums- und Uhrzeitangabe Elementen `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Dieser Wert wird ignoriert. Führendes Leerzeichen ist immer zulässig, in den Datums- und Uhrzeitangabe Elementen `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Dieser Wert wird ignoriert. Nachfolgende Leerzeichen in den Datums- und Uhrzeitangabe Elementen immer zulässig ist `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führenden, inneren und nachfolgende Leerstellen enthalten kann. Dies ist das Standardverhalten. Es kann nicht überschrieben werden, indem Sie eine restriktivere angeben <xref:System.Globalization.DateTimeStyles> Enumerationswert wie z. B. <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` Zeitzoneninformation, Ortszeit wird davon ausgegangen, dass fehlt. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> Flag vorhanden ist, die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` Zeitzoneninformation, UTC wird davon ausgegangen, dass fehlt. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> Flag vorhanden ist, wird die-Methode konvertiert das zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl gültig ist, wird dieser Wert ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten, zu verhindern, dass die Konvertierung von einer Datums- und Uhrzeitzeichenfolge, versucht ein <xref:System.DateTime> -Wert, der eine lokale Zeit mit seine <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Solch eine Zeichenfolge wird in der Regel erstellt, durch Aufrufen der <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> -Methode und mithilfe der Standardformatbezeichner "o", "R" oder "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>Der Rückgabewert und DateTime.Kind

Die `DateTime.Parse` überlädt die Rückgabe einer <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind> Eigenschaft enthält Informationen zur Zeitzone. Es kann darauf hinweisen, dass die Uhrzeit:

- Coordinated Universal Time (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- Die Zeit in die lokale Zeitzone (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- Die Zeit in einer unbekannten Zeitzone (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 Im Allgemeinen die <xref:System.DateTime.Parse%2A> Methode gibt ein <xref:System.DateTime> Objekt, dessen <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Allerdings der <xref:System.DateTime.Parse%2A> Methode kann auch zeitzonenkonvertierung ausführen und legen Sie den Wert von der <xref:System.DateTime.Kind%2A> Eigenschaft unterschiedlich, abhängig von den Werten von der `s` und `styles` Parameter:  
  
|If|Konvertierung der Zeitzone|Kind-Eigenschaft|  
|--------|--------------------------|-------------------|  
|`s` enthält Informationen zur Zeitzone an.|Das Datum und die Uhrzeit wird in die Zeit in die lokale Zeitzone konvertiert.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` enthält Informationen, die Zeitzone und `styles` enthält die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> Flag.|Das Datum und die Uhrzeit wird in Coordinated Universal Time (UTC) konvertiert.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` der Z oder GMT Zeitzonen-Kennzeichner enthält und `styles` enthält die <xref:System.Globalization.DateTimeStyles.RoundtripKind> Flag.|Datum und Uhrzeit werden als UTC interpretiert.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 Das folgende Beispiel konvertiert Datumszeichenfolgen, die Informationen zur Zeitzone in die Zeit in der lokalen Zeitzone enthalten:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  Können Sie auch den Wert für Datum und Uhrzeit erhalten <xref:System.DateTime.Kind%2A> Eigenschaft während einer Formatierung und Analyse von Vorgang mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag. Im folgende Beispiel wird veranschaulicht, wie die <xref:System.Globalization.DateTimeStyles.RoundtripKind> Flag wirkt sich auf den Analysevorgang auf <xref:System.DateTime> Werte, die in Zeichenfolgen konvertiert werden, mit dem Formatbezeichner "o", "R" oder "u".  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Zahlreiche Beispiele, die aufgerufen werden der `DateTime.Parse` Methode in der gesamten vermischt werden die ["Hinweise"](#remarks) Abschnitt dieses Artikels und in der Dokumentation für die einzelnen `DateTime.Parse` Überladungen.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Sie können auch einen vollständigen Satz von herunterladen `DateTime.Parse` Beispiele, die in enthalten sind eine [.NET Core 2.0-Projekt für C#-](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/DateTime.Parse.zip) und ein [.NET Core 2.0-Projekt für Visual Basic](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), aus der [Dotnet/Docs GitHub-Repository](https://github.com/dotnet/docs).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the conventions of the current thread culture.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Wenn `s` enthält Zeitzoneninformationen, gibt diese Methode eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> und konvertiert das Datum und die Uhrzeit in `s` in die Ortszeit. Andernfalls führt keine Konvertierung Zeitzone und gibt eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Diese Überladung versucht, Analysieren `s` durch Verwendung der Formatierungskonventionen der aktuellen Kultur. Die aktuelle Kultur wird angegeben, indem die <xref:System.Globalization.CultureInfo.CurrentCulture> Eigenschaft. Um eine Zeichenfolge, die Verwendung der Formatierungskonventionen einer bestimmten Kultur analysieren möchten, rufen Sie die <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> oder <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> Überladungen.

Diese Überladung versucht, Analysieren `s` mit <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> Stil.

## <a name="example"></a>Beispiel

Im folgende Beispiel analysiert die angegebene Zeichenfolgendarstellung mehrerer Datum und Uhrzeit-Werte von:

- Verwenden den Standardanbieter für das Format, bereitstellt, das die Formatierungskonventionen der aktuellen Threadkultur des Computers verwendet wird, um die Ausgabe zu erzeugen. In diesem Beispiel wird die Ausgabe spiegelt wider, die Formatierungskonventionen der Kultur En-US.

- Verwendung des Standardwerts für die Formatvorlage, also <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Er behandelt die <xref:System.FormatException> Ausnahme wird ausgelöst, wenn die Methode versucht, die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe zu analysieren, indem Sie einige andere Kultur des Formatierungskonventionen. Es wird gezeigt, wie erfolgreich einen Wert für Datum und Uhrzeit analysiert, der nicht die Formatierungskonventionen der aktuellen Threadkultur verwendet.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.  See [Parsing and cultural conventions](#Culture)</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Wenn `s` enthält Zeitzoneninformationen, gibt diese Methode eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> und konvertiert das Datum und die Uhrzeit in `s` in die Ortszeit. Andernfalls führt keine Konvertierung Zeitzone und gibt eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Diese Überladung versucht, Analysieren `s` mithilfe der <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> Stil.

## <a name="example"></a>Beispiel

Im folgende Beispiel werden ein Array von Datumszeichenfolgen mit den Konventionen der En-US, fr-FR und de-DE Kulturen analysiert. Es zeigt, dass die zeichenfolgendarstellungen für ein einzelnes Datum in verschiedenen Kulturen unterschiedlich interpretiert werden können.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.  See [Parsing and cultural conventions](#Culture)</param>
        <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <c>s</c> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Diese methodenüberladung konvertiert, das Datum und die Uhrzeit in `s` und legt der <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Wert wie folgt:

|If |Konvertierung der Zeitzone|Kind-Eigenschaft|   
|-----|-----|-----|  
|`s` enthält keine Zeitzoneninformationen.|Keine|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` enthält Informationen zur Zeitzone an.|In die Zeit in der lokalen Zeitzone|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` enthält die Zeitzoneninformationen, und "Styles enthält die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag.|Auf die koordinierte Weltzeit (UTC) (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` der Z oder GMT Zeitzonen-Kennzeichner enthält und `styles` enthält die <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|Keine|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Beispiel

Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Methode und zeigt den Wert von der <xref:System.DateTime.Kind%2A> -Eigenschaft des resultierenden <xref:System.DateTime> Werte.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly or an exception is thrown.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums im Format von definiert sein muss die `format` Parameter. Es erfordert außerdem, dass die \<Datum > und \<Zeit > Elemente die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe angezeigt, in der Reihenfolge gemäß `format`, und dass `s` haben keine Leerzeichen, die von der zugelassenenals`format`. Wenn `format` definiert ein Datum mit keine Time-Element und die Analyse erfolgreich ist, das resultierende <xref:System.DateTime> Wert hat, eine Zeit von Mitternacht (00: 00:00). Wenn `format` definiert eine Uhrzeit mit kein Datumselement und die Analyse erfolgreich ist, das resultierende <xref:System.DateTime> Wert weist `DateTime.Now.Date`.  
  
 Wenn `s` nicht darstellen, die eine Zeit in einer bestimmten Zeitzone und der Analysevorgang erfolgreich ist, wird die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn `s` stellt die Zeit in einer bestimmten Zeitzone dar und `format` Zeitzoneninformationen vorhanden sein können (z. B. wenn `format` "o", "R" oder der Standardformatbezeichner "u" entspricht oder wenn sie das "Z", "Zz" oder "Zzz" enthält. benutzerdefinierte Formatbezeichner), die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 Die `format` Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren enthält `s`. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oder [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Wenn `format` ist ein benutzerdefiniertes Format-Muster, die keine Datums- oder Zeitangabe Trennzeichen (z. B. "YyyyMMddHHmm") enthalten, für die invariante Kultur verwenden die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Formatmuster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
 Die bestimmtes Datum und Zeit Symbole und in verwendeten Zeichenfolgen (z. B. die Namen der Wochentage in einer bestimmten Sprache) `s` werden definiert, indem die `provider` Parameter, wie das genaue Format des `s` Wenn `format` ist ein standard-Format Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, die zum Interpretieren von `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methodenrückgabe entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`die <xref:System.Globalization.CultureInfo> dient-Objekt, das der aktuellen Kultur entspricht.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ParseExact%2A> Methode.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> or <paramref name="format" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>In der [! Include[net_v40_short](~/Includes/NET-V40-Short-MD.MD)], die <see cref="Overload:System.DateTime.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und einen AM/PM-Kennzeichner enthält, die nicht in der Vereinbarung sind. In der [! Include[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] und frühere Versionen, der AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="style">A bitwise combination of the enumeration values that provides additional information about <c>s</c>, about style elements that may be present in <c>s</c>, or about the conversion from <c>s</c> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums in einem Format von definiert sein muss die `format` Parameter. Sie erfordert außerdem, dass die Datums- und Uhrzeitangabe Elemente in `s` werden in der Reihenfolge gemäß `format`. Wenn `s` entspricht nicht das Muster der `format` -Parameter mit allen Varianten von definiert die `style` Parameter, löst die Methode eine <xref:System.FormatException>. Im Gegensatz dazu die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums in einem der Formate von des Formatanbieters erkannt <xref:System.Globalization.DateTimeFormatInfo> Objekt. Die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode können auch das Datum und Uhrzeit Elemente in `s` in beliebiger Reihenfolge angezeigt werden.  
  
 Wenn die `s` Parameter enthält nur eine Uhrzeit und kein Datum das aktuelle Datum wird verwendet, es sei denn, die `style` Parameter enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> kennzeichnen, in diesem Fall das Standarddatum (`DateTime.Date.MinValue`) verwendet wird. Wenn die `s` Parameter enthält nur ein Datum und keine Zeit, Mitternacht (00: 00:00) verwendet wird. Die `style` -Parameter bestimmt außerdem, ob die `s` Parameter kann führende, innere oder nachgestellten Leerzeichen enthalten.  
  
 Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> kennzeichnen, welche gibt eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> kennzeichnet, welche gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` enthält Informationen zur Zeitzone, in die Ortszeit, wird die Zeitangabe konvertiert, falls erforderlich, und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag Coordinated Universal Time (UTC) nicht in eine lokale Uhrzeit zu konvertieren und Festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Die `format` Parameter definiert das Muster, das von der `s` Parameter. Es besteht aus einem oder mehreren benutzerdefinierten Formatbezeichnern die [benutzerdefinierten Formatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md) Tabelle oder eine einzelne Standard-Formatbezeichner, die aus ein vordefiniertes Muster identifiziert die [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) Tabelle.  
  
 Wenn Sie keine Datums- oder Zeitangabe Trennzeichen in ein benutzerdefiniertes Formatmuster verwenden, verwenden Sie die invariante Kultur für die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Muster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
> [!NOTE]
>  Anstatt dass erforderlich ist, die `s` entsprechen einem einzelnen Format, damit der Analysevorgang erfolgreich ausgeführt werden kann, rufen Sie die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode, und geben Sie mehrere zulässige Formate. Dadurch wird den Analysevorgang wahrscheinlicher erfolgreich ausgeführt werden kann.  
  
 Die `styles` Parameter enthält einen oder mehrere Member der der <xref:System.Globalization.DateTimeStyles> Enumeration, die bestimmen, ob und wo Leerraum nicht definiert `format` erscheinen `s` sowie das genaue Verhalten des Analysevorgangs steuern. In der folgenden Tabelle wird beschrieben, wie die einzelnen Member der <xref:System.Globalization.DateTimeStyles> Enumeration wirkt sich auf den Betrieb von der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Methode.  
  
|DateTimeStyles-Element|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, in UTC konvertiert. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> konvertieren das zurückgegebene <xref:System.DateTime> -Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC darstellt oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, führt keine Konvertierung für die Zeitzone für den zurückgegebenen <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen ist das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass Leerraum, der nicht durch definierten `format` kann zwischen den einzelnen Datums- oder Time-Element angezeigt werden.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerraum nicht definiert, indem `format` stehen am Anfang des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerraum nicht definiert, indem `format` stehen am Ende der `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` darf führenden, inneren und nachfolgende Leerstellen, die nicht von definiert `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, dass eine Ortszeit darstellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die-Methode konvertiert das zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` enthält Zeit ohne Datumsinformationen, das Datum des Rückgabewerts auf festgelegt ist `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Die `s` Parameter mit Standardwerten analysiert. Keine Leerstellen als einfache, Present in `format` ist zulässig. Wenn `s` eine Datumskomponente, das Datum des zurückgegebenen <xref:System.DateTime> Wert auf 1/1/0001 festgelegt ist. Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn die Zeitzoneninformationen in vorhanden ist `s`, die Uhrzeit wird in die Ortszeit konvertiert und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung in einen <xref:System.DateTime> Wert von Datum und Uhrzeit mit seiner <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Flag wird in erster Linie verhindert, dass die Konvertierung der UTC-Zeiten, die lokalen Zeiten.|  
  
 Die bestimmtes Datum und Zeit Symbole und in verwendeten Zeichenfolgen (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) `s` werden definiert, indem die `provider` Parameter, wie das genaue Format des `s` Wenn `format` ist ein standard-Format Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, die zum Interpretieren von `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methodenrückgabe entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`die <xref:System.Globalization.CultureInfo> dient-Objekt, das der aktuellen Kultur entspricht.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode. Beachten Sie, dass die Zeichenfolge "5/01/2009 8:30 Uhr" nicht erfolgreich analysiert werden bei der `styles` entspricht <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> da führende Leerzeichen nicht zulässig sind `format`. Darüber hinaus die Zeichenfolge "5/01/2009 09:00" kann nicht erfolgreich analysiert werden, mit einem `format` von "MM/TT/Yyyyhh:mm", da der nicht der Monatszahl mit einer führenden Null als Datumszeichenfolge `format` erfordert.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> or <paramref name="format" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>In der [! Include[net_v40_short](~/Includes/NET-V40-Short-MD.MD)], die <see cref="Overload:System.DateTime.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und einen AM/PM-Kennzeichner enthält, die nicht in der Vereinbarung sind. In der [! Include[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] und frühere Versionen, der AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, das eines der zugewiesenen Muster entspricht der `formats` Parameter. Wenn die Zeichenfolge `s` entspricht nicht einer dieser Muster mit den Varianten von definiert die `styles` Parameter, löst die Methode eine <xref:System.FormatException>. Abgesehen von Vergleichen `s` mit mehreren Formatierungsmustern anstelle einer einzelnen Formatierungsmuster diese Überladung verhält sich genauso wie die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode.  
  
 Die `s` Parameter enthält, das Datum und die Uhrzeit, zu analysieren. Wenn die `s` Parameter enthält nur eine Uhrzeit und kein Datum das aktuelle Datum wird verwendet, es sei denn, die `style` Parameter enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> kennzeichnen, in diesem Fall das Standarddatum (`DateTime.Date.MinValue`) verwendet wird. Wenn die `s` Parameter enthält nur ein Datum und keine Zeit, Mitternacht (00: 00:00) verwendet wird. Die `style` -Parameter bestimmt außerdem, ob die `s` Parameter kann führende enthalten sind, oder innere Leerraumzeichen andere als die, die durch eine der Formatzeichenfolgen im zugelassen `formats`.  
  
 Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> kennzeichnen, welche gibt eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> kennzeichnet, welche gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` enthält Informationen zur Zeitzone, in die Ortszeit, wird die Zeitangabe konvertiert, falls erforderlich, und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag nicht Coordinated Universal Time (UTC) in lokale Zeit konvertieren und Festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Die `formats` Parameter enthält ein Array von Mustern verwenden, von denen `s` übereinstimmen, genau, wenn der Analysevorgang erfolgreich ist. Die Muster in den `formats` Parameter besteht aus einem oder mehreren benutzerdefinierten Formatbezeichnern aus der [benutzerdefinierten Formatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md) Tabelle oder eine einzelne Standard-Formatbezeichner, die aus ein vordefiniertes Muster identifiziert die [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) Tabelle.  
  
 Wenn Sie keine Datums- oder Zeitangabe Trennzeichen in ein benutzerdefiniertes Formatmuster verwenden, verwenden Sie die invariante Kultur für die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Muster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
 Die `styles` Parameter enthält einen oder mehrere Member der der <xref:System.Globalization.DateTimeStyles> Enumeration, die bestimmen, ob und wo Leerraum nicht definiert `format` erscheinen `s` sowie das genaue Verhalten des Analysevorgangs steuern. In der folgenden Tabelle wird beschrieben, wie die einzelnen Member der <xref:System.Globalization.DateTimeStyles> Enumeration wirkt sich auf den Betrieb von der <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Methode.  
  
|DateTimeStyles-Element|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, in UTC konvertiert. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> konvertieren das zurückgegebene <xref:System.DateTime> -Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC darstellt oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, führt keine Konvertierung für die Zeitzone für den zurückgegebenen <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen ist das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass Leerraum, der nicht durch definierten `format` kann zwischen den einzelnen Datums- oder Time-Element angezeigt werden.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerraum nicht definiert, indem `format` stehen am Anfang des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerraum nicht definiert, indem `format` stehen am Ende der `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` darf führenden, inneren und nachfolgende Leerstellen, die nicht von definiert `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, dass eine Ortszeit darstellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die-Methode konvertiert das zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` enthält Zeit ohne Datumsinformationen, das Datum des Rückgabewerts auf festgelegt ist `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Die `s` Parameter mit Standardwerten analysiert. Keine Leerstellen als einfache, Present in `format` ist zulässig. Wenn `s` eine Datumskomponente, das Datum des zurückgegebenen <xref:System.DateTime> Wert auf 1/1/0001 festgelegt ist. Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn die Zeitzoneninformationen in vorhanden ist `s`, die Uhrzeit wird in die Ortszeit konvertiert und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung in ein Datum und Uhrzeit mit seiner <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Flag wird in erster Linie verhindert, dass die Konvertierung der UTC-Zeiten, die lokalen Zeiten.|  
  
 Die bestimmtes Datum und Zeit Symbole und in verwendeten Zeichenfolgen (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) `s` werden definiert, indem die `provider` Parameter, wie das genaue Format des `s` Wenn `format` ist ein standard-Format Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, die zum Interpretieren von `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methodenrückgabe entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`die <xref:System.Globalization.CultureInfo> dient-Objekt, das der aktuellen Kultur entspricht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode, um sicherzustellen, dass eine Zeichenfolge in eine Anzahl von möglichen Formate erfolgreich analysiert werden kann.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is an empty string.  -or-  an element of <paramref name="formats" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>In der [! Include[net_v40_short](~/Includes/NET-V40-Short-MD.MD)], die <see cref="Overload:System.DateTime.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und einen AM/PM-Kennzeichner enthält, die nicht in der Vereinbarung sind. In der [! Include[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] und frühere Versionen, der AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the seconds component of the date represented by this instance.</summary>
        <value>Die Sekundenkomponente als Wert zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Second%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">A date and time.</param>
        <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
        <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
        <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.DateTime> Objekt besteht aus einem Kind-Feld, der angibt, ob der Zeitwert in Ortszeit, koordinierter Weltzeit (UTC) oder keines von beiden basiert, und ein Ticks-Feld, das einen Uhrzeitwert enthält in 100-Nanosekunden-Ticks gemessen. Die <xref:System.DateTime.SpecifyKind%2A> Methode erstellt ein neues <xref:System.DateTime> -Objekt mit dem angegebenen `kind` Parameter und den ursprünglichen Zeitwert.  
  
> [!IMPORTANT]
>  Das zurückgegebene <xref:System.DateTime> Wert ist nicht die gleiche darstellen instant wie die `value` -Parameter und <xref:System.DateTime.SpecifyKind%2A> ist keine Methode Konvertierung Zeitzone. Stattdessen bleibt die angegebenen Zeit die `value` -Parameter unverändert, und legt die <xref:System.DateTime.Kind%2A> Eigenschaft `kind`. Informationen zur zeitzonenkonvertierungen finden Sie unter [Konvertieren von Uhrzeiten zwischen Zeitzonen](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 Die <xref:System.DateTime.SpecifyKind%2A> Methode eignet sich für Interoperabilitätsszenarien, in denen Sie erhalten, eine <xref:System.DateTime> Objekt mit einem Kind-Feld nicht angegeben, aber Sie können bestimmen, indem unabhängige bedeutet, dass das Feld Ticks Ortszeit oder UTC darstellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode zur Veranschaulichung der Funktion wie die <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts the specified time or duration from this instance.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to subtract.</param>
        <summary>Subtracts the specified date and time from this instance.</summary>
        <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Subtract%28System.DateTime%29> Methode bestimmt den Unterschied zwischen zwei Datumsangaben. Um ein Zeitintervall von der aktuellen Instanz subtrahiert werden soll, rufen Sie die <xref:System.DateTime.Subtract%28System.TimeSpan%29> Methode. Um ein bestimmtes Zeitintervall aus der aktuellen Instanz subtrahiert werden soll, rufen Sie die Methode, die das aktuelle Datum dieses Zeitintervalls hinzufügt, und geben Sie einen negativen Wert als Methodenargument. Aufrufen, um zwei Monate ab dem aktuellen Datum subtrahiert werden soll, z. B. die <xref:System.DateTime.AddMonths%28System.Int32%29> Methode mit dem Wert-2.  
  
 Wenn das Datum und die Uhrzeit der aktuellen Instanz ist älter als `value`, die Methode gibt ein <xref:System.TimeSpan> Objekt, das eine negative Zeitspanne darstellt. D. h., der Wert aller Eigenschaften ungleich Null (z. B. <xref:System.TimeSpan.Days%2A> oder <xref:System.TimeSpan.Ticks%2A>) ist ein negativer Wert.  
  
 Die <xref:System.DateTime.Subtract%28System.DateTime%29> Methode berücksichtigt nicht den Wert der <xref:System.DateTime.Kind%2A> Eigenschaft der beiden <xref:System.DateTime> Werte beim Ausführen der Subtraktion. Vor dem subtrahieren <xref:System.DateTime> Objekte, stellen Sie sicher, dass die Objekte Zeiten in der gleichen Zeitzone darstellen. Andernfalls wird das Ergebnis den Unterschied zwischen Zeitzonen enthalten.  
  
> [!NOTE]
>  Die <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> Methode wird den Unterschied zwischen den Zeitzonen, die beim Ausführen der Subtraktion berücksichtigt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Subtract%2A> -Methode und der Subtraktionsoperator.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">The time interval to subtract.</param>
        <summary>Subtracts the specified duration from this instance.</summary>
        <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Subtract%28System.TimeSpan%29> Methode gibt das Datum, das angegebene Intervall Zeitdifferenz zwischen diesem aus der aktuellen Instanz zurück. Um das Zeitintervall zwischen zwei Datumsangaben zu ermitteln, rufen die <xref:System.DateTime.Subtract%28System.DateTime%29> Methode. Um ein bestimmtes Zeitintervall aus der aktuellen Instanz subtrahiert werden soll, rufen Sie die Methode, die das aktuelle Datum dieses Zeitintervalls hinzufügt, und geben Sie einen negativen Wert als Methodenargument. Aufrufen, um zwei Monate ab dem aktuellen Datum subtrahiert werden soll, z. B. die <xref:System.DateTime.AddMonths%28System.Int32%29> Methode mit dem Wert-2.  
  
 Diese Methode ändert nicht den Wert dieses <xref:System.DateTime>. Stattdessen gibt es eine neue <xref:System.DateTime> , dessen Wert ist das Ergebnis dieses Vorgangs.  
  
 Normalerweise die <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Methode subtrahiert einen <xref:System.TimeSpan> Objekt, das eine positive Zeitspanne darstellt, und gibt, eine <xref:System.DateTime> -Wert, der älter ist als das Datum und die Uhrzeit der aktuellen Instanz. Jedoch wenn die <xref:System.TimeSpan> Objekt stellt eine negative Zeitspanne der <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Methode gibt ein <xref:System.DateTime> -Wert, der das Datum und die Uhrzeit der aktuellen Instanz liegt.  
  
 Die <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Methode können Sie ein Zeitintervall subtrahiert werden soll, der mehr als eine Einheit, z. B. (einer bestimmten Anzahl von Stunden) und eine angegebene Anzahl von Minuten besteht. Aus eine einzelne Zeiteinheit (z. B. Jahre, Monate oder Tage) subtrahiert den <xref:System.DateTime> Instanz, Sie können einen negativen numerischen Wert als Parameter an übergeben einer der folgenden Methoden:  
  
-   <xref:System.DateTime.AddYears%2A>, um eine bestimmte Anzahl von Jahren in der aktuellen Instanz von Datums- und Uhrzeitangabe subtrahiert werden soll.  
  
-   <xref:System.DateTime.AddMonths%2A>, eine bestimmte Anzahl von Monaten in der aktuellen Instanz von Datums- und Uhrzeitangabe subtrahiert werden soll.  
  
-   <xref:System.DateTime.AddDays%2A>, eine bestimmte Anzahl von Tagen aus der aktuellen Instanz von Datums- und Uhrzeitangabe subtrahiert werden soll.  
  
-   <xref:System.DateTime.AddHours%2A>, um eine bestimmte Anzahl von Stunden in der aktuellen Instanz von Datums- und Uhrzeitangabe subtrahiert werden soll.  
  
-   <xref:System.DateTime.AddMinutes%2A>, eine bestimmte Anzahl von Minuten ab der aktuellen Instanz von Datums- und Uhrzeitangabe subtrahiert werden soll.  
  
-   <xref:System.DateTime.AddSeconds%2A>, eine bestimmte Anzahl von Sekunden von der aktuellen Instanz von Datums- und Uhrzeitangabe subtrahiert werden soll.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, eine bestimmte Anzahl von Millisekunden von der aktuellen Instanz von Datums- und Uhrzeitangabe subtrahiert werden soll.  
  
-   <xref:System.DateTime.AddTicks%2A>, eine bestimmte Anzahl von Ticks in der aktuellen Instanz von Datums- und Uhrzeitangabe subtrahiert werden soll.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Subtract%2A> -Methode und der Subtraktionsoperator.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
        <returns>The current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">The desired type.</param>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
        <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.DateTime" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode füllt die `info` Parameter mit dem <xref:System.DateTime.Ticks%2A> und <xref:System.DateTime.Kind%2A> Eigenschaftswerte.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
        <value>Die Anzahl der Ticks, die Datum und Uhrzeit dieser Instanz darstellen. Der Wert liegt zwischen <see langword="DateTime.MinValue.Ticks" /> und <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein einzelner Tick stellt 100 Nanosekunden oder ein zehnmillionstel einer Sekunde dar. Es gibt in einer Millisekunde 10.000 Ticks oder 10 Millionen Ticks pro Sekunde.  
  
 Der Wert dieser Eigenschaft stellt die Anzahl der 100-Nanosekunden-Intervalle, die seit 12:00:00 Mitternacht, 1. Januar 0001 vergangen sind (0: 00:00 UTC am 1. Januar 0001, im gregorianischen Kalender), steht <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Es umfasst nicht die Anzahl der Ticks, die auf Sekunden leap zurückzuführen sind.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Ticks%2A> Eigenschaft, um die Anzahl der Ticks anzuzeigen, die seit dem Beginn der 21. Jahrhundert vergangen sind, zu instanziieren einer <xref:System.TimeSpan> Objekt. Die <xref:System.TimeSpan> Objekt wird dann verwendet, um die verstrichene Zeit, die über verschiedene Zeitintervalle anzuzeigen.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time of day for this instance.</summary>
        <value>Ein Zeitintervall, das den seit Mitternacht vergangenen Teil des Tages darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Gegensatz zu den <xref:System.DateTime.Date%2A> Eigenschaft. Welche gibt eine <xref:System.DateTime> -Wert, der ein Datum ohne die Zeitkomponente darstellt. die <xref:System.DateTime.TimeOfDay%2A> Eigenschaft gibt eine <xref:System.TimeSpan> Wert, der darstellt eine <xref:System.DateTime> Zeitkomponente des Werts.  
  
 Wenn Tageszeit anzuzeigen oder die Zeichenfolgendarstellung der Tageszeit abrufen sollen eine <xref:System.DateTime> Wert können Sie stattdessen eine Überladung aufrufen der <xref:System.DateTime.ToString%2A> Methode, die eine `format` Parameter, oder verwenden die [kombinierte Formatierung ](~/docs/standard/base-types/composite-formatting.md) Funktion mit dem "t" oder "T" Standardformatzeichenfolge.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den Wert des der <xref:System.DateTime.TimeOfDay%2A> -Eigenschaft für ein Array von <xref:System.DateTime> Werte. Es steht im Gegensatz zu auch der Rückgabewert von "t" Standardformatzeichenfolge in einem zusammengesetzten Formatierungsvorgang zurückgegebene Zeichenfolge.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</summary>
        <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.DateTime.ToBinary%2A> Methode zum Konvertieren des Werts des aktuellen <xref:System.DateTime> Objekt in einen Binärwert. Anschließend verwenden Sie den binären Wert und die <xref:System.DateTime.FromBinary%2A> -Methode zum Neuerstellen der ursprünglichen <xref:System.DateTime> Objekt.  
  
> [!IMPORTANT]
>  In einigen Fällen die <xref:System.DateTime> zurückgegebene Wert den <xref:System.DateTime.FromBinary%2A> Methode ist nicht mit dem Original identisch <xref:System.DateTime> für bereitgestellte Wert der <xref:System.DateTime.ToBinary%2A> Methode. Weitere Informationen finden Sie im nächsten Abschnitt, "Ortszeit Anpassung".  
  
## <a name="local-time-adjustment"></a>Ortszeit Anpassung  
 Eine Ortszeit, die eine Coordinated Universal Time, die auf der lokalen Zeitzone angepasst ist, wird durch dargestellt eine <xref:System.DateTime> Struktur, deren <xref:System.DateTime.Kind%2A> Eigenschaft hat den Wert <xref:System.DateTimeKind.Local>. Beim Wiederherstellen einer lokales <xref:System.DateTime> Wert aus der binären Darstellung, die vom erzeugt wird die <xref:System.DateTime.ToBinary%2A> -Methode, die <xref:System.DateTime.FromBinary%2A> Methode möglicherweise die neu erstellte Wert anpassen, sodass er nicht mit den ursprünglichen Wert übereinstimmt. Dieser Fall kann unter den folgenden Bedingungen eintreten:  
  
-   Wenn eine lokale <xref:System.DateTime> Objekt erfolgt die Serialisierung in einer Zeitzone von der <xref:System.DateTime.ToBinary%2A> -Methode, und klicken Sie dann in einer anderen Zeitzone von deserialisiert die <xref:System.DateTime.FromBinary%2A> -Methode, die lokale Zeit dargestellt, die durch das resultierende <xref:System.DateTime> Objekt wird automatisch so angepasst um die zweite Zeitzone.  
  
     Betrachten Sie beispielsweise eine <xref:System.DateTime> -Objekt, das lokale Zeit von 15: 00 Uhr darstellt. Eine Anwendung, die in den USA ausgeführt wird Zeitzone Pacific Time verwendet die <xref:System.DateTime.ToBinary%2A> Methode zu, die zu konvertierende <xref:System.DateTime> Objekt in einen Binärwert. Eine andere Anwendung, die in den USA ausgeführt wird Zeitzone Eastern Time verwendet die <xref:System.DateTime.FromBinary%2A> -Methode zum Konvertieren von des Binärwerts in eine neue <xref:System.DateTime> Objekt. Der Wert der neuen <xref:System.DateTime> Objekt ist 18: 00 Uhr, die denselben Zeitpunkt wie die ursprüngliche 3 Uhr darstellt Wert, aber in die Ortszeit in der Zeitzone Eastern Time angepasst wird.  
  
-   Wenn die binäre Darstellung eines lokalen <xref:System.DateTime> Wert stellt eine ungültige Zeit in der lokalen Zeitzone des Systems auf dem <xref:System.DateTime.FromBinary%2A> wird aufgerufen, wird die Zeit angepasst, damit es gültig ist.  
  
     Beispielsweise erfolgt der Übergang von Normalzeit zu Sommerzeit in den USA Zeitzone Pacific Time am 14. März 2010 um 2:00 Uhr, wenn die Zeit um eine Stunde, um 3:00 Uhr Diese Stunden-Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass wenn eine Zeit, die innerhalb dieses Bereichs in einen Binärwert konvertiert wird die <xref:System.DateTime.ToBinary%2A> Methode und wird dann wiederhergestellt werden, indem Sie die <xref:System.DateTime.FromBinary%2A> -Methode, den ursprünglichen Wert so angepasst, dass eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmter Datums- und Uhrzeitwert Änderungen unterliegen möglicherweise durch Übergabe an die <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> -Methode, wie im Beispiel veranschaulicht.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Version-Überlegungen  
 Beginnend mit .NET Framework, Version 2.0, einem <xref:System.DateTime> Struktur besteht aus einem privaten Kind-Feld, das angibt, ob das angegebene Time-Werten auf Ortszeit, koordinierter Weltzeit (UTC) oder keines von beiden basiert, und ein privates Feld Ticks die enthält die Anzahl der 100-Nanosekunden-Ticks, die ein Datum und eine Uhrzeit angeben. Ticks-Feld zugegriffen werden kann, mit der <xref:System.DateTime.Ticks%2A> -Eigenschaft und das Kind-Feld mit zugegriffen werden kann die <xref:System.DateTime.Kind%2A> Eigenschaft.  
  
 Vor .NET Framework 2.0, wenn Sie serialisiert eine <xref:System.DateTime> Objekt manuell statt mit Serialisierungsschnittstelle wie <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, mussten Sie nur die Ticks-Daten in Serialisieren der <xref:System.DateTime> Struktur. Ab Version 2.0, müssen Sie auch die Kind-Daten serialisieren.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current date.</summary>
        <value>Ein Objekt, das auf das heutige Datum mit einer auf 00:00:00 festgelegten Zeitkomponente festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beginnend mit .NET Framework, Version 2.0, der Rückgabewert ist eine <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> -Eigenschaft gibt <xref:System.DateTimeKind.Local>.  
  
 Da das aktuelle Datum ohne die aktuelle Uhrzeit, gibt die <xref:System.DateTime.Today%2A> Eigenschaft eignet sich für die Verwendung in Anwendungen, die nur mit Daten arbeiten. Weitere Informationen finden Sie unter [Choosing Between DateTime, DateTimeOffset TimeSpan und "TimeZoneInfo"](~/docs/standard/datetime/choosing-between-datetime.md). Im Gegensatz dazu die <xref:System.DateTime.TimeOfDay%2A> Eigenschaft gibt die aktuelle Uhrzeit ohne das aktuelle Datum und die <xref:System.DateTime.Now%2A> Eigenschaft gibt das aktuelle Datum und die aktuelle Uhrzeit zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.Date%2A> Eigenschaft, für das aktuelle Datum abgerufen. Außerdem wird veranschaulicht wie ein <xref:System.DateTime> Wert mit einigen Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen formatiert werden kann. Beachten Sie, dass die Ausgabe von der dritte Aufruf von erzeugt der <xref:System.DateTime.ToString%28System.String%29> Methode den g-Formatbezeichner verwendet, um die Zeitkomponente einzuschließen, die 0 (null) ist.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Uhr, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Coordinated Universal Time (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wenn eine Anwendung erstellt werden, greift auf oder in eine Datei schreibt.  
  
 Die <xref:System.DateTime.ToFileTime%2A> -Methode verwendet die <xref:System.DateTime.Kind%2A> -Eigenschaft können Sie bestimmen, ob die aktuelle <xref:System.DateTime> Objekt ist eine Ortszeit, UTC-Zeit oder eine nicht angegebene Art von Zeit als lokale Zeit behandelt wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToFileTime%2A> Methode.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>Normalerweise die <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> Methode Wiederherstellungen ein <see cref="T:System.DateTime" /> -Wert, der vom gespeichert wurde die <see cref="M:System.DateTime.ToFileTime" /> Methode. Allerdings die beiden Werte in den folgenden Situationen abweichen:: Wenn die Serialisierung und Deserialisierung von der <see cref="T:System.DateTime" /> in verschiedenen Zeitzonen sein. Z. B. wenn ein <see cref="T:System.DateTime" /> Wert mit einer Uhrzeit 12:30 Uhr in den USA Zeitzone Eastern Time serialisiert und deserialisiert dann in den USA Zeitzone Pacific Time, den ursprünglichen Wert von 12:30 Uhr wird um 9:30 Uhr den Unterschied zwischen den beiden Zeitzonen entsprechend angepasst.  -If der <see cref="T:System.DateTime" /> -Wert, der serialisiert wird, eine ungültige Zeit in die lokale Zeitzone darstellt. In diesem Fall die <see cref="M:System.DateTime.ToFileTime" /> Methode passt die wiederhergestellte <see cref="T:System.DateTime" /> Wert, sodass es eine gültige Zeit in die lokale Zeitzone darstellt.  Beispielsweise erfolgt der Übergang von Normalzeit zu Sommerzeit in den USA Zeitzone Pacific Time am 14. März 2010 um 2:00 Uhr, wenn die Zeit um eine Stunde, um 3:00 Uhr Diese Stunden-Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass wenn eine Zeit, die innerhalb dieses Bereichs einen langen ganzzahligen Wert konvertiert wird die <see cref="M:System.DateTime.ToFileTime" /> Methode und wird dann wiederhergestellt werden, indem Sie die <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> -Methode, den ursprünglichen Wert so angepasst, dass eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmter Datums- und Uhrzeitwert Änderungen unterliegen möglicherweise durch Übergabe an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> -Methode, wie im Beispiel veranschaulicht.  [! code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Uhr, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Coordinated Universal Time (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wenn eine Anwendung erstellt werden, greift auf oder in eine Datei schreibt.  
  
 Die <xref:System.DateTime.ToFileTimeUtc%2A> -Methode verwendet die <xref:System.DateTime.Kind%2A> -Eigenschaft können Sie bestimmen, ob die aktuelle <xref:System.DateTime> Objekt ist eine Ortszeit, UTC-Zeit oder eine nicht angegebene Art von Zeit als UTC-Zeit behandelt wird. Wenn sie eine Ortszeit ist, konvertiert die Zeit in UTC-Zeit vor dem Ausführen der Konvertierung in eine Windows-Dateizeit.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToFileTimeUtc" /> Methode wird manchmal verwendet, um eine Ortszeit in UTC konvertieren und anschließend für die wiederherzustellenden durch Aufrufen der <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> Methode gefolgt von der <see cref="M:System.DateTime.ToLocalTime" /> Methode. Jedoch, wenn die ursprüngliche Uhrzeit in der lokalen Zeitzone eine ungültige Zeit darstellt, werden die zwei Ortszeit Werte sein nicht gleich. Weitere Informationen finden Sie unter der <see cref="M:System.DateTime.ToLocalTime" /> Methode.</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ortszeit ist die Zeit (Coordinated Universal Time, UTC) sowie die UTC-zeitverschiebung gleich. Weitere Informationen zu den UTC-zeitverschiebung, finden Sie unter <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. Die Konvertierung auch berücksichtigt die Sommerzeit-Regel, die für die Zeitangabe vom aktuellen gilt <xref:System.DateTime> Objekt.  
  
> [!IMPORTANT]
>  Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die <xref:System.DateTime.ToLocalTime%2A> Methode erkennt nur die aktuelle Anpassungsregel beim Konvertieren von UTC in die Ortszeit. Konvertierungen für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde können daher nicht genau den Unterschied zwischen UTC und Ortszeit wider.  
  
 Beginnend mit .NET Framework, Version 2.0, den Rückgabewert von der <xref:System.DateTime.ToLocalTime%2A> Methode richtet sich nach der <xref:System.DateTime.Kind%2A> Eigenschaft des aktuellen <xref:System.DateTime> Objekt. Die folgende Tabelle beschreibt die möglichen Ergebnisse.  
  
|Art|Ergebnisse|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Diese Instanz von <xref:System.DateTime> in die Ortszeit konvertiert wird.|  
|<xref:System.DateTimeKind.Local>|Es wird keine Konvertierung durchgeführt.|  
|<xref:System.DateTimeKind.Unspecified>|Diese Instanz von <xref:System.DateTime> wird davon ausgegangen, dass eine UTC-Zeit und die Konvertierung erfolgt wie <xref:System.DateTime.Kind%2A> wurden <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  Die <xref:System.DateTime.ToLocalTime%2A> Methode konvertiert ein <xref:System.DateTime> Wert zwischen UTC und Ortszeit. Um die Zeit in einer beliebigen Zeitzone in die Ortszeit zu konvertieren, verwenden die <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> Methode.  
  
 Der von der Konvertierung zurückgegebene Wert ist eine <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> -Eigenschaft gibt immer <xref:System.DateTimeKind.Local>. Daher wird ein gültiges Ergebnis zurückgegeben selbst wenn <xref:System.DateTime.ToLocalTime%2A> wiederholt angewendet wird, auf den gleichen <xref:System.DateTime>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLocalTime%2A> Methode. Beachten Sie, dass die genaue Ausgabe hängt von der aktuellen Kultur und die lokale Zeitzone des Systems, auf dem er ausgeführt wird.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode zur Veranschaulichung der Funktion wie die <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Sie können die <see cref="M:System.DateTime.ToLocalTime" /> Verfahren zum Wiederherstellen einer lokalen Datums- und Uhrzeitwert in UTC konvertiert wurde, die die <see cref="M:System.DateTime.ToUniversalTime" /> oder <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> Methode. Wenn die ursprüngliche Uhrzeit in der lokalen Zeitzone eine ungültige Zeit darstellt, wird er den wiederhergestellten Wert nicht überein. Wenn die <see cref="M:System.DateTime.ToLocalTime" /> Methode konvertiert eine Zeit von UTC an, in der lokalen Zeitzone, es auch passt die Zeit an, dass Sie eine gültige in die lokale Zeitzone.  Beispielsweise erfolgt der Übergang von Normalzeit zu Sommerzeit in den USA Zeitzone Pacific Time am 14. März 2010 um 2:00 Uhr, wenn die Zeit um eine Stunde, um 3:00 Uhr Diese Stunden-Intervall ist eine ungültige Zeit, d. h. ein Zeitintervall, das in dieser Zeitzone nicht vorhanden ist. Das folgende Beispiel zeigt, dass wenn eine Zeit, die innerhalb dieses Bereichs in UTC konvertiert wird die <see cref="M:System.DateTime.ToUniversalTime" /> Methode und wird dann wiederhergestellt werden, indem Sie die <see cref="M:System.DateTime.ToLocalTime" /> -Methode, den ursprünglichen Wert so angepasst, dass eine gültige Zeit wird. Sie können bestimmen, ob ein bestimmter Datums- und Uhrzeitwert Änderungen unterliegen möglicherweise durch Übergabe an die <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> -Methode, wie im Beispiel veranschaulicht.  [! code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
        <returns>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des Musters von definiert formatiert die <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> Eigenschaft der aktuellen Threadkultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der durch Angabe das "D" zurückgegeben [standard DateTime-Formatzeichenfolge](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29> Methode.  
  
> [!IMPORTANT]
>  Die zurückgegebene Zeichenfolge den <xref:System.DateTime.ToLongDateString%2A> -Methode ist kulturabhängig. Sie spiegelt wider, die von der aktuellen Kultur definierte Muster <xref:System.Globalization.DateTimeFormatInfo> Objekt. Beispielsweise lautet das standardmäßige lange Datumsformat für die Kultur En-US "Dddd, MMMMdd, Yyyy"; für die Kultur de-DE lautet es "Dddd, d. MMMMyyyy"; Bei der Kultur ja-JP lautet "Yyyy'? ' M "?" d'? ' ". Die spezifische Formatzeichenfolge auf einem bestimmten Computer kann auch angepasst werden, damit es die lange datumsformatzeichenfolge unterscheidet.  
  
 Weitere Informationen über die aktuelle Threadkultur finden Sie unter der <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft. Weitere Informationen zum Formatieren von Zeichen Formatierungsmuster und die Ausgabe finden Sie unter der [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md) Thema. Weitere Informationen zum Ändern der Formatzeichen zugeordneten Formatmusters finden Sie unter der <xref:System.Globalization.DateTimeFormatInfo> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLongDateString%2A> Methode.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
        <returns>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des Musters von definiert formatiert die <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> Eigenschaft der aktuellen Threadkultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der zurückgegeben wird, durch angeben das "T" [Formatzeichenfolge Standardformatbezeichner für Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29> Methode.  
  
> [!IMPORTANT]
>  Die zurückgegebene Zeichenfolge den <xref:System.DateTime.ToLongTimeString%2A> -Methode ist kulturabhängig. Sie spiegelt wider, das Muster definiert werden, indem Sie die <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> Eigenschaft von der aktuellen Kultur <xref:System.Globalization.DateTimeFormatInfo> Objekt. Beispielsweise ist der standardmäßige lange-Muster für die Kultur En-US "hh: mm: ss"; für die Kultur de-DE ist es "Hh"; für die Kultur ja-JP ist es "Ss". Die spezifische Formatzeichenfolge auf einem bestimmten Computer kann auch angepasst werden, damit es die Formatzeichenfolge standard lange unterscheidet.  
  
 Weitere Informationen über die aktuelle Threadkultur finden Sie unter der <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft. Weitere Informationen zum Formatieren von Zeichen Formatierungsmuster und die Ausgabe finden Sie unter der [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md) Thema. Weitere Informationen zum Ändern der Formatzeichen zugeordneten Formatmusters finden Sie unter der <xref:System.Globalization.DateTimeFormatInfo> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToLongTimeString%2A> Methode.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
        <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Datum für OLE-Automatisierung ist, deren integrale Komponente ist die Anzahl der Tage vor oder nach Mitternacht am 30. Dezember 1899 und dessen Nachkommawert stellt die Zeit an diesem Tag durch 24 geteilt, als Gleitkommazahl implementiert. Z. B., wird Mitternacht, 31. Dezember 1899 dargestellt durch 1,0; 6-Uhr, wird 1. Januar 1900 durch 2.25 dargestellt. Mitternacht wird 29. Dezember 1899 durch -1.0 dargestellt; und 6 Uhr morgens 29. Dezember 1899 wird durch-1.25 dargestellt.  
  
 Das grundlegende Datum für OLE-Automatisierung ist Mitternacht am 30. Dezember 1899. Das kleinstmögliche Datum für OLE-Automatisierung ist Mitternacht, 1. Januar 0100. Das maximale Datum für OLE-Automatisierung entspricht <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, den letzten Moment der 31. Dezember 9999.  
  
 Die <xref:System.DateTime.ToOADate%2A> -Methode löst eine <xref:System.OverflowException> , wenn die aktuelle Instanz ein Datum darstellt, das später als <xref:System.DateTime.MinValue> und vor Mitternacht am 1. Januar 0100. Allerdings ist der Wert der aktuellen Instanz <xref:System.DateTime.MinValue>, die Methode gibt 0 zurück.  
  
 Weitere Informationen über OLE-Automatisierung finden Sie unter der [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
        <returns>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des Musters von definiert formatiert die <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> Eigenschaft der aktuellen Threadkultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der durch Angabe das "d" zurückgegeben [standard DateTime-Formatzeichenfolge](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29> Methode.  
  
> [!IMPORTANT]
>  Die zurückgegebene Zeichenfolge den <xref:System.DateTime.ToShortDateString%2A> -Methode ist kulturabhängig. Sie spiegelt wider, die von der aktuellen Kultur definierte Muster <xref:System.Globalization.DateTimeFormatInfo> Objekt. Beispielsweise ist das Muster für kurzes Datum für die Kultur En-US "M/Yyyy"; für die Kultur de-DE ist es "dd. MM.yyyy"; für die Kultur ja-JP ist es "Yyyy/M/d". Die spezifische Formatzeichenfolge auf einem bestimmten Computer kann auch angepasst werden, damit es die Formatzeichenfolge standard kurzes Datum unterscheidet.  
  
 Weitere Informationen über die aktuelle Threadkultur finden Sie unter der <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> Eigenschaft. Weitere Informationen zum Formatieren von Zeichen Formatierungsmuster und die Ausgabe finden Sie unter der [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md) Thema. Weitere Informationen zum Ändern der Formatzeichen zugeordneten Formatmusters finden Sie unter der <xref:System.Globalization.DateTimeFormatInfo> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToShortDateString%2A> Methode. Außerdem wird gezeigt, die das Ergebnis des Aufrufs der <xref:System.DateTime.ToShortDateString%2A> -Methode ist identisch mit einem Aufruf der <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Methode mit "d" als Format-Parameter.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
        <returns>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des Musters von definiert formatiert die <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> Eigenschaft der aktuellen Threadkultur zugeordnet ist. Der Rückgabewert ist identisch mit dem Wert, der zurückgegeben wird, durch angeben das "t" [standard DateTime-Formatzeichenfolge](~/docs/standard/base-types/standard-date-and-time-format-strings.md) mit der <xref:System.DateTime.ToString%28System.String%29> Methode.  
  
> [!IMPORTANT]
>  Die zurückgegebene Zeichenfolge den <xref:System.DateTime.ToShortTimeString%2A> -Methode ist kulturabhängig. Sie spiegelt wider, die von der aktuellen Kultur definierte Muster <xref:System.Globalization.DateTimeFormatInfo> Objekt. Beispielsweise ist der standard Kurzes Zeitmuster für die Kultur En-US "dd.mm.yyyy HH: mm-Tt"; für die Kultur de-DE ist es "Hh: mm"; für die Kultur ja-JP ist es "H" an. Die spezifische Formatzeichenfolge auf einem bestimmten Computer kann auch angepasst werden, damit es die standardmäßige kurze Zeitformatzeichenfolge unterscheidet.  
  
 Weitere Informationen über die aktuelle Threadkultur finden Sie unter der <xref:System.Threading.Thread.CurrentCulture%2A> Eigenschaft. Weitere Informationen zum Formatieren von Zeichen Formatierungsmuster und die Ausgabe finden Sie unter der [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md) Thema. Weitere Informationen zum Ändern der Formatzeichen zugeordneten Formatmusters finden Sie unter der <xref:System.Globalization.DateTimeFormatInfo> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToShortTimeString%2A> Methode.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the formatting conventions of the current culture.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe der allgemeinen Datum und Zeit Formatbezeichner ("G") formatiert. Um ein bestimmtes Datum und Uhrzeit mit zu formatieren, rufen Sie die <xref:System.DateTime.ToString%28System.String%29> Methode. Um mithilfe des allgemeinen Datum und Uhrzeit Formatbezeichner ("G") für eine bestimmte Kultur zu formatieren, rufen Sie die <xref:System.DateTime.ToString%28System.IFormatProvider%29> Methode. Aufrufen, um ihn mit einem bestimmten Datum und Uhrzeit und den Konventionen einer bestimmten Kultur zu formatieren, die <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> Methode.  
  
 Diese Methode verwendet die Formatierungsinformationen, die von der aktuellen Kultur abgeleitet. Insbesondere die benutzerdefinierten Formatzeichenfolgen zurückgegebenes kombiniert die <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> und <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> Eigenschaften der <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die `Thread.CurrentThread.CurrentCulture.DateTimeFormat` Eigenschaft. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Andere Überladungen des der <xref:System.DateTime.ToString%2A> Methode können Sie die Kultur angeben, deren Formatierung verwenden und definieren die Ausgabe-Muster von den <xref:System.DateTime> Wert.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie die angegebene Zeichenfolgendarstellung einer <xref:System.DateTime> zurückgegebene Wert die <xref:System.DateTime.ToString> Methode hängt von der aktuellen Threadkultur. Es ändert die aktuelle Threadkultur von En-US, fr-FR, ja-JP. und in jedem Fall werden Aufrufe der <xref:System.DateTime.ToString> Methode, um die Zeichenfolgendarstellung eines Werts Datums- und Uhrzeitangabe unter Verwendung dieser Kultur zurückzugeben.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToString" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit im Kalender, die von der aktuellen Kultur verwendet. Wenn der Wert des aktuellen <see cref="T:System.DateTime" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Er versucht, ein Datum zu formatieren, die außerhalb des Bereichs der der <see cref="T:System.Globalization.HijriCalendar" /> Klasse, wenn die aktuelle Kultur Arabisch (Syrien) ist.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs# (2)] [! [System.DateTime.ToString.ArgumentOutOfRangeException#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ Code-Vb DateTime.ToString.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des aktuellen <xref:System.DateTime> Objekt wird mithilfe des allgemeinen Datum und Uhrzeit-Formatbezeichner "G", die Ausgabe mit dem Muster für kurzes Datum und dem langen Datumsmuster formatiert formatiert.  
  
 Das Format des kurzen Datums- und des langen Uhrzeitmusters wird definiert, indem die `provider` Parameter. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`die <xref:System.Globalization.DateTimeFormatInfo> -Objekt der aktuellen Kultur zugeordnet werden. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die angegebene Zeichenfolgendarstellung einer Datums- und Zeitformat <xref:System.Globalization.CultureInfo> Objekte, die fünf verschiedene Kulturen darstellen.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit im Kalender verwendet, die von der Kultur, dargestellt durch die <paramref name="provider" /> Parameter. Der Kalender wird definiert, indem die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> Eigenschaft. Wenn der Wert des aktuellen <see cref="T:System.DateTime" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Er versucht, ein Datum zu formatieren, die außerhalb des Bereichs der der <see cref="T:System.Globalization.JapaneseCalendar" /> Klasse.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs# (1)] [! [System.DateTime.ToString.ArgumentOutOfRangeException#1] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ Code-Vb DateTime.ToString.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.ToString%28System.String%29> Methode gibt eine Zeichenfolgendarstellung eines Werts für Datum und Uhrzeit in einem bestimmten Format, das die Formatierungskonventionen der aktuellen Kultur; Weitere Informationen verwendet, finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 Die `format` -Parameter sollte entweder einen einzelnen Formatbezeichner enthalten (finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) oder ein benutzerdefiniertes Formatmuster (finden Sie unter [benutzerdefinierten Formatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ), die das Format der zurückgegebenen Zeichenfolge definiert. Wenn `format` ist `null` oder eine leere Zeichenfolge ist, der allgemeine Formatbezeichner "G" verwendet wird.  
  
 Einige Verwendungsmöglichkeiten dieser Methode aufgeführt:  
  
-   Abrufen einer Zeichenfolge mit zeigt das Datum und die Uhrzeit in der aktuellen Kultur kurzes Datum und Uhrzeit-Format. Zu diesem Zweck verwenden Sie die Formatbezeichner "G".  
  
-   Erste einer Zeichenfolge, enthält nur den Monat und Jahr. Zu diesem Zweck verwenden Sie die Formatzeichenfolge "MM/Yyyy". Die Formatzeichenfolge wird die aktuelle Kultur Datumstrennzeichen verwendet.  
  
-   Erste einer Zeichenfolge, enthält das Datum und die Uhrzeit in einem bestimmten Format. Angenommen, die "MM/TT/YyyyHH:mm" Formatzeichenfolge zeigt die Datums- und Uhrzeitzeichenfolge in ein festes Format wie z. B. "19 / / 03 / / 2013 18:06". Verwendet die Formatzeichenfolge "/" als Trennzeichen festgelegte Datum unabhängig von kulturspezifischen Einstellungen.  
  
-   Abrufen von einem Datum in einem komprimierten Format mit konnte für die Serialisierung einer Datumszeichenfolge verwendet werden. Die Formatzeichenfolge "JJJJMMTT" zeigt z. B. eine vierstellige Jahresangabe, gefolgt von einem zweistellige Monatsangabe und eine zweistellige Tagesangabe mit keine Trennzeichen für Datumsangaben.  
  
 Im folgenden Beispiel wird diese drei Formatzeichenfolgen, um einen Datums- und Uhrzeitwert mit den Konventionen der Kulturen En-US "und" fr-FR anzuzeigen.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird jeder von den Standardformatbezeichnern für Datum und Uhrzeit-Formatzeichenfolgen und eine Auswahl von benutzerdefinierten Formatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen anzuzeigenden die angegebene Zeichenfolgendarstellung einer <xref:System.DateTime> Wert. Die aktuelle Threadkultur für das Beispiel ist En-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToString(System.String)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit im Kalender, die von der aktuellen Kultur verwendet. Wenn der Wert des aktuellen <see cref="T:System.DateTime" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Er versucht, ein Datum zu formatieren, die außerhalb des Bereichs der der <see cref="T:System.Globalization.HebrewCalendar" /> Klasse, wenn die aktuelle Kultur Hebräisch (Israel) ist.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs# (3)] [! [System.DateTime.ToString.ArgumentOutOfRangeException#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ Code-Vb DateTime.ToString.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` -Parameter kann entweder einen einzelnen Formatbezeichner enthalten (finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) oder ein benutzerdefiniertes Formatmuster (finden Sie unter [benutzerdefinierten Formatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Wenn `format` ist `null` oder eine leere Zeichenfolge (""), wird der Standardformatbezeichner "G", verwendet.  
  
 Die `provider` Parameter definiert das Muster, entspricht die Standardformatbezeichner als auch die Symbole und Namen von Datums- und Uhrzeitkomponenten. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`die <xref:System.Globalization.DateTimeFormatInfo> verknüpft sind, mit der aktuellen Kultur verwendet. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird jede der Standardformatbezeichner für Datum-Uhrzeit-Formatzeichenfolgen, die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe für vier unterschiedliche Kulturen angezeigt.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 Das folgende Beispiel zeigt verschiedene Möglichkeiten zum Formatieren einer <xref:System.DateTime> -Wert mit die invariante <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit im Kalender verwendet, die von der <paramref name="provider" /> Parameter. Der Kalender wird definiert, indem die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> Eigenschaft. Wenn der Wert des aktuellen <see cref="T:System.DateTime" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Er versucht, ein Datum zu formatieren, die außerhalb des Bereichs der der <see cref="T:System.Globalization.UmAlQuraCalendar" /> Klasse.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs# (4)] [! [System.DateTime.ToString.ArgumentOutOfRangeException#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ Code-Vb DateTime.ToString.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Coordinated Universal Time (UTC) ist die lokale Zeit abzüglich der UTC-zeitverschiebung gleich. Weitere Informationen zu den UTC-zeitverschiebung, finden Sie unter <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. Die Konvertierung auch berücksichtigt die Sommerzeit-Regel, die für die Zeitangabe vom aktuellen gilt <xref:System.DateTime> Objekt.  
  
> [!IMPORTANT]
>  Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die <xref:System.DateTime.ToUniversalTime%2A> Methode nur die aktuelle Anpassungsregel erkennt, wenn von der Ortszeit in UTC konvertieren. Konvertierungen für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde können daher nicht genau den Unterschied zwischen Ortszeit und UTC wider.  
  
 Beginnend mit .NET Framework, Version 2.0, den Rückgabewert von der <xref:System.DateTime.ToUniversalTime%2A> Methode richtet sich nach der <xref:System.DateTime.Kind%2A> Eigenschaft des aktuellen <xref:System.DateTime> Objekt. Die folgende Tabelle beschreibt die möglichen Ergebnisse.  
  
|Art|Ergebnisse|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Es wird keine Konvertierung durchgeführt.|  
|<xref:System.DateTimeKind.Local>|Die aktuelle <xref:System.DateTime> Objekt wird in UTC konvertiert.|  
|<xref:System.DateTimeKind.Unspecified>|Die aktuelle <xref:System.DateTime> wird davon ausgegangen, dass Objekt eine Ortszeit ist, und die Konvertierung erfolgt wie <xref:System.DateTime.Kind%2A> wurden <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  Die <xref:System.DateTime.ToUniversalTime%2A> Methode konvertiert ein <xref:System.DateTime> Wert zwischen Ortszeit und UTC. Um die Zeit in einer nicht lokalen Zeitzone in UTC konvertieren, verwenden die <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> Methode. Verwenden Sie zum Konvertieren einer Zeit, deren Offset von UTC bekannt ist, die <xref:System.DateTimeOffset.ToUniversalTime%2A> Methode.  
  
 Wenn der Instanzwert für Datum und Uhrzeit eine mehrdeutige Zeit ist, nimmt diese Methode, dass es sich um eine Standardzeit handelt. (Eine mehrdeutige Zeit ist eine, die entweder eine Normalzeit oder Sommerzeit in der lokalen Zeitzone zugeordnet werden können) Wenn Instanzwert für Datum und Uhrzeit eine ungültige Zeit ist, subtrahiert diese Methode einfach die Ortszeit aus der lokalen Zeitzone UTC-Offsets (UTC) zurück. (Eine ungültige Zeit ist eine, die aufgrund der Anwendung der Regeln zur Anpassung der Sommerzeit nicht vorhanden ist.)  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.ToUniversalTime%2A> Methode.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode zur Veranschaulichung der Funktion wie die <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTime.ToUniversalTime" /> Methode wird manchmal verwendet, um eine Ortszeit in UTC konvertieren. Die <see cref="M:System.DateTime.ToLocalTime" /> Methode wird aufgerufen, um die ursprüngliche Ortszeit wiederherzustellen. Jedoch, wenn die ursprüngliche Uhrzeit in der lokalen Zeitzone eine ungültige Zeit darstellt, werden die zwei Ortszeit Werte sein nicht gleich. Weitere Informationen und ein Beispiel finden Sie unter der <see cref="M:System.DateTime.ToLocalTime" /> Methode.  Auf [! Include[WinXP](~/Includes/WinXP-MD.MD)] Systeme, die <see cref="M:System.DateTime.ToUniversalTime" /> Methode erkennt nur die aktuelle Anpassungsregel für die lokale Zeitzone, die er gilt ohne Ausnahmen, einschließlich früherer Datumsangaben (d. h., Datumsangaben, die älter als das Anfangsdatum des sind die aktuelle Anpassungsregel). Anwendungen, die unter [! Include[WinXP](~/Includes/WinXP-MD.MD)], erfordern in der Vergangenheit genau Lokales Datum und Uhrzeit-Berechnungen müssen dieses Verhalten mit umgehen der <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> Methode zum Abrufen einer <see cref="T:System.TimeZoneInfo" /> Objekt, das die lokale Zeitzone entspricht, und Aufrufen der <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> Methode.  Das folgende Beispiel veranschaulicht den Unterschied zwischen der <see cref="M:System.DateTime.ToUniversalTime" /> und <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> Methoden auf eine [! Include[WinXP](~/Includes/WinXP-MD.MD)] System in den USA Zeitzone Pacific verwendet wird. Die ersten beiden Methodenaufrufen Anwenden der aktuellen Zeitzone Anpassungsregel (der Effekt in 2007 eingeflossen) in ein Datum im Jahr 2006. Die aktuelle Anpassungsregel sorgt für den Übergang zur Sommerzeit am zweiten Sonntag im März; die vorherige Regel, die faktisch in 2006 zur Verfügung gestellt, für den Übergang zur Sommerzeit an der ersten Sonntag im April ausgeführt wurde. Nur der dritten Methodenaufruf führt genau diese historische Datums- und Zeit-Konvertierung.  [! code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode ist vergleichbar mit der <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> -Methode, außer dass die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> Methode löst keine Ausnahme aus, wenn die Konvertierung fehlschlägt.  
  
 Die Zeichenfolge `s` wird mithilfe von Formatierungsinformationen in die aktuelle analysiert <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das implizit durch die aktuelle Threadkultur bereitgestellt wird.  
  
 Diese Methode versucht, die unbekannte Daten ignoriert werden sollen, wenn möglich, und füllt fehlende Monat, Tag und Jahr Informationen mit dem aktuellen Datum. Wenn `s` enthält nur ein Datum und keine Zeit, diese Methode setzt voraus, die Zeit ist 00:00 Uhr. Wenn `s` enthält eine Datumskomponente durch eine zweistellige Jahresangabe wird es bis zu einem Jahr in der aktuellen Kultur aktuellen Kalender basierend auf den Wert des konvertiert die <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Alle führenden, inneren oder nachfolgende Leerzeichen in `s` wird ignoriert. Datum und Uhrzeit können mit einem Paar führende und nachfolgende Nummernzeichen ("#", U + 0023) Klammern werden und eingeschlossen werden können, mit einem oder mehreren NULL-Zeichen (U + 0000).  
  
 Da die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode versucht, die Zeichenfolgendarstellung eines Datums zu analysieren und die Uhrzeit an, indem die Formatierungsregeln der aktuellen Kultur, bei dem Versuch, eine bestimmte Zeichenfolge über unterschiedliche Kulturen zu analysieren kann entweder erfolgreich sein oder andere Ergebnisse zurückgeben. Wenn ein bestimmtes Datum und Uhrzeit-Format für verschiedene Gebietsschemas analysiert werden soll, verwenden der <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> -Methode oder eine der Überladungen der der <xref:System.DateTime.TryParseExact%2A> Methode, und geben Sie einen Formatbezeichner.  
  
 Wenn `s` die Darstellung der Zeichenfolge ein Schalttag in einem Schaltjahr im aktuellen Kalender, die Methode analysiert `s` erfolgreich. Wenn `s` die Darstellung der Zeichenfolge ein Schalttag in Leap Jahres im aktuellen Kalender der aktuellen Kultur, der Analysevorgang misslingt, und die Methode gibt `false`.  
  
 Wenn `s` enthält keine Informationen zur Zeitzone `result` enthält eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> bei Rückgabe der Methode. Wenn die Zeichenfolge, die analysiert werden Zeitzoneninformationen, enthält `result` enthält eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> bei Rückgabe der Methode.  
  
   
  
## Examples  
 Das folgende Beispiel übergibt eine Zahl von Datum und Uhrzeit-Zeichenfolgen, die die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Die Formatierung wird durch die Eigenschaften des aktuellen beeinflusst <see cref="T:System.Globalization.DateTimeFormatInfo" /> -Objekt, das standardmäßig von abgeleitet sind die ** Regions- und Sprache Optionen ** Element in der Systemsteuerung. Die <see cref="Overload:System.DateTime.TryParse" /> Methode unerwartet fehl und zurückgeben kann <see langword="False" /> Wenn das aktuelle <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> und <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> Eigenschaften werden auf den gleichen Wert festgelegt.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode analysiert eine Zeichenfolge, die Datum, Uhrzeit und Zeitzone Informationen enthalten kann. Ähnliches gilt für die <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode, außer dass die <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode löst keine Ausnahme aus, wenn die Konvertierung fehlschlägt.  
  
 Diese Methode versucht, nicht erkannten Daten und Analyse ignorieren `s` vollständig. Wenn `s` enthält eine Uhrzeit, aber kein Datum, die Methode standardmäßig das aktuelle Datum oder, wenn der `styles` enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> , ersetzt `DateTime.Date.MinValue`. Wenn `s` enthält ein Datum, aber keine Zeit, 12:00 Mitternacht als die Standardzeit verwendet wird. Wenn ein Datum vorhanden ist, aber die Jahreskomponente aus nur zwei Ziffern besteht, wird Sie bis zu einem Jahr in konvertiert die `provider` Parameter des aktuellen Kalenders basierend auf den Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Alle führenden, inneren oder nachfolgende Leerzeichen in `s` werden ignoriert. Datum und Uhrzeit können mit einem Paar führende und nachfolgende Nummernzeichen ("#", U + 0023) Klammern werden und eingeschlossen werden können, mit einem oder mehreren NULL-Zeichen (U + 0000).  
  
 Spezifische gültige Formate für Datum und Zeitelemente, sowie die Namen und Symbole der Datums- und Uhrzeitangaben, werden definiert, durch die `provider` -Parameter, der Folgendes möglich:  
  
-   Ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur darstellt, deren Formatierung, in verwendet wird, der `s` Parameter. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung in `s`.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider>-Implementierung. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung in `s`.  
  
 Wenn `provider` `null` ist, wird die aktuelle Kultur verwendet.  
  
 Wenn `s` die Darstellung der Zeichenfolge ein Schalttag in einem Schaltjahr im aktuellen Kalender, die Methode analysiert `s` erfolgreich. Wenn `s` die Darstellung der Zeichenfolge ein Schalttag in ein nicht-Schaltjahr in den aktuellen Kalender `provider`, wird der Analysevorgang misslingt, und die Methode gibt `false`.  
  
 Die `styles` Parameter definiert die genaue Interpretation der analysierten Zeichenfolge und wie Sie von der Analysevorgang behandelt werden sollen. Es kann ein oder mehrere Elemente von der <xref:System.Globalization.DateTimeStyles> -Enumeration, wie in der folgenden Tabelle beschrieben.  
  
|DateTimeStyles-Element|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, in UTC konvertiert. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> konvertieren das zurückgegebene <xref:System.DateTime> -Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC darstellt oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, führt keine Konvertierung für die Zeitzone für den zurückgegebenen <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen ist das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Innerer Leerraum ist zulässig, in den Datums- und Uhrzeitangabe Elementen `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Führendes Leerzeichen ist zulässig, in den Datums- und Uhrzeitangabe Elementen `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Nachfolgende Leerstellen ist zulässig, in den Datums- und Uhrzeitangabe Elementen `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` führenden, inneren und nachfolgende Leerstellen enthalten kann. Dies ist das Standardverhalten. Es kann nicht überschrieben werden, indem Sie eine restriktivere angeben <xref:System.Globalization.DateTimeStyles> Enumerationswert wie z. B. <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, dass eine Ortszeit darstellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die-Methode konvertiert das zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl gültig ist, wird dieser Wert ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten, zu verhindern, dass die Konvertierung von einer Datums- und Uhrzeitzeichenfolge, versucht ein <xref:System.DateTime> -Wert durch seine <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Solch eine Zeichenfolge wird in der Regel erstellt, durch Aufrufen der <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> Methode mithilfe der Standardformatbezeichner "o", "R" oder "u".|  
  
 Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode gibt ein <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , wenn eine `styles` Flag nichts anderes angegeben. Wenn `s` Zeitzone oder Offset Zeitzoneninformationen, enthält die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode führt Konvertierung erforderlichen Zeit und gibt einen der folgenden zurück:  
  
-   Ein <xref:System.DateTime> Wert, dessen Datum und Uhrzeit, die lokale Zeit und deren entsprechen <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   Oder, wenn der `styles` enthält die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> Flag einer <xref:System.DateTime> , dessen Datum und Uhrzeit (UTC) und dessen entsprechen, Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Dieses Verhalten kann überschrieben werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag.  
  
## <a name="parsing-custom-cultures"></a>Analysieren von Kulturen  
 Beim Analysieren eine Datums- und Zeitzeichenfolge für eine benutzerdefinierte Kultur verwenden die <xref:System.DateTime.TryParseExact%2A> -Methode anstelle der <xref:System.DateTime.TryParse%2A> Methode, um die Wahrscheinlichkeit zu erhöhen, die der Analysevorgang erfolgreich ist. Eine benutzerdefinierte Kultur Datums- und Uhrzeitzeichenfolge kann komplex und schwer zu analysieren. Die <xref:System.DateTime.TryParse%2A> Methode versucht, eine Zeichenfolge mit mehreren impliziter Analysemuster zu analysieren, alle möglicherweise fehlschlagen. Im Gegensatz dazu die <xref:System.DateTime.TryParseExact%2A> Methode erfordert, dass Sie mindestens eine exakte Analysemuster explizit zu bestimmen, die wahrscheinlich erfolgreich sind.  
  
 Weitere Informationen zu benutzerdefinierten Kulturen, finden Sie unter der <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
        <block subset="none" type="usage">
          <para>Die Formatierung wird durch die Eigenschaften des aktuellen beeinflusst <see cref="T:System.Globalization.DateTimeFormatInfo" /> -Objekt, das durch bereitgestellt wird die <paramref name="provider" /> Parameter. Die <see cref="Overload:System.DateTime.TryParse" /> Methode unerwartet fehl und zurückgeben kann <see langword="False" /> Wenn das aktuelle <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> und <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> Eigenschaften werden auf den gleichen Wert festgelegt.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">The required format of <c>s</c>.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <c>s</c>.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <c>s</c> or <c>format</c> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <c>format</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums im Format von definiert sein muss die `format` Parameter. Ähnliches gilt für die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode, außer dass die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Methode löst keine Ausnahme aus, wenn die Konvertierung fehlschlägt.  
  
 Die `s` -Parameter enthält das Datum und die Uhrzeit, zu analysieren und muss in einem Format definiert, indem die `format` Parameter. Wenn Datum, Uhrzeit und Zeitzone Elemente vorhanden sind `s`, müssen sie auch in der vom angegebenen Reihenfolge stehen `format`. Wenn `format` definiert ein Datum mit keine Time-Element und die Analyse erfolgreich ist, das resultierende <xref:System.DateTime> Wert hat, eine Zeit von Mitternacht (00: 00:00). Wenn `format` definiert eine Uhrzeit mit kein Datumselement und die Analyse erfolgreich ist, das resultierende <xref:System.DateTime> Wert in der Standardeinstellung weist `DateTime.Now.Date`, oder es wurde ein `DateTime.MinValue.Date` Wenn `styles` enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> Flag. Die `style` Parameter bestimmt, ob die `s` Parameter kann führende, innere oder nachgestellten Leerzeichen enthalten.  
  
 Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> kennzeichnen, welche gibt eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> kennzeichnet, welche gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn s die Zeitzoneninformationen enthält, wird die Zeit in die Ortszeit, konvertiert, falls erforderlich, und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag nicht Coordinated Universal Time (UTC) in lokale Zeit konvertieren und Festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Die `format` Parameter enthält ein Muster, um das erwartete Format von entspricht, dem `s` Parameter. Das Muster in den `format` Parameter besteht aus einem oder mehreren benutzerdefinierten Formatbezeichnern aus der [benutzerdefinierten Formatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md) Tabelle oder eine einzelne Standard-Formatbezeichner, die aus ein vordefiniertes Muster identifiziert die [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) Tabelle.  
  
 Wenn Sie keine Datums- oder Zeitangabe Trennzeichen in ein benutzerdefiniertes Formatmuster verwenden, verwenden Sie die invariante Kultur für die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Muster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
> [!NOTE]
>  Anstatt dass erforderlich ist, die `s` entsprechen einem einzelnen Format, damit der Analysevorgang erfolgreich ausgeführt werden kann, rufen Sie die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode, und geben Sie mehrere zulässige Formate. Dadurch wird den Analysevorgang wahrscheinlicher erfolgreich ausgeführt werden kann.  
  
 Die bestimmtes Datum und Zeit Symbole und in verwendeten Zeichenfolgen (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) `s` werden definiert, indem die `provider` Parameter, wie das genaue Format des `s` Wenn `format` ist ein standard-Format Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, die zum Interpretieren von `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methodenrückgabe entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`die <xref:System.Globalization.CultureInfo> dient-Objekt, das der aktuellen Kultur entspricht.  
  
 Die `styles` Parameter enthält einen oder mehrere Member der der <xref:System.Globalization.DateTimeStyles> Enumeration, die bestimmen, ob und wo Leerraum nicht definiert `format` erscheinen `s` sowie das genaue Verhalten des Analysevorgangs steuern. In der folgenden Tabelle wird beschrieben, wie die einzelnen Member der <xref:System.Globalization.DateTimeStyles> Enumeration wirkt sich auf den Betrieb von der <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Methode.  
  
|DateTimeStyles-Element|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, in UTC konvertiert. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> konvertieren das zurückgegebene <xref:System.DateTime> -Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC darstellt oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, führt keine Konvertierung für die Zeitzone für den zurückgegebenen <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen ist das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass Leerraum, der nicht durch definierten `format` kann zwischen den einzelnen Datums- oder Time-Element angezeigt werden.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerraum nicht definiert, indem `format` stehen am Anfang des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerraum nicht definiert, indem `format` stehen am Ende der `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` darf führenden, inneren und nachfolgende Leerstellen, die nicht von definiert `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, dass eine Ortszeit darstellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die-Methode konvertiert das zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` enthält Zeit ohne Datumsinformationen, das Datum des Rückgabewerts auf festgelegt ist `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Die `s` Parameter mit Standardwerten analysiert. Keine Leerstellen als einfache, Present in `format` ist zulässig. Wenn `s` eine Datumskomponente, das Datum des zurückgegebenen <xref:System.DateTime> Wert auf 1/1/0001 festgelegt ist. Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn die Zeitzoneninformationen in vorhanden ist `s`, die Uhrzeit wird in die Ortszeit konvertiert und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung in einen <xref:System.DateTime> -Wert durch seine <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Flag wird in erster Linie verhindert, dass die Konvertierung der UTC-Zeiten, die lokalen Zeiten.|  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode. Beachten Sie, dass die Zeichenfolge "5/01/2009 8:30 Uhr" nicht erfolgreich analysiert werden bei der `styles` entspricht <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> da führende Leerzeichen nicht zulässig sind `format`. Darüber hinaus die Zeichenfolge "5/01/2009 09:00" kann nicht erfolgreich analysiert werden, mit einem `format` von "MM/TT/Yyyyhh:mm", da der nicht der Monatszahl mit einer führenden Null als Datumszeichenfolge `format` erfordert.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>In der [! Include[net_v40_short](~/Includes/NET-V40-Short-MD.MD)], die <see cref="Overload:System.DateTime.TryParseExact" /> -Methode zurückkehrt <see langword="false" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und einen AM/PM-Kennzeichner enthält, die nicht in der Vereinbarung sind. In der [! Include[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] und frühere Versionen, der AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <c>s</c>.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <c>s</c> or <c>formats</c> is <see langword="null" />, <c>s</c> or an element of <c>formats</c> is an empty string, or the format of <c>s</c> is not exactly as specified by at least one of the format patterns in <c>formats</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, das eines der zugewiesenen Muster entspricht der `formats` Parameter. Es ist z. B. die <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode, außer die <xref:System.DateTime.TryParseExact%2A> Methode löst keine Ausnahme aus, wenn die Konvertierung fehlschlägt.  
  
 Die `s` Parameter enthält, das Datum und die Uhrzeit, zu analysieren. Wenn die `s` Parameter enthält nur eine Uhrzeit und kein Datum das aktuelle Datum wird verwendet, es sei denn, die `style` Parameter enthält die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> kennzeichnen, in diesem Fall das Standarddatum (`DateTime.Date.MinValue`) verwendet wird. Wenn die `s` Parameter enthält nur ein Datum und keine Zeit, Mitternacht (00: 00:00) verwendet wird. Die `style` -Parameter bestimmt außerdem, ob die `s` Parameter kann führende enthalten sind, oder innere Leerraumzeichen andere als die, die durch eine der Formatzeichenfolgen im zugelassen `formats`.  
  
 Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> kennzeichnen, welche gibt eine <xref:System.DateTime> , dessen Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oder mithilfe der <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> kennzeichnet, welche gibt eine <xref:System.DateTime> , deren Wert <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn s die Zeitzoneninformationen enthält, wird die Zeit in die Ortszeit, konvertiert, falls erforderlich, und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Verhalten kann geändert werden, mithilfe der <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> Flag nicht Coordinated Universal Time (UTC) in lokale Zeit konvertieren und Festlegen der <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Die `formats` Parameter enthält ein Array von Mustern verwenden, von denen `s` übereinstimmen, genau, wenn der Analysevorgang erfolgreich ist. Die Muster in den `formats` Parameter bestehen aus einem oder mehreren benutzerdefinierten Formatbezeichnern aus der [benutzerdefinierten Formatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md) Tabelle oder eine einzelne Standard-Formatbezeichner, die aus ein vordefiniertes Muster identifiziert die [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) Tabelle.  
  
 Wenn Sie keine Datums- oder Zeitangabe Trennzeichen in ein benutzerdefiniertes Formatmuster verwenden, verwenden Sie die invariante Kultur für die `provider` Parameter und die längste Form von einzelnen benutzerdefinierten Formatbezeichner. Wenn Sie Stunden im Muster angeben möchten, geben Sie z. B. die größere Form "HH", anstelle der kürzeren Form "H".  
  
 Die bestimmtes Datum und Zeit Symbole und in verwendeten Zeichenfolgen (z. B. die Namen der Tage der Woche in einer bestimmten Sprache) `s` werden definiert, indem die `provider` Parameter, wie das genaue Format des `s` Wenn `format` ist ein standard-Format Formatbezeichner-Zeichenfolge. Die `provider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, die zum Interpretieren von `s`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `s`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
-   Eine benutzerdefinierte <xref:System.IFormatProvider> Implementierung, deren <xref:System.IFormatProvider.GetFormat%2A> Methodenrückgabe entweder die <xref:System.Globalization.CultureInfo> Objekt oder die <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `provider` ist `null`die <xref:System.Globalization.CultureInfo> dient-Objekt, das der aktuellen Kultur entspricht.  
  
 Die `styles` Parameter enthält einen oder mehrere Member der der <xref:System.Globalization.DateTimeStyles> Enumeration, die bestimmen, ob und wo Leerraum nicht definiert `format` erscheinen `s` sowie das genaue Verhalten des Analysevorgangs steuern. In der folgenden Tabelle wird beschrieben, wie die einzelnen Member der <xref:System.Globalization.DateTimeStyles> Enumeration wirkt sich auf den Betrieb von der <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> Methode.  
  
|DateTimeStyles-Element|Beschreibung|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `s` und, falls erforderlich, in UTC konvertiert. Wenn `s` einen Zeitzonenoffset umfasst oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> Flag, das die Methode analysiert die Zeichenfolge, ruft <xref:System.DateTime.ToUniversalTime%2A> konvertieren das zurückgegebene <xref:System.DateTime> -Wert in UTC , und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Wenn `s` gibt an, dass es sich um UTC darstellt oder wenn `s` enthält keine Informationen zur Zeitzone jedoch `styles` enthält die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag Methode analysiert die Zeichenfolge, führt keine Konvertierung für die Zeitzone für den zurückgegebenen <xref:System.DateTime> Wert und legt die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In allen anderen Fällen ist das Flag keine Auswirkung.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Gibt an, dass Leerraum, der nicht durch definierten `format` kann zwischen den einzelnen Datums- oder Time-Element angezeigt werden.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Gibt an, dass Leerraum nicht definiert, indem `format` stehen am Anfang des `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Gibt an, dass Leerraum nicht definiert, indem `format` stehen am Ende der `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Gibt an, dass `s` darf führenden, inneren und nachfolgende Leerstellen, die nicht von definiert `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, dass eine Ortszeit darstellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass bei `s` verfügt nicht über alle Zeitzoneninformationen, es wird davon ausgegangen, um UTC darzustellen. Wenn die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> Flag vorhanden ist, wird die-Methode konvertiert das zurückgegebene <xref:System.DateTime> Wert zwischen UTC und Ortszeit und legt seine <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Wenn `s` enthält Zeit ohne Datumsinformationen, das Datum des Rückgabewerts auf festgelegt ist `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Die `s` Parameter mit Standardwerten analysiert. Keine Leerstellen als einfache, Present in `format` ist zulässig. Wenn `s` eine Datumskomponente, das Datum des zurückgegebenen <xref:System.DateTime> Wert auf 1/1/0001 festgelegt ist. Wenn `s` enthält keine Informationen zur Zeitzone die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn die Zeitzoneninformationen in vorhanden ist `s`, die Uhrzeit wird in die Ortszeit konvertiert und die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekts festgelegt wird, um <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Für Zeichenfolgen, die Zeitzoneninformationen enthalten wird versucht, um zu verhindern, dass die Konvertierung in einen <xref:System.DateTime> -Wert durch seine <xref:System.DateTime.Kind%2A> -Eigenschaftensatz auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Dieses Flag wird in erster Linie verhindert, dass die Konvertierung der UTC-Zeiten, die lokalen Zeiten.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> Methode, um sicherzustellen, dass eine Zeichenfolge in eine Anzahl von möglichen Formate erfolgreich analysiert werden kann.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>In der [! Include[net_v40_short](~/Includes/NET-V40-Short-MD.MD)], die <see cref="Overload:System.DateTime.TryParseExact" /> -Methode zurückkehrt <see langword="false" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und einen AM/PM-Kennzeichner enthält, die nicht in der Vereinbarung sind. In der [! Include[net_v35_short](~/Includes/NET-v35-Short-MD.MD)] und frühere Versionen, der AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
        <value>Ein Objekt, dessen Wert die aktuelle Datums- und Uhrzeitangabe in UTC ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Lösung für diese Eigenschaft hängt von der Systemzeitgeber, abhängig von der zugrunde liegenden Betriebssystem ab. Es ist voraussichtlich zwischen 0,5 und 15 Millisekunden.

 Beginnend mit .NET Framework, Version 2.0, der Rückgabewert ist eine <xref:System.DateTime> , deren <xref:System.DateTime.Kind%2A> -Eigenschaft gibt <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Eine Alternative zur Verwendung <xref:System.DateTime.UtcNow%2A> ist <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Während der erste Wert gibt an, dass ein Wert für Datum und Uhrzeit Coordinated Universal Time (UTC) durch das Zuweisen von <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> auf seine <xref:System.DateTime.Kind%2A> -Eigenschaft, letztere weist das Datum und offset der UTC-Zeit (gleich <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTime.SpecifyKind%2A> Methode zur Veranschaulichung der Funktion wie die <xref:System.DateTime.Kind%2A> Eigenschaft beeinflusst die <xref:System.DateTime.ToLocalTime%2A> und <xref:System.DateTime.ToUniversalTime%2A> Methoden für die Konvertierung.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the year component of the date represented by this instance.</summary>
        <value>Das Jahr zwischen 1 und 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTime.Year%2A> Eigenschaft gibt das Jahr der aktuellen Instanz im gregorianischen Kalender. Es gibt keinen Jahres mithilfe des Standardkalenders der aktuellen Kultur zurück. Um das Jahr mithilfe eines bestimmten Kalenders abzurufen, können Sie dieses Kalenders aufrufen `GetYear` Methode, wie im folgenden Code dargestellt.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.DateTime.Year%2A> Eigenschaft.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>
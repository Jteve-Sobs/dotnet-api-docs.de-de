<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fbc3d67beaaf60e0ce49989f76b382162948582" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172842" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Der Typ der zu vergleichenden Objekte.</typeparam>
    <summary>Definiert eine allgemeine Vergleichsmethode, die von einem Werttyp oder einer Klasse für die Erstellung einer typspezifischen Vergleichsmethode zum Ordnen oder Sortieren von Instanzen implementiert wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle wird von Typen implementiert, deren Werte sortiert oder sortiert werden können, und bietet eine stark typisierte Vergleichsmethode zum Sortieren von Membern eines generischen Auflistungs Objekts. Beispielsweise kann eine Zahl größer als eine zweite Zahl sein, und eine Zeichenfolge kann in alphabetischer Reihenfolge vor einer anderen Zeichenfolge erscheinen. Es erfordert, dass implementierende Typen eine einzige Methode definieren, <xref:System.IComparable%601.CompareTo%28%600%29>, die angibt, ob die Position der aktuellen Instanz in der Sortierreihenfolge vor, nach oder mit einem zweiten Objekt desselben Typs ist. In der Regel wird die-Methode nicht direkt aus dem Entwickler Code aufgerufen. Stattdessen wird Sie automatisch durch Methoden wie <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> und <xref:System.Collections.Generic.SortedList%602.Add%2A>aufgerufen.  
  
 Typen, die eine <xref:System.IComparable%601> Implementierung bereitstellen, implementieren in der Regel auch die <xref:System.IEquatable%601>-Schnittstelle. Die <xref:System.IEquatable%601>-Schnittstelle definiert die <xref:System.IEquatable%601.Equals%2A>-Methode, die die Gleichheit von Instanzen des implementierenden Typs bestimmt.  
  
 Die Implementierung der <xref:System.IComparable%601.CompareTo%28%600%29>-Methode muss eine <xref:System.Int32> zurückgeben, die einen von drei Werten hat, wie in der folgenden Tabelle dargestellt.  
  
|Wert|Bedeutung|  
|-----------|-------------|  
|Kleiner als 0 (null)|Dieses Objekt befindet sich vor dem Objekt, das durch die <xref:System.IComparable%601.CompareTo%2A>-Methode in der Sortierreihenfolge angegeben wird.|  
|Zero|Diese aktuelle Instanz tritt in der Sortierreihenfolge an der gleichen Position wie das Objekt auf, das durch das <xref:System.IComparable%601.CompareTo%2A>-Methoden Argument angegeben wird.|  
|Größer als 0 (null)|Diese aktuelle Instanz folgt dem Objekt, das durch das <xref:System.IComparable%601.CompareTo%2A>-Methoden Argument in der Sortierreihenfolge angegeben wird.|  
  
 Alle numerischen Typen (z. b. <xref:System.Int32> und <xref:System.Double>) implementieren <xref:System.IComparable%601>, wie <xref:System.String>, <xref:System.Char>und <xref:System.DateTime>. Benutzerdefinierte Typen sollten auch Ihre eigene Implementierung von <xref:System.IComparable%601> bereitstellen, um das Sortieren oder Sortieren von Objektinstanzen zu ermöglichen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Implementierung von <xref:System.IComparable%601> für ein einfaches `Temperature`-Objekt. Im Beispiel wird eine <xref:System.Collections.Generic.SortedList%602> Auflistung von Zeichen folgen mit `Temperature` Objekt Schlüsseln erstellt und der Liste einige Paare von Temperatur und Zeichen folgen außerhalb der Reihenfolge hinzugefügt. Beim Abrufen der <xref:System.Collections.Generic.SortedList%602.Add%2A>-Methode verwendet die <xref:System.Collections.Generic.SortedList%602> Auflistung die <xref:System.IComparable%601>-Implementierung, um die Listeneinträge zu sortieren, die dann in der Reihenfolge der zunehmenden Temperatur angezeigt werden.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Ersetzen Sie den Typparameter der <see cref="T:System.IComparable`1" />-Schnittstelle durch den Typ, der diese Schnittstelle implementiert.  
  
Wenn Sie <see cref="T:System.IComparable`1" />implementieren, sollten Sie die Operatoren "<see langword="op_GreaterThan" />", "<see langword="op_GreaterThanOrEqual" />", "<see langword="op_LessThan" />" und "<see langword="op_LessThanOrEqual" />" überladen, um mit <see cref="M:System.IComparable`1.CompareTo(`0)" />konsistente Werte zurückzugeben. Außerdem sollten Sie <see cref="T:System.IEquatable`1" />implementieren. Ausführliche Informationen finden Sie im <see cref="T:System.IEquatable`1" /> Artikel.</para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <summary>Vergleicht die aktuelle Instanz mit einem anderen Objekt vom selben Typ und gibt eine ganze Zahl zurück, die angibt, ob die aktuelle Instanz in der Sortierreihenfolge vor oder nach dem anderen Objekt oder an derselben Position auftritt.</summary>
        <returns>Ein Wert, der die relative Reihenfolge der verglichenen Objekte angibt. Der Rückgabewert hat folgende Bedeutungen: 
 <list type="table"><listheader><term> Wert 
 </term><description> Bedeutung 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description> Diese Instanz befindet sich in der Sortierreihenfolge vor <paramref name="other" />.  
  
 </description></item><item><term> Zero 
 </term><description> Diese Instanz tritt in der Sortierreihenfolge an der gleichen Position wie <paramref name="other" /> auf.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description> Diese Instanz folgt in der Sortierreihenfolge auf <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> bietet eine stark typisierte Vergleichsmethode zum Anordnen von Membern eines generischen Auflistungs Objekts. Daher wird Sie in der Regel nicht direkt aus dem Entwickler Code aufgerufen. Stattdessen wird Sie automatisch durch Methoden wie <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> und <xref:System.Collections.Generic.SortedList%602.Add%2A>aufgerufen.  
  
 Diese Methode ist nur eine Definition und muss von einer bestimmten Klasse oder einem Werttyp implementiert werden, damit Sie wirksam werden. Die Bedeutung der im Abschnitt "Rückgabewerte" angegebenen Vergleiche ("vor", "wird an derselben Position wie" und "folgt" angezeigt) hängt von der jeweiligen Implementierung ab.  
  
 Definitionsgemäß vergleichen alle Objekte größer als `null`, und zwei NULL-Verweise vergleichen einander.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Implementierung von <xref:System.IComparable%601> für ein einfaches `Temperature`-Objekt veranschaulicht. Im Beispiel wird eine <xref:System.Collections.Generic.SortedList%602> Auflistung von Zeichen folgen mit `Temperature` Objekt Schlüsseln erstellt und der Liste einige Paare von Temperatur und Zeichen folgen außerhalb der Reihenfolge hinzugefügt. Beim Abrufen der <xref:System.Collections.Generic.SortedList%602.Add%2A>-Methode verwendet die <xref:System.Collections.Generic.SortedList%602> Auflistung die <xref:System.IComparable%601>-Implementierung, um die Listeneinträge zu sortieren, die dann in der Reihenfolge der zunehmenden Temperatur angezeigt werden.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Für die Objekte A, B und C muss Folgendes zutreffen: 
 <c>A. CompareTo (a)</c> muss NULL zurückgeben.  
  
Wenn <c>a. CompareTo (B) 0 (null)</c> zurückgibt, muss <c>B. CompareTo (a) 0 (null)</c> zurückgeben.  
  
Wenn <c>a. CompareTo (B) 0 (null)</c> zurückgibt und <c>B. CompareTo (c) 0 (</c> null) zurückgibt, muss <c>A. CompareTo (c) 0 (null)</c> zurückgeben.  
  
Wenn <c>eine. CompareTo (B)</c> einen anderen Wert als 0 (null) zurückgibt, wird <c>B. CompareTo (a)</c> benötigt, um einen Wert des umgekehrten Zeichens zurückzugeben.  
  
Wenn " <c>a. CompareTo (B)</c> " einen Wert zurückgibt <paramref name="x" /> der ungleich 0 (null) ist, und <c>B. CompareTo (c)</c> einen Wert zurückgibt, der <paramref name="y" /> desselben Zeichens <paramref name="x" />zurückgibt, ist <c>ein. CompareTo (c)</c> erforderlich, um einen Wert desselben Zeichens wie <paramref name="x" /> und <paramref name="y" />zurückzugeben.</para></block>
        <block subset="none" type="usage"><para>Verwenden Sie die <see cref="M:System.IComparable`1.CompareTo(`0)" />-Methode, um die Reihenfolge der Instanzen einer Klasse zu bestimmen.</para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>

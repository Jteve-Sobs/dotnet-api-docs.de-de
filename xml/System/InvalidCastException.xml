<Type Name="InvalidCastException" FullName="System.InvalidCastException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb19de53edf40a092619eaebf19892455ff73702" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58691031" /></Metadata><TypeSignature Language="C#" Value="public class InvalidCastException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidCastException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidCastException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidCastException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidCastException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidCastException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Ausnahme, die bei ungültiger Umwandlung oder expliziter Konvertierung ausgelöst wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework unterstützt die automatische Konvertierung von abgeleiteten Typen in ihre Basistypen und wieder in den abgeleiteten Typ sowie von Typen, die Schnittstellen, um Objekte der Benutzeroberfläche und wieder darstellen. Darüber hinaus eine Vielzahl von Mechanismen, die benutzerdefinierte Konvertierungen zu unterstützen. Weitere Informationen finden Sie unter [Typkonvertierung in .NET Framework](~/docs/standard/base-types/type-conversion.md).  
  
 Ein <xref:System.InvalidCastException> Ausnahme wird ausgelöst, wenn die Konvertierung von einer Instanz eines Typs in einen anderen Typ nicht unterstützt wird. Versucht wird, z. B. konvertieren eine <xref:System.Char> -Werts in einen <xref:System.DateTime> Wert löst eine <xref:System.InvalidCastException> Ausnahme. Es unterscheidet sich von einem <xref:System.OverflowException> Ausnahme aus, die ausgelöst wird, wenn eine Konvertierung eines Typs in einen anderen wird unterstützt, aber der Wert des Quelltyps außerhalb des Bereichs des Zieltyps.  Ein <xref:System.InvalidCastException> Ausnahme Entwicklerfehler ist aufgetreten, und sollte nicht verarbeitet werden, eine `try/catch` blockieren; stattdessen sollte die Ursache der Ausnahme eliminiert werden.  
  
 Weitere Informationen über Konvertierungen, die vom System unterstützt werden, finden Sie unter den <xref:System.Convert> Klasse. Fehler, die auftreten, wenn der Zieltyp gespeichert werden kann, Typ der Datenquelle Werte, aber es ist nicht groß genug zum Speichern eines Werts bestimmte Quelle finden Sie unter den <xref:System.OverflowException> Ausnahme.  
  
> [!NOTE]
>  In vielen Fällen erkennt der Sprachcompiler an, dass keine Konvertierung zwischen Quell- und Zieltyp vorhanden ist, und einen Compilerfehler gibt.  
  
 Einige der Bedingungen, unter dem eine versuchte einer Konvertierung löst, eine <xref:System.InvalidCastException> Ausnahme werden in den folgenden Abschnitten beschrieben:  
  
 [Primitive Typen und IConvertible](#Primitive)   
 [Die Convert.ChangeType-Methode](#ChangeType)   
 [Einschränkende Konvertierungen und IConvertible-Implementierungen](#Narrowing)   
 [Typumwandlung](#Downcasting)   
 [Konvertierung von einem Schnittstellenobjekt](#Interface)   
 [Zeichenfolgenkonvertierungen](#String)   
 [Visual Basic 6.0-migration](#Migration)  
  
 Für eine explizite verweiskonvertierung erfolgreich ist, muss der Quellwert `null`, oder der Objekttyp, den das Quellargument verweist muss in den Zieltyp durch implizite verweiskonvertierung konvertiert werden.  
  
 Die folgenden Anweisungen für die Zwischensprache (IL) löst eine <xref:System.InvalidCastException> Ausnahme:  
  
-   `castclass`  
  
-   `refanyval`  
  
-   `unbox`  
  
 <xref:System.InvalidCastException> verwendet das HRESULT COR_E_INVALIDCAST mit den Wert 0 x 80004002 an.  
  
 Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.InvalidCastException>, finden Sie unter den <xref:System.InvalidCastException.%23ctor%2A> Konstruktoren.  
  
<a name="Primitive"></a>   
## <a name="primitive-types-and-iconvertible"></a>Primitive Typen und IConvertible  
 Sie direkt oder indirekt aufrufen, eines primitiven Typs <xref:System.IConvertible> -Implementierung, die eine bestimmte Konvertierung nicht unterstützt. Beispielsweise konvertieren möchten eine <xref:System.Boolean> Wert eine <xref:System.Char> oder ein <xref:System.DateTime> Wert eine <xref:System.Int32> löst eine <xref:System.InvalidCastException> Ausnahme. Im folgenden Beispiel wird sowohl die <xref:System.Boolean.System%23IConvertible%23ToChar%2A?displayProperty=nameWithType> und <xref:System.Convert.ToChar%28System.Boolean%29?displayProperty=nameWithType> Methoden für die Konvertierung einer <xref:System.Boolean> -Werts in einen <xref:System.Char>. In beiden Fällen löst der Methodenaufruf eine <xref:System.InvalidCastException> Ausnahme.  
  
 [!code-csharp[System.InvalidCastException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/iconvertible1.cs#2)]
 [!code-vb[System.InvalidCastException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/iconvertible1.vb#2)]  
  
 Da die Konvertierung nicht unterstützt wird, gibt es keine problemumgehung.  
  
<a name="ChangeType"></a>   
## <a name="the-convertchangetype-method"></a>Die Convert.ChangeType-Methode  
 Sie aufgerufen haben die <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> Methode zum Konvertieren eines Objekts aus einem Typ in einen anderen, aber einen oder beide Typen implementieren Sie nicht die <xref:System.IConvertible> Schnittstelle.  
  
 In den meisten Fällen da die Konvertierung nicht unterstützt wird, ist es keine problemumgehung. In einigen Fällen ist eine mögliche problemumgehung Eigenschaftswerte aus einer Datenquelle ähnliche Eigenschaften manuell zuweisen einer den Zieltyp.  
  
<a name="Narrowing"></a>   
## <a name="narrowing-conversions-and-iconvertible-implementations"></a>Einschränkende Konvertierungen und IConvertible-Implementierungen  
 Einschränkende Operatoren definieren, die explizite Konvertierungen von einem Typ unterstützt wird.  Ein Umwandlungsoperator in c# oder der `CType` Konvertierungsmethode in Visual Basic (Wenn `Option Strict` ist) ist erforderlich, um die Konvertierung nicht ausgeführt.  
  
 Jedoch, wenn weder die Quell-als auch der Zieltyp eine explizite oder eine einschränkende Konvertierung zwischen den beiden Typen, definiert und die <xref:System.IConvertible> Implementierung eine oder beide Typen eine Konvertierung aus einer Datenquelle in den Zieltyp ein unterstütztkeine<xref:System.InvalidCastException>Ausnahme ausgelöst.  
  
 In den meisten Fällen da die Konvertierung nicht unterstützt wird, ist es keine problemumgehung.  
  
<a name="Downcasting"></a>   
## <a name="downcasting"></a>Typumwandlung  
 Sie können die Typumwandlung, d. h., eine Instanz eines Basistyps in einer seiner abgeleiteten Typen konvertiert werden. Im folgenden Beispiel konvertieren möchten eine `Person` -Objekt an eine `PersonWithID` Objekt ein Fehler auftritt.  
  
 [!code-csharp[System.InvalidCastException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/basetoderived1.cs#1)]
 [!code-vb[System.InvalidCastException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/basetoderived1.vb#1)]  
  
 Wie im Beispiel wird gezeigt, die Typumwandlung nur erfolgreich, wenn die `Person` Objekt erstellt wurde, indem Sie eine Typumwandlung nach oben aus eine `PersonWithId` -Objekt eine `Person` -Objekt, oder, wenn die `Person` Objekt `null`.  
  
<a name="Interface"></a>   
## <a name="conversion-from-an-interface-object"></a>Konvertierung von einem Schnittstellenobjekt  
 Sie versuchen, einem Schnittstellenobjekt in einen Datentyp zu konvertieren, die diese Schnittstelle implementiert, der Zieltyp ist jedoch nicht den gleichen Typ oder eine Basisklasse des Typs, von dem das Schnittstellenobjekt ursprünglich abgeleitet wurde. Das folgende Beispiel löst eine <xref:System.InvalidCastException> Ausnahme, wenn versucht wird, konvertieren Sie eine <xref:System.IFormatProvider> -Objekt an eine <xref:System.Globalization.DateTimeFormatInfo> Objekt. Die Konvertierung schlägt fehl, da zwar die <xref:System.Globalization.DateTimeFormatInfo> -Klasse implementiert die <xref:System.IFormatProvider> -Schnittstelle, die <xref:System.Globalization.DateTimeFormatInfo> Objekt ist nicht im Zusammenhang mit der <xref:System.Globalization.CultureInfo> -Klasse aus dem das Objekt abgeleitet wurde.  
  
 [!code-csharp[System.InvalidCastException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/Interface1.cs#3)]
 [!code-vb[System.InvalidCastException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidcastexception/vb/Interface1.vb#3)]  
  
 Als Ausnahme Meldung gibt an, nur dann, wenn das Objekt an eine Instanz des ursprünglichen Typs in diesem Fall konvertiert wird, wäre die Konvertierung erfolgreich eine <xref:System.Globalization.CultureInfo>. Die Konvertierung wird auch dann erfolgreich durchgeführt werden, wenn das Objekt mit einer Instanz von einem Basistyp von den ursprünglichen Typ konvertiert wird.  
  
<a name="String"></a>   
## <a name="string-conversions"></a>Zeichenfolgenkonvertierung  
 Sie möchten einen Wert oder ein Objekt in seine Zeichenfolgendarstellung zu konvertieren, indem Sie mit einem Umwandlungsoperator in c#. Im folgenden Beispiel sowohl der Versuch, die Umwandlung einer <xref:System.Char> Wert in eine Zeichenfolge und der Versuch, eine ganze Zahl und Zeichenfolge Throw umzuwandeln ein <xref:System.InvalidCastException> Ausnahme.  
  
 [!code-csharp[System.InvalidCastException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/ToString1.cs#4)]  
  
> [!NOTE]
>  Mit dem Visual Basic `CStr` Operator, um einen Wert eines primitiven Typs in eine Zeichenfolge zu konvertieren, erfolgreich ausgeführt wird. Der Vorgang wird nicht ausgelöst. eine <xref:System.InvalidCastException> Ausnahme.  
  
 Rufen Sie erfolgreich eine Instanz eines beliebigen Typs in seine Zeichenfolgendarstellung konvertiert, dessen `ToString` -Methode, wie im folgenden Beispiel wird.  Die `ToString` Methode ist immer vorhanden, da die <xref:System.Object.ToString%2A> Methode definiert ist, indem die <xref:System.Object> Klasse und aus diesem Grund wird geerbt oder überschrieben, indem alle verwalteten Typen.  
  
 [!code-csharp[System.InvalidCastException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidcastexception/cs/ToString2.cs#5)]  
  
<a name="Migration"></a>   
## <a name="visual-basic-60-migration"></a>Visual Basic 6.0-migration  
 Aktualisieren Sie eine Visual Basic 6.0-Anwendung mit einem Aufruf an ein benutzerdefiniertes Ereignis in einem Benutzersteuerelement auf Visual Basic .NET und eine <xref:System.InvalidCastException> Ausnahme wird ausgelöst, mit der Meldung: "die angegebene Umwandlung ist ungültig." Ändern Sie die Zeile des Codes in das Formular zur Beseitigung dieser Ausnahme müssen (z. B. `Form1`)  
  
```  
Call UserControl11_MyCustomEvent(UserControl11, New UserControl1.MyCustomEventEventArgs(5))  
```  
  
 ein, und Ersetzen Sie ihn durch die folgende Codezeile:  
  
```  
Call UserControl11_MyCustomEvent(UserControl11(0), New UserControl1.MyCustomEventEventArgs(5))  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
    <related type="Article" href="~/docs/standard/base-types/type-conversion.md">Typkonvertierung in .NET Framework</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidCastException" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidCastException" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A> -Eigenschaft der neuen Instanz auf eine vom System bereitgestellten Meldung, die beschreibt, den Fehler, z.B. "Kann nicht aus einer Datenquelle in Zieltyp umgewandelt." Diese Meldung berücksichtigt die aktuelle Systemkultur.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.InvalidCastException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die lokalisierte Zeichenfolge mit der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidCastException : string -&gt; InvalidCastException" Usage="new System.InvalidCastException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidCastException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A?displayProperty=nameWithType> Eigenschaft der neuen Ausnahme mit der `message` Parameter. Der Inhalt der `message` soll in verständlicher Sprache gehalten sein. Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.InvalidCastException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidCastException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidCastException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidCastException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidCastException" Usage="new System.InvalidCastException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
        <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidCastException" />-Klasse mit serialisierten Daten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird während der Deserialisierung aufgerufen, um das über einen Stream übertragene Ausnahmeobjekt wiederherzustellen. Weitere Informationen finden Sie unter [XML- und SOAP-Serialisierung](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML- und SOAP-Serialisierung</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidCastException : string * Exception -&gt; InvalidCastException" Usage="new System.InvalidCastException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidCastException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ausnahme, die als direktes Ergebnis einer vorhergehenden Ausnahme ausgelöst wird, muss in der <xref:System.Exception.InnerException%2A>-Eigenschaft über einen Verweis auf die vorhergehende Ausnahme verfügen. Die <xref:System.Exception.InnerException%2A> -Eigenschaft gibt denselben Wert, der an den Konstruktor übergeben wird, oder gibt zurück `null` Wenn die <xref:System.Exception.InnerException%2A> -Eigenschaft nicht den Wert der inneren Ausnahme an den Konstruktor bereitstellt.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.InvalidCastException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Der Verweis auf die interne Ausnahme.|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidCastException (string message, int errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidCastException.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, errorCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidCastException(System::String ^ message, int errorCode);" />
      <MemberSignature Language="F#" Value="new InvalidCastException : string * int -&gt; InvalidCastException" Usage="new System.InvalidCastException (message, errorCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorCode" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, in der die Ursache für die eingetretene Ausnahme angegeben wird.</param>
        <param name="errorCode">Der Wert des Fehlercodes (HRESULT), der der Ausnahme zugeordnet ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidCastException" />-Klasse mit einer angegebenen Meldung und einem angegebenen Fehlercode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A?displayProperty=nameWithType> Eigenschaft der neuen Ausnahme mit der `message` Parameter. Der Inhalt der `message` soll in verständlicher Sprache gehalten sein. Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.  
  
 Dieser Konstruktor stellt einen HRESULT-Wert, der zum Erben der zugänglich ist die <xref:System.InvalidCastException> -Klasse, über die geschützte <xref:System.Exception.HResult%2A> Eigenschaft der <xref:System.Exception> Klasse.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.InvalidCastException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
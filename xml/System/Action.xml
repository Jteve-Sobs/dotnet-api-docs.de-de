<Type Name="Action" FullName="System.Action">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9e01ab73751385805a3a6c761b5db426aea986fa" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39900613" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void Action();" />
  <TypeSignature Language="F#" Value="type Action = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>Kapselt eine Methode, die über keine Parameter verfügt und keinen Wert zurückgibt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diesen Delegaten verwenden, um eine Methode als Parameter übergeben werden, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren. Die der gekapselte Methode muss die Signatur der Methode entsprechen, die von diesem Delegaten definiert ist. Dies bedeutet, dass die gekapselte Methode keine Parameter und keinen Rückgabewert verfügen muss. (In c# muss die Methode zurückgeben `void`. In Visual Basic muss es vom definiert werden die `Sub`...`End Sub` erstellen. Sie können auch eine Methode, die einen Wert zurückgibt, der ignoriert wird sein.) In der Regel wird eine solche Methode zum Ausführen eines Vorgangs verwendet.  
  
> [!NOTE]
>  Um eine Methode zu verweisen, die über keine Parameter verfügt und einen Wert zurückgibt, verwenden Sie den generischen <xref:System.Func%601> stattdessen delegieren.  
  
 Bei Verwendung der <xref:System.Action> Delegaten, Sie müssen nicht explizit einen Delegaten definieren, die eine parameterlose Prozedur kapselt. Der folgende Code deklariert beispielsweise explizit einen Delegaten, der mit dem Namen `ShowValue` und weist einen Verweis auf die `Name.DisplayToWindow` Instanzmethode in ihrer Delegatinstanz.  
  
 [!code-cpp[System.Action.Delegate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.action.delegate/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action.Delegate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.action.delegate/cs/delegate.cs#1)]
 [!code-vb[System.Action.Delegate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.action.delegate/vb/delegate.vb#1)]  
  
 Im folgende Beispiel wird dieser Code vereinfacht, durch die Instanziierung der <xref:System.Action> Delegaten aufrufen, anstatt explizit definieren einen neuen Delegaten und eine benannte Methode zugewiesen wird.  
  
 [!code-cpp[System.Action#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action/cpp/action.cpp#2)]
 [!code-csharp[System.Action#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Action.cs#2)]
 [!code-vb[System.Action#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action/vb/Action.vb#2)]  
  
 Sie können auch die <xref:System.Action> delegieren mit anonymen Methoden in C# geschrieben, wie im folgende Beispiel veranschaulicht. (Eine Einführung in anonyme Methoden, finden Sie unter [anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Anon.cs#3)]  
  
 Sie können auch einen Lambda-Ausdruck zuweisen einer <xref:System.Action> Instanz delegieren, wie im folgende Beispiel veranschaulicht. (Eine Einführung in Lambda-Ausdrücke, finden Sie unter [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Lambda.cs#4)]
 [!code-vb[System.Action#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`1" />
  </Docs>
</Type>
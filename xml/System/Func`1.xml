<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="480607eeba6a1c1badfd92906bfb9b87a52e39e4" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690802" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="53449-101">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="53449-101">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <summary><span data-ttu-id="53449-102">Kapselt eine Methode, die über keine Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <typeparamref name="TResult" />-Parameter angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="53449-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="53449-103">Der Rückgabewert der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="53449-103">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53449-104">Sie können diesen Delegaten verwenden, um eine Methode darstellen, die als Parameter übergeben werden können, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren.</span><span class="sxs-lookup"><span data-stu-id="53449-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="53449-105">Die der gekapselte Methode muss die Signatur der Methode entsprechen, die von diesem Delegaten definiert ist.</span><span class="sxs-lookup"><span data-stu-id="53449-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="53449-106">Dies bedeutet, dass die gekapselte Methode keine Parameter muss und muss einen Wert zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="53449-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53449-107">Um eine Methode zu verweisen, hat keine Parameter und gibt `void` (oder in Visual Basic deklariert wird als eine `Sub` statt als eine `Function`), verwenden Sie die <xref:System.Action> stattdessen delegieren.</span><span class="sxs-lookup"><span data-stu-id="53449-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="53449-108">Bei Verwendung der <xref:System.Func%601> Delegaten, Sie müssen nicht explizit einen Delegaten definieren, die eine parameterlose Methode kapselt.</span><span class="sxs-lookup"><span data-stu-id="53449-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="53449-109">Der folgende Code deklariert beispielsweise explizit einen Delegaten, der mit dem Namen `WriteMethod` und weist einen Verweis auf die `OutputTarget.SendToFile` Instanzmethode in ihrer Delegatinstanz.</span><span class="sxs-lookup"><span data-stu-id="53449-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="53449-110">Im folgende Beispiel wird dieser Code vereinfacht, durch die Instanziierung der <xref:System.Func%601> Delegaten aufrufen, anstatt explizit definieren einen neuen Delegaten und eine benannte Methode zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="53449-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="53449-111">Sie können die <xref:System.Func%601> delegieren mit anonymen Methoden in C# geschrieben, wie im folgende Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="53449-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="53449-112">(Eine Einführung in anonyme Methoden, finden Sie unter [anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="53449-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="53449-113">Sie können auch einen Lambda-Ausdruck zuweisen einer <xref:System.Func%602> zu delegieren, wie im folgende Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="53449-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="53449-114">(Eine Einführung in Lambda-Ausdrücke, finden Sie unter [Lambda-Ausdrücke](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) und [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="53449-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="53449-115">Der zugrunde liegende Typ eines Lambda-Ausdrucks ist eine der generischen `Func` Delegaten.</span><span class="sxs-lookup"><span data-stu-id="53449-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="53449-116">Dadurch wird es möglich, einen Lambda-Ausdruck als Parameter übergeben werden, ohne explizit einen Delegaten zuzuweisen.</span><span class="sxs-lookup"><span data-stu-id="53449-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="53449-117">Insbesondere, da viele Methoden der Typen in der <xref:System.Linq> Namespace verfügen `Func` Parameter können Sie übergeben diese Methoden einen Lambda-Ausdruck ohne explizit zu instanziieren ein `Func` delegieren.</span><span class="sxs-lookup"><span data-stu-id="53449-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="53449-118">Wenn Sie eine teure Berechnung, die Sie möchten verfügen, führen Sie nur, wenn das Ergebnis tatsächlich benötigt wird, können Sie die rechenintensive Funktion zum Zuweisen einer <xref:System.Func%601> delegieren.</span><span class="sxs-lookup"><span data-stu-id="53449-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="53449-119">Die Ausführung der Funktion kann dann verzögert werden, bis eine Eigenschaft, die auf den Wert zugreift, die in einem Ausdruck verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="53449-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="53449-120">Im nächsten Abschnitt wird veranschaulicht, wie dazu ausgeführt werden kann.</span><span class="sxs-lookup"><span data-stu-id="53449-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53449-121">Im folgenden Beispiel wird veranschaulicht, wie Sie einen Delegaten zu verwenden, der keine Parameter akzeptiert wird.</span><span class="sxs-lookup"><span data-stu-id="53449-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="53449-122">Dieser Code erstellt eine generische Klasse namens `LazyValue` , die ein Feld des Typs hat <xref:System.Func%601>.</span><span class="sxs-lookup"><span data-stu-id="53449-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="53449-123">Dieses Delegatfeld kann einen Verweis auf alle Funktionen, die einen Wert des Typs, entspricht dem Typparameter der zurückgibt speichern die `LazyValue` Objekt.</span><span class="sxs-lookup"><span data-stu-id="53449-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="53449-124">Die `LazyValue` -Typ weist außerdem ein `Value` -Eigenschaft, die die Funktion ausgeführt wird (sofern es nicht bereits ausgeführt wurde) und gibt den Ergebniswert zurück.</span><span class="sxs-lookup"><span data-stu-id="53449-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="53449-125">Im Beispiel zwei Methoden erstellt und instanziiert Sie zwei `LazyValue` Objekte mit Lambda-Ausdrücke, die diese Methoden aufrufen.</span><span class="sxs-lookup"><span data-stu-id="53449-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="53449-126">Die Lambda-Ausdrücke nehmen keine Parameter an, da sie nur eine Methode aufrufen müssen.</span><span class="sxs-lookup"><span data-stu-id="53449-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="53449-127">Die beiden Methoden werden ausgeführt, wie die Ausgabe zeigt, nur, wenn der Wert von jedem `LazyValue` Objekt abgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="53449-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="53449-128">Lambda-Ausdrücke (C#-Programmierhandbuch)</span><span class="sxs-lookup"><span data-stu-id="53449-128">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="53449-129">Lambda-Ausdrücke</span><span class="sxs-lookup"><span data-stu-id="53449-129">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="53449-130">Delegaten (C#-Programmierhandbuch)</span><span class="sxs-lookup"><span data-stu-id="53449-130">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="53449-131">Delegaten in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="53449-131">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>
<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ce9bbadcab71ca645dd955fb4d87890af97b0cfc" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75042206" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.</typeparam>
    <summary>Kapselt eine Methode, die über keine Parameter verfügt und einen Wert des Typs zurückgibt, der vom <typeparamref name="TResult" />-Parameter angegeben wird.</summary>
    <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit diesem Delegaten können Sie eine Methode darstellen, die als Parameter übergeben werden kann, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren. Die gekapselte Methode muss der Methoden Signatur entsprechen, die von diesem Delegaten definiert wird. Dies bedeutet, dass die gekapselte Methode über keine Parameter verfügen muss und einen Wert zurückgeben muss.  
  
> [!NOTE]
>  Verwenden Sie stattdessen den <xref:System.Action> Delegaten, um auf eine Methode zu verweisen, die über keine Parameter verfügt und `void` (oder in Visual Basic als `Sub` und nicht als `Function`) zurückgibt.  
  
 Wenn Sie den <xref:System.Func%601> Delegaten verwenden, müssen Sie nicht explizit einen Delegaten definieren, der eine Parameter lose Methode kapselt. Der folgende Code deklariert z. b. explizit einen Delegaten mit dem Namen `WriteMethod` und weist der Delegatinstanz einen Verweis auf die `OutputTarget.SendToFile` Instanzmethode zu.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 Im folgenden Beispiel wird dieser Code vereinfacht, indem der <xref:System.Func%601> Delegat instanziiert wird, anstatt explizit einen neuen Delegaten zu definieren und ihm eine benannte Methode zuzuweisen.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 Sie können den <xref:System.Func%601> Delegaten mit anonymen Methoden in C#verwenden, wie im folgenden Beispiel veranschaulicht. (Eine Einführung zu anonymen Methoden finden Sie unter [Anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 Sie können einem <xref:System.Func%602> Delegaten auch einen Lambda-Ausdruck zuweisen, wie im folgenden Beispiel veranschaulicht. (Eine Einführung in Lambda-Ausdrücke finden Sie unter [Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) -Ausdrücke und [Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)-Ausdrücke.)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Der zugrunde liegende Typ eines Lambda-Ausdrucks ist einer der generischen `Func` Delegaten. Dadurch ist es möglich, einen Lambda-Ausdruck als Parameter zu übergeben, ohne ihn explizit einem Delegaten zuzuweisen. Insbesondere weil viele Methoden von Typen im <xref:System.Linq>-Namespace über `Func` Parameter verfügen, können Sie diese Methoden einem Lambda-Ausdruck übergeben, ohne explizit einen `Func` Delegaten zu instanziieren.  
  
 Wenn Sie über eine teure Berechnung verfügen, die nur ausgeführt werden soll, wenn das Ergebnis tatsächlich erforderlich ist, können Sie die teure Funktion einem <xref:System.Func%601>-Delegaten zuweisen. Die Ausführung der Funktion kann dann verzögert werden, bis eine Eigenschaft, die auf den Wert zugreift, in einem Ausdruck verwendet wird. Dies wird im Beispiel im nächsten Abschnitt veranschaulicht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie ein Delegat verwendet wird, der keine Parameter annimmt. Mit diesem Code wird eine generische Klasse namens `LazyValue` erstellt, die über ein Feld vom Typ "<xref:System.Func%601>" verfügt. Dieses Delegatfeld kann einen Verweis auf jede Funktion speichern, die einen Wert des Typs zurückgibt, der dem Typparameter des `LazyValue` Objekts entspricht. Der `LazyValue`-Typ verfügt auch über eine `Value`-Eigenschaft, die die Funktion ausführt (wenn Sie nicht bereits ausgeführt wurde) und den resultierenden Wert zurückgibt.  
  
 Im Beispiel werden zwei Methoden erstellt und zwei `LazyValue`-Objekte mit Lambda-Ausdrücken instanziiert, die diese Methoden aufzurufen. Die Lambda-Ausdrücke akzeptieren keine Parameter, da Sie lediglich eine Methode aufzurufen müssen. Wie die Ausgabe zeigt, werden die beiden Methoden nur ausgeführt, wenn der Wert jedes `LazyValue` Objekts abgerufen wird.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Lambda-Ausdrücke (C#-Programmierhandbuch)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Lambda-Ausdrücke</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Delegaten (C#-Programmierhandbuch)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Delegaten in Visual Basic</related>
  </Docs>
</Type>

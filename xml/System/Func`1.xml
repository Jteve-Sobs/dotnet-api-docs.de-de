<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1f4c0b557942d898d08f5053495dda72fca699f2" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53491206" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.</typeparam>
    <summary>Kapselt eine Methode, die über keine Parameter verfügt und einen Wert des Typs zurückgibt, der vom <typeparamref name="TResult" />-Parameter angegeben wird.</summary>
    <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diesen Delegaten verwenden, um eine Methode darstellen, die als Parameter übergeben werden können, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren. Die der gekapselte Methode muss die Signatur der Methode entsprechen, die von diesem Delegaten definiert ist. Dies bedeutet, dass die gekapselte Methode keine Parameter muss und muss einen Wert zurückgeben.  
  
> [!NOTE]
>  Um eine Methode zu verweisen, hat keine Parameter und gibt `void` (oder in Visual Basic deklariert wird als eine `Sub` statt als eine `Function`), verwenden Sie die <xref:System.Action> stattdessen delegieren.  
  
 Bei Verwendung der <xref:System.Func%601> Delegaten, Sie müssen nicht explizit einen Delegaten definieren, die eine parameterlose Methode kapselt. Der folgende Code deklariert beispielsweise explizit einen Delegaten, der mit dem Namen `WriteMethod` und weist einen Verweis auf die `OutputTarget.SendToFile` Instanzmethode in ihrer Delegatinstanz.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 Im folgende Beispiel wird dieser Code vereinfacht, durch die Instanziierung der <xref:System.Func%601> Delegaten aufrufen, anstatt explizit definieren einen neuen Delegaten und eine benannte Methode zugewiesen wird.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 Sie können die <xref:System.Func%601> delegieren mit anonymen Methoden in C# geschrieben, wie im folgende Beispiel veranschaulicht. (Eine Einführung in anonyme Methoden, finden Sie unter [anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 Sie können auch einen Lambda-Ausdruck zuweisen einer <xref:System.Func%602> zu delegieren, wie im folgende Beispiel veranschaulicht. (Eine Einführung in Lambda-Ausdrücke, finden Sie unter [Lambda-Ausdrücke](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) und [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Der zugrunde liegende Typ eines Lambda-Ausdrucks ist eine der generischen `Func` Delegaten. Dadurch wird es möglich, einen Lambda-Ausdruck als Parameter übergeben werden, ohne explizit einen Delegaten zuzuweisen. Insbesondere, da viele Methoden der Typen in der <xref:System.Linq> Namespace verfügen `Func` Parameter können Sie übergeben diese Methoden einen Lambda-Ausdruck ohne explizit zu instanziieren ein `Func` delegieren.  
  
 Wenn Sie eine teure Berechnung, die Sie möchten verfügen, führen Sie nur, wenn das Ergebnis tatsächlich benötigt wird, können Sie die rechenintensive Funktion zum Zuweisen einer <xref:System.Func%601> delegieren. Die Ausführung der Funktion kann dann verzögert werden, bis eine Eigenschaft, die auf den Wert zugreift, die in einem Ausdruck verwendet wird. Im nächsten Abschnitt wird veranschaulicht, wie dazu ausgeführt werden kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie Sie einen Delegaten zu verwenden, der keine Parameter akzeptiert wird. Dieser Code erstellt eine generische Klasse namens `LazyValue` , die ein Feld des Typs hat <xref:System.Func%601>. Dieses Delegatfeld kann einen Verweis auf alle Funktionen, die einen Wert des Typs, entspricht dem Typparameter der zurückgibt speichern die `LazyValue` Objekt. Die `LazyValue` -Typ weist außerdem ein `Value` -Eigenschaft, die die Funktion ausgeführt wird (sofern es nicht bereits ausgeführt wurde) und gibt den Ergebniswert zurück.  
  
 Im Beispiel zwei Methoden erstellt und instanziiert Sie zwei `LazyValue` Objekte mit Lambda-Ausdrücke, die diese Methoden aufrufen. Die Lambda-Ausdrücke nehmen keine Parameter an, da sie nur eine Methode aufrufen müssen. Die beiden Methoden werden ausgeführt, wie die Ausgabe zeigt, nur, wenn der Wert von jedem `LazyValue` Objekt abgerufen wird.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Lambda-Ausdrücke (C#-Programmierhandbuch)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Lambda-Ausdrücke</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Delegaten (C#-Programmierhandbuch)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Delegaten in Visual Basic</related>
  </Docs>
</Type>
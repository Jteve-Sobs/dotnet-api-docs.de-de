<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd63898d99987e100c80fac38707011cc1633233" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83942222" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IEquatable(Of DateTimeOffset), IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface IDeserializationCallback&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Zeitpunkt relativ zur Coordinated Universal Time (UTC) dar, der üblicherweise als Datum und Uhrzeit ausgedrückt wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset>-Struktur enthält einen <xref:System.DateTime>-Wert sowie eine <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft, die den Unterschied zwischen dem Datum und der Uhrzeit der aktuellen <xref:System.DateTimeOffset> Instanz und der koordinierten Weltzeit (UTC) definiert. Da es genau ein Datum und eine Uhrzeit relativ zur UTC definiert, enthält die <xref:System.DateTimeOffset> Struktur keinen `Kind` Member, wie die <xref:System.DateTime> Struktur dies tut. Sie stellt Datumsangaben und Uhrzeiten mit Werten dar, deren UTC-Bereich zwischen 12:00:00 Mitternacht, 1. Januar 0001 (Common Era), 11:59:59 Uhr, 31. Dezember 9999 n. Chr. liegt. (v).  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Die Zeitkomponente eines <xref:System.DateTimeOffset> Werts wird in 100-Nanosecond-Einheiten, so genannten Ticks, gemessen, und ein bestimmtes Datum ist die Anzahl der Ticks seit 12:00 Mitternacht, 1. Januar 0001 n. Chr. unserer Zeitrechnung im <xref:System.Globalization.GregorianCalendar> Kalender. Ein <xref:System.DateTimeOffset> Wert wird immer im Kontext eines expliziten oder Standard Kalenders ausgedrückt. Ticks, die auf Schaltsekunden zurückzuführen sind, sind nicht in der Gesamtzahl der Ticks enthalten.  
  
 Obwohl ein <xref:System.DateTimeOffset> Wert einen Offset enthält, handelt es sich dabei nicht um eine voll Zeit Zonen abhängige Datenstruktur. Während ein Offset von UTC ein Merkmal einer Zeitzone ist, wird eine Zeitzone nicht eindeutig identifiziert. Nicht nur mehrere Zeitzonen verwenden denselben Offset von der UTC, sondern der Offset einer einzelnen Zeitzone ändert sich, wenn die Sommerzeit beachtet wird. Dies bedeutet, dass die Zuordnung eines <xref:System.DateTimeOffset> Werts zu seiner Zeitzone nicht mehr eindeutig mit der ursprünglichen Zeitzone verknüpft werden kann.  
  
 Da <xref:System.DateTimeOffset> eine Struktur ist, enthält ein <xref:System.DateTimeOffset> Objekt, das deklariert, aber nicht anderweitig initialisiert wurde, die Standardwerte für jedes seiner Member-Felder. Dies bedeutet, dass die <xref:System.DateTimeOffset.DateTime%2A>-Eigenschaft auf <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> und deren <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft auf <xref:System.TimeSpan.Zero?displayProperty=nameWithType>festgelegt ist.  
  
 Sie können einen neuen <xref:System.DateTimeOffset> Wert erstellen, indem Sie eine der über Ladungen des Konstruktors aufrufen, die den überladenen Konstruktoren für die <xref:System.DateTime>-Struktur ähneln. Sie können auch einen neuen <xref:System.DateTimeOffset> Wert erstellen, indem Sie ihm einen <xref:System.DateTime> Wert zuweisen. Dies ist eine implizite Konvertierung. Es ist kein Umwandlungs Operator (in C#) oder eine Konvertierungsmethode (in Visual Basic) erforderlich. Sie können auch einen <xref:System.DateTimeOffset> Wert aus der Zeichen folgen Darstellung eines Datums und einer Uhrzeit initialisieren, indem Sie eine Reihe von statischen Methoden für die Zeichen folgen Verarbeitung aufrufen, die <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>und <xref:System.DateTimeOffset.TryParseExact%2A>enthalten.  
  
 Die Elemente der <xref:System.DateTimeOffset> Struktur bieten Funktionen in den folgenden Bereichen:  
  
-   Datums-und Uhrzeit Arithmetik.  
  
     Sie können Datums-oder Zeitintervalle von einem bestimmten <xref:System.DateTimeOffset> Wert hinzufügen oder subtrahieren. Arithmetische Operationen mit <xref:System.DateTimeOffset> Werten werden im Gegensatz zu den Werten mit <xref:System.DateTime> Werten für Unterschiede in Zeit Offsets angepasst, wenn ein Ergebnis zurückgegeben wird. Im folgenden Code wird z. b. <xref:System.DateTime> Variablen verwendet, um die aktuelle Ortszeit von der aktuellen UTC-Zeit zu subtrahieren. Der Code verwendet dann <xref:System.DateTimeOffset> Variablen, um denselben Vorgang auszuführen. Die Subtraktion mit <xref:System.DateTime> Werten gibt den Unterschied der lokalen Zeitzone von UTC zurück, während die Subtraktion mit <xref:System.DateTimeOffset> Werten <xref:System.TimeSpan.Zero?displayProperty=nameWithType>zurückgibt.  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   Typkonvertierungs Vorgänge.  
  
     Sie können <xref:System.DateTimeOffset> Werte in <xref:System.DateTime> Werte konvertieren und umgekehrt.  
  
-   Zeit Bearbeitungs-und Extraktions Vorgänge.  
  
     Sie können entweder das Datum oder die Uhrzeit eines <xref:System.DateTimeOffset> Werts extrahieren. Sie können auch den Wert einer bestimmten <xref:System.DateTimeOffset> Komponente abrufen, z. b. das Jahr oder seinen Monat.  

   > [!NOTE]
   >  Wenn Sie mit einem Ticks-Wert arbeiten, den Sie in ein anderes Zeitintervall konvertieren möchten (z. b. Minuten oder Sekunden), sollten Sie den <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>-, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>-, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>-, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>-oder <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> Konstanten verwenden, um die Konvertierung auszuführen. Um z. b. die Anzahl der Sekunden, die durch eine angegebene Anzahl von Ticks dargestellt wird, der <xref:System.DateTimeOffset.Second%2A> Komponente eines <xref:System.DateTimeOffset> Werts hinzuzufügen, können Sie den Ausdruck `dateValue.Second + nTicks/Timespan.TicksPerSecond`verwenden.  
  

-   Datums-und Uhrzeit Konvertierung.  
  
     Sie können beliebige <xref:System.DateTimeOffset> Werte in einen anderen <xref:System.DateTimeOffset> Wert konvertieren, der denselben Zeitpunkt in einer anderen Zeitzone darstellt. Die Anpassungsregeln einer Zeitzone werden jedoch nur im Fall der <xref:System.DateTimeOffset.ToLocalTime%2A>-Methode angewendet, die einen <xref:System.DateTimeOffset>-Wert in das Datum und die Uhrzeit in der lokalen System Zone konvertiert.  
  
-   Vergleich von Datum und Uhrzeit.  
  
     Sie können bestimmen, ob ein bestimmter <xref:System.DateTimeOffset> Wert älter oder später als ein anderer <xref:System.DateTimeOffset> Wert ist. Vor der Durchführung des Vergleichs werden alle Werte in UTC konvertiert.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/datetime/choosing-between-datetime">Auswählen zwischen "DateTime", "DateTimeOffset", "TimeSpan" und "TimeZoneInfo"</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/">Beispiel: .net Core-Hilfsprogramm zur FormatierungC#von WinForms ()</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/">Beispiel: .net Core-Hilfsprogramm für die WinForms-Formatierung (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dateTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datum und eine Uhrzeit.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur unter Verwendung des angegebenen <see cref="T:System.DateTime" />-Werts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Verhalten dieses Konstruktors hängt vom Wert der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType>-Eigenschaft des `dateTime`-Parameters ab:  
  
-   Wenn der Wert von <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>ist, wird die <xref:System.DateTimeOffset.DateTime%2A>-Eigenschaft der neuen Instanz auf `dateTime`festgelegt, und die <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft ist auf <xref:System.TimeSpan.Zero>festgelegt.  
  
-   Wenn der Wert von <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> <xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ist, wird die <xref:System.DateTimeOffset.DateTime%2A>-Eigenschaft der neuen Instanz auf `dateTime`festgelegt, und die <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft wird auf den Offset der aktuellen Zeitzone des lokalen Systems festgelegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie sich der Wert der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType>-Eigenschaft des `dateTime`-Parameters auf den Datums-und Uhrzeitwert auswirkt, der von diesem Konstruktor zurückgegeben wird.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der UTC-Zeitpunkt (Datum und Uhrzeit in koordinierter Weltzeit), der sich nach Anwenden des Offsets ergeben hat, liegt vor <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der UTC-Zeitpunkt (Datum und Uhrzeit), der sich nach Anwenden des Offsets ergeben hat, liegt nach <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/instantiating-a-datetimeoffset-object">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dateTime As DateTime, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datum und eine Uhrzeit.</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur unter Verwendung des angegebenen <see cref="T:System.DateTime" />-Werts und -Offsets.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Verhalten dieses Konstruktors hängt teilweise von dem Wert der <xref:System.DateTime.Kind%2A>-Eigenschaft des `dateTime`-Parameters ab:  
  
-   Wenn der Wert von <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>ist, muss der Wert des `offset`-Parameters 0 sein, oder es wird ein <xref:System.ArgumentException> ausgelöst.  
  
-   Wenn der Wert von <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist, muss der Wert des `offset`-Parameters mit dem Offset der lokalen Zeitzone von der koordinierten Weltzeit (UTC) für das jeweilige Datum identisch sein, oder es wird ein <xref:System.ArgumentException> ausgelöst.  
  
-   Wenn der Wert von <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ist, kann der `offset`-Parameter einen beliebigen gültigen Wert aufweisen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein <xref:System.DateTimeOffset>-Objekt mit einem Datum und einer Uhrzeit und dem Offset der lokalen Zeitzone initialisiert wird, wenn diese Zeitzone nicht im Voraus bekannt ist.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" /> ist gleich <see cref="F:System.DateTimeKind.Utc" /> und <paramref name="offset" /> ist ungleich 0 (null).  
  
Oder 
 <paramref name="dateTime.Kind" /> ist gleich <see cref="F:System.DateTimeKind.Local" /> und <paramref name="offset" /> ist nicht mit dem Offset der lokalen Zeitzone des Systems identisch.  
  
Oder 
 <paramref name="offset" /> ist nicht in ganzen Minuten angegeben.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> ist kleiner als -14 Stunden oder größer als 14 Stunden.  
  
Oder 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" /> oder größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/instantiating-a-datetimeoffset-object">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">Ein Datum und eine Uhrzeit, die als Anzahl der 100-Nanosekunden-Intervalle ausgedrückt werden, die seit dem 1. Januar 0001, 00:00:00 vergangen sind.</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur mit der angegebenen Anzahl von Ticks und dem Offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise wird beim Versuch, den <xref:System.DateTimeOffset.%23ctor%2A>-Konstruktor aufzurufen, um einen <xref:System.DateTimeOffset> Wert mit einer lokalen Uhrzeit und einem anderen Offset als der der lokalen Zeitzone zu instanziieren, eine <xref:System.ArgumentException>ausgelöst. Mit dieser Überladung des <xref:System.DateTimeOffset>-Konstruktors können Sie diese Einschränkung umgehen. Im folgenden Beispiel wird die Anzahl der Ticks der Ortszeit verwendet, um einen <xref:System.DateTimeOffset> Wert zu instanziieren, dessen Abweichung nicht notwendigerweise die der Ortszeit darstellt:  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.DateTimeOffset> Objekt mit der Anzahl der Ticks an einem beliebigen Datum (in diesem Fall, dem 16. Juli 2007, 1:32 Uhr) mit einem Offset von-5 initialisiert.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> ist nicht in ganzen Minuten angegeben.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Zeitpunkt, den die <see cref="P:System.DateTimeOffset.UtcDateTime" />-Eigenschaft angibt, liegt vor <see cref="F:System.DateTimeOffset.MinValue" /> oder hinter <see cref="F:System.DateTimeOffset.MaxValue" />.  
  
Oder 
 <paramref name="ticks" /> ist kleiner als <see langword="DateTimeOffset.MinValue.Ticks" /> oder größer als <see langword="DateTimeOffset.MaxValue.Ticks" />.  
  
Oder 
 <paramref name="Offset" /> ist kleiner als-14 Stunden oder größer als 14 Stunden.</exception>
        <related type="Article" href="/dotnet/standard/datetime/instantiating-a-datetimeoffset-object">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <paramref name="month" />).</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde und Offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert `year`, `month`und `day` als Jahr, Monat und Tag im gregorianischen Kalender. Um einen <xref:System.DateTimeOffset> Wert mithilfe von Jahr, Monat und Tag in einem anderen Kalender zu instanziieren, müssen Sie den <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>-Konstruktor aufzurufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.DateTimeOffset>-Objekt mit der <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>-Konstruktorüberladung instanziiert.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> gibt keine ganzen Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> ist kleiner oder größer als 9999.  
  
Oder 
 <paramref name="month" /> ist kleiner oder größer als 12.  
  
Oder 
 <paramref name="day" /> ist kleiner als eins oder größer als die Anzahl von Tagen in <paramref name="month" />.  
  
Oder 
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
Oder 
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
Oder 
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
Oder 
 <paramref name="offset" /> ist kleiner als -14 Stunden oder größer als 14 Stunden.  
  
Oder 
Der Zeitpunkt, den die <see cref="P:System.DateTimeOffset.UtcDateTime" />-Eigenschaft angibt, liegt vor <see cref="F:System.DateTimeOffset.MinValue" /> oder hinter <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/instantiating-a-datetimeoffset-object">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <paramref name="month" />).</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="millisecond">Die Millisekunden (0 bis 999).</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde, Millisekunde und Offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert `year`, `month`und `day` als Jahr, Monat und Tag im gregorianischen Kalender. Um einen <xref:System.DateTimeOffset> Wert mithilfe von Jahr, Monat und Tag in einem anderen Kalender zu instanziieren, müssen Sie den <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29>-Konstruktor aufzurufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.DateTimeOffset>-Objekt mit der <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType>-Konstruktorüberladung instanziiert.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> gibt keine ganzen Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> ist kleiner oder größer als 9999.  
  
Oder 
 <paramref name="month" /> ist kleiner oder größer als 12.  
  
Oder 
 <paramref name="day" /> ist kleiner als eins oder größer als die Anzahl von Tagen in <paramref name="month" />.  
  
Oder 
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
Oder 
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
Oder 
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
Oder 
 <paramref name="millisecond" /> ist kleiner als 0 (null) oder größer als 999.  
  
Oder 
 <paramref name="offset" /> ist kleiner als -14 oder größer als 14.  
  
Oder 
Der Zeitpunkt, den die <see cref="P:System.DateTimeOffset.UtcDateTime" />-Eigenschaft angibt, liegt vor <see cref="F:System.DateTimeOffset.MinValue" /> oder hinter <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/instantiating-a-datetimeoffset-object">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, calendar As Calendar, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="offset" Type="System.TimeSpan" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr.</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <paramref name="month" />).</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="millisecond">Die Millisekunden (0 bis 999).</param>
        <param name="calendar">Der Kalender, der zum Interpretieren von <paramref name="year" />, <paramref name="month" /> und <paramref name="day" /> verwendet wird.</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde, Millisekunde und Offset für einen angegebenen Kalender.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameter "`year`", "`month`", "`day`", "`hour`", "`minute`", "`second`" und "`millisecond`" spiegeln alle Werte wider, die im durch den `calendar` Eine Ausnahme wird ausgelöst, wenn diese Werte ein Datum und eine Uhrzeit bilden, die nicht mithilfe dieses Kalenders ausgedrückt werden können.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]   

## Examples  
 Im folgenden Beispiel werden Instanzen der <xref:System.Globalization.HebrewCalendar>-Klasse und der-Klasse <xref:System.Globalization.HijriCalendar> verwendet, um einen <xref:System.DateTimeOffset> Wert zu instanziieren. Dieses Datum wird dann in der Konsole mithilfe der jeweiligen Kalender und des gregorianischen Kalenders angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> gibt keine ganzen Minuten an.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> darf nicht <see langword="null" /> sein.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> ist kleiner als der <see langword="MinSupportedDateTime.Year" />-Wert des <paramref name="calendar" />-Parameters oder größer als <see langword="MaxSupportedDateTime.Year" />.  
  
Oder 
 <paramref name="month" /> ist entweder kleiner oder größer als die Anzahl von Monaten in <paramref name="year" /> im <paramref name="calendar" />.  
  
Oder 
 <paramref name="day" /> ist kleiner als eins oder größer als die Anzahl von Tagen in <paramref name="month" />.  
  
Oder 
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
Oder 
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
Oder 
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
Oder 
 <paramref name="millisecond" /> ist kleiner als 0 (null) oder größer als 999.  
  
Oder 
 <paramref name="offset" /> ist kleiner als -14 Stunden oder größer als 14 Stunden.  
  
Oder 
Die Parameter <paramref name="year" />, <paramref name="month" /> und <paramref name="day" /> können nicht als Datums- und Zeitwert dargestellt werden.  
  
Oder 
Der Zeitpunkt, den die <see cref="P:System.DateTimeOffset.UtcDateTime" />-Eigenschaft angibt, liegt vor <see cref="F:System.DateTimeOffset.MinValue" /> oder hinter <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/instantiating-a-datetimeoffset-object">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (timeSpan As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">Ein <see cref="T:System.TimeSpan" />-Objekt, das ein positives oder ein negatives Zeitintervall darstellt.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das ein angegebenes Zeitintervall zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" /> -Objekt dargestellten Datums- und Uhrzeitangabe und dem durch <paramref name="timeSpan" /> dargestellten Zeitintervall ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.DateTimeOffset.Add%2A>-Methode verwenden, um mehr als eine Art Zeitintervall (Tage, Stunden, Minuten, Sekunden oder Millisekunden) in einem einzigen Vorgang hinzuzufügen. Das Verhalten dieser Methode ist identisch mit dem Additions Operator. Die <xref:System.DateTimeOffset> Struktur unterstützt auch spezielle Additions Methoden (z. b. <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>und <xref:System.DateTimeOffset.AddMinutes%2A>) für jedes Zeitintervall.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `timeSpan` hinzugefügt wird.  
  
 Die <xref:System.DateTimeOffset.Add%2A>-Methode wirkt sich nicht auf den Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft des aktuellen <xref:System.DateTimeOffset> Objekts aus.  
  
 Da ein <xref:System.DateTimeOffset> Objekt das Datum und die Uhrzeit in einer bestimmten Zeitzone nicht darstellt, berücksichtigt die <xref:System.DateTimeOffset.Add%2A>-Methode beim Ausführen von Datums-und Uhrzeit Arithmetik nicht die Anpassungsregeln einer bestimmten Zeitzone.  
  
 Wenn der `timeSpan`-Parameter `null`ist, gibt diese Methode den Wert des ursprünglichen <xref:System.DateTimeOffset>-Objekts unverändert zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Array von <xref:System.TimeSpan>-Objekten erstellt, die die Flugzeiten zwischen Zielen darstellen. Die <xref:System.DateTimeOffset.Add%2A>-Methode fügt dann diese Zeiten zu einem <xref:System.DateTimeOffset> Objekt hinzu, das die anfängliche Endzeit des Flugs darstellt. Das Ergebnis spiegelt die geplante Ankunftszeit an jedem Ziel wider.  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">Eine Zahl, die aus ganzen Tagen und dem Bruchteil eines Tages besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von ganzen Tagen und Bruchteilen von Tagen zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="days" /> dargestellten Anzahl von Tagen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bruchteil des `days`-Parameters ist der Bruchteil eines Tages. 4,5 entspricht z. b. 4 Tage, 12 Stunden, 0 Minuten, 0 Sekunden, 0 Millisekunden. Der `days`-Parameter wird auf die nächste Millisekunde gerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `days` hinzugefügt wird.  
  
 Da ein <xref:System.DateTimeOffset> Objekt das Datum und die Uhrzeit in einer bestimmten Zeitzone nicht darstellt, berücksichtigt die <xref:System.DateTimeOffset.AddDays%2A>-Methode beim Ausführen von Datums-und Uhrzeit Arithmetik nicht die Anpassungsregeln einer bestimmten Zeitzone.  
  
 Das Umrechnen von Zeitintervallen von weniger als einem Tag in einen Bruchteil kann zu einem Genauigkeits Verlust führen. Wenn dies problematisch ist, können Sie die <xref:System.DateTimeOffset.Add%2A>-Methode verwenden, die es Ihnen ermöglicht, mehr als eine Art Zeitintervall in einem einzelnen Methodenaufruf anzugeben, und es entfällt, dass Sie Zeitintervalle in Bruchteile eines Tages konvertieren müssen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.AddDays%2A>-Methode verwendet, um die Datumsangaben aufzulisten, die am Montag, dem Beginn der Arbeitswoche, im März 2008 liegen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">Eine Zahl, die aus ganzen Stunden und dem Bruchteil einer Stunde besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von ganzen Stunden und Bruchteilen von Stunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="hours" /> dargestellten Anzahl von Stunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bruchteil des `hours`-Parameters ist der Bruchteil einer Stunde. 4,5 entspricht z. b. 4 Stunden, 30 Minuten, 0 Sekunden, 0 Millisekunden. Der `hours`-Parameter wird auf die nächste Millisekunde gerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `hours` hinzugefügt wird.  
  
 Da ein <xref:System.DateTimeOffset> Objekt das Datum und die Uhrzeit in einer bestimmten Zeitzone nicht darstellt, berücksichtigt die <xref:System.DateTimeOffset.AddHours%2A>-Methode beim Ausführen von Datums-und Uhrzeit Arithmetik nicht die Anpassungsregeln einer bestimmten Zeitzone.  
  
 Das Umrechnen von Zeitintervallen von weniger als einer Stunde in einen Bruchteil kann zu einem Genauigkeits Verlust führen. (Eine Minute beträgt z. b. 0,01666 einer Stunde.) Wenn dies problematisch ist, können Sie die <xref:System.DateTimeOffset.Add%2A>-Methode verwenden, die es Ihnen ermöglicht, mehr als eine Art Zeitintervall in einem einzelnen Methodenaufruf anzugeben. Außerdem entfällt die Notwendigkeit, Zeitintervalle in Bruchteile einer Stunde zu konvertieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.AddHours%2A>-Methode verwendet, um die Startzeiten von arbeitsverschiebungen für eine bestimmte Woche in einem Büro aufzulisten, bei der pro Tag 2 8 Stunden verschoben werden.  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Eine Zahl, die aus ganzen Millisekunden und dem Bruchteil einer Millisekunde besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von Millisekunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="milliseconds" /> dargestellten Anzahl von ganzen Millisekunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bruchteil des `milliseconds`-Parameters ist der Bruchteil einer Millisekunde. 4,5 entspricht z. b. 4 Millisekunden und 5000 Ticks, wobei eine Millisekunde 10.000 Ticks entspricht. `milliseconds` wird jedoch auf die nächste Millisekunde gerundet. alle Werte von 0,5 oder höher werden aufgerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `milliseconds` hinzugefügt wird.  
  
 Da ein <xref:System.DateTimeOffset> Objekt das Datum und die Uhrzeit in einer bestimmten Zeitzone nicht darstellt, berücksichtigt die <xref:System.DateTimeOffset.AddMilliseconds%2A>-Methode beim Ausführen von Datums-und Uhrzeit Arithmetik nicht die Anpassungsregeln einer bestimmten Zeitzone.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">Eine Zahl, die aus ganzen Minuten und dem Bruchteil einer Minute besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von ganzen Minuten und Bruchteilen von Minuten zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="minutes" /> dargestellten Anzahl von Minuten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bruchteil des `minutes`-Parameters ist der Bruchteil einer Minute. 4,5 entspricht z. b. 4 Minuten, 30 Sekunden, 0 Millisekunden. Der `minutes`-Parameter wird auf die nächste Millisekunde gerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `minutes` hinzugefügt wird.  
  
 Da ein <xref:System.DateTimeOffset> Objekt das Datum und die Uhrzeit in einer bestimmten Zeitzone nicht darstellt, berücksichtigt die <xref:System.DateTimeOffset.AddMinutes%2A>-Methode beim Ausführen von Datums-und Uhrzeit Arithmetik nicht die Anpassungsregeln einer bestimmten Zeitzone.  
  
 Das Umrechnen von Zeitintervallen von weniger als einer Minute in einen Bruchteil kann zu einem Genauigkeits Verlust führen. (Eine Sekunde ist z. b. 0,01666 Minuten.) Wenn dies problematisch ist, können Sie die <xref:System.DateTimeOffset.Add%2A>-Methode verwenden, die es Ihnen ermöglicht, mehr als eine Art Zeitintervall in einem einzelnen Methodenaufruf anzugeben, und es entfällt, dass Sie Zeitintervalle in Bruchteile einer Minute konvertieren müssen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Eine Anzahl von ganzen Monaten. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von Monaten zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="months" /> dargestellten Anzahl von Monaten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anders als bei den meisten anderen Methoden, die einem Datums-und Uhrzeitwert eine einzelne Zeitintervall Einheit (z. b. Minuten oder Tage) hinzufügen, können <xref:System.DateTimeOffset.AddMonths%2A> keine Bruchteile eines Monats hinzufügen. Verwenden Sie die <xref:System.DateTimeOffset.Add%2A>-Methode, um eine Zeit hinzuzufügen, die zusätzlich zu den Monaten für ein <xref:System.DateTimeOffset> Objekt aus anderen Zeiteinheiten besteht.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `months` hinzugefügt wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.AddMonths%2A>-Methode verwendet, um das Startdatum jedes Quartals des Jahres 2007 anzuzeigen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Eine Zahl, die aus ganzen Sekunden und dem Bruchteil einer Sekunde besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von ganzen Sekunden und Bruchteilen von Sekunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="seconds" /> dargestellten Anzahl von Sekunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Bruchteil des `seconds`-Parameters ist der Bruchteil einer Sekunde. Der Wert von Bruchteilen einer Sekunde ist in der folgenden Tabelle dargestellt.  
  
|Zweiter Wert|Entsprechung|  
|------------------|----------------|  
|.1 Sekunde|100 Millisekunden|  
|.01 Sekunde|10 Millisekunden|  
|.001 Sekunde|1 Millisekunde|  
  
 Der `seconds`-Parameter wird auf die nächste Millisekunde gerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `minutes` hinzugefügt wird.  
  
 Da ein <xref:System.DateTimeOffset> Objekt das Datum und die Uhrzeit in einer bestimmten Zeitzone nicht darstellt, berücksichtigt die <xref:System.DateTimeOffset.AddSeconds%2A>-Methode beim Ausführen von Datums-und Uhrzeit Arithmetik nicht die Anpassungsregeln einer bestimmten Zeitzone.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Eine Anzahl von 100-Nanosekunden-Ticks. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von Ticks zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="ticks" /> dargestellten Anzahl von Ticks ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Tick stellt 100 Nanosekunden oder eine Millionstel Millionstel Sekunde dar. Da ein Tick ein sehr kleines und genaues Zeitintervall ist, kann jede größere Zeiteinheit als eine Reihe von Ticks ohne Genauigkeits Verlust ausgedrückt werden.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `minutes` hinzugefügt wird.  
  
 In der folgenden Tabelle ist die Anzahl der Ticks in einem bestimmten Zeitintervall aufgeführt.  
  
|Zeitintervall|Anzahl der Ticks|  
|-------------------|---------------------|  
|Sekunde|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day (Tag)|864,000,000,000|  
|Week|6,048,000,000,000|  
|Month (Monat)|Hängt von der Anzahl der Tage im Monat ab.|  
|Nicht-Schaltjahr|315,360,000,000,000|  
|Schaltjahr|316,224,000,000,000|  
  
 Da ein <xref:System.DateTimeOffset> Objekt das Datum und die Uhrzeit in einer bestimmten Zeitzone nicht darstellt, berücksichtigt die <xref:System.DateTimeOffset.AddTicks%2A>-Methode beim Ausführen von Datums-und Uhrzeit Arithmetik nicht die Anpassungsregeln einer bestimmten Zeitzone.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">Eine Anzahl von Jahren. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von Jahren zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="years" /> dargestellten Anzahl von Jahren ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anders als bei den meisten anderen Methoden, die einem Datums-und Uhrzeitwert eine einzelne Zeitintervall Einheit (z. b. Minuten oder Tage) hinzufügen, können <xref:System.DateTimeOffset.AddYears%2A> keine Bruchteile eines Jahres hinzufügen. Verwenden Sie die <xref:System.DateTimeOffset.Add%2A>-Methode, um eine Zeit hinzuzufügen, die aus anderen Zeiteinheiten zusätzlich zu Jahren zu einem <xref:System.DateTimeOffset> Objekt besteht.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `months` hinzugefügt wird.  
  
   
  
## Examples  
 Im USA können die Lizenzen des Treibers nicht für Personen mit weniger als 16 Jahren ausgestellt werden. Im folgenden Beispiel wird das aktuellste Datum angezeigt, an dem eine Person geboren werden muss, damit die Lizenz eines Treibers gesetzlich ausgestellt werden kann.  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Das erste der zu vergleichenden Objekte.</param>
        <param name="second">Das zweite der zu vergleichenden Objekte.</param>
        <summary>Vergleicht zwei <see cref="T:System.DateTimeOffset" />-Objekte und gibt an, ob das erste Objekt vor oder nach dem zweiten liegt oder mit diesem identisch ist.</summary>
        <returns>Eine Ganzzahl mit Vorzeichen, die angibt, ob der Wert des <paramref name="first" />-Parameters vor oder nach dem Wert des <paramref name="second" />-Parameters oder zur selben Zeit liegt, wie in der folgenden Tabelle gezeigt.  
  
 <list type="table"><listheader><term> Rückgabewert 
 </term><description> Bedeutung 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description><paramref name="first" /> liegt vor <paramref name="second" />.  
  
 </description></item><item><term> Null 
 </term><description><paramref name="first" /> ist gleich <paramref name="second" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description><paramref name="first" /> ist später als <paramref name="second" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Durchführung des Vergleichs konvertiert die-Methode die `first` und die `second` Parameter in die koordinierte Weltzeit (UTC), bevor der Vergleich durchgeführt wird. Die-Methode entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 Mit anderen Worten: die <xref:System.DateTimeOffset.Compare%2A>-Methode bestimmt, ob zwei <xref:System.DateTimeOffset>-Objekte einen einzelnen Zeitpunkt darstellen. Er vergleicht weder Datums-und Uhrzeiten direkt noch Offsets.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.Compare%2A>-Methode, um <xref:System.DateTimeOffset>-Objekte zu vergleichen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das mit dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt verglichen werden soll.</param>
        <summary>Vergleicht das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt mit einem angegebenen <see cref="T:System.DateTimeOffset" />-Objekt und gibt an, ob das aktuelle Objekt vor oder nach dem zweiten <see cref="T:System.DateTimeOffset" />-Objekt liegt oder mit diesem identisch ist.</summary>
        <returns>Eine Ganzzahl mit Vorzeichen, die die Beziehung zwischen dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt und <paramref name="other" /> angibt, wie in der folgenden Tabelle gezeigt.  
  
 <list type="table"><listheader><term> Rückgabewert 
 </term><description> BESCHREIBUNG 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt liegt vor <paramref name="other" />.  
  
 </description></item><item><term> Null 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ist mit <paramref name="other" /> identisch.  
  
 </description></item><item><term> Größer als 0 (null)  
  
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt liegt nach <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode vergleicht <xref:System.DateTimeOffset> Objekte durch Vergleichen Ihrer <xref:System.DateTimeOffset.UtcDateTime%2A> Werte. Das heißt, es bestimmt, ob die beiden-Objekte einen einzelnen Zeitpunkt darstellen, und gibt an, ob das aktuelle Objekt vor oder nach dem `other`-Parameter liegt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.CompareTo%2A>-Methode, um <xref:System.DateTimeOffset>-Objekte zu vergleichen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.DateTime" />-Wert ab, der die Datumskomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</summary>
        <value>Ein <see cref="T:System.DateTime" />-Wert, der die Datumskomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft entfernt einen beliebigen signifikanten Teil der Zeitkomponente aus einem <xref:System.DateTimeOffset> Objekt und gibt nur die bedeutende Datums Komponente zurück. Wenn das <xref:System.DateTimeOffset> Objekt z. b. einen Datums-und Uhrzeitwert von "1/12/07 4:01PM + 7:30" aufweist, gibt die-Eigenschaft den <xref:System.DateTime> Wert "1/12/07 12:00:00 am" zurück. Der <xref:System.DateTime> Wert kann dann mithilfe eines beliebigen Standard-oder benutzerdefinierten Format bezeichnerwerts angezeigt werden, der nur Datumsangaben anzeigt. (Eine Abbildung finden Sie im Beispiel Abschnitt.)  
  
 Der Wert der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts ist immer <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Der Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft ist nicht betroffen.  
  
 Wenn Sie ein Datum ohne Zeitkomponente anzeigen möchten, können Sie auch die Format Bearbeiter "d" oder "d" verwenden. eine Abbildung finden Sie im Beispiel Abschnitt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Wert der <xref:System.DateTimeOffset.Date%2A>-Eigenschaft für ein bestimmtes Datum abgerufen. Dieser Wert wird dann in der Konsole mithilfe einiger standardmäßiger und benutzerdefinierter Datums-Format Bearbeiter angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">Standard mäßige DateTime-Format Zeichenfolgen</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">Benutzerdefinierte DateTime-Format Zeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.DateTime" />-Wert ab, der die Datums- und Uhrzeitkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</summary>
        <value>Das Datum und die Uhrzeit des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.DateTime%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Diese Eigenschaft gibt sowohl das Datum als auch die Uhrzeit Komponente eines <xref:System.DateTimeOffset> Objekts zurück, wodurch es für die Durchführung von <xref:System.DateTimeOffset> für <xref:System.DateTime> Konvertierung nützlich ist. Wenn das <xref:System.DateTimeOffset> Objekt z. b. einen Datums-und Uhrzeitwert von "1/12/07 4:01PM + 7:30" aufweist, gibt die-Eigenschaft das Datum "1/12/07 4:01PM" zurück.  
  
 Der Wert der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.DateTimeOffset.DateTime%2A>-Eigenschaft verwendet wird, um die von der <xref:System.DateTimeOffset.Now%2A> und <xref:System.DateTimeOffset.UtcNow%2A> Eigenschaften zurückgegebene Zeit in <xref:System.DateTime> Werte zu konvertieren.  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="/dotnet/standard/datetime/converting-between-datetime-and-offset">Konvertieren zwischen "DateTime" und "DateTimeOffset"</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tag des Monats ab, der durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Tagkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als Wert zwischen 1 und 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Day%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Sie können auch eine Zeichen folgen Darstellung der Tages Komponente eines <xref:System.DateTimeOffset> Objekts erstellen, indem Sie die <xref:System.DateTimeOffset.ToString%2A>-Methode mit den benutzerdefinierten Format Bezeichnerzeichen "d" oder "dd" aufrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Tages Komponente eines <xref:System.DateTimeOffset> Objekts auf drei verschiedene Arten angezeigt:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Day%2A>-Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "d".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "dd".  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tag der Woche ab, der durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Einer der Enumerationswerte, der den Wochentag des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der Konstanten in der <xref:System.DayOfWeek> Enumeration reicht von <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> bis <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Wenn Sie in eine ganze Zahl umgewandelt wird, reicht der Wert von 0 (null) (was <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) auf sechs (<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Sie können auch den Wochentagsnamen eines bestimmten datumsanzeigen, indem Sie den Format Bezeichner "D" oder den benutzerdefinierten Format Bezeichner "dddd" verwenden. Beispiel:  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 Beachten Sie, dass die Zeichenfolge, die durch Aufrufen der `ToString`-Methode des von dieser Eigenschaft zurückgegebenen <xref:System.DayOfWeek> Enumerationsmembers zurückgegeben wird, nicht lokalisiert ist. Um eine Zeichenfolge zu extrahieren, die den Wochentagsnamen der aktuellen Kultur oder einer bestimmten Kultur enthält, nennen Sie die <xref:System.DateTimeOffset.ToString%2A>-Methode mit dem benutzerdefinierten Format Bezeichner "dddd". Der folgende Code zeigt z. b. den Wochentagsnamen für ein Datum mithilfe der `fr-fr` Kultur an.  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Name des Wochentags des ersten Tags eines jeden Monats des Jahres 2008 angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tag des Jahres ab, der durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Der Tag des Jahres des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als Wert zwischen 1 und 366.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob zwei <see cref="T:System.DateTimeOffset" />-Objekte identisch sind oder ob ein <see cref="T:System.DateTimeOffset" />-Objekt mit einem angegebenen Objekt identisch ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Ein <see cref="T:System.DateTimeOffset" />-Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt denselben Zeitpunkt wie ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt darstellt.</summary>
        <returns><see langword="true" />, wenn beide <see cref="T:System.DateTimeOffset" />-Objekte denselben <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vor der Durchführung des Vergleichs konvertiert diese Methode die Werte beider <xref:System.DateTimeOffset> Objekte in die koordinierte Weltzeit (UTC). Die-Methode entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 Mit anderen Worten: die <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>-Methode bestimmt, ob zwei <xref:System.DateTimeOffset>-Objekte einen einzelnen Zeitpunkt darstellen. Er vergleicht weder Datums-und Uhrzeiten direkt noch Offsets. Verwenden Sie die <xref:System.DateTimeOffset.EqualsExact%2A>-Methode, um zu bestimmen, ob zwei <xref:System.DateTimeOffset>-Objekte denselben Zeitpunkt darstellen und denselben Offset Wert aufweisen.  
  
 Ein <xref:System.DateTimeOffset> Objekt, das nicht `null` ist, wird als später (oder größer) eingestuft als eines, das `null`ist.  
  
 Diese Überladung der <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>-Methode implementiert die <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>-Methode. Sie bietet eine etwas bessere Leistung als die <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> Überladung, da der `other` Parameter nicht von einem Objekt konvertiert werden muss.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29>-Methode, um <xref:System.DateTimeOffset>-Objekte auf Gleichheit mit dem aktuellen <xref:System.DateTimeOffset>-Objekt zu testen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob ein <see cref="T:System.DateTimeOffset" />-Objekt denselben Zeitpunkt wie ein angegebenes Objekt darstellt.</summary>
        <returns><see langword="true" />, wenn der <paramref name="obj" />-Parameter ein <see cref="T:System.DateTimeOffset" />-Objekt ist und denselben Zeitpunkt wie das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vor der Durchführung des Vergleichs konvertiert diese Methode die Werte des aktuellen <xref:System.DateTimeOffset>-Objekts und des `obj`-Parameters in eine koordinierte Weltzeit (UTC). Die-Methode entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 Mit anderen Worten: die <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType>-Methode bestimmt, ob das aktuelle <xref:System.DateTimeOffset>-Objekt und ein angegebenes-Objekt einen bestimmten Zeitpunkt darstellen. Er vergleicht weder Datums-und Uhrzeiten direkt noch Offsets. Verwenden Sie die <xref:System.DateTimeOffset.EqualsExact%2A>-Methode, um zu bestimmen, ob zwei <xref:System.DateTimeOffset>-Objekte denselben Zeitpunkt darstellen und denselben Offset Wert aufweisen.  
  
 Wenn `obj` `null`ist oder der Lauf Zeittyp von `obj` nicht <xref:System.DateTimeOffset>ist, gibt die Methode `false`zurück.  
  
   
  
## Examples  
 Das folgende Beispiel gibt an, ob das aktuelle <xref:System.DateTimeOffset> Objekt gleich vielen anderen <xref:System.DateTimeOffset> Objekten ist, sowie einen NULL-Verweis und ein <xref:System.DateTime>-Objekt.  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Das erste der zu vergleichenden Objekte.</param>
        <param name="second">Das zweite der zu vergleichenden Objekte.</param>
        <summary>Bestimmt, ob zwei angegebene <see cref="T:System.DateTimeOffset" />-Objekte denselben Zeitpunkt darstellen.</summary>
        <returns><see langword="true" />, wenn die beiden <see cref="T:System.DateTimeOffset" />-Objekte denselben <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vor der Durchführung des Vergleichs konvertiert diese Methode beide <xref:System.DateTimeOffset> Objekte in eine koordinierte Weltzeit (UTC). Die-Methode entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Mit anderen Worten: die <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>-Methode bestimmt, ob die beiden <xref:System.DateTimeOffset>-Objekte einen einzelnen Zeitpunkt darstellen. Er vergleicht weder Datums-und Uhrzeiten direkt noch Offsets. Verwenden Sie die <xref:System.DateTimeOffset.EqualsExact%2A>-Methode, um zu bestimmen, ob zwei <xref:System.DateTimeOffset>-Objekte denselben Zeitpunkt darstellen und denselben Offset Wert aufweisen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29>-Methode, um verschiedene Paare von <xref:System.DateTimeOffset> Objekten auf Gleichheit zu testen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Das Objekt, das mit dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt denselben Zeitpunkt wie ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt darstellt und denselben Offset aufweist.</summary>
        <returns><see langword="true" />, wenn das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt und <paramref name="other" /> denselben Datums- und Uhrzeitwert sowie denselben <see cref="P:System.DateTimeOffset.Offset" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da mehrere Zeitzonen einen einzelnen Offset gemeinsam verwenden, gewährleistet der Rückgabewert `true` nicht, dass das aktuelle und das `other`-Objekt Zeiten in derselben Zeitzone darstellen.  
  
 Anders als bei der <xref:System.DateTimeOffset.EqualsExact%2A>-Methode bestimmen die über Ladungen der <xref:System.DateTimeOffset.Equals%2A>-Methode nur, ob zwei <xref:System.DateTimeOffset> Werte einen einzelnen Zeitpunkt darstellen. Sie weisen nicht darauf hin, dass zwei Werte über das gleiche Datum und die gleiche Uhrzeit sowie den gleichen Offset verfügen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.DateTimeOffset.EqualsExact%2A>-Methode, um ähnliche <xref:System.DateTimeOffset> Objekte zu vergleichen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Eine Windows-Dateizeit in Ticks.</param>
        <summary>Konvertiert die angegebene Windows-Dateizeit in eine entsprechende Ortszeit.</summary>
        <returns>Ein Objekt, das das Datum und die Uhrzeit von <paramref name="fileTime" /> darstellt, wobei der Offset auf den Ortszeitoffset festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n/s verstrichen sind. unserer Zeitrechnung Koordinierte Weltzeit (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wann eine Anwendung eine Datei erstellt, zugreift oder in eine Datei schreibt.  
  
 Eine Windows-Dateizeit ist über die Windows-API direkt verfügbar, indem Sie die `GetFileTime`-Funktion aufrufen, die eine `FILETIME` Struktur zurückgibt. Der einzelne Funktionsparameter ist das Handle der Datei, deren Datei Zeit Informationen abgerufen werden sollen. Das Datei Handle wird durch Aufrufen der `CreateFile`-Funktion abgerufen. Der `dwHighDateTime` Member der `FILETIME` Struktur enthält die vier hochwertigen Bytes der Datei Zeit, und sein `dwLowDateTime` Member enthält die vier nieder wertigen bytes. Im folgenden Beispiel wird veranschaulicht, wie Sie Windows-Dateizeitwerte abrufen und in <xref:System.DateTimeOffset> Werte konvertieren.  
  
 Windows-Datei Uhrzeitwerte können auch aus <xref:System.DateTime> Werten erstellt werden, indem die Methoden <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> und <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> und <xref:System.DateTimeOffset> Werte durch Aufrufen der <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType>-Methode aufgerufen werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Windows-API verwendet, um die Windows-Datei Zeiten für die ausführbare WordPad-Datei abzurufen.  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" /> ist kleiner als 0 (null).  
  
Oder 
 <paramref name="filetime" /> ist größer als <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Eine Unix-Zeit in Form der seit 1.1.1970T00:00:00Z (1. Januar 1970 um Mitternacht UTC) verstrichenen Millisekunden. Für Unix-Zeiten vor diesem Datum ist der Wert negativ.</param>
        <summary>Konvertiert eine Unix-Zeit in Form der seit dem 1. Januar 1970 um 00:00:00Z verstrichenen Millisekunden in einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
        <returns>Ein Datum und eine Uhrzeit, die denselben Zeitpunkt wie die Unix-Zeit darstellen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.DateTimeOffset.Offset%2A>-Eigenschafts Wert der zurückgegebenen <xref:System.DateTimeOffset> Instanz ist <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, der die koordinierte Weltzeit darstellt. Sie können es in die Zeit in einer bestimmten Zeitzone konvertieren, indem Sie die <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>-Methode aufrufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" /> ist kleiner als –62,135,596,800,000.  
  
Oder 
 <paramref name="milliseconds" /> ist größer als 253,402,300,799,999.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="seconds">Eine Unix-Zeit in Form der seit 1.1.1970T00:00:00Z (1. Januar 1970 um Mitternacht UTC) verstrichenen Sekunden. Für Unix-Zeiten vor diesem Datum ist der Wert negativ.</param>
        <summary>Konvertiert eine Unix-Zeit in Form der seit dem 1. Januar 1970 um 00:00:00Z verstrichenen Sekunden in einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
        <returns>Ein Datum und eine Uhrzeit, die denselben Zeitpunkt wie die Unix-Zeit darstellen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.DateTimeOffset.Offset%2A>-Eigenschafts Wert der zurückgegebenen <xref:System.DateTimeOffset> Instanz ist <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, der die koordinierte Weltzeit darstellt. Sie können es in die Zeit in einer bestimmten Zeitzone konvertieren, indem Sie die <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>-Methode aufrufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" /> ist kleiner als –62,135,596,800.  
  
Oder 
 <paramref name="seconds" /> ist größer als 253,402,300,799.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt zurück.</summary>
        <returns>Ein Hashcode in Form einer 32-Bit-Ganzzahl mit Vorzeichen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stundenkomponente der Zeit ab, die durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Stundenkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts. Diese Eigenschaft verwendet ein 24-Stunden-Format. Der Wert liegt zwischen 0 und 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Hour%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Sie können auch eine Zeichen folgen Darstellung der Stunden Komponente eines <xref:System.DateTimeOffset> Objekts erstellen, indem Sie die <xref:System.DateTimeOffset.ToString%2A>-Methode mit den benutzerdefinierten Format Bezeichner"H" oder "hh" aufrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Stunden Komponente eines <xref:System.DateTimeOffset> Objekts auf drei verschiedene Arten angezeigt:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Hour%2A>-Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "H".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "hh".  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.DateTime" />-Wert ab, der die Datums- und Uhrzeitkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</summary>
        <value>Die lokale Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Falls erforderlich, konvertiert die <xref:System.DateTimeOffset.LocalDateTime%2A>-Eigenschaft das Datum und die Uhrzeit des aktuellen <xref:System.DateTimeOffset> Objekts in das Datum und die Uhrzeit des lokalen Systems. Die Konvertierung ist ein zweistufiger Vorgang:  
  
1.  Die-Eigenschaft konvertiert die Uhrzeit des aktuellen <xref:System.DateTimeOffset> Objekts in eine koordinierte Weltzeit (UTC).  
  
2.  Die-Eigenschaft konvertiert dann UTC in die lokale Zeit.  
  
 Es sind keine ungültigen Zeiten und mehrdeutige Zeiten der Standardzeit der lokalen Zone zugeordnet. (Bei der Konvertierung kann jedoch eine Anomalieerkennung erstellt werden: Wenn ein <xref:System.DateTimeOffset> Wert, der vom lokalen Computer abgeleitet ist, ein mehrdeutiges Datum und eine mehrdeutige Uhrzeit widerspiegelt, kann dieser Wert in UTC und dann zurück in eine Ortszeit konvertiert werden, die sich von der ursprünglichen Uhrzeit unterscheidet.)  Die-Eigenschaft wendet alle Anpassungsregeln in der lokalen Zeitzone an, wenn diese Konvertierung durchführt.  
  
 Diese Eigenschaft gibt sowohl das Datum als auch die Uhrzeit Komponente eines <xref:System.DateTimeOffset> Objekts zurück, wodurch es für die <xref:System.DateTimeOffset> der <xref:System.DateTime> Konvertierung nützlich ist. Diese Eigenschaft unterscheidet sich nicht nur durch die notwendige Zeit Konvertierung, sondern auch von der <xref:System.DateTimeOffset.DateTime%2A>-Eigenschaft, indem der Wert der <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekts auf <xref:System.DateTimeKind.Local?displayProperty=nameWithType>festgelegt wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht verschiedene Konvertierungen von <xref:System.DateTimeOffset>-Werten in lokale Uhrzeiten in der Zeitzone USA Pacific Standard. Beachten Sie, dass die letzten drei Male alle mehrdeutig sind. die-Eigenschaft ordnet alle Elemente einem einzelnen Datum und einer Uhrzeit in der Pacific Standard Time Zone zu.  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den größtmöglichen Wert von <see cref="T:System.DateTimeOffset" /> dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstante ist 12/31/9999 11:59:59 Uhr + 00:00.  
  
 Die <xref:System.DateTimeOffset.MaxValue>-Eigenschaft wird verwendet, um zu bestimmen, ob der Wert eines neuen <xref:System.DateTimeOffset> Objekts oder der <xref:System.DateTimeOffset> Wert, der von einer arithmetischen Operation zurückgegeben wird, mit oder früher als dieser maximale Bereichs Wert ist. Wenn dies nicht der Fall ist, löst die Methode eine <xref:System.ArgumentOutOfRangeException>aus. Jeder <xref:System.DateTimeOffset> Wert wird in die koordinierte Weltzeit (UTC) konvertiert, bevor die Methode ihn mit <xref:System.DateTimeOffset.MaxValue>vergleicht.  Dies bedeutet, dass ein <xref:System.DateTimeOffset> Wert, dessen Datum und Uhrzeit in der Nähe des maximalen Bereichs liegen, dessen Abweichung jedoch negativ ist, möglicherweise eine Ausnahme auslöst. Der Wert 12/31/9999 11:00 PM-02:00 liegt z. b. außerhalb des gültigen Bereichs, da er eine Stunde später als <xref:System.DateTimeOffset.MaxValue> ist, wenn er in UTC konvertiert wird.  
  
 Einige Kalender, wie z. b. die <xref:System.Globalization.UmAlQuraCalendar>, unterstützen einen oberen Datumsbereich vor <xref:System.DateTime.MaxValue>. In diesen Fällen kann der Versuch, auf <xref:System.DateTime.MaxValue> in Variablen Zuweisungen oder Formatierungs-und Verarbeitungsvorgängen zuzugreifen, eine <xref:System.ArgumentOutOfRangeException>auslösen. Anstatt den Wert <xref:System.DateTime.MaxValue?displayProperty=nameWithType>abzurufen, können Sie den Wert des letzten gültigen Datums Werts der angegebenen Kultur aus der <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType>-Eigenschaft abrufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" /> liegt außerhalb des Bereichs des Standardkalenders der aktuellen oder einer angegebenen Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Millisekundenkomponente der Zeit ab, die durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Millisekundenkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als eine Ganzzahl zwischen 0 und 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch eine Zeichen folgen Darstellung der Millisekundenkomponente eines <xref:System.DateTimeOffset> Objekts erstellen, indem Sie die <xref:System.DateTimeOffset.ToString%2A>-Methode mit dem benutzerdefinierten Format Bezeichner "fff" aufrufen.  
  
 Wenn Sie auf Eigenschaften wie <xref:System.DateTimeOffset.Now%2A> oder <xref:System.DateTimeOffset.UtcNow%2A> angewiesen sind, um die Anzahl der verstrichenen Millisekunden genau zu verfolgen, hängt die Genauigkeit der Millisekundenkomponente der Zeit von der Auflösung der Systemuhr ab. Unter Windows NT 3.5 und höher sowie unter Windows Vista-Betriebssystemen beträgt die Auflösung der Uhr etwa 10 – 15 Millisekunden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Anzahl der Millisekunden eines <xref:System.DateTimeOffset> Objekts mit einem benutzerdefinierten Format Bezeichner und durch direkten Zugriff auf die <xref:System.DateTimeOffset.Millisecond%2A>-Eigenschaft angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Minutenkomponente der Zeit ab, die durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Minutenkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als eine Ganzzahl zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Minute%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Sie können auch eine Zeichen folgen Darstellung der Minuten Komponente eines <xref:System.DateTimeOffset> Objekts erstellen, indem Sie die <xref:System.DateTimeOffset.ToString%2A>-Methode mit den benutzerdefinierten Format Bezeichnerzeichen "m" oder "mm" aufrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Minuten Komponente eines <xref:System.DateTimeOffset> Objekts auf drei verschiedene Arten angezeigt:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Minute%2A>-Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "m".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "mm".  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den frühesten <see cref="T:System.DateTimeOffset" />-Wert dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstante ist 1/1/0001 12:00:00 Uhr + 00:00.  
  
 Die <xref:System.DateTimeOffset.MinValue>-Eigenschaft wird verwendet, um zu bestimmen, ob der Wert eines neuen <xref:System.DateTimeOffset> Objekts oder der <xref:System.DateTimeOffset> Wert, der von einer arithmetischen Operation zurückgegeben wird, mit oder nach diesem minimalen Bereichs Wert übereinstimmt. Wenn dies nicht der Fall ist, löst die Methode eine <xref:System.ArgumentOutOfRangeException>aus. Jeder <xref:System.DateTimeOffset> Wert wird in die koordinierte Weltzeit (UTC) konvertiert, bevor die-Methode den Vergleich mit <xref:System.DateTimeOffset.MinValue>ausführt.  Dies bedeutet, dass ein <xref:System.DateTimeOffset> Wert, dessen Datum und Uhrzeit in der Nähe des minimalen Bereichs liegen, dessen Abweichung jedoch positiv ist, möglicherweise eine Ausnahme auslöst. Der Wert 1/1/0001 1:00:00 am + 02:00 liegt z. b. außerhalb des gültigen Bereichs, da er eine Stunde früher als <xref:System.DateTimeOffset.MinValue> ist, wenn er in UTC konvertiert wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Monatskomponente des Datums ab, das durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Monatskomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als eine Ganzzahl zwischen 1 und 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Month%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Sie können auch eine Zeichen folgen Darstellung der Monats Komponente eines <xref:System.DateTimeOffset> Objekts erstellen, indem Sie die <xref:System.DateTimeOffset.ToString%2A>-Methode mit den benutzerdefinierten Format Bezeichnerzeichen "M" oder "mm" aufrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Komponente month eines <xref:System.DateTimeOffset> Werts auf drei verschiedene Arten angezeigt:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Month%2A>-Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "M".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "mm".  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.DateTimeOffset" />-Objekt ab, das auf die aktuelle Datums- und Uhrzeitangabe des aktuellen Computers festgelegt ist, wobei der Offset auf den UTC (Coordinated Universal Time)-Offset der Ortszeit festgelegt ist.</summary>
        <value>Ein <see cref="T:System.DateTimeOffset" />-Objekt, dessen Datum und Uhrzeit die aktuelle Ortszeit ist und dessen Offset der UTC (Coordinated Universal Time)-Offset der lokalen Zeitzone ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Genauigkeit der Millisekundenkomponente der aktuellen lokalen Zeit hängt von der Auflösung der Systemuhr ab. Unter Windows NT 3.5 und höher sowie unter Windows Vista-Betriebssystemen beträgt die Auflösung der Uhr etwa 10 – 15 Millisekunden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.Now%2A>-Eigenschaft verwendet, um das aktuelle Datum und die Uhrzeit abzurufen, und Sie wird mithilfe der Standardformat Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) angezeigt, die vom <xref:System.DateTimeOffset>-Typ unterstützt werden.  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 Im folgenden Beispiel wird die Auflösung der Systemuhr mithilfe der Eigenschaften <xref:System.DateTimeOffset.Now%2A> und <xref:System.DateTimeOffset.Millisecond%2A> bestimmt. Die Zeit wird nur angezeigt, wenn sich der Wert der Millisekundenkomponente geändert hat.  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den UTC (Coordinated Universal Time)-Offset der Zeit ab.</summary>
        <value>Die Differenz zwischen dem Zeitwert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts und der Coordinated Universal Time (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der <xref:System.TimeSpan.Hours%2A>-Eigenschaft des zurückgegebenen <xref:System.TimeSpan> Objekts kann zwischen-14 Stunden und 14 Stunden liegen.  
  
 Der Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft ist auf die Minute genau.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft verwendet, um den Unterschied der lokalen Zeit von der koordinierten Weltzeit (UTC) anzuzeigen.  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (dateTimeOffset As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (dateTimeTz As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Objekt, dem das Zeitintervall hinzugefügt werden soll.</param>
        <param name="dateTimeTz">Das Objekt, dem das Zeitintervall hinzugefügt werden soll.</param>
        <param name="timeSpan">Das hinzuzufügende Zeitintervall.</param>
        <summary>Fügt einem <see cref="T:System.DateTimeOffset" />-Objekt mit einer Datums- und Uhrzeitangabe ein angegebenes Zeitintervall hinzu und liefert ein <see cref="T:System.DateTimeOffset" />-Objekt mit einer neuen Datums- und Uhrzeitangabe.</summary>
        <returns>Ein Objekt, dessen Wert die Summe der Werte von <paramref name="dateTimeTz" /> und <paramref name="timeSpan" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Addition%2A>-Methode definiert den Additions Vorgang für <xref:System.DateTimeOffset> Werte. Dies ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 Sprachen, die keine benutzerdefinierten Operatoren und Operator Überladung unterstützen, können stattdessen die <xref:System.DateTimeOffset.Add%2A>-Methode abrufen.  
  
 Die äquivalente Methode für diesen Operator ist <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste der zu vergleichenden Objekte.</param>
        <param name="right">Das zweite der zu vergleichenden Objekte.</param>
        <summary>Bestimmt, ob zwei angegebene <see cref="T:System.DateTimeOffset" />-Objekte denselben Zeitpunkt darstellen.</summary>
        <returns><see langword="true" />, wenn beide <see cref="T:System.DateTimeOffset" />-Objekte denselben <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Equality%2A>-Methode definiert den Vorgang des Gleichheits Operators für <xref:System.DateTimeOffset> Objekte. Dies ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 Vor dem Auswerten der `left` und `right` Operanden auf Gleichheit konvertiert der Operator beide Werte in die koordinierte Weltzeit (UTC). Der Vorgang entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Mit anderen Worten: die <xref:System.DateTimeOffset.op_Equality%2A>-Methode bestimmt, ob die beiden <xref:System.DateTimeOffset>-Objekte einen einzelnen Zeitpunkt darstellen. Er vergleicht weder Datums-und Uhrzeiten direkt noch Offsets. Verwenden Sie die <xref:System.DateTimeOffset.EqualsExact%2A>-Methode, um zu bestimmen, ob zwei <xref:System.DateTimeOffset>-Objekte denselben Zeitpunkt darstellen und denselben Offset Wert aufweisen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste der zu vergleichenden Objekte.</param>
        <param name="right">Das zweite der zu vergleichenden Objekte.</param>
        <summary>Bestimmt, ob ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt größer als (oder später als) ein zweites angegebenes <see cref="T:System.DateTimeOffset" />-Objekt ist.</summary>
        <returns><see langword="true" />, wenn der <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="left" /> nach dem <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="right" /> liegt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_GreaterThan%2A>-Methode definiert den Vorgang des Operators "größer als" für <xref:System.DateTimeOffset> Objekte. Dies ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 Sprachen, die keine benutzerdefinierten Operatoren unterstützen, können stattdessen die <xref:System.DateTimeOffset.Compare%2A>-Methode aufzurufen. Sie können die <xref:System.DateTimeOffset.op_GreaterThan%2A>-Methode auch direkt aufzurufen, wie im folgenden Beispiel gezeigt.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 Vor dem Auswerten der `left` und `right` Operanden konvertiert der Operator beide Werte in eine koordinierte Weltzeit (UTC). Der Vorgang entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste der zu vergleichenden Objekte.</param>
        <param name="right">Das zweite der zu vergleichenden Objekte.</param>
        <summary>Bestimmt, ob ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt größer oder gleich einem zweiten angegebenen <see cref="T:System.DateTimeOffset" />-Objekt ist.</summary>
        <returns><see langword="true" />, wenn der <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="left" /> nach dem <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="right" /> liegt oder mit diesem identisch ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_GreaterThan%2A>-Methode definiert den Vorgang des Operators "größer als oder gleich" für <xref:System.DateTimeOffset> Objekte. Dies ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 Sprachen, die keine benutzerdefinierten Operatoren unterstützen, können stattdessen die <xref:System.DateTimeOffset.Compare%2A>-Methode aufzurufen. Einige Sprachen können auch die <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> Methode direkt aufzurufen, wie im folgenden Beispiel gezeigt.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 Vor dem Auswerten der `left` und `right` Operanden konvertiert der Operator beide Werte in eine koordinierte Weltzeit (UTC). Der Vorgang entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (dateTime As DateTime) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das zu konvertierende Objekt.</param>
        <summary>Definiert eine implizite Konvertierung eines <see cref="T:System.DateTime" />-Objekts in ein <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Das konvertierte Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Implicit%2A>-Methode ermöglicht es dem Compiler, ein <xref:System.DateTime> Objekt automatisch in ein <xref:System.DateTimeOffset> Objekt zu konvertieren, ohne einen expliziten Umwandlungs Operator (in C#) oder einen aufzurufenden Konvertierungs Funktion (in Visual Basic). Es definiert eine erweiternde Konvertierung, die keinen Datenverlust umfasst und keine <xref:System.OverflowException>auslöst. Mit der <xref:System.DateTimeOffset.op_Implicit%2A>-Methode wird Code wie der folgende ermöglicht:  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 Diese Methode entspricht dem <xref:System.DateTimeOffset.%23ctor%2A>-Konstruktor. Der Offset des resultierenden <xref:System.DateTimeOffset> Objekts hängt vom Wert der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType>-Eigenschaft des Parameters `dateTime` ab:  
  
-   Wenn der Wert der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType>-Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>ist, wird das Datum und die Uhrzeit des <xref:System.DateTimeOffset> Objekts auf `dateTime`festgelegt, und die <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft wird auf 0 (null) festgelegt.  
  
-   Wenn der Wert der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType>-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ist, wird das Datum und die Uhrzeit des <xref:System.DateTimeOffset> Objekts auf `dateTime`festgelegt, und die <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft wird auf den Offset der aktuellen Zeitzone des lokalen Systems festgelegt.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der UTC-Zeitpunkt (Datum und Uhrzeit in koordinierter Weltzeit), der sich nach Anwenden des Offsets ergeben hat, liegt vor <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der UTC-Zeitpunkt (Datum und Uhrzeit), der sich nach Anwenden des Offsets ergeben hat, liegt nach <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste der zu vergleichenden Objekte.</param>
        <param name="right">Das zweite der zu vergleichenden Objekte.</param>
        <summary>Bestimmt, ob zwei angegebene <see cref="T:System.DateTimeOffset" />-Objekte auf unterschiedliche Zeitpunkte verweisen.</summary>
        <returns><see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> nicht denselben <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Inequality%2A>-Methode definiert den Vorgang des Ungleichheits Operators für <xref:System.DateTimeOffset> Objekte. Es wird immer das Gegenteil von <xref:System.DateTimeOffset.op_Equality%2A>zurückgegeben. Die <xref:System.DateTimeOffset.op_Inequality%2A>-Methode ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 Vor dem Auswerten der `left` und `right` Operanden auf Gleichheit konvertiert der Operator beide Werte in die koordinierte Weltzeit (UTC). Der Vorgang entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Mit anderen Worten: die <xref:System.DateTimeOffset.op_Inequality%2A>-Methode bestimmt, ob die beiden <xref:System.DateTimeOffset>-Objekte unterschiedliche Zeitpunkte darstellen. Er vergleicht weder Datums-und Uhrzeiten direkt noch Offsets.  
  
 Sprachen, die keine benutzerdefinierten Operatoren unterstützen, können stattdessen die <xref:System.DateTimeOffset.Compare%2A>-Methode aufzurufen. Außerdem können einige Sprachen die <xref:System.DateTimeOffset.op_Inequality%2A>-Methode auch direkt aufzurufen, wie im folgenden Beispiel gezeigt.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste der zu vergleichenden Objekte.</param>
        <param name="right">Das zweite der zu vergleichenden Objekte.</param>
        <summary>Bestimmt, ob ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt kleiner als ein zweites angegebenes <see cref="T:System.DateTimeOffset" />-Objekt ist.</summary>
        <returns><see langword="true" />, wenn der <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="left" /> vor dem <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="right" /> liegt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_LessThan%2A>-Methode definiert den Vorgang des kleiner-als-Operators für <xref:System.DateTimeOffset> Objekte. Dies ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 Vor dem Auswerten der `left` und `right` Operanden konvertiert der Operator beide Operanden in die koordinierte Weltzeit (UTC). Der Vorgang entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 Sprachen, die keine benutzerdefinierten Operatoren unterstützen, können stattdessen die <xref:System.DateTimeOffset.Compare%2A>-Methode aufzurufen. Außerdem können einige Sprachen die <xref:System.DateTimeOffset.op_LessThan%2A>-Methode auch direkt aufzurufen, wie im folgenden Beispiel gezeigt.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste der zu vergleichenden Objekte.</param>
        <param name="right">Das zweite der zu vergleichenden Objekte.</param>
        <summary>Bestimmt, ob ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt kleiner als ein zweites angegebenes <see cref="T:System.DateTimeOffset" />-Objekt ist.</summary>
        <returns><see langword="true" />, wenn der <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="left" /> vor dem <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="right" /> liegt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_LessThanOrEqual%2A>-Methode definiert den Vorgang des Operators "kleiner als oder gleich" für <xref:System.DateTimeOffset> Objekte. Dies ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 Sprachen, die keine benutzerdefinierten Operatoren unterstützen, können stattdessen die <xref:System.DateTimeOffset.Compare%2A>-Methode aufzurufen. Einige Sprachen können auch die <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> Methode direkt aufzurufen, wie im folgenden Beispiel gezeigt.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 Vor dem Auswerten der `left` und `right` Operanden konvertiert der Operator beide Werte in eine koordinierte Weltzeit (UTC). Der Vorgang entspricht Folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrahiert ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt oder ein <see cref="T:System.TimeSpan" />-Objekt von einem <see cref="T:System.DateTimeOffset" />-Objekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Der Minuend.</param>
        <param name="right">Der Subtrahend.</param>
        <summary>Subtrahiert ein <see cref="T:System.DateTimeOffset" />-Objekt von einem anderen und ergibt ein Zeitintervall.</summary>
        <returns>Ein Objekt, das die Differenz zwischen <paramref name="left" /> und <paramref name="right" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Subtraction%2A>-Methode definiert den Subtraktions Vorgang für <xref:System.DateTimeOffset> Objekte. Dies ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 Sprachen, die keine benutzerdefinierten Operatoren und Operator Überladung unterstützen, können stattdessen die <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>-Methode abrufen.  
  
 Die äquivalente Methode für diesen Operator ist <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (dateTimeOffset As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (dateTimeTz As DateTimeOffset, timeSpan As TimeSpan) As DateTimeOffset" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datums- und Uhrzeitobjekt, von dem subtrahiert werden soll.</param>
        <param name="dateTimeTz">Das Datums- und Uhrzeitobjekt, von dem subtrahiert werden soll.</param>
        <param name="timeSpan">Das Zeitintervall, das subtrahiert werden soll.</param>
        <summary>Subtrahiert ein angegebenes Zeitintervall von einer Datums- und Uhrzeitangabe und gibt eine neue Datums- und Uhrzeitangabe zurück.</summary>
        <returns>Ein Objekt, das dem Wert von <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Subtraction%2A>-Methode definiert den Subtraktions Vorgang für <xref:System.DateTimeOffset> Objekte. Dies ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 Sprachen, die keine benutzerdefinierten Operatoren und Operator Überladung unterstützen, können stattdessen die <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>-Methode abrufen.  
  
 Die äquivalente Methode für diesen Operator ist <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" /> oder größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die <see cref="T:System.DateTimeOffset" />-Entsprechung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums-, Uhrzeit- und Offsetangabe in die <see cref="T:System.DateTimeOffset" />-Entsprechung.</summary>
        <returns>Ein Objekt, das mit der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe identisch ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> eine Zeichenfolge mit drei Elementen analysiert, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen getrennt sind. Diese drei Elemente sind wie in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Zeit >|"1:02:03 Uhr"|  
|\<Offset >|"-7:30"|  
  
 Obwohl jedes dieser Elemente optional ist, kann \<Offset > nicht allein angezeigt werden. Es muss entweder \<Datum > oder \<Zeit > bereitgestellt werden. Wenn \<Datum > fehlt, ist der Standardwert der aktuelle Tag. Wenn \<Zeit > fehlt, ist der Standardwert 12:00:00 Uhr. Wenn \<Date > vorhanden ist, die Jahr Komponente jedoch nur aus zwei Ziffern besteht, wird Sie basierend auf dem Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>-Eigenschaft in ein Jahr im aktuellen Kalender der aktuellen Kultur konvertiert. Wenn \<Offset > fehlt, ist der Standardwert der Offset der lokalen Zeitzone. \<Offset > kann entweder eine negative oder eine positive Abweichung von der koordinierten Weltzeit (UTC) darstellen. In beiden Fällen muss \<Offset > ein Vorzeichen Symbol enthalten.  
  
 Die `input` Zeichenfolge wird mithilfe der Formatierungsinformationen in einem <xref:System.Globalization.DateTimeFormatInfo>-Objekt analysiert, das für die aktuelle Kultur initialisiert wird. Verwenden Sie die <xref:System.DateTimeOffset.ParseExact%2A>-Methode, und geben Sie einen Format Bezeichner an, um eine Zeichenfolge zu analysieren, die die festgelegte Formatierung enthält, die nicht notwendigerweise der Formatierung der aktuellen Kultur entspricht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.Parse%28System.String%29>-Methode aufgerufen, um mehrere Datums-und Uhrzeit Zeichenfolgen zu analysieren. Das Beispiel enthält die Ausgabe vom 22. März 2007 in einem System, dessen Kultur en-US ist.  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> ist <see langword="null" /></exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
Oder 
 <paramref name="input" /> enthält die Zeichenfolgendarstellung eines Offsetwerts ohne Datum oder Uhrzeit.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatinformationen zu <paramref name="input" /> bereitstellt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in den entsprechenden <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Ein Objekt, das der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="formatProvider" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen voneinander getrennt sind. Diese drei Elemente sind in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Zeit >|"1:02:03 Uhr"|  
|\<Offset >|"-7:30"|  
  
 Obwohl jedes dieser Elemente optional ist, kann \<Offset > nicht allein angezeigt werden. Es muss entweder \<Datum > oder \<Zeit > bereitgestellt werden. Wenn \<Datum > fehlt, ist der Standardwert der aktuelle Tag. Wenn \<Date > vorhanden ist, die Jahres Komponente jedoch nur aus zwei Ziffern besteht, wird Sie basierend auf dem Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft in ein Jahr im aktuellen Kalender des `provider` Parameters konvertiert. Wenn \<Zeit > fehlt, ist der Standardwert 12:00:00 Uhr. Wenn \<Offset > fehlt, ist der Standardwert der Offset der lokalen Zeitzone. \<Offset > kann entweder eine negative oder eine positive Abweichung von der koordinierten Weltzeit (UTC) darstellen. In beiden Fällen muss \<Offset > ein Vorzeichen Symbol enthalten.  
  
 Das Format dieser drei Elemente wird durch den `formatProvider`-Parameter definiert, der einen der folgenden Elemente aufweisen kann:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, deren Formatierung im `input`-Parameter verwendet wird. Das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegebene <xref:System.Globalization.DateTimeFormatInfo> Objekt definiert die in `input`verwendete Formatierung.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Das positive oder negative Vorzeichen, das in \<Offset > verwendet wird, muss entweder + oder-sein. Sie wird nicht durch die Eigenschaften <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> oder <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> des <xref:System.Globalization.NumberFormatInfo>-Objekts des `formatProvider`-Parameters definiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden Datums-und Uhrzeit Zeichenfolgen, die für die Kultur "fr-FR" formatiert sind, analysiert und mithilfe der Standard Kultur "en-US" des lokalen Systems angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> ist <see langword="null" /></exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
Oder 
 <paramref name="input" /> enthält die Zeichenfolgendarstellung eines Offsetwerts ohne Datum oder Uhrzeit.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = default, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenspanne, die zu konvertierende Datums- und Uhrzeitwerte darstellt.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konvertiert die angegebene Spannendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen und des Formatierungsstils in den entsprechenden <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Ein Objekt, das der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen und des Formatierungsstils in den entsprechenden <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Ein Objekt, das der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen voneinander getrennt sind. Diese drei Elemente sind in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Zeit >|"1:02:03 Uhr"|  
|\<Offset >|"-7:30"|  
  
 Obwohl jedes dieser Elemente optional ist, kann \<Offset > nicht allein angezeigt werden. Es muss entweder \<Datum > oder \<Zeit > bereitgestellt werden. Wenn \<Datum > fehlt, ist der Standardwert der aktuelle Tag. Wenn \<Date > vorhanden ist, die Jahres Komponente jedoch nur aus zwei Ziffern besteht, wird Sie basierend auf dem Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft in ein Jahr im aktuellen Kalender des `provider` Parameters konvertiert. Wenn \<Zeit > fehlt, ist der Standardwert 12:00:00 Uhr. Wenn \<Offset > fehlt, ist der Standardwert der Offset der lokalen Zeitzone oder <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, wenn der Wert für <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> oder <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> im `styles` Parameter angegeben wird. Wenn \<Offset > vorhanden ist, kann Sie entweder einen negativen oder einen positiven Offset von der koordinierten Weltzeit (UTC) darstellen. In beiden Fällen muss \<Offset > ein Vorzeichen Symbol enthalten.  
  
 Das Format dieser drei Elemente wird durch den `formatProvider`-Parameter definiert, der einen der folgenden Elemente aufweisen kann:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, deren Formatierung im `input`-Parameter verwendet wird. Das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegebene <xref:System.Globalization.DateTimeFormatInfo> Objekt definiert die in `input`verwendete Formatierung.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Jedes Element kann auch durch führende oder nachfolgende Leerzeichen eingeschlossen werden, und die \<Datums > und \<Zeit > Elemente können innere Leerräume (z. b. 6:00:00) enthalten. Nur die \<Offset > Komponente darf keine inneren Leerräume enthalten.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Das positive oder negative Vorzeichen, das in \<Offset > verwendet wird, muss entweder + oder-sein. Sie wird nicht durch die Eigenschaften <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> oder <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> des <xref:System.Globalization.NumberFormatInfo> Objekts definiert, das vom `formatProvider`-Parameter zurückgegeben wird.  
  
 In der folgenden Tabelle werden die Elemente der unterstützten <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> Enumeration aufgeführt.  
  
|DateTimeStyles-Member|BESCHREIBUNG|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert die durch `input` dargestellte Zeichenfolge und konvertiert Sie ggf. in UTC. Dies entspricht dem Initialisieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>-Methode des zurückgegebenen <xref:System.DateTimeOffset> Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Innere Leerräume sind in den \<Datums > und \<Zeit > Elementen zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Vor jeder Komponente in der analysierten Zeichenfolge sind führende Leerzeichen zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Nachfolgende Leerzeichen sind vor jeder Komponente in der analysierten Zeichenfolge zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Dies ist das Standardverhalten. Sie kann nicht überschrieben werden, indem eine restriktivere <xref:System.Globalization.DateTimeStyles> Enumerationswert bereitgestellt wird, z. b. <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass der Offset der lokalen Zeitzone angegeben werden soll, wenn dem `input`-Parameter ein \<Offset >-Element fehlt. Dies ist das Standardverhalten der <xref:System.DateTimeOffset.Parse%2A>-Methode.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass der UTC-Offset (00:00) bereitgestellt werden soll, wenn dem `input`-Parameter kein \<Offset >-Element fehlt.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert und hat keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält, hat dieser Wert keine Auswirkung.|  
  
 Nur der <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>-Wert wird nicht unterstützt. Eine <xref:System.ArgumentException> wird ausgelöst, wenn dieser Wert im `styles`-Parameter enthalten ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die Werte <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> an den `styles`-Parameter der <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>-Methode übergeben werden.  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
  
Oder 
 <paramref name="styles" /> ist kein gültiger <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
Oder 
 <paramref name="styles" /> beinhaltet einen nicht unterstützten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
Oder 
 <paramref name="styles" /> enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> ist <see langword="null" /></exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
Oder 
 <paramref name="input" /> enthält die Zeichenfolgendarstellung eines Offsetwerts ohne Datum oder Uhrzeit.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die <see cref="T:System.DateTimeOffset" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss einem angegebenen Format genau entsprechen.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erwartete Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung des angegebenen Formats und der angegebenen kulturabhängigen Formatierungsinformationen in die entsprechende <see cref="T:System.DateTimeOffset" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Objekt, das der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="format" /> und <paramref name="formatProvider" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das in dem vom `format`-Parameter definierten Format vorliegen muss. Außerdem ist es erforderlich, dass die \<Date >, \<Time > und \<Offset > Elemente der Zeichen folgen Darstellung eines Datums und einer Uhrzeit in der von `format`angegebenen Reihenfolge angezeigt werden. Wenn die `input` Zeichenfolge nicht mit diesem `format` Parameter identisch ist, löst die Methode eine <xref:System.FormatException>aus.  Im Gegensatz dazu analysiert die <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-Methode die Zeichen folgen Darstellung eines Datums in einem beliebigen Format, das vom <xref:System.Globalization.DateTimeFormatInfo>-Objekt des Format Anbieters erkannt wird. <xref:System.DateTimeOffset.Parse%2A> ermöglicht außerdem das \<Date->, \<Time > und \<Offset > Elementen der Zeichen folgen Darstellung eines Datums und einer Uhrzeit, die in beliebiger Reihenfolge angezeigt werden.  
  
 Der `format`-Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthält, die das erforderliche Format des `input`-Parameters definieren. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn `format` die benutzerdefinierten Format Bearbeiter `z`, `zz`oder `zzz` enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, löst die Methode eine <xref:System.FormatException>aus.  
  
 Wenn `format` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn `format` nicht erfordert, dass `input` einen Offset enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt der Zeit Zonen Offset des lokalen Systems zugewiesen.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert, ebenso wie das genaue Format von `input`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von seiner <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>-Methode mit standardmäßigen und benutzerdefinierten Format Bezeichnerzeichen und der invarianten Kultur verwendet, um mehrere Datums-und Uhrzeit Zeichenfolgen zu analysieren.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

Im folgenden Beispiel wird ein Array von Zeichen folgen analysiert, die erwartungsgemäß [ISO 8601](/dotnet/standard/base-types/standard-date-and-time-format-strings#the-round-trip-o-o-format-specifier)entsprechen. Wie die Ausgabe des Beispiels zeigt, können Zeichen folgen mit führenden oder nachfolgenden Leerzeichen nicht erfolgreich analysiert werden, ebenso wie Zeichen folgen mit Datums-und Uhrzeit Elementen außerhalb des gültigen Bereichs.

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> ist <see langword="null" />  
  
Oder 
 <paramref name="format" /> ist <see langword="null" /></exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> ist eine leere Zeichenfolge ("").  
  
Oder 
 <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
Oder 
 <paramref name="format" /> ist eine leere Zeichenfolge.  
  
Oder 
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]löst die <see cref="Overload:System.DateTimeOffset.ParseExact" />-Methode eine <see cref="T:System.FormatException" /> aus, wenn die zu deaktivier Ende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">Ein Zeichenbereich, der ein Datum und eine Uhrzeit darstellt.</param>
        <param name="format">Ein Zeichenbereich mit einem Formatspezifizierer, der das erwartete Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <summary>Konvertiert einen Zeichenbereich, der eine Datums- und Uhrzeitangabe darstellt, unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in den entsprechenden <see cref="T:System.DateTimeOffset" />. Das Format der Darstellung von Datum und Uhrzeit muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Objekt, das der im <paramref name="input" />-Parameter enthaltenen Datums- und Uhrzeitangabe nach den Angaben der Parameter <paramref name="format" />, <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Diese Methode analysiert eine Zeichen Spanne, die ein Datum darstellt, das in dem vom `format`-Parameter definierten Format vorliegen muss. Außerdem ist es erforderlich, dass die \<Date >, \<Time > und \<Offset > Elemente der Zeichen folgen Darstellung eines Datums und einer Uhrzeit in der von `format`angegebenen Reihenfolge angezeigt werden. Wenn `input` nicht mit dem `format` Muster identisch ist, löst die Methode eine <xref:System.FormatException>aus.  Im Gegensatz dazu analysiert die <xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>-Methode die Zeichen folgen Darstellung eines Datums in einem beliebigen Format, das vom <xref:System.Globalization.DateTimeFormatInfo>-Objekt des Format Anbieters erkannt wird. <xref:System.DateTimeOffset.Parse%2A> ermöglicht außerdem das \<Date->, \<Time > und \<Offset > Elementen der Zeichen folgen Darstellung eines Datums und einer Uhrzeit, die in beliebiger Reihenfolge angezeigt werden.  
  
 Der `format`-Parameter ist eine Zeichen Spanne, die entweder einen Einzelzeichen-Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthält, die das erforderliche Format des `input`-Parameters definieren. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn `format` die benutzerdefinierten Format Bearbeiter `z`, `zz`oder `zzz` enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, löst die Methode eine <xref:System.FormatException>aus.  
  
 Wenn `format` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn `format` nicht erfordert, dass `input` einen Offset enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt der Zeit Zonen Offset des lokalen Systems zugewiesen.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert, ebenso wie das genaue Format von `input`, wenn `format` ein Standardformat Bezeichner ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von seiner <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
Oder  
Der <paramref name="styles" />-Parameter enthält einen nicht unterstützten Wert.  
Oder  
Der <paramref name="styles" />-Parameter enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> ist einer leerer Zeichenbereich.  
 oder <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit.  
 oder <paramref name="format" /> ist einer leerer Zeichenbereich.  
 Oder  
 Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">Ein Zeichenbereich, der die zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formats">Ein Array von Formatbezeichnern, die die erwarteten Formate von <paramref name="input" /> definieren.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <summary>Konvertiert einen Zeichenbereich mit der Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in den entsprechenden <see cref="T:System.DateTimeOffset" />. Das Format der Darstellung von Datum und Uhrzeit muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>Ein Objekt, das der im <paramref name="input" />-Parameter enthaltenen Datums- und Uhrzeitangabe nach den Angaben der Parameter <paramref name="formats" />, <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
Diese Methode analysiert eine Zeichen Spanne, die ein Datum darstellt, das mit einem der Muster übereinstimmt, die dem `formats`-Parameter zugewiesen sind. Wenn `input` keines dieser Muster mit einer der vom `styles`-Parameter definierten Variationen abstimmt, löst die Methode eine <xref:System.FormatException>aus. Abgesehen vom Vergleich von `input` mit mehreren Formatierungs Mustern verhält sich diese Überladung identisch mit der <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>-Methode.  
  
 Der `formats`-Parameter ist ein Zeichen folgen Array, dessen Elemente entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthalten, die das mögliche Muster des `input`-Parameters definieren. Wenn die-Methode aufgerufen wird, muss `input` einem dieser Muster entsprechen. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn das übereinstimmende Element in `formats` die `z`, `zz`oder `zzz` benutzerdefinierten Format Bearbeiter enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, löst die Methode eine <xref:System.FormatException>aus.  
  
> [!IMPORTANT]
>  Wenn Sie den `formats`-Parameter dieser Überladung verwenden, um mehrere Formate anzugeben, können Sie die Frustration vieler Benutzer beim Eintreten von Datums-und Uhrzeitangaben verringern. Die Möglichkeit, mehrere Eingabemuster zu definieren, ermöglicht es einer Anwendung, Datums-und Uhrzeit Darstellungen zu verarbeiten, bei denen führende Nullen in Monaten, Tagen, Stunden, Minuten und Sekunden enthalten sein können oder fehlen.
  
 Wenn das übereinstimmende Element in `formats` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn das übereinstimmende Element in `formats` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset enthalten, hängt der Offset des resultierenden <xref:System.DateTimeOffset> Objekts vom Wert des `styles`-Parameters ab. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal>enthält, wird der Offset der lokalen Zeitzone dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeUniversal>enthält, wird der koordinierte Weltzeit (UTC) oder + 00:00 dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn kein Wert angegeben ist, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert. Das gleiche gilt für das genaue Format von `input`, wenn das übereinstimmende Element von `formats` eine standardmäßige formatspezifiziererzeichenfolge ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter definiert, ob Leerzeichen in der Eingabe Zeichenfolge zulässig sind, gibt an, wie Zeichen folgen ohne explizite Offset Komponente analysiert werden, und unterstützt die UTC-Konvertierung als Teil des Analyse Vorgangs. Alle Member der <xref:System.Globalization.DateTimeStyles> Enumeration werden mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>unterstützt. In der folgenden Tabelle sind die Auswirkungen der einzelnen unterstützten Member aufgeführt.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und konvertiert Sie ggf. in UTC. Dies entspricht dem Durchlaufen einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>-Methode des zurückgegebenen <xref:System.DateTimeOffset> Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset Wert enthalten, wird dem zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den UTC-Offset (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht `input` das Einschließen von inneren Leerzeichen, die nicht durch `format`angegeben werden. Zusätzliche Leerräume können zwischen Datums-und Uhrzeit Komponenten und innerhalb einzelner Komponenten (mit Ausnahme des Offsets) angezeigt werden und werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht `input` das Einschließen von führenden Leerzeichen, die nicht durch `formats`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht `input` das Einschließen von nachfolgenden Leerzeichen, die nicht durch `formats`angegeben werden Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht `input` das Einschließen von führenden, nachfolgenden und inneren Leerzeichen, die nicht durch `formats`angegeben werden. Alle zusätzlichen Leerzeichen, die nicht im übereinstimmenden Element in `formats` angegeben sind, werden beim Auswerten der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerzeichen in `input`nicht zulässig sind. Leerraum muss genau wie in einem bestimmten Element von `formats` angegeben werden, damit eine Übereinstimmung auftritt. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkung, da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
oder <paramref name="styles" /> enthält einen nicht unterstützten Wert.  
Oder  
Der <paramref name="styles" />-Parameter enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> ist einer leerer Zeichenbereich.  
oder <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit.  
Oder  
Kein Element von <paramref name="formats" /> enthält einen gültigen Formatbezeichner.  
Oder  
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erwartete Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in die entsprechende <see cref="T:System.DateTimeOffset" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Objekt, das der im <paramref name="input" />-Parameter enthaltenen Datums- und Uhrzeitangabe nach den Angaben der Parameter <paramref name="format" />, <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das in dem vom `format`-Parameter definierten Format vorliegen muss. Außerdem ist es erforderlich, dass die \<Date >, \<Time > und \<Offset > Elemente der Zeichen folgen Darstellung eines Datums und einer Uhrzeit in der von `format`angegebenen Reihenfolge angezeigt werden. Wenn die `input` Zeichenfolge nicht mit dem Muster des `format`-Parameters identisch ist, löst die Methode eine <xref:System.FormatException>aus, die durch den `styles`-Parameter definiert wird.  Im Gegensatz dazu analysiert die <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode die Zeichen folgen Darstellung eines Datums in einem beliebigen Format, das vom <xref:System.Globalization.DateTimeFormatInfo>-Objekt des Format Anbieters erkannt wird. <xref:System.DateTimeOffset.Parse%2A> ermöglicht außerdem das \<Date->, \<Time > und \<Offset > Elementen der Zeichen folgen Darstellung eines Datums und einer Uhrzeit, die in beliebiger Reihenfolge angezeigt werden.  
  
 Der `format`-Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthält, die das erforderliche Muster des `input`-Parameters definieren. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn `format` die benutzerdefinierten Format Bearbeiter `z`, `zz`oder `zzz` enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, löst die Methode eine <xref:System.FormatException>aus.  
  
 Wenn `format` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn `format` nicht erfordert, dass `input` einen Offset enthalten, hängt der Offset des resultierenden <xref:System.DateTimeOffset> Objekts vom Wert des `styles`-Parameters ab. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal>enthält, wird der Offset der lokalen Zeitzone dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeUniversal>enthält, wird der koordinierte Weltzeit (UTC) oder + 00:00 dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn kein Wert angegeben ist, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert. Das gleiche gilt für das genaue Format von `input`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter definiert, ob Leerzeichen in der Eingabe Zeichenfolge zulässig sind, gibt an, wie Zeichen folgen ohne explizite Offset Komponente analysiert werden, und unterstützt die UTC-Konvertierung als Teil des Analyse Vorgangs. Alle Member der <xref:System.Globalization.DateTimeStyles> Enumeration werden mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>unterstützt. In der folgenden Tabelle sind die Auswirkungen der einzelnen unterstützten Member aufgeführt.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und konvertiert Sie ggf. in UTC. Dies entspricht dem Durchlaufen einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>-Methode des zurückgegebenen <xref:System.DateTimeOffset> Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `format` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den Offset der lokalen Zeitzone. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `format` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den UTC-Offset (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht `input` das Einschließen von inneren Leerzeichen, die nicht durch `format`angegeben werden. Zusätzliche Leerzeichen können zwischen Datums-und Uhrzeit Komponenten und innerhalb einzelner Komponenten angezeigt werden und werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht `input` das Einschließen von führenden Leerzeichen, die nicht durch `format`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht `input` das Einschließen von nachfolgenden Leerzeichen, die nicht durch `format`angegeben werden Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht `input` das Einschließen von führenden, nachfolgenden und inneren Leerzeichen, die nicht durch `format`angegeben werden. Alle zusätzlichen Leerzeichen, die nicht in `format` angegeben sind, werden beim Auswerten der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerzeichen in `input`nicht zulässig sind. Leerraum muss genau wie in `format`angegeben angezeigt werden. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkung, da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode mit standardmäßigen und benutzerdefinierten Format bezeichnerwerten, der invarianten Kultur und verschiedenen <xref:System.Globalization.DateTimeStyles> Werten verwendet, um mehrere Datums-und Uhrzeit Zeichenfolgen zu analysieren.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

Im folgenden Beispiel wird eine Vielzahl von <xref:System.Globalization.DateTimeStyles> Werten verwendet, um ein Array von Zeichen folgen zu analysieren, die erwartungsgemäß [ISO 8601](/dotnet/standard/base-types/standard-date-and-time-format-strings#the-round-trip-o-o-format-specifier)entsprechen. Wie die Ausgabe des Beispiels zeigt, können Zeichen folgen im richtigen Format nicht analysiert werden, wenn:

- Sie enthalten Leerzeichen, und ein entsprechendes <xref:System.Globalization.DateTimeStyles>-Flag (z. b. <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> wurde im Methoden aufrufnicht angegeben.

- Sie enthalten Datums-und Uhrzeit Elemente, die außerhalb des gültigen Bereichs liegen.

Für Zeichen folgen, die keinen UTC-Offset angeben, wird davon ausgegangen, dass Sie den Offset der lokalen Zeitzone aufweisen (in diesem Fall-07:00), es sei denn, das <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-Flag wird im Methodenaufruf angegeben. In diesem Fall wird davon ausgegangen, dass es sich um eine universelle koordinierte Zeit handelt.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
  
Oder 
Der <paramref name="styles" />-Parameter enthält einen nicht unterstützten Wert.  
  
Oder 
Der <paramref name="styles" />-Parameter enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> ist <see langword="null" />  
  
Oder 
 <paramref name="format" /> ist <see langword="null" /></exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> ist eine leere Zeichenfolge ("").  
  
Oder 
 <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
Oder 
 <paramref name="format" /> ist eine leere Zeichenfolge.  
  
Oder 
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]löst die <see cref="Overload:System.DateTimeOffset.ParseExact" />-Methode eine <see cref="T:System.FormatException" /> aus, wenn die zu deaktivier Ende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formats">Ein Array von Formatbezeichnern, die die erwarteten Formate von <paramref name="input" /> definieren.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der angegebenen Formate, kulturspezifischen Formatierungsinformationen und des Stils in den entsprechenden <see cref="T:System.DateTimeOffset" />. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>Ein Objekt, das der im <paramref name="input" />-Parameter enthaltenen Datums- und Uhrzeitangabe nach den Angaben der Parameter <paramref name="formats" />, <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das mit einem der Muster übereinstimmt, die dem `formats`-Parameter zugewiesen sind. Wenn die `input` Zeichenfolge mit keinem dieser Muster mit einer der vom `styles`-Parameter definierten Variationen identisch ist, löst die Methode eine <xref:System.FormatException>aus. Abgesehen vom Vergleich von `input` mit mehreren Formatierungs Mustern verhält sich diese Überladung identisch mit der <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode.  
  
 Der `formats`-Parameter ist ein Zeichen folgen Array, dessen Elemente entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthalten, die das mögliche Muster des `input`-Parameters definieren. Wenn die-Methode aufgerufen wird, muss `input` einem dieser Muster entsprechen. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn das übereinstimmende Element in `formats` die `z`, `zz`oder `zzz` benutzerdefinierten Format Bearbeiter enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, löst die Methode eine <xref:System.FormatException>aus.  
  
> [!IMPORTANT]
>  Wenn Sie den `formats`-Parameter dieser Überladung verwenden, um mehrere Formate anzugeben, können Sie die Frustration vieler Benutzer beim Eintreten von Datums-und Uhrzeitangaben verringern. Die Möglichkeit, mehrere Eingabemuster zu definieren, ermöglicht es einer Anwendung, Datums-und Uhrzeit Darstellungen zu verarbeiten, bei denen führende Nullen in Monaten, Tagen, Stunden, Minuten und Sekunden enthalten sein können oder fehlen. Dies wird in diesem Beispiel veranschaulicht.  
  
 Wenn das übereinstimmende Element in `formats` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn das übereinstimmende Element in `formats` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset enthalten, hängt der Offset des resultierenden <xref:System.DateTimeOffset> Objekts vom Wert des `styles`-Parameters ab. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal>enthält, wird der Offset der lokalen Zeitzone dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeUniversal>enthält, wird der koordinierte Weltzeit (UTC) oder + 00:00 dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn kein Wert angegeben ist, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert. Das gleiche gilt für das genaue Format von `input`, wenn das übereinstimmende Element von `formats` eine standardmäßige formatspezifiziererzeichenfolge ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter definiert, ob Leerzeichen in der Eingabe Zeichenfolge zulässig sind, gibt an, wie Zeichen folgen ohne explizite Offset Komponente analysiert werden, und unterstützt die UTC-Konvertierung als Teil des Analyse Vorgangs. Alle Member der <xref:System.Globalization.DateTimeStyles> Enumeration werden mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>unterstützt. In der folgenden Tabelle sind die Auswirkungen der einzelnen unterstützten Member aufgeführt.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und konvertiert Sie ggf. in UTC. Dies entspricht dem Durchlaufen einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>-Methode des zurückgegebenen <xref:System.DateTimeOffset> Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset Wert enthalten, wird dem zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den UTC-Offset (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht `input` das Einschließen von inneren Leerzeichen, die nicht durch `format`angegeben werden. Zusätzliche Leerräume können zwischen Datums-und Uhrzeit Komponenten und innerhalb einzelner Komponenten (mit Ausnahme des Offsets) angezeigt werden und werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht `input` das Einschließen von führenden Leerzeichen, die nicht durch `formats`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht `input` das Einschließen von nachfolgenden Leerzeichen, die nicht durch `formats`angegeben werden Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht `input` das Einschließen von führenden, nachfolgenden und inneren Leerzeichen, die nicht durch `formats`angegeben werden. Alle zusätzlichen Leerzeichen, die nicht im übereinstimmenden Element in `formats` angegeben sind, werden beim Auswerten der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerzeichen in `input`nicht zulässig sind. Leerraum muss genau wie in einem bestimmten Element von `formats` angegeben werden, damit eine Übereinstimmung auftritt. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkung, da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält.|  
  
   
  
## Examples  
 Im folgenden Beispiel werden mehrere Eingabeformate für die Zeichen folgen Darstellung eines Datums-, Uhrzeit-und Offset Werts definiert, und anschließend wird die vom Benutzer eingegebene Zeichenfolge an die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode weitergeleitet.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
  
Oder 
 <paramref name="styles" /> beinhaltet einen nicht unterstützten Wert.  
  
Oder 
Der <paramref name="styles" />-Parameter enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> ist <see langword="null" /></exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> ist eine leere Zeichenfolge ("").  
  
Oder 
 <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
Oder 
Kein Element von <paramref name="formats" /> enthält einen gültigen Formatbezeichner.  
  
Oder 
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]löst die <see cref="Overload:System.DateTimeOffset.ParseExact" />-Methode eine <see cref="T:System.FormatException" /> aus, wenn die zu deaktivier Ende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Sekundenkomponente der Systemzeit ab, die durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Sekundenkomponente des <see cref="T:System.DateTimeOffset" />-Objekts als Ganzzahlwert zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Second%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Sie können auch eine Zeichen folgen Darstellung der zweiten Komponente eines <xref:System.DateTimeOffset> Objekts erstellen, indem Sie die <xref:System.DateTimeOffset.ToString%2A>-Methode mit den benutzerdefinierten Format Bezeichnerzeichen "s" oder "SS" aufrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die zweite Komponente eines <xref:System.DateTimeOffset> Objekts auf drei verschiedene Arten angezeigt:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Second%2A>-Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "s".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "SS".  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrahiert eine angegebene Zeit oder eine Dauer vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">Ein Objekt, das den zu subtrahierenden Wert darstellt.</param>
        <summary>Subtrahiert einen <see cref="T:System.DateTimeOffset" />-Wert, der eine bestimmte Datums- und Uhrzeitangabe darstellt, vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt.</summary>
        <returns>Ein Objekt, das das Intervall zwischen den zwei <see cref="T:System.DateTimeOffset" />-Objekten angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode konvertiert beide <xref:System.DateTimeOffset> Objekte in koordinierte Weltzeit (UTC), bevor das Zeitintervall, das Sie trennt, berechnet wird. Dadurch werden alle Effekte, die unterschiedliche Offsets von UTC aufweisen können, auf den Vergleich entfernt.  
  
> [!NOTE]
>  Für Sprachen, die benutzerdefinierte Operatoren unterstützen, können Sie auch die Datums-und Uhrzeitsubtraktion mithilfe des Subtraktions Operators ausführen. Weitere Informationen finden Sie in der <xref:System.DateTimeOffset.op_Subtraction%2A>-Methode.  
  
 Da weder das aktuelle <xref:System.DateTimeOffset>-Objekt noch der `value`-Parameter das Datum und die Uhrzeit in einer bestimmten Zeitzone darstellt, berücksichtigt die <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>-Methode nicht die Anpassungsregeln einer bestimmten Zeitzone, wenn Sie Datumsangaben und Uhrzeiten subtrahiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Subtraktion veranschaulicht, die die <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29>-Methode verwendet.  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Das Zeitintervall, das subtrahiert werden soll.</param>
        <summary>Subtrahiert ein angegebenes Zeitintervall vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt.</summary>
        <returns>Ein Objekt, das gleich der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe minus dem durch <paramref name="value" /> dargestellten Zeitintervall ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.DateTimeOffset.Subtract%2A>-Methode verwenden, um mehr als eine Art Zeitintervall (Tage, Stunden, Minuten, Sekunden oder Millisekunden) in einem einzelnen Vorgang zu subtrahieren. Das Verhalten ist identisch mit der <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29>-Methode, die den Subtraktions Operator definiert. Die <xref:System.DateTimeOffset> Struktur unterstützt auch spezialisierte Additions Methoden (z. b. <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>und <xref:System.DateTimeOffset.AddMinutes%2A>), mit denen Sie die Subtraktion durch Zuweisen eines negativen Werts zum Methoden Parameter durchführen können.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset>-Objekt zurück. Der Wert des aktuellen-Objekts wird nicht geändert, indem dem Datum und der Uhrzeit `timeSpan` hinzugefügt wird.  
  
 Die <xref:System.DateTimeOffset.Subtract%2A>-Methode wirkt sich nicht auf den Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft des <xref:System.DateTimeOffset> Objekts aus. Das zurückgegebene <xref:System.DateTimeOffset>-Objekt hat denselben Offset wie das ursprüngliche-Objekt.  
  
 Da das aktuelle <xref:System.DateTimeOffset> Objekt das Datum und die Uhrzeit in einer bestimmten Zeitzone nicht darstellt, berücksichtigt die <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29>-Methode die Anpassungsregeln einer bestimmten Zeitzone nicht, wenn Sie die Subtraktion ausführt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Subtraktion veranschaulicht, die die <xref:System.DateTimeOffset.Subtract%2A>-Methode verwendet.  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="/dotnet/standard/datetime/performing-arithmetic-operations">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="dateTimeOffset.System.IComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt verglichen werden soll.</param>
        <summary>Vergleicht den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts mit einem anderen Objekt des gleichen Typs.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die angibt, ob das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt kleiner, gleich oder größer als <paramref name="obj" /> ist. Die Rückgabewerte der Methode werden wie folgt interpretiert: 
 <list type="table"><listheader><term> Rückgabewert 
 </term><description> BESCHREIBUNG 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ist kleiner als (liegt vor) <paramref name="obj" />.  
  
 </description></item><item><term> Null 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ist gleich (liegt auf demselben Zeitpunkt wie) <paramref name="obj" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ist größer als (später als) <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit&#xA;override this.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization : obj -&gt; unit" Usage="dateTimeOffset.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization sender" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="sender">Das Objekt, das den Rückruf initiiert hat. Die Funktionen für diesen Parameter sind derzeit nicht implementiert.</param>
        <summary>Wird ausgeführt, wenn die Deserialisierung eines Objekts abgeschlossen ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dateTimeOffset.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info">Das -Objekt, das mit Daten aufgefüllt werden soll.</param>
        <param name="context">Das Ziel dieser Serialisierung (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Füllt ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den für das Serialisieren des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts erforderlichen Daten.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="info" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Ticks ab, die das Datum und die Uhrzeit des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in Systemzeit darstellt.</summary>
        <value>Die Anzahl der Ticks in der Uhrzeit des <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Ticks%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Der Wert der <xref:System.DateTimeOffset.Ticks%2A>-Eigenschaft stellt die Anzahl der 100-Nanosekunden-Intervalle dar, die seit dem 1. Januar 0001 (dem Wert von <xref:System.DateTimeOffset.MinValue>) seit 12:00:00 Mitternacht verstrichen sind. Es sind keine Ticks enthalten, die durch Schaltsekunden hinzugefügt werden. Eine Nanosekunden ist ein Milliardstel einer Sekunde. pro Sekunde sind 10 Millionen Ticks vorhanden. Der Wert der <xref:System.DateTimeOffset.Ticks%2A>-Eigenschaft liegt zwischen `DateTimeOffset.MinValue.Ticks` und `DateTimeOffset.MaxValue.Ticks`.  
  
 Sie können die Anzahl der Ticks einem <xref:System.DateTimeOffset> Objekt zuweisen, indem Sie die <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29>-Konstruktorüberladung verwenden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.DateTimeOffset>-Objekt initialisiert, indem die Anzahl der Ticks am 1. Juli 2008 1:23:07. Anschließend werden das Datum und die Anzahl der Ticks, die durch dieses Datum dargestellt werden, in der Konsole angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Uhrzeit für das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ab.</summary>
        <value>Das Zeitintervall des aktuellen Datums, das seit Mitternacht verstrichen ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.TimeOfDay%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Die <xref:System.DateTimeOffset.TimeOfDay%2A>-Eigenschaft gibt die Zeitkomponente eines <xref:System.DateTimeOffset>-Objekts in Form eines <xref:System.TimeSpan>-Objekts zurück. Dies entspricht der <xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType>-Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.TimeOfDay%2A>-Eigenschaft verwendet, um die Uhrzeit zu extrahieren und in der Konsole anzuzeigen.  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in eine Windows-Dateizeit.</summary>
        <returns>Der Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als Windows-Dateizeit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n/s verstrichen sind. unserer Zeitrechnung Koordinierte Weltzeit (UTC). Windows verwendet eine Dateizeit, um aufzuzeichnen, wann eine Anwendung eine Datei erstellt, zugreift oder in eine Datei schreibt.  
  
 Die <xref:System.DateTimeOffset.ToFileTime%2A>-Methode konvertiert das Datum und die Uhrzeit des aktuellen <xref:System.DateTimeOffset> Objekts in die UTC, bevor die Konvertierung durchführt. Das heißt, dass das Aufrufen der <xref:System.DateTimeOffset.ToFileTime%2A>-Methode dem folgenden Methodenaufruf entspricht:  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die resultierende Dateizeit stellt ein Datum und eine Uhrzeit vor dem 1. Januar 1601 u. Z. 00:00 Uhr dar. koordinierter Weltzeit (UTC).</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt in ein <see cref="T:System.DateTimeOffset" />-Objekt, das die Ortszeit darstellt.</summary>
        <returns>Ein Objekt, das die in Ortszeit konvertierte Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung in die Ortszeit konvertiert die-Methode zuerst das Datum und die Uhrzeit des aktuellen <xref:System.DateTimeOffset> Objekts in die koordinierte Weltzeit (UTC), indem der Offset von der Zeit abgezogen wird. Anschließend wird das UTC-Datum und die UTC-Zeit in die Ortszeit konvertiert, indem der lokale Zeit Zonen Offset hinzugefügt wird. Dabei werden alle Anpassungsregeln für die lokale Zeitzone berücksichtigt.  
  
 Sowohl der Wert des aktuellen <xref:System.DateTimeOffset>-Objekts als auch der Wert des <xref:System.DateTimeOffset> Objekts, das vom-Methodenaufruf zurückgegeben wird, stellen denselben Zeitpunkt dar. Das heißt, wenn beide an die <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>-Methode übermittelt werden, gibt die Methode `true`zurück.  
  
 Wenn die Konvertierung eine Zeit verursacht, die außerhalb des Bereichs des <xref:System.DateTimeOffset> Typs liegt, gibt die <xref:System.DateTimeOffset.ToLocalTime%2A>-Methode ein <xref:System.DateTimeOffset>-Objekt zurück, dessen Datum und Uhrzeit entweder auf <xref:System.DateTimeOffset.MaxValue> oder <xref:System.DateTimeOffset.MinValue> festgelegt sind und der Offset auf den lokalen Zeit Zonen Offset festgelegt ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ToLocalTime%2A>-Methode verwendet, um einen <xref:System.DateTimeOffset>-Wert in die lokale Zeit in der Pacific Standard Time-Zone zu konvertieren. Außerdem wird die Unterstützung der Methode für die Anpassungsregeln der lokalen Zeitzone veranschaulicht.  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">Der Offset, in den der <see cref="T:System.DateTimeOffset" />-Wert konvertiert werden soll.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in die durch einen Offsetwert angegebene Datums- und Uhrzeitangabe.</summary>
        <returns>Ein Objekt, das gleich dem ursprünglichen <see cref="T:System.DateTimeOffset" />-Objekt ist (d. h. die zugehörigen <see cref="M:System.DateTimeOffset.ToUniversalTime" />-Methoden geben identische Zeitpunkte zurück), dessen <see cref="P:System.DateTimeOffset.Offset" />-Eigenschaft jedoch auf <paramref name="offset" /> festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.ToOffset%2A>-Methode ist eine Alternative zum Aufrufen der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>-Methode. Dies kann nützlich sein, um einfache Konvertierungen von einer Zeitzone in eine andere durchzuführen, wenn die Offsets der Zeitzonen von koordinierter Weltzeit (UTC) bekannt sind. Da weder das ursprüngliche <xref:System.DateTimeOffset> Objekt noch das neue <xref:System.DateTimeOffset> Objekt, das durch den Methodenaufruf zurückgegeben wird, eindeutig mit einer bestimmten Zeitzone verknüpft ist, wendet die Methode keine Zeit Zonen Anpassungsregeln in der Konvertierung an.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.DateTimeOffset.ToOffset%2A>-Methode verwendet wird, um ein <xref:System.DateTimeOffset> Objekt in ein <xref:System.DateTimeOffset>-Objekt mit einem anderen Offset zu konvertieren.  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <see cref="T:System.DateTimeOffset" />-Wert des sich ergebenden <see cref="P:System.DateTimeOffset.DateTime" />-Objekts liegt vor <see cref="F:System.DateTimeOffset.MinValue" />.  
  
Oder 
Der <see cref="T:System.DateTimeOffset" />-Wert des sich ergebenden <see cref="P:System.DateTimeOffset.DateTime" />-Objekts liegt nach <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> ist kleiner als -14 Stunden.  
  
Oder 
 <paramref name="offset" /> ist größer als 14 Stunden.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Eine Zeichenfolgendarstellung eines <see cref="T:System.DateTimeOffset" />-Objekts, die den am Ende der Zeichenfolge angefügten Offset einschließt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert dieser Methode ist identisch mit dem der <xref:System.DateTime.ToString?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass Sie ein Leerzeichen gefolgt von dem am Ende der Zeichenfolge angefügten Offset enthält. Das heißt, die Ausgabe wird mit dem kurzen Datums Muster, dem langen Zeitmuster und der `zzz` benutzerdefinierten Format Zeichenfolge formatiert, wobei jedes Element durch ein Leerzeichen vom vorherigen Element getrennt ist. Wenn <xref:System.DateTime.ToString?displayProperty=nameWithType> z. b. den Wert 1/12/2008 6:15:50 pm zurückgibt, gibt <xref:System.DateTimeOffset.ToString> den Wert 1/12/2008 6:15:50 pm-08:00 für einen Zeitraum zurück, der acht Stunden hinter der koordinierten Weltzeit (UTC) liegt.  
  
 Diese Methode verwendet Formatierungsinformationen, die von der aktuellen Kultur abgeleitet werden. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A>. Andere über Ladungen der <xref:System.DateTimeOffset.ToString%2A>-Methode ermöglichen es Ihnen, die Kultur anzugeben, deren Formatierung verwendet werden soll, und das Ausgabemuster des <xref:System.DateTimeOffset> Werts zu definieren.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.ToString>-Methode und zeigt die Ausgabe in einem System an, dessen aktuelle Kultur en-US ist.  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die von dem Kalender unterstützt werden, der von der aktuellen Kultur verwendet wird.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTimeOffset.ToString" />-Methode gibt die Zeichen folgen Darstellung des Datums und der Uhrzeit im Kalender zurück, der von der aktuellen Kultur verwendet wird. Wenn der Wert der aktuellen <see cref="T:System.DateTimeOffset" /> Instanz früher als <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder höher als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />ist, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />aus. Dies wird im folgenden Beispiel veranschaulicht. Es wird versucht, ein Datum zu formatieren, das außerhalb des Bereichs der <see cref="T:System.Globalization.HijriCalendar" /> Klasse liegt, wenn die aktuelle Kultur Arabisch (Syrien) ist.  
  
[! Code-csharp[System. DateTimeOffset. ToString. ArgumentOutOfRangeException # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [! Code-vb[System. DateTimeOffset. ToString. ArgumentOutOfRangeException # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts entsprechend den Angaben in <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert dieser Methode ist identisch mit der entsprechenden Überladung der <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> Methode, mit dem Unterschied, dass Sie ein Leerzeichen gefolgt von dem am Ende der Zeichenfolge angefügten Offset enthält. Das heißt, die Ausgabe wird mit dem kurzen Datums Muster, dem langen Zeitmuster und der `zzz` benutzerdefinierten Format Zeichenfolge formatiert, wobei jedes Element durch ein Leerzeichen vom vorherigen Element getrennt ist.  
  
 Das Format dieser drei Elemente wird durch den `formatProvider`-Parameter definiert. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, deren Formatierungs Konventionen auf die zurückgegebene Zeichenfolge angewendet werden. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatProvider` `null`ist, wird das <xref:System.Globalization.DateTimeFormatInfo>-Objekt verwendet, das der aktuellen Kultur zugeordnet ist (siehe <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.DateTimeOffset> Objekt mit <xref:System.Globalization.CultureInfo> Objekten angezeigt, die die invariante Kultur darstellen, sowie vier weitere Kulturen.  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die vom Kalender unterstützt werden, der von <paramref name="formatProvider" /> verwendet wird.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />-Methode gibt die Zeichen folgen Darstellung des Datums und der Uhrzeit in dem Kalender zurück, der von der durch den <paramref name="formatProvider" />-Parameter dargestellten Kultur verwendet wird. Der Kalender wird durch die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />-Eigenschaft definiert. Wenn der Wert der aktuellen <see cref="T:System.DateTimeOffset" /> Instanz früher als <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder höher als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />ist, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />aus. Dies wird im folgenden Beispiel veranschaulicht. Es wird versucht, ein Datum zu formatieren, das außerhalb des Bereichs der <see cref="T:System.Globalization.JapaneseCalendar" /> Klasse liegt.  
  
[! Code-csharp[System. DateTimeOffset. ToString. ArgumentOutOfRangeException # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [! Code-vb[System. DateTimeOffset. ToString. ArgumentOutOfRangeException # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Eine Formatzeichenfolge.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts unter Verwendung des angegebenen Formats in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts entsprechend den Angaben in <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `format`-Parameter muss entweder ein einzelnes formatspezifiziererzeichen (siehe Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings)) oder ein benutzerdefiniertes Format Muster (siehe benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings)) enthalten, das das Format der zurückgegebenen Zeichenfolge definiert. Wenn `format` eine NULL-Zeichenfolge oder eine leere Zeichenfolge ("") ist, wird der <xref:System.DateTimeOffset> Wert mit dem Standardformat ausgegeben.  
  
 In der folgenden Tabelle wird die genaue Ausführung bestimmter Format Bearbeiter bei der Verwendung mit <xref:System.DateTimeOffset>angezeigt. Dies unterscheidet sich von Ihrem Verhalten bei der Verwendung mit <xref:System.DateTime>.  
  
|Vorhandener Format Bezeichner|Neues Verhalten|  
|-------------------------------|------------------|  
|"K"|Dient zum Roundtrip für ein Datum und eine Uhrzeit. Mit <xref:System.DateTimeOffset>wird "zzz" zugeordnet (der Offset wird immer mit Stunden und Minuten angezeigt). Beachten Sie, dass "K" ein benutzerdefinierter Format Bezeichner ist. Er darf nicht als einzelnes Zeichen in `format`erscheinen.|  
|"U"|Wird nicht unterstützt.|  
|"r"|Konvertiert das <xref:System.DateTimeOffset> Objekt in eine koordinierte Weltzeit (UTC) und gibt es mithilfe der benutzerdefinierten Format Zeichenfolge `ddd, dd MMM yyyy HH:mm:ss GMT`aus.|  
|"u"|Konvertiert das <xref:System.DateTimeOffset> Objekt in UTC und gibt es mit dem Format `yyyy-MM-dd HH:mm:ssZ`aus.|  
  
 Die verbleibenden Standardformat Bearbeiter für Datum und Uhrzeit Verhalten sich identisch mit der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode, wie Sie bei der <xref:System.DateTime.ToString%2A>-Methode der Fall ist.  
  
 Diese Methode verwendet Formatierungsinformationen, die von der aktuellen Kultur abgeleitet werden. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.DateTimeOffset> Objekt der Konsole mit jedem der Standardformat Bearbeiter für Datum und Uhrzeit angezeigt. Die Ausgabe wird mit der Kultur "en-US" formatiert.  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Die Länge des <paramref name="format" /> ist 1, und es ist keines der standardmäßigen Formatbezeichnerzeichen, die für <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiert sind.  
  
Oder 
 <paramref name="format" /> enthält kein gültiges benutzerdefiniertes Formatmuster.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die von dem Kalender unterstützt werden, der von der aktuellen Kultur verwendet wird.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTimeOffset.ToString(System.String)" />-Methode gibt die Zeichen folgen Darstellung des Datums und der Uhrzeit im Kalender zurück, der von der aktuellen Kultur verwendet wird. Wenn der Wert der aktuellen <see cref="T:System.DateTimeOffset" /> Instanz früher als <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder höher als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />ist, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />aus. Dies wird im folgenden Beispiel veranschaulicht. Es wird versucht, ein Datum zu formatieren, das außerhalb des Bereichs der <see cref="T:System.Globalization.HebrewCalendar" /> Klasse liegt, wenn die aktuelle Kultur Hebräisch (Israel) ist.  
  
[! Code-csharp[System. DateTimeOffset. ToString. ArgumentOutOfRangeException # 3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [! Code-vb[System. DateTimeOffset. ToString. ArgumentOutOfRangeException # 3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Eine Formatzeichenfolge.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts unter Verwendung des angegebenen Formats sowie der kulturabhängigen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts wie von <paramref name="format" /> und <paramref name="provider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `format`-Parameter muss entweder ein einzelnes formatspezifiziererzeichen (siehe Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings)) oder ein benutzerdefiniertes Format Muster (siehe benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings)) enthalten. Wenn `format` eine NULL-Zeichenfolge oder eine leere Zeichenfolge ("") ist, wird das <xref:System.DateTimeOffset> Objekt mit dem Standardformat ausgegeben.  
  
 In der folgenden Tabelle wird die genaue Ausführung bestimmter Format Bearbeiter bei der Verwendung mit <xref:System.DateTimeOffset>angezeigt. Dies unterscheidet sich von Ihrem Verhalten bei der Verwendung mit <xref:System.DateTime>.  
  
|Vorhandener Format Bezeichner|Neues Verhalten|  
|-------------------------------|------------------|  
|"K"|Dient zum Roundtrip für ein Datum und eine Uhrzeit. Mit <xref:System.DateTimeOffset>wird "zzz" zugeordnet (der Offset wird immer mit Stunden und Minuten angezeigt). Beachten Sie, dass "K" ein benutzerdefinierter Format Bezeichner ist. Er darf nicht als einzelnes Zeichen in `format`erscheinen.|  
|"U"|Wird nicht unterstützt.|  
|"r"|Konvertiert das <xref:System.DateTimeOffset> Objekt in eine koordinierte Weltzeit (UTC) und gibt es mithilfe der benutzerdefinierten Format Zeichenfolge `ddd, dd MMM yyyy HH:mm:ss GMT`aus.|  
|"u"|Konvertiert den <xref:System.DateTimeOffset> Wert in UTC und gibt ihn mit dem Format `yyyy-MM-dd HH:mm:ssZ`aus.|  
  
 Die verbleibenden Standardformat Bearbeiter für Datum und Uhrzeit Verhalten sich identisch mit der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode, wie Sie bei der <xref:System.DateTime.ToString%2A>-Methode der Fall ist.  
  
 Das Muster, das Standardformat Bezeichnernamen entspricht, sowie die Symbole und Namen von Datums-und Uhrzeit Komponenten, wird durch den `formatProvider`-Parameter definiert. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, deren Formatierung in `input`verwendet wird. Das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegebene <xref:System.Globalization.DateTimeFormatInfo> Objekt definiert die in `input`verwendete Formatierung.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatProvider` `null`ist, wird das <xref:System.Globalization.DateTimeFormatInfo>-Objekt verwendet, das der aktuellen Kultur zugeordnet ist (siehe <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29>-Methode verwendet, um ein <xref:System.DateTimeOffset>-Objekt mit einer benutzerdefinierten Format Zeichenfolge für verschiedene Kulturen anzuzeigen.  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Die Länge des <paramref name="format" /> ist 1, und es ist keines der standardmäßigen Formatbezeichnerzeichen, die für <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiert sind.  
  
Oder 
 <paramref name="format" /> enthält kein gültiges benutzerdefiniertes Formatmuster.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die vom Kalender unterstützt werden, der von <paramref name="formatProvider" /> verwendet wird.</exception>
        <block subset="none" type="usage"><para>Die <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />-Methode gibt die Zeichen folgen Darstellung des Datums und der Uhrzeit im Kalender zurück, der vom <paramref name="formatProvider" />-Parameter verwendet wird. Der Kalender wird durch die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />-Eigenschaft definiert. Wenn der Wert der aktuellen <see cref="T:System.DateTimeOffset" /> Instanz früher als <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder höher als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />ist, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />aus. Dies wird im folgenden Beispiel veranschaulicht. Es wird versucht, ein Datum zu formatieren, das außerhalb des Bereichs der <see cref="T:System.Globalization.UmAlQuraCalendar" /> Klasse liegt.  
  
[! Code-csharp[System. DateTimeOffset. ToString. ArgumentOutOfRangeException # 4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [! Code-vb[System. DateTimeOffset. ToString. ArgumentOutOfRangeException # 4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/">Beispiel: .net Core-Hilfsprogramm zur FormatierungC#von WinForms ()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/">Beispiel: .net Core-Hilfsprogramm für die WinForms-Formatierung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt in einen <see cref="T:System.DateTimeOffset" />-Wert, der die Coordinated Universal Time (UTC) darstellt.</summary>
        <returns>Ein Objekt, das die in Coordinated Universal Time (UTC) konvertierte Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt ein <xref:System.DateTimeOffset> Objekt zurück, dessen <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft auf NULL festgelegt ist.  
  
 Sowohl der Wert des aktuellen <xref:System.DateTimeOffset>-Objekts als auch der Wert des <xref:System.DateTimeOffset> Objekts, das vom-Methodenaufruf zurückgegeben wird, stellen denselben Zeitpunkt dar. Das heißt, wenn beide an die <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>-Methode übermittelt werden, gibt die Methode `true`zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ToUniversalTime%2A>-Methode aufgerufen, um eine lokale Uhrzeit und einige andere Male in eine koordinierte Weltzeit (UTC) zu konvertieren.  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Anzahl der Millisekunden zurück, die seit dem 1. Januar 1970 um 00:00:00.000Z verstrichen sind.</summary>
        <returns>Die Anzahl der Millisekunden, die seit dem 1. Januar 1970 um 00:00:00.000Z verstrichen sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die UNIX-Zeit gibt die Anzahl der Sekunden an, die seit 1970-01-01t00:00:00Z (1. Januar 1970, 12:00 Uhr UTC) verstrichen sind. Es nimmt keine Schaltsekunden in Rechnung. Diese Methode gibt die Anzahl der Millisekunden in der Unix-Zeit zurück.  
  
 Diese Methode konvertiert zuerst die aktuelle Instanz in UTC, bevor die Anzahl der Millisekunden in der Unix-Zeit zurückgegeben wird. Für Datums-und Uhrzeitwerte vor 1970-01-01t00:00:00Z gibt diese Methode einen negativen Wert zurück.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Anzahl der Sekunden zurück, die seit dem 1. Januar 1970 um 00:00:00Z verstrichen sind.</summary>
        <returns>Die Anzahl der Sekunden, die seit dem 1. Januar 1970 um 00:00:00Z verstrichen sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die UNIX-Zeit gibt die Anzahl der Sekunden an, die seit 1970-01-01t00:00:00Z (1. Januar 1970, 12:00 Uhr UTC) verstrichen sind. Es nimmt keine Schaltsekunden in Rechnung.  
  
 Diese Methode konvertiert zuerst die aktuelle Instanz in UTC, bevor die zugehörige Unix-Zeit zurückgegeben wird. Für Datums-und Uhrzeitwerte vor 1970-01-01t00:00:00Z gibt diese Methode einen negativen Wert zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A>-Methode aufgerufen, um die UNIX-Zeit der Werte zurückzugeben, die gleich sind, kurz vor und kurz nach dem 1970-01-01t00:00:00Z.  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider formatProvider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="destination">Nach Ausführung dieser Methode wird der Wert dieser Instanz als Zeichenspanne formatiert.</param>
        <param name="charsWritten">Nach Ausführung dieser Methode die Anzahl der in <paramref name="destination" /> geschriebenen Zeichen.</param>
        <param name="format">Eine Spanne, die die Zeichen enthält, die eine standardmäßig festgelegte oder benutzerdefinierte Formatzeichenfolge darstellen, die das akzeptable Format für <paramref name="destination" /> definiert.</param>
        <param name="formatProvider">Ein optionales Objekt, das kulturspezifische Formatierungsinformationen für <paramref name="destination" /> bereitstellt</param>
        <summary>Versucht, den Wert der aktuellen datetime-Versatzinstanz in die angegebene Zeichenspanne zu formatieren.</summary>
        <returns><see langword="true" />, wenn die Formatierung erfolgreich war, andernfalls <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert eine angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in den entsprechenden <see cref="T:System.DateTimeOffset" />.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenspanne, die zu konvertierende Datums- und Uhrzeitwerte darstellt.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" /> zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <paramref name="input" />-Parameter <see langword="null" /> ist oder keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Versucht, eine angegebene Spannendarstellung einer Datums- und Uhrzeitangabe in deren <see cref="T:System.DateTimeOffset" />-Entsprechung zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
        <returns><see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" /> zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <paramref name="input" />-Parameter <see langword="null" /> ist oder keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Versucht, eine angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in deren <see cref="T:System.DateTimeOffset" />-Entsprechung zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
        <returns><see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung der <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>-Methode ähnelt der <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass keine Ausnahme ausgelöst wird, wenn bei der Konvertierung ein Fehler auftritt. Es analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen voneinander getrennt sind. Diese drei Elemente sind in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Zeit >|"1:02:03 Uhr"|  
|\<Offset >|"-7:30"|  
  
 Obwohl jedes dieser Elemente optional ist, kann \<Offset > nicht allein angezeigt werden. Es muss entweder \<Datum > oder \<Zeit > bereitgestellt werden. Wenn \<Datum > fehlt, ist der Standardwert der aktuelle Tag. Wenn \<Date > vorhanden ist, die Jahr Komponente jedoch nur aus zwei Ziffern besteht, wird Sie basierend auf dem Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>-Eigenschaft in ein Jahr im aktuellen Kalender der aktuellen Kultur konvertiert. Wenn \<Zeit > fehlt, ist der Standardwert 12:00:00 Uhr. Wenn \<Offset > fehlt, ist der Standardwert der Offset der lokalen Zeitzone. Wenn \<Offset > vorhanden ist, kann Sie entweder einen negativen oder einen positiven Offset von der koordinierten Weltzeit (UTC) darstellen. In beiden Fällen muss \<Offset > ein Vorzeichen Symbol enthalten, oder die Methode gibt `false`zurück.  
  
 Die `input` Zeichenfolge wird mithilfe der Formatierungsinformationen in einem <xref:System.Globalization.DateTimeFormatInfo>-Objekt analysiert, das für die aktuelle Kultur initialisiert wird. Verwenden Sie die <xref:System.DateTimeOffset.TryParseExact%2A>-Methode, und geben Sie einen Format Bezeichner an, um eine Zeichenfolge zu analysieren, die die festgelegte Formatierung enthält, die nicht notwendigerweise mit der aktuellen Kultur übereinstimmt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29>-Methode aufgerufen, um mehrere Zeichen folgen mit verschiedenen Datums-und Uhrzeit Formaten zu analysieren.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-cs/">Beispiel: .net Core-Hilfsprogramm zur FormatierungC#von WinForms ()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/windowsforms-formatting-utility-vb/">Beispiel: .net Core-Hilfsprogramm für die WinForms-Formatierung (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenspanne, die zu konvertierende Datums- und Uhrzeitwerte darstellt.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" />-Wert zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung fehlgeschlagen ist. Die Konvertierung schlägt fehl, wenn der <paramref name="input" />-Parameter <see langword="null" /> ist oder keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Versucht, eine angegebene Spannendarstellung einer Datums- und Uhrzeitangabe in deren <see cref="T:System.DateTimeOffset" />-Entsprechung zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
        <returns><see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" />-Wert zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung fehlgeschlagen ist. Die Konvertierung schlägt fehl, wenn der <paramref name="input" />-Parameter <see langword="null" /> ist oder keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Versucht, eine angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in deren <see cref="T:System.DateTimeOffset" />-Entsprechung zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
        <returns><see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung der <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>-Methode ähnelt der <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass keine Ausnahme ausgelöst wird, wenn bei der Konvertierung ein Fehler auftritt. Die-Methode analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen voneinander getrennt sind. Diese drei Elemente sind in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Zeit >|"1:02:03 Uhr"|  
|\<Offset >|"-7:30"|  
  
 Obwohl jedes dieser Elemente optional ist, kann \<Offset > nicht allein angezeigt werden. Es muss entweder \<Datum > oder \<Zeit > bereitgestellt werden. Wenn \<Datum > fehlt, ist der Standardwert der aktuelle Tag. Wenn \<Date > vorhanden ist, die Jahres Komponente jedoch nur aus zwei Ziffern besteht, wird Sie basierend auf dem Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft in ein Jahr im aktuellen Kalender des `provider` Parameters konvertiert. Wenn \<Zeit > fehlt, ist der Standardwert 12:00:00 Uhr. Wenn \<Offset > fehlt, ist der Standardwert der Offset der lokalen Zeitzone oder <xref:System.TimeSpan.Zero>, wenn der Wert für <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> oder <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> in `styles`angegeben ist. Wenn \<Offset > vorhanden ist, kann Sie entweder einen negativen oder einen positiven Offset von der koordinierten Weltzeit (UTC) darstellen. In beiden Fällen muss \<Offset > ein Vorzeichen Symbol enthalten, oder die Methode gibt `false`zurück.  
  
 Die `input` Zeichenfolge wird mithilfe der kulturspezifischen Formatierungsinformationen in einem <xref:System.Globalization.DateTimeFormatInfo> Objekt analysiert, das vom `formatProvider`-Parameter bereitgestellt wird. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, deren Formatierung in `input`verwendet wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert das Format, das in `input`verwendet wird.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Darüber hinaus kann jedes Element durch führende oder nachfolgende Leerzeichen getrennt werden, und das \<Datum > und \<Zeit > Komponenten können innere Leerräume (z. b. 6:00:00) enthalten. Nur die \<Offset > Komponente darf keine inneren Leerräume enthalten.  
  
 Wenn `provider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Das positive oder negative Vorzeichen, das in \<Offset > verwendet wird, muss entweder + oder-sein. Sie wird nicht durch die Eigenschaften <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> oder <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> des <xref:System.Globalization.NumberFormatInfo> Objekts definiert, das von der <xref:System.Globalization.CultureInfo.NumberFormat%2A>-Eigenschaft des `formatprovider`-Parameters zurückgegeben wurde.  
  
 Die folgenden Member der <xref:System.Globalization.DateTimeStyles>-Enumeration werden unterstützt:  
  
|DateTimeStyles-Member|Kommentare|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert die durch `input` dargestellte Zeichenfolge und konvertiert Sie ggf. in UTC. Dies entspricht dem Initialisieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime> Methode des zurückgegebenen Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Innere Leerräume sind in den \<Datums > und \<Zeit > Komponenten zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Vor jeder Komponente in der analysierten Zeichenfolge sind führende Leerzeichen zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert. Nachfolgende Leerzeichen sind vor jeder Komponente in der analysierten Zeichenfolge zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Dies ist das Standardverhalten. Sie kann nicht überschrieben werden, indem eine restriktivere <xref:System.Globalization.DateTimeStyles> Enumerationswert bereitgestellt wird, z. b. <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass der Offset der lokalen Zeitzone angegeben werden soll, wenn dem `input`-Parameter ein \<Offset >-Element fehlt. Dies ist das Standardverhalten der <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>-Methode.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass der UTC-Offset (00:00) bereitgestellt werden soll, wenn dem `input`-Parameter kein \<Offset >-Element fehlt.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl der Wert gültig ist, wird dieser Wert ignoriert und hat keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält, hat dieser Wert keine Auswirkung.|  
  
 Nur der <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType>-Wert wird nicht unterstützt. Eine <xref:System.ArgumentException> wird ausgelöst, wenn dieser Wert im `styles`-Parameter enthalten ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>-Methode mit einer Vielzahl von <xref:System.Globalization.DateTimeStyles> Werten aufgerufen, um einige Zeichen folgen mit verschiedenen Datums-und Uhrzeit Formaten zu analysieren.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
Oder 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
  
Oder 
 <paramref name="styles" /> beinhaltet sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die <see cref="T:System.DateTimeOffset" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss einem angegebenen Format genau entsprechen.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenspanne, die zu konvertierende Datums- und Uhrzeitwerte darstellt.</param>
        <param name="format">Ein Formatbezeichner, der das erforderliche Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" />-Wert zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn</param>
        <summary>Konvertiert die Darstellung einer Datums- und Uhrzeitangabe in einem Zeichenbereich unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in den entsprechenden <see cref="T:System.DateTimeOffset" />. Das Format der Darstellung von Datum und Uhrzeit muss dem angegebenen Format genau entsprechen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Diese Überladung ähnelt der <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass diese Methode keine Ausnahme auslöst, wenn bei der Konvertierung ein Fehler auftritt. Es analysiert die Darstellung eines Datums und einer Uhrzeit, die exakt mit dem Muster übereinstimmen müssen, das durch den `format`-Parameter angegeben wird. Wenn `input` diesem Muster nicht entspricht und einige mögliche Variationen des Leerraums durch den `styles`-Parameter definiert sind, schlägt der Verarbeitungsvorgang fehl, und die Methode gibt `false`zurück.  
  
Der `format`-Parameter ist eine Zeichen Spanne, die entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthält, die das erforderliche `input`Muster definieren. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn `format` die benutzerdefinierten Format Bearbeiter `z`, `zz`oder `zzz` enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, schlägt der Verarbeitungsvorgang fehl, und die Methode gibt `false`zurück.  
  
Wenn `format` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn `format` nicht erfordert, dass `input` einen Offset enthalten, hängt der Offset des resultierenden <xref:System.DateTimeOffset> Objekts vom Wert des `styles`-Parameters ab. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal>enthält, wird der Offset der lokalen Zeitzone dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeUniversal>enthält, wird der koordinierte Weltzeit (UTC) oder + 00:00 dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn kein Wert angegeben ist, wird der Offset der lokalen Zeitzone verwendet.  
  
Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert. Das gleiche gilt für das genaue Muster von `input`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die in `input`zulässigen Symbole und Standardformate.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter definiert, ob Leerzeichen in der Eingabe Zeichenfolge zulässig sind, gibt an, wie Zeichen folgen ohne explizite Offset Komponente analysiert werden, und unterstützt die UTC-Konvertierung als Teil des Analyse Vorgangs. Alle Member der <xref:System.Globalization.DateTimeStyles> Enumeration werden mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>unterstützt. In der folgenden Tabelle sind die Auswirkungen der einzelnen unterstützten Member aufgeführt.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und konvertiert Sie ggf. in UTC. Dies entspricht der Verarbeitung einer Datums-und Uhrzeit Darstellung und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>-Methode des zurückgegebenen <xref:System.DateTimeOffset> Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `format` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den Offset der lokalen Zeitzone. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `format` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den UTC-Offset (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht `input` das Einschließen von inneren Leerraum, der nicht durch das Format angegeben wird. Zusätzliche Leerräume können zwischen Datums-und Uhrzeit Komponenten und innerhalb einzelner Komponenten, außer dem Offset, angezeigt werden und werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht `input` das Einschließen von führenden Leerzeichen, die nicht durch `format`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht `input` das Einschließen von nachfolgenden Leerzeichen, die nicht durch `format`angegeben werden Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht `input` das Einschließen von führenden, nachfolgenden und inneren Leerzeichen, die nicht durch `format`angegeben werden. Alle zusätzlichen Leerzeichen, die nicht in `format` angegeben sind, werden beim Auswerten der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerzeichen in `input`nicht zulässig sind. Leerraum muss genau wie in `format`angegeben angezeigt werden. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkung, da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält.|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
oder <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
oder <paramref name="styles" /> enthält sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenspanne, die zu konvertierende Datums- und Uhrzeitwerte darstellt.</param>
        <param name="formats">Ein Array von standardmäßigen oder benutzerdefinierten Formatierungszeichenfolgen, die die zulässigen Formate von <paramref name="input" /> definieren.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" />-Wert zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn</param>
        <summary>Konvertiert die Darstellung einer Datums- und Uhrzeitangabe in einem Zeichenbereich unter Verwendung der Angaben über Formate, kulturabhängige Formatierungsinformationen und Stil in den entsprechenden <see cref="T:System.DateTimeOffset" />. Das Format der Darstellung von Datum und Uhrzeit muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
Diese Methode analysiert die Zeichen folgen Darstellung eines Datums, das mit einem der Muster übereinstimmt, die dem `formats` Array zugewiesen sind. Wenn `input` keines dieser Muster mit den vom `styles`-Parameter definierten Variationen abgleichen, schlägt der Verarbeitungsvorgang fehl, und die Methode gibt `false`zurück. Abgesehen vom Vergleich von `input` mit mehreren Zeichen folgen, die Format Bearbeiter enthalten, verhält sich diese Überladung identisch mit der <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType>-Methode.  
  
 Der `formats`-Parameter ist ein Zeichen folgen Array, dessen Elemente entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthalten, die das mögliche Muster von `input`definieren. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn das übereinstimmende Element in `formats` die `z`, `zz`oder `zzz` benutzerdefinierten Format Bearbeiter enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, schlägt der Analyse Vorgang fehl, und die Methode gibt `false`zurück.  
  
> [!IMPORTANT]
>  Wenn Sie den `formats`-Parameter dieser Überladung verwenden, um mehrere Formate anzugeben, können Sie die Frustration vieler Benutzer beim Eintreten von Datums-und Uhrzeitangaben verringern. Die Möglichkeit, mehrere Eingabemuster zu definieren, ermöglicht es einer Anwendung, Datums-und Uhrzeit Darstellungen zu verarbeiten, bei denen führende Nullen in Monaten, Tagen, Stunden, Minuten und Sekunden enthalten sein können oder fehlen. Dies wird in diesem Beispiel veranschaulicht.  
  
 Wenn das übereinstimmende Element in `formats` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn das übereinstimmende Element in `formats` erfordert, dass die Eingabe eine Uhrzeit, aber kein Datum enthält, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset enthalten, hängt der Offset des resultierenden <xref:System.DateTimeOffset> Objekts vom Wert des `styles`-Parameters ab. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>enthält, wird der Offset der lokalen Zeitzone dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>enthält, wird der koordinierte Weltzeit (UTC) oder + 00:00 dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn kein Wert angegeben ist, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmten Datums-und Uhrzeit Symbole, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert. Das gleiche gilt für das genaue Muster von `input`, wenn das übereinstimmende Element von `formats` eine Standardformat Bezeichner-Zeichenfolge ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter definiert, ob Leerzeichen in der Eingabe Zeichenfolge zulässig sind, gibt an, wie Zeichen folgen ohne explizite Offset Komponente analysiert werden, und unterstützt die UTC-Konvertierung als Teil des Analyse Vorgangs. Alle Member der <xref:System.Globalization.DateTimeStyles> Enumeration werden mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>unterstützt. In der folgenden Tabelle sind die Auswirkungen der einzelnen unterstützten Member aufgeführt.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und konvertiert Sie ggf. in UTC. Dies entspricht dem Durchlaufen einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>-Methode des zurückgegebenen <xref:System.DateTimeOffset> Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset Wert enthalten, wird dem zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den UTC-Offset (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht `input` das Einschließen von inneren Leerraum, der nicht von den Elementen in `formats`angegeben wird. Zusätzliche Leerzeichen können zwischen Datums-und Uhrzeit Komponenten und innerhalb einzelner Komponenten (mit Ausnahme des Offsets) angezeigt werden und werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht `input` das Einschließen von führenden Leerzeichen, die nicht von den Elementen in `formats`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht `input` das Einschließen von nachfolgenden Leerzeichen, die nicht von den Elementen in `formats`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht `input` das Einschließen von führenden, nachfolgenden und inneren Leerzeichen, die nicht von den Elementen in `formats`angegeben werden. Alle zusätzlichen Leerzeichen, die nicht im übereinstimmenden Element in `formats` angegeben sind, werden beim Auswerten der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerzeichen in `input`nicht zulässig sind. Leerraum muss genau so angezeigt werden, wie in einem bestimmten Element in `formats` angegeben, damit eine erfolgreiche Übereinstimmung auftritt. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkung, da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
oder <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
oder <paramref name="styles" /> enthält sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erforderliche Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Eingabeformat angibt. Ein häufig angegebener Wert ist <see langword="None" />.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" /> zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung kann nicht durchgeführt werden, wenn der <paramref name="input" />-Parameter den Wert <see langword="null" /> hat oder keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe im von <paramref name="format" /> und <c>provider</c> definierten erwarteten Format enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in die entsprechende <see cref="T:System.DateTimeOffset" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung der <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>-Methode ähnelt der <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode, mit der Ausnahme, dass diese Methode keine Ausnahme auslöst, wenn bei der Konvertierung ein Fehler auftritt. Es analysiert die Zeichen folgen Darstellung eines Datums und einer Uhrzeit, die exakt mit dem durch den `format`-Parameter angegebenen Muster übereinstimmen müssen. Wenn die `input` Zeichenfolge nicht mit diesem Muster identisch ist, und einige mögliche Variationen in Leerzeichen, die durch den `styles`-Parameter definiert sind, schlägt der Verarbeitungsvorgang fehl, und die Methode gibt `false`zurück.  
  
 Der `format`-Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthält, die das erforderliche `input`Muster definieren. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn `format` die benutzerdefinierten Format Bearbeiter `z`, `zz`oder `zzz` enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, schlägt der Verarbeitungsvorgang fehl, und die Methode gibt `false`zurück.  
  
 Wenn `format` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn `format` nicht erfordert, dass `input` einen Offset enthalten, hängt der Offset des resultierenden <xref:System.DateTimeOffset> Objekts vom Wert des `styles`-Parameters ab. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal>enthält, wird der Offset der lokalen Zeitzone dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeUniversal>enthält, wird der koordinierte Weltzeit (UTC) oder + 00:00 dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn kein Wert angegeben ist, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert. Das gleiche gilt für das genaue Muster von `input`, wenn `format` eine Standardformat Bezeichner-Zeichenfolge ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die in `input`zulässigen Symbole und Standardformate.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter definiert, ob Leerzeichen in der Eingabe Zeichenfolge zulässig sind, gibt an, wie Zeichen folgen ohne explizite Offset Komponente analysiert werden, und unterstützt die UTC-Konvertierung als Teil des Analyse Vorgangs. Alle Member der <xref:System.Globalization.DateTimeStyles> Enumeration werden mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>unterstützt. In der folgenden Tabelle sind die Auswirkungen der einzelnen unterstützten Member aufgeführt.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und konvertiert Sie ggf. in UTC. Dies entspricht dem Durchlaufen einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>-Methode des zurückgegebenen <xref:System.DateTimeOffset> Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `format` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den Offset der lokalen Zeitzone. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `format` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den UTC-Offset (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht `input` das Einschließen von inneren Leerraum, der nicht durch das Format angegeben wird. Zusätzliche Leerräume können zwischen Datums-und Uhrzeit Komponenten und innerhalb einzelner Komponenten, außer dem Offset, angezeigt werden und werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht `input` das Einschließen von führenden Leerzeichen, die nicht durch `format`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht `input` das Einschließen von nachfolgenden Leerzeichen, die nicht durch `format`angegeben werden Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht `input` das Einschließen von führenden, nachfolgenden und inneren Leerzeichen, die nicht durch `format`angegeben werden. Alle zusätzlichen Leerzeichen, die nicht in `format` angegeben sind, werden beim Auswerten der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerzeichen in `input`nicht zulässig sind. Leerraum muss genau wie in `format`angegeben angezeigt werden. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkung, da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält.|  
  
## Examples 

 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>-Methode mit standardmäßigen und benutzerdefinierten Format bezeichnerwerten, der invarianten Kultur und verschiedenen <xref:System.Globalization.DateTimeStyles> Werten verwendet, um mehrere Datums-und Uhrzeit Zeichenfolgen zu analysieren.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

Im folgenden Beispiel wird eine Vielzahl von <xref:System.Globalization.DateTimeStyles> Werten verwendet, um ein Array von Zeichen folgen zu analysieren, die erwartungsgemäß [ISO 8601](/dotnet/standard/base-types/standard-date-and-time-format-strings#the-round-trip-o-o-format-specifier)entsprechen. Wie die Ausgabe des Beispiels zeigt, können Zeichen folgen im richtigen Format nicht analysiert werden, wenn:

- Sie enthalten Leerzeichen, und ein entsprechendes <xref:System.Globalization.DateTimeStyles>-Flag (z. b. <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> wurde im Methoden aufrufnicht angegeben.

- Sie enthalten Datums-und Uhrzeit Elemente, die außerhalb des gültigen Bereichs liegen.

Für Zeichen folgen, die keinen UTC-Offset angeben, wird davon ausgegangen, dass Sie den Offset der lokalen Zeitzone aufweisen (in diesem Fall-07:00, der den Offset der Pacific Daylight Time Zone widerspiegelt), es sei denn, das <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>-Flag wird im Methodenaufruf angegeben. In diesem Fall wird davon ausgegangen, dass es sich um eine universelle koordinierte Zeit handelt.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
Oder 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
  
Oder 
 <paramref name="styles" /> beinhaltet sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]gibt der <see cref="Overload:System.DateTimeOffset.TryParseExact" /> <see langword="false" /> zurück, wenn die zu erteilende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formats">Ein Array, das die erwarteten Formate von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Eingabeformat angibt. Ein häufig angegebener Wert ist <see langword="None" />.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" /> zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung kann nicht durchgeführt werden, wenn <paramref name="input" /> keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe enthält oder wenn die enthaltene Datums- und Uhrzeitangabe nicht das von <paramref name="format" /> definierte Format aufweist oder wenn <paramref name="formats" /> den Wert <see langword="null" /> hat. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung des angegebenen Formatarrays, der kulturspezifischen Formatierungsinformationen und des Stils in die <see cref="T:System.DateTimeOffset" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>-Methode analysiert die Zeichen folgen Darstellung eines Datums, das mit einem der Muster übereinstimmt, die dem `formats` Array zugewiesen sind. Wenn die `input` Zeichenfolge mit keinem dieser Muster mit Variationen identisch ist, die durch den `styles`-Parameter definiert sind, schlägt der Verarbeitungsvorgang fehl, und die Methode gibt `false`zurück. Abgesehen vom Vergleich von `input` mit mehreren Zeichen folgen, die Format Bearbeiter enthalten, verhält sich diese Überladung identisch mit der <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>-Methode.  
  
 Der `formats`-Parameter ist ein Zeichen folgen Array, dessen Elemente entweder einen einzelnen Standardformat Bezeichner oder einen oder mehrere benutzerdefinierte Format Bezeichner enthalten, die das mögliche Muster von `input`definieren. Details zu gültigen Formatierungscodes finden Sie unter Standard Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/standard-date-and-time-format-strings) und benutzerdefinierte Format Zeichenfolgen für [Datum und Uhrzeit](/dotnet/standard/base-types/custom-date-and-time-format-strings). Wenn das übereinstimmende Element in `formats` die `z`, `zz`oder `zzz` benutzerdefinierten Format Bearbeiter enthält, um anzugeben, dass ein Offset in `input`vorhanden sein muss, muss dieser Offset entweder ein negatives oder ein positives Vorzeichen enthalten. Wenn das Vorzeichen fehlt, schlägt der Analyse Vorgang fehl, und die Methode gibt `false`zurück.  
  
> [!IMPORTANT]
>  Wenn Sie den `formats`-Parameter dieser Überladung verwenden, um mehrere Formate anzugeben, können Sie die Frustration vieler Benutzer beim Eintreten von Datums-und Uhrzeitangaben verringern. Die Möglichkeit, mehrere Eingabemuster zu definieren, ermöglicht es einer Anwendung, Datums-und Uhrzeit Darstellungen zu verarbeiten, bei denen führende Nullen in Monaten, Tagen, Stunden, Minuten und Sekunden enthalten sein können oder fehlen. Dies wird in diesem Beispiel veranschaulicht.  
  
 Wenn das übereinstimmende Element in `formats` erfordert, dass `input` ein Datum, aber keine Uhrzeit enthalten, wird dem resultierenden <xref:System.DateTimeOffset> Objekt eine Uhrzeit von Mitternacht (0:00:00) zugewiesen. Wenn das übereinstimmende Element in `formats` erfordert, dass die Eingabe eine Uhrzeit, aber kein Datum enthält, wird dem resultierenden <xref:System.DateTimeOffset> Objekt das aktuelle Datum auf dem lokalen System zugewiesen. Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset enthalten, hängt der Offset des resultierenden <xref:System.DateTimeOffset> Objekts vom Wert des `styles`-Parameters ab. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeLocal>enthält, wird der Offset der lokalen Zeitzone dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn `styles` <xref:System.Globalization.DateTimeStyles.AssumeUniversal>enthält, wird der koordinierte Weltzeit (UTC) oder + 00:00 dem <xref:System.DateTimeOffset> Objekt zugewiesen. Wenn kein Wert angegeben ist, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmten Datums-und Uhrzeit Symbole und Zeichen folgen, die in `input` verwendet werden, werden durch den `formatProvider`-Parameter definiert. Das gleiche gilt für das genaue Muster von `input`, wenn das übereinstimmende Element von `formats` eine Standardformat Bezeichner-Zeichenfolge ist. Der `formatProvider`-Parameter kann eine der folgenden Optionen sein:  
  
-   Ein <xref:System.Globalization.CultureInfo>-Objekt, das die Kultur darstellt, basierend auf der `input` interpretiert wird. Das <xref:System.Globalization.DateTimeFormatInfo> Objekt, das von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird, definiert die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo>-Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` `null`ist, wird das <xref:System.Globalization.CultureInfo>-Objekt verwendet, das der aktuellen Kultur entspricht.  
  
 Der `styles`-Parameter definiert, ob Leerzeichen in der Eingabe Zeichenfolge zulässig sind, gibt an, wie Zeichen folgen ohne explizite Offset Komponente analysiert werden, und unterstützt die UTC-Konvertierung als Teil des Analyse Vorgangs. Alle Member der <xref:System.Globalization.DateTimeStyles> Enumeration werden mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>unterstützt. In der folgenden Tabelle sind die Auswirkungen der einzelnen unterstützten Member aufgeführt.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und konvertiert Sie ggf. in UTC. Dies entspricht dem Durchlaufen einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType>-Methode des zurückgegebenen <xref:System.DateTimeOffset> Objekts.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset Wert enthalten, wird dem zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn das übereinstimmende Element in `formats` nicht erfordert, dass `input` einen Offset Wert enthalten, erhält das zurückgegebene <xref:System.DateTimeOffset> Objekt den UTC-Offset (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht `input` das Einschließen von inneren Leerraum, der nicht von den Elementen in `formats`angegeben wird. Zusätzliche Leerzeichen können zwischen Datums-und Uhrzeit Komponenten und innerhalb einzelner Komponenten (mit Ausnahme des Offsets) angezeigt werden und werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht `input` das Einschließen von führenden Leerzeichen, die nicht von den Elementen in `formats`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht `input` das Einschließen von nachfolgenden Leerzeichen, die nicht von den Elementen in `formats`angegeben werden. Diese werden bei der Verarbeitung der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht `input` das Einschließen von führenden, nachfolgenden und inneren Leerzeichen, die nicht von den Elementen in `formats`angegeben werden. Alle zusätzlichen Leerzeichen, die nicht im übereinstimmenden Element in `formats` angegeben sind, werden beim Auswerten der Zeichenfolge ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerzeichen in `input`nicht zulässig sind. Leerraum muss genau so angezeigt werden, wie in einem bestimmten Element in `formats` angegeben, damit eine erfolgreiche Übereinstimmung auftritt. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkung, da die <xref:System.DateTimeOffset> Struktur keine `Kind`-Eigenschaft enthält.|  
  
   
  
## Examples  
 Im folgenden Beispiel werden mehrere Eingabeformate für die Zeichen folgen Darstellung eines Datums-, Uhrzeit-und Offset Werts definiert, und anschließend wird die vom Benutzer eingegebene Zeichenfolge an die <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29>-Methode weitergeleitet.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
Oder 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
  
Oder 
 <paramref name="styles" /> beinhaltet sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
        <block subset="none" type="usage"><para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]gibt der <see cref="Overload:System.DateTimeOffset.TryParseExact" /> <see langword="false" /> zurück, wenn die zu erteilende Zeichenfolge eine Stunden Komponente und einen am/pm-Kenn Zeichner enthält, der nicht in der Vereinbarung ist. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen wird der am/pm-Kenn Zeichner ignoriert.</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Der Wert dieser Konstanten entspricht „00:00:00.0000000 UTC, 1. Januar 1970“ im gregorianischen Kalender. <see cref="F:System.DateTimeOffset.UnixEpoch" /> definiert den Zeitpunkt, zu dem die UNIX-Zeit gleich 0 (null) ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.DateTime" />-Wert ab, der die UTC (Coordinated Universal Time)-Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</summary>
        <value>Die UTC (Coordinated Universal Time)-Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.UtcDateTime%2A>-Eigenschaft führt eine Dual Konvertierung durch:  
  
-   Dabei werden das Datum und die Uhrzeit des aktuellen <xref:System.DateTimeOffset> Objekts in die koordinierte Weltzeit (UTC) konvertiert. Die Konvertierung wird durchgeführt, indem der Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft vom Datum und der Uhrzeit des aktuellen <xref:System.DateTimeOffset> Objekts subtrahieren wird.  
  
-   Der <xref:System.DateTimeOffset>-Wert wird in einen <xref:System.DateTime>-Wert konvertiert.  
  
 Die <xref:System.DateTime.Kind%2A>-Eigenschaft des zurückgegebenen <xref:System.DateTimeOffset.DateTime%2A> Werts wird auf <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>festgelegt.  
  
 Das Abrufen des Werts der <xref:System.DateTimeOffset.UtcDateTime%2A>-Eigenschaft entspricht dem Aufrufen der `ToUniversalTime.DateTime`-Eigenschaft des aktuellen <xref:System.DateTimeOffset> Objekts, mit der Ausnahme, dass die <xref:System.DateTime.Kind%2A>-Eigenschaft des letzteren <xref:System.DateTime> Werts <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie die <xref:System.DateTimeOffset.UtcDateTime%2A>-Eigenschaft verwenden, um einen <xref:System.DateTimeOffset> Wert und die entsprechende UTC-Zeit anzuzeigen.  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.DateTimeOffset" />-Objekt ab, dessen Datum und Uhrzeit auf die aktuelle UTC (Coordinated Universal Time)-Datums- und Uhrzeitangabe festgelegt und dessen Offset <see cref="F:System.TimeSpan.Zero" /> ist.</summary>
        <value>Ein Objekt, dessen Datum und Uhrzeit die aktuelle Coordinated Universal Time (UTC) ist und dessen Offset <see cref="F:System.TimeSpan.Zero" /> ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.UtcNow%2A>-Eigenschaft berechnet die aktuelle universelle koordinierte Zeit (UTC) basierend auf der Uhrzeit des lokalen Systems und einem Offset, der durch die Zeitzone des lokalen Systems definiert wird.  
  
 Die Genauigkeit der Millisekundenkomponente der aktuellen UTC-Zeit hängt von der Auflösung der Systemuhr ab. Unter Windows NT 3.5 und höher sowie unter Windows Vista-Betriebssystemen beträgt die Auflösung der Uhr etwa 10 – 15 Millisekunden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Beziehung zwischen koordinierter Weltzeit (UTC) und Ortszeit.  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Ticks ab, die das Datum und die Uhrzeit des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in Coordinated Universal Time (UTC) darstellt.</summary>
        <value>Die Anzahl der Ticks in der Coordinated Universal Time (UTC) des <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der <xref:System.DateTimeOffset.UtcTicks%2A>-Eigenschaft stellt die Anzahl der 100-Nanosekunden-Intervalle dar, die seit dem 1. Januar 0001 (dem Wert von <xref:System.DateTimeOffset.MinValue>) seit 12:00:00 Mitternacht verstrichen sind. Es sind keine Ticks enthalten, die durch Schaltsekunden hinzugefügt werden. Eine Nanosekunden ist ein Milliardstel einer Sekunde. pro Sekunde sind 10 Millionen Ticks vorhanden. Der Wert der <xref:System.DateTimeOffset.UtcTicks%2A>-Eigenschaft liegt zwischen `DateTimeOffset.MinValue.Ticks` und `DateTimeOffset.MaxValue.Ticks`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Jahreskomponente des Datums ab, das durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Jahreskomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als Ganzzahlwert zwischen 0 und 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Year%2A>-Eigenschaft wird vom Wert der <xref:System.DateTimeOffset.Offset%2A>-Eigenschaft nicht beeinflusst.  
  
 Sie können auch eine Zeichen folgen Darstellung der Year-Komponente eines <xref:System.DateTimeOffset> Objekts erstellen, indem Sie die <xref:System.DateTimeOffset.ToString%2A>-Methode mit den benutzerdefinierten Format Bezeichner"y", "yy" oder "yyyy" aufrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Jahres Komponente eines <xref:System.DateTimeOffset> Werts auf vier verschiedene Arten angezeigt:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Year%2A>-Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "y".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "yy".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29>-Methode mit dem Format Bezeichner "yyyy".  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

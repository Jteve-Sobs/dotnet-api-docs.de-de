<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68a6dc4ee708c62b7b5cebb7b8adef44e1d6efe7" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52737398" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Zeitpunkt relativ zur Coordinated Universal Time (UTC) dar, der normalerweise durch Datum und Uhrzeit dargestellt wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset> Struktur enthält eine <xref:System.DateTime> Wert zusammen mit einer <xref:System.DateTimeOffset.Offset%2A> -Eigenschaft, die den Unterschied zwischen dem aktuellen definiert <xref:System.DateTimeOffset> Instanz Datum und Zeit und koordinierter Weltzeit (UTC). Da genau ein Datum und Uhrzeit relativ zur UTC definiert, der <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Member, als die <xref:System.DateTime> Struktur ist. Es stellt Datums- und Uhrzeitangaben mit Werten, deren UTC von 12:00:00 Mitternacht, 1. Januar 0001 nach Christus (Zeitrechnung), reicht, bis 23:59:59 Uhr, 31. Dezember 9999 n. Chr. (CHRISTLICHE ZEITRECHNUNG).  
  
 Die Zeitkomponente eine <xref:System.DateTimeOffset> Wert wird in so genannten 100-Nanosekunden-Ticks gemessen, und ein bestimmtes Datum wird die Anzahl der Ticks seit 12:00 Mitternacht, 1. Januar 0001 n. Chr. (C.E.) in der <xref:System.Globalization.GregorianCalendar> Kalender. Ein <xref:System.DateTimeOffset> Wert wird immer im Kontext einer expliziten oder Standardkalender angegeben. Ticks, die auf Sekunden leap zurückzuführen sind, sind nicht in die gesamte Anzahl der Ticks enthalten.  
  
> [!NOTE]
>  Wenn Sie mit einem Tickswert arbeiten, Sie in ein anderes Zeitintervall, wie z. B. Minuten oder Sekunden konvertieren möchten, verwenden Sie die <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, oder <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> Konstante, um die Konvertierung auszuführen. Beispielsweise die Anzahl der Sekunden hinzufügen dargestellt, um eine angegebene Anzahl von Ticks zum die <xref:System.DateTimeOffset.Second%2A> -Komponente eine <xref:System.DateTimeOffset> Wert verwenden Sie den Ausdruck `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  
  
 Obwohl eine <xref:System.DateTimeOffset> Wert enthält, einen Offset, es ist dabei nicht um eine vollständig zeitzonenkompatibler Datenstruktur. Während ein Offset von UTC ein Merkmal von einer Zeitzone befindet, ist nicht eindeutig eine Zeitzone identifiziert werden. Nicht nur mehrere Zeitzonen weisen Sie den gleichen Offset von UTC, sondern ändert sich des Offsets des eine Zeitzone, wenn es Sommerzeit berücksichtigt. Dies bedeutet, dass, sobald ein <xref:System.DateTimeOffset> Wert seiner Zeitzone aufgehoben wird, es kann nicht mehr eindeutig verknüpft werden an der ursprünglichen Zeitzone.  
  
 Da <xref:System.DateTimeOffset> ist eine Struktur, eine <xref:System.DateTimeOffset> -Objekt, das deklariert, aber nicht anderweitig initialisiert wurde die Standardwerte für jedes der Memberfelder enthält. Dies bedeutet, dass die <xref:System.DateTimeOffset.DateTime%2A> -Eigenschaftensatz auf <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> und die zugehörige <xref:System.DateTimeOffset.Offset%2A> -Eigenschaftensatz auf <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Sie können ein neues erstellen <xref:System.DateTimeOffset> Wert durch das Aufrufen einer der Überladungen des Konstruktors, die die überladenen Konstruktoren für ähneln den <xref:System.DateTime> Struktur. Sie können auch ein neues erstellen <xref:System.DateTimeOffset> Wert durch Zuweisen einer <xref:System.DateTime> Wert. Dies ist eine implizite Konvertierung; erfordert ein Umwandlungsoperator (in c#) oder nicht aufrufen, um eine Konvertierungsmethode (in Visual Basic). Sie können auch Initialisieren einer <xref:System.DateTimeOffset> Wert aus die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe durch Aufrufen der zahlreiche statische Analysemethoden auf, darunter Zeichenfolge <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>, und <xref:System.DateTimeOffset.TryParseExact%2A>.  
  
 Die Mitglieder der <xref:System.DateTimeOffset> Struktur bieten Funktionen in den folgenden Bereichen:  
  
-   Datums- und Uhrzeitoperationen.  
  
     Sie können das Hinzufügen oder Subtraktion von Datumsangaben oder Zeitintervalle zu einem bestimmten <xref:System.DateTimeOffset> Wert. Arithmetische Operationen mit <xref:System.DateTimeOffset> Werte anders als bei solchen mit <xref:System.DateTime> Werte für Unterschiede in Zeitoffsets anpassen, wenn ein Ergebnis zurückgegeben. Der folgende code z. B. verwendet <xref:System.DateTime> Variablen, die aktuelle lokale Zeit von der aktuellen UTC-Zeit subtrahiert werden soll. Dann verwendet der Code <xref:System.DateTimeOffset> Variablen, um den gleichen Vorgang auszuführen. Die Subtraktion mit <xref:System.DateTime> Werte der lokalen Zeitzone Unterschied von der koordinierten Weltzeit zurückgibt, während die Subtraktion mit <xref:System.DateTimeOffset> Werte gibt <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   Geben Sie die Konvertierungsvorgänge.  
  
     Sie können konvertieren <xref:System.DateTimeOffset> Werte <xref:System.DateTimeOffset.DateTime%2A> Werte und umgekehrt.  
  
-   Bearbeitung und Extraktion von laufzeitvorgängen.  
  
     Sie können entweder das Datum oder Zeitpunkt der Extrahieren einer <xref:System.DateTimeOffset> Wert. Sie können auch den Wert eines bestimmten abrufen <xref:System.DateTimeOffset> Komponente, z. B. das Jahr oder der Monat.  
  
-   Konvertierung von Datums- und Uhrzeitwert.  
  
     Sie können alle konvertieren <xref:System.DateTimeOffset> Wert in eine andere <xref:System.DateTimeOffset> -Wert, der den gleichen Zeitpunkt in einer anderen Zeitzone darstellt. Anpassungsregeln einer Zeitzone gelten jedoch nur im Fall von der <xref:System.DateTimeOffset.ToLocalTime%2A> Methode, die konvertiert eine <xref:System.DateTimeOffset> Wert das Datum und Uhrzeit in der Zone des lokalen Systems.  
  
-   Vergleich von Datums- und Uhrzeitwert.  
  
     Sie können bestimmen, ob ein bestimmtes <xref:System.DateTimeOffset> Wert liegt vor, die gleiche oder eine höhere Version als ein anderes <xref:System.DateTimeOffset> Wert. Bevor der Vergleich ausgeführt wird, werden alle Werte in UTC konvertiert.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Auswählen zwischen "DateTime", "DateTimeOffset", "TimeSpan" und "TimeZoneInfo"</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Beispiel: .NET Framework 4-Hilfsprogramm zur Formatierung</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datum und eine Uhrzeit.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur unter Verwendung des angegebenen <see cref="T:System.DateTime" />-Werts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Verhalten dieses Konstruktors hängt vom Wert von der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Eigenschaft der `dateTime` Parameter:  
  
-   Wenn der Wert des <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeOffset.DateTime%2A> Eigenschaft der neuen Instanz gleich festgelegt ist `dateTime`, und die <xref:System.DateTimeOffset.Offset%2A> -Eigenschaftensatz gleich <xref:System.TimeSpan.Zero>.  
  
-   Wenn der Wert des <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, wird die <xref:System.DateTimeOffset.DateTime%2A> Eigenschaft der neuen Instanz ist gleich festgelegt `dateTime`, und die <xref:System.DateTimeOffset.Offset%2A> -Eigenschaft gleich dem Offset der Zeitzone des lokalen Systems festgelegt ist.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie der Wert des der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Eigenschaft der `dateTime` Parameter wirkt sich auf das Datum und Uhrzeit-Wert, der von diesem Konstruktor zurückgegeben wird.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der UTC-Zeitpunkt (Datum und Uhrzeit in koordinierter Weltzeit), der sich nach Anwenden des Offsets ergeben hat, liegt vor <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der UTC-Zeitpunkt (Datum und Uhrzeit), der sich nach Anwenden des Offsets ergeben hat, liegt nach <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datum und eine Uhrzeit.</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur unter Verwendung des angegebenen <see cref="T:System.DateTime" />-Werts und -Offsets.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Verhalten dieses Konstruktors richtet sich teilweise auf dem Wert der <xref:System.DateTime.Kind%2A> Eigenschaft der `dateTime` Parameter:  
  
-   Wenn den Wert der <xref:System.DateTime.Kind%2A> ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, den Wert des der `offset` -Parameter muss 0 sein oder ein <xref:System.ArgumentException> ausgelöst.  
  
-   Wenn den Wert der <xref:System.DateTime.Kind%2A> ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, den Wert des der `offset` Parameter muss gleich der lokalen Zeitzone Offset von Coordinated Universal Time (UTC) sein, für dieses Datum oder eine <xref:System.ArgumentException> ausgelöst.  
  
-   Wenn der Wert des <xref:System.DateTime.Kind%2A> ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, `offset` Parameter kann einen beliebigen gültigen Wert aufweisen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie initialisieren eine <xref:System.DateTimeOffset> Objekt mit einem Datum und Uhrzeit sowie den Offset der Ortszeit, wenn dieser Zeitzone nicht im Voraus bekannt ist.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime.Kind" /> ist gleich <see cref="F:System.DateTimeKind.Utc" /> und <paramref name="offset" /> ist ungleich 0 (null).  
  
- oder -  
 <paramref name="dateTime.Kind" /> ist gleich <see cref="F:System.DateTimeKind.Local" /> und <paramref name="offset" /> ist nicht mit dem Offset der lokalen Zeitzone des Systems identisch.  
  
- oder -  
 <paramref name="offset" /> ist nicht in ganzen Minuten angegeben.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> ist kleiner als -14 Stunden oder größer als 14 Stunden.  
  
- oder -  
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" /> oder größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">Ein Datum und eine Uhrzeit, die als Anzahl der 100-Nanosekunden-Intervalle ausgedrückt werden, die seit dem 1. Januar 0001, 00:00:00 vergangen sind.</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur mit der angegebenen Anzahl von Ticks und dem Offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise aufrufen möchten die <xref:System.DateTimeOffset.%23ctor%2A> Konstruktor zum Instanziieren einer <xref:System.DateTimeOffset> mit einer lokalen Zeit und einem Offset anderen Wert als die von der lokalen Zeit Zone auslöst, ein <xref:System.ArgumentException>. Sie können diese Überladung von der <xref:System.DateTimeOffset> Konstruktor, um diese Einschränkung umgehen. Im folgenden Beispiel wird die Ortszeit Anzahl von Ticks zum Instanziieren einer <xref:System.DateTimeOffset> Wert, dessen Abweichung nicht notwendigerweise, die von der lokalen Zeit dar stellt:  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 Im folgenden Beispiel initialisiert einen <xref:System.DateTimeOffset> Objekt, indem Sie die Anzahl der Ticks in einem beliebigen Datum (in diesem Fall am 16. Juli 2007, um 13:32 Uhr) mit einem Offset von-5.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> ist nicht in ganzen Minuten angegeben.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Zeitpunkt, den die <see cref="P:System.DateTimeOffset.UtcDateTime" />-Eigenschaft angibt, liegt vor <see cref="F:System.DateTimeOffset.MinValue" /> oder hinter <see cref="F:System.DateTimeOffset.MaxValue" />.  
  
- oder -  
 <paramref name="ticks" /> ist kleiner als <see langword="DateTimeOffset.MinValue.Ticks" /> oder größer als <see langword="DateTimeOffset.MaxValue.Ticks" />.  
  
- oder -  
 <paramref name="Offset" /> ist kleiner als-14 Stunden oder größer als 14 Stunden.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <paramref name="month" />).</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde und Offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert `year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Instanziiert eine <xref:System.DateTimeOffset> Wert, indem Sie das Jahr, Monat und Tag in einem anderen Kalender, Aufruf der <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> Konstruktor.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.DateTimeOffset> -Objekt unter Verwendung der <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> Überladung des Konstruktors.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> gibt keine ganzen Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner oder größer als 9999.  
  
- oder -  
 <paramref name="month" /> ist kleiner oder größer als 12.  
  
- oder -  
 <paramref name="day" /> ist kleiner als eins oder größer als die Anzahl von Tagen in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="offset" /> ist kleiner als -14 Stunden oder größer als 14 Stunden.  
  
- oder -  
Der Zeitpunkt, den die <see cref="P:System.DateTimeOffset.UtcDateTime" />-Eigenschaft angibt, liegt vor <see cref="F:System.DateTimeOffset.MinValue" /> oder hinter <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr (1 bis 9999).</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <paramref name="month" />).</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="millisecond">Die Millisekunden (0 bis 999).</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde, Millisekunde und Offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor interpretiert `year`, `month`, und `day` als ein Jahr, Monat und Tag im gregorianischen Kalender. Instanziiert eine <xref:System.DateTimeOffset> Wert, indem Sie das Jahr, Monat und Tag in einem anderen Kalender, Aufruf der <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> Konstruktor.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.DateTimeOffset> -Objekt unter Verwendung der <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> Überladung des Konstruktors.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> gibt keine ganzen Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner oder größer als 9999.  
  
- oder -  
 <paramref name="month" /> ist kleiner oder größer als 12.  
  
- oder -  
 <paramref name="day" /> ist kleiner als eins oder größer als die Anzahl von Tagen in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="millisecond" /> ist kleiner als 0 (null) oder größer als 999.  
  
- oder -  
 <paramref name="offset" /> ist kleiner als -14 oder größer als 14.  
  
- oder -  
Der Zeitpunkt, den die <see cref="P:System.DateTimeOffset.UtcDateTime" />-Eigenschaft angibt, liegt vor <see cref="F:System.DateTimeOffset.MinValue" /> oder hinter <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Das Jahr.</param>
        <param name="month">Der Monat (1 bis 12).</param>
        <param name="day">Der Tag (1 bis zur Anzahl der Tage in <paramref name="month" />).</param>
        <param name="hour">Die Stunden (0 bis 23).</param>
        <param name="minute">Die Minuten (0 bis 59).</param>
        <param name="second">Die Sekunden (0 bis 59).</param>
        <param name="millisecond">Die Millisekunden (0 bis 999).</param>
        <param name="calendar">Der Kalender, der zum Interpretieren von <paramref name="year" />, <paramref name="month" /> und <paramref name="day" /> verwendet wird.</param>
        <param name="offset">Der UTC (Coordinated Universal Time)-Offset der Zeitangabe.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.DateTimeOffset" />-Struktur mit den angegebenen Werten für Jahr, Monat, Tag, Stunde, Minute, Sekunde, Millisekunde und Offset für einen angegebenen Kalender.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `year`, `month`, `day`, `hour`, `minute`, `second`, und `millisecond` Parameter spiegeln wider, ausgedrückt durch angegebenen Kalender der `calendar` Parameter. Eine Ausnahme wird ausgelöst, wenn diese Werte bilden, Datum und Uhrzeit, die mithilfe von diesem Kalender ausgedrückt werden kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Instanzen von sowohl die <xref:System.Globalization.HebrewCalendar> Klasse und die <xref:System.Globalization.HijriCalendar> zu instanziierenden Klassen eine <xref:System.DateTimeOffset> Wert. Das Datum wird in der Konsole mit den jeweiligen Kalendern und den gregorianischen Kalender angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> gibt keine ganzen Minuten an.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> darf nicht <see langword="null" /> sein.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> ist kleiner als der <see langword="MinSupportedDateTime.Year" />-Wert des <paramref name="calendar" />-Parameters oder größer als <see langword="MaxSupportedDateTime.Year" />.  
  
- oder -  
 <paramref name="month" /> ist entweder kleiner oder größer als die Anzahl von Monaten in <paramref name="year" /> im <paramref name="calendar" />.  
  
- oder -  
 <paramref name="day" /> ist kleiner als eins oder größer als die Anzahl von Tagen in <paramref name="month" />.  
  
- oder -  
 <paramref name="hour" /> ist kleiner als 0 (null) oder größer als 23.  
  
- oder -  
 <paramref name="minute" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="second" /> ist kleiner als 0 (null) oder größer als 59.  
  
- oder -  
 <paramref name="millisecond" /> ist kleiner als 0 (null) oder größer als 999.  
  
- oder -  
 <paramref name="offset" /> ist kleiner als -14 Stunden oder größer als 14 Stunden.  
  
- oder -  
Die Parameter <paramref name="year" />, <paramref name="month" /> und <paramref name="day" /> können nicht als Datums- und Zeitwert dargestellt werden.  
  
- oder -  
Der Zeitpunkt, den die <see cref="P:System.DateTimeOffset.UtcDateTime" />-Eigenschaft angibt, liegt vor <see cref="F:System.DateTimeOffset.MinValue" /> oder hinter <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanziieren eines "DateTimeOffset"-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">Ein <see cref="T:System.TimeSpan" />-Objekt, das ein positives oder ein negatives Zeitintervall darstellt.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das ein angegebenes Zeitintervall zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" /> -Objekt dargestellten Datums- und Uhrzeitangabe und dem durch <paramref name="timeSpan" /> dargestellten Zeitintervall ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.DateTimeOffset.Add%2A> Methode, um mehr als eine Art des Zeitfensters (Tage, Stunden, Minuten, Sekunden oder Millisekunden) in einem einzigen Vorgang hinzuzufügen. Das Verhalten dieser Methode ist identisch mit der Addition-Operator. Die <xref:System.DateTimeOffset> Struktur unterstützt auch spezielle Additionsmethoden (z. B. <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, und <xref:System.DateTimeOffset.AddMinutes%2A>) für jedes Zeitintervall.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `timeSpan` , Datum und Uhrzeit.  
  
 Die <xref:System.DateTimeOffset.Add%2A> Methode wirkt sich nicht auf den Wert des aktuellen <xref:System.DateTimeOffset> des Objekts <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Da eine <xref:System.DateTimeOffset> Objekt stellt keine dar, das Datum und die Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.Add%2A> Methode berücksichtigt nicht die Anpassungsregeln einer bestimmten Zeitzone bei Datums- und Uhrzeitoperationen.  
  
 Wenn die `timeSpan` Parameter `null`, diese Methode gibt den Wert des ursprünglichen <xref:System.DateTimeOffset> Objekt unverändert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Array von <xref:System.TimeSpan> Objekte, die die Flugzeiten zwischen den Zielen darstellen. Die <xref:System.DateTimeOffset.Add%2A> Methode fügt dann diese Zeiten zu einem <xref:System.DateTimeOffset> -Objekt, das ursprüngliche Abflugzeit eines Flugs darstellt. Das Ergebnis gibt die geplanten Eingangszeit bei jeder Zwischenstation wieder.  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">Eine Zahl, die aus ganzen Tagen und dem Bruchteil eines Tages besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von ganzen Tagen und Bruchteilen von Tagen zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="days" /> dargestellten Anzahl von Tagen ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Den Bruchteil der `days` Parameter ist der Bruchteil eines Tages. 4.5 entspricht z. B. 4 Tage, 12 Stunden, 0 Minuten, 0 Sekunden, 0 Millisekunden. Die `days` -Parameter wird auf die nächste Millisekunde gerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `days` , Datum und Uhrzeit.  
  
 Da eine <xref:System.DateTimeOffset> Objekt stellt keine dar, das Datum und die Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.AddDays%2A> Methode berücksichtigt nicht die Anpassungsregeln einer bestimmten Zeitzone bei Datums- und Uhrzeitoperationen.  
  
 Konvertieren von Zeitintervallen von weniger als einen Tag auf einen Bruchteil, kann ein Genauigkeitsverlust führen. Wenn dies problematisch ist, können Sie die <xref:System.DateTimeOffset.Add%2A> -Methode, die ermöglicht Ihnen die Angabe von mehr als eine Art von Zeitintervallen in einem einzelnen Methodenaufruf und entfällt die Notwendigkeit, die Zeitintervalle auf Bruchteile eines Tages zu konvertieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.AddDays%2A> Methode, um die Datumsangaben aufzuführen, am Montag, den Anfang der Arbeitswoche im März 2008 fallen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">Eine Zahl, die aus ganzen Stunden und dem Bruchteil einer Stunde besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von ganzen Stunden und Bruchteilen von Stunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="hours" /> dargestellten Anzahl von Stunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Den Bruchteil der `hours` Parameter ist der Bruchteil einer Stunde. 4.5 entspricht z. B. 4 Stunden, 30 Minuten, 0 Sekunden, 0 Millisekunden. Die `hours` -Parameter wird auf die nächste Millisekunde gerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `hours` , Datum und Uhrzeit.  
  
 Da eine <xref:System.DateTimeOffset> Objekt stellt keine dar, das Datum und die Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.AddHours%2A> Methode berücksichtigt nicht die Anpassungsregeln einer bestimmten Zeitzone bei Datums- und Uhrzeitoperationen.  
  
 Konvertieren von Zeitintervallen von weniger als einer Stunde auf einen Bruchteil, kann ein Genauigkeitsverlust führen. (Eine Minute ist z. B. 0,01666 von einer Stunde.) Wenn dies problematisch ist, können Sie die <xref:System.DateTimeOffset.Add%2A> Methode, die ermöglicht Ihnen die Angabe von mehr als eine Art von Zeitintervallen in einem einzelnen Methodenaufruf und entfällt die Notwendigkeit, die Zeitintervalle zu Bruchteile einer Stunde zu konvertieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.AddHours%2A> Methode, um die Liste der Startzeiten von Arbeit, die für eine bestimmte Woche in einem Büro auf, die zwei Schichten von acht Stunden pro Tag verlagert.  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Eine Zahl, die aus ganzen Millisekunden und dem Bruchteil einer Millisekunde besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von Millisekunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="milliseconds" /> dargestellten Anzahl von ganzen Millisekunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Den Bruchteil der `milliseconds` Parameter ist der Bruchteil einer Millisekunde. 4.5 entspricht z. B. 4 Millisekunden und 5000 Ticks, die, in denen eine Millisekunde 10.000 Ticks entspricht. Allerdings `milliseconds` wird gerundet auf die nächste Millisekunde gerundet; alle Werte von.5 oder höher werden aufgerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `milliseconds` , Datum und Uhrzeit.  
  
 Da eine <xref:System.DateTimeOffset> Objekt stellt keine dar, das Datum und die Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.AddMilliseconds%2A> Methode berücksichtigt nicht die Anpassungsregeln einer bestimmten Zeitzone bei Datums- und Uhrzeitoperationen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">Eine Zahl, die aus ganzen Minuten und dem Bruchteil einer Minute besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von ganzen Minuten und Bruchteilen von Minuten zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="minutes" /> dargestellten Anzahl von Minuten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Den Bruchteil der `minutes` Parameter ist der Bruchteil einer Minute. 4.5 entspricht z. B. 4 Minuten, 30 Sekunden, 0 Millisekunden. Die `minutes` -Parameter wird auf die nächste Millisekunde gerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `minutes` , Datum und Uhrzeit.  
  
 Da eine <xref:System.DateTimeOffset> Objekt stellt keine dar, das Datum und die Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.AddMinutes%2A> Methode berücksichtigt nicht die Anpassungsregeln einer bestimmten Zeitzone bei Datums- und Uhrzeitoperationen.  
  
 Konvertieren von Zeitintervallen von weniger als einer Minute auf einen Bruchteil, kann ein Genauigkeitsverlust führen. (Zum Beispiel ist eine Sekunde 0,01666 von einer Minute.) Wenn dies problematisch ist, können Sie die <xref:System.DateTimeOffset.Add%2A> Methode, die ermöglicht Ihnen die Angabe von mehr als eine Art von Zeitintervallen in einem einzelnen Methodenaufruf und entfällt die Notwendigkeit, die Zeitintervalle zu Bruchteile einer Minute zu konvertieren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Eine Anzahl von ganzen Monaten. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von Monaten zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="months" /> dargestellten Anzahl von Monaten ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Gegensatz zu anderen Methoden, die ein Datum und Uhrzeit-Wert, eine einziges Mal Intervalleinheit (z. B. Minuten oder gar Tage) hinzufügen <xref:System.DateTimeOffset.AddMonths%2A> ermöglicht keine Bruchteile eines Monats hinzufügen. Zu einem Zeitpunkt hinzufügen, die von anderen Zeiteinheiten neben Monate besteht aus einem <xref:System.DateTimeOffset> -Objekts die <xref:System.DateTimeOffset.Add%2A> Methode.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `months` , Datum und Uhrzeit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.AddMonths%2A> Methode, um das Startdatum des jedes Quartal des Jahres 2007 anzuzeigen.  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Eine Zahl, die aus ganzen Sekunden und dem Bruchteil einer Sekunde besteht. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von ganzen Sekunden und Bruchteilen von Sekunden zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="seconds" /> dargestellten Anzahl von Sekunden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Den Bruchteil der `seconds` Parameter ist der Bruchteil einer Sekunde. Der Wert der Bruchteile einer Sekunde werden in der folgenden Tabelle angezeigt.  
  
|Zweite Wert|Entsprechung|  
|------------------|----------------|  
|.1 Sekunde|100 Millisekunden|  
|.01 Sekunde|10 Millisekunden|  
|.001 Sekunde|1 Millisekunde|  
  
 Die `seconds` -Parameter wird auf die nächste Millisekunde gerundet.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `minutes` , Datum und Uhrzeit.  
  
 Da eine <xref:System.DateTimeOffset> Objekt stellt keine dar, das Datum und die Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.AddSeconds%2A> Methode berücksichtigt nicht die Anpassungsregeln einer bestimmten Zeitzone bei Datums- und Uhrzeitoperationen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Eine Anzahl von 100-Nanosekunden-Ticks. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von Ticks zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="ticks" /> dargestellten Anzahl von Ticks ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Tick stellt 100 Nanosekunden oder One-Millionstel einer Sekunde dar. Da ein Teilstrich ein sehr klein und genaue Zeitintervall ist, kann jede Zeiteinheit größer als eine Anzahl von Ticks, ohne einen Verlust der Genauigkeit ausgedrückt werden.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `minutes` , Datum und Uhrzeit.  
  
 Die folgende Tabelle enthält die Anzahl der Ticks in einem bestimmten Zeitintervall.  
  
|Zeitintervall|Anzahl von ticks|  
|-------------------|---------------------|  
|Second|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day|864,000,000,000|  
|Woche|6,048,000,000,000|  
|Monat|Hängt die Anzahl der Tage im Monat.|  
|Kein Schaltjahr|315,360,000,000,000|  
|Schaltjahr|316,224,000,000,000|  
  
 Da eine <xref:System.DateTimeOffset> Objekt stellt keine dar, das Datum und die Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.AddTicks%2A> Methode berücksichtigt nicht die Anpassungsregeln einer bestimmten Zeitzone bei Datums- und Uhrzeitoperationen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">Eine Anzahl von Jahren. Die Zahl kann negativ oder positiv sein.</param>
        <summary>Gibt ein neues <see cref="T:System.DateTimeOffset" />-Objekt zurück, das eine angegebene Anzahl von Jahren zum Wert dieser Instanz addiert.</summary>
        <returns>Ein Objekt, dessen Wert die Summe aus der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe und der von <paramref name="years" /> dargestellten Anzahl von Jahren ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Gegensatz zu anderen Methoden, die ein Datum und Uhrzeit-Wert, eine einziges Mal Intervalleinheit (z. B. Minuten oder gar Tage) hinzufügen <xref:System.DateTimeOffset.AddYears%2A> ermöglicht keine Bruchteile eines Jahres hinzufügen. Zu einem Zeitpunkt hinzufügen, die von anderen Zeiteinheiten zusätzlich zu den nächsten Jahren besteht aus einem <xref:System.DateTimeOffset> -Objekts die <xref:System.DateTimeOffset.Add%2A> Methode.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `months` , Datum und Uhrzeit.  
  
   
  
## Examples  
 In den USA können keine des Treibers Lizenzen werden für Personen, die unter 16 Jahren ausgegeben. Das folgende Beispiel zeigt das letzten möglichen Datum auf dem eine Person geboren sein muss, um rechtlich ein Führerschein ausgegeben werden.  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Das erste zu vergleichende Objekt.</param>
        <param name="second">Das zweite zu vergleichende Objekt.</param>
        <summary>Vergleicht zwei <see cref="T:System.DateTimeOffset" />-Objekte und gibt an, ob das erste Objekt vor oder nach dem zweiten liegt oder mit diesem identisch ist.</summary>
        <returns>Eine Ganzzahl mit Vorzeichen, die angibt, ob der Wert des <paramref name="first" />-Parameters vor oder nach dem Wert des <paramref name="second" />-Parameters oder zur selben Zeit liegt, wie in der folgenden Tabelle gezeigt.  
  
 <list type="table"><listheader><term> Rückgabewert 
 </term><description> Bedeutung 
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description><paramref name="first" /> liegt vor <paramref name="second" />.  
  
 </description></item><item><term> Zero 
 </term><description><paramref name="first" /> ist gleich <paramref name="second" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description><paramref name="first" /> ist später als <paramref name="second" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Ausführen des Vergleichs an, die Methode konvertiert die `first` und `second` Parameter in Coordinated Universal Time (UTC), bevor der Vergleich durchgeführt. Die Methode ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 Das heißt, die <xref:System.DateTimeOffset.Compare%2A> Methode bestimmt, ob zwei <xref:System.DateTimeOffset> Objekte einen bestimmten Zeitpunkt dar. Direkt verglichen weder Datums- und Zeitangaben noch Offsets.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.Compare%2A> Methode zu vergleichende <xref:System.DateTimeOffset> Objekte.  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das mit dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt verglichen werden soll.</param>
        <summary>Vergleicht das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt mit einem angegebenen <see cref="T:System.DateTimeOffset" />-Objekt und gibt an, ob das aktuelle Objekt vor oder nach dem zweiten <see cref="T:System.DateTimeOffset" />-Objekt liegt oder mit diesem identisch ist.</summary>
        <returns>Eine Ganzzahl mit Vorzeichen, die die Beziehung zwischen dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt und <paramref name="other" /> angibt, wie in der folgenden Tabelle gezeigt.  
  
 <list type="table"><listheader><term> Rückgabewert 
 </term><description> Beschreibung  
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt liegt vor <paramref name="other" />.  
  
 </description></item><item><term> Zero 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ist mit <paramref name="other" /> identisch.  
  
 </description></item><item><term> Größer als 0 (null)  
  
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt liegt nach <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode vergleicht <xref:System.DateTimeOffset> Objekte durch einen Vergleich ihrer <xref:System.DateTimeOffset.UtcDateTime%2A> Werte; das heißt, es bestimmt, ob die beiden Objekte einen einzigen Zeitpunkt darstellen, und gibt an, ob das aktuelle Objekt vor, die später als oder identisch mit der `other`Parameter.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.CompareTo%2A> Methode zu vergleichende <xref:System.DateTimeOffset> Objekte.  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.DateTime" />-Wert ab, der die Datumskomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</summary>
        <value>Ein <see cref="T:System.DateTime" />-Wert, der die Datumskomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft entfernt, alle wichtigen Teile der Uhrzeitkomponente aus einem <xref:System.DateTimeOffset> Objekt und gibt nur die signifikante Datumskomponente. Z. B. wenn die <xref:System.DateTimeOffset> Objekt hat den Wert für Datum und Uhrzeit von "1/12/07 16:01 Uhr + 7:30", gibt die Eigenschaft eine <xref:System.DateTime> Wert "1/12/07 12:00:00 Uhr". Die <xref:System.DateTime> Wert kann dann mithilfe der standardmäßigen oder benutzerdefinierten Formatbezeichner, die angezeigt werden nur Datumsangaben angezeigt werden. (Siehe im Abschnitt mit Beispielen veranschaulicht).  
  
 Der Wert des der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt ist immer <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Es ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Um ein Datum ohne die Zeitkomponente anzuzeigen, können Sie auch das "D" oder "d" Formatbezeichner; Eine Veranschaulichung finden Sie im Beispielabschnitt.  
  
   
  
## Examples  
 Im folgende Beispiel ruft den Wert der <xref:System.DateTimeOffset.Date%2A> -Eigenschaft für ein bestimmtes Datum. Anschließend wird dieser Wert in der Konsole, über einige Standardentitäten und benutzerdefinierten DATEONLY-Formatbezeichner angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">DateTime-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte DateTime-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.DateTime" />-Wert ab, der die Datums- und Uhrzeitkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</summary>
        <value>Das Datum und die Uhrzeit des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.DateTime%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Diese Eigenschaft gibt das Datum und die Zeitkomponente eine <xref:System.DateTimeOffset> -Objekt, das sich für das Ausführen von Internetclientanwendungen mit <xref:System.DateTimeOffset> zu <xref:System.DateTime> Konvertierung. Z. B. wenn die <xref:System.DateTimeOffset> Objekt hat den Wert für Datum und Uhrzeit der "1/12/07 16:01 Uhr + 7:30", die Eigenschaft gibt ein Datum von "1/12/07 16:01 Uhr".  
  
 Der Wert des der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Objekt <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung von der <xref:System.DateTimeOffset.DateTime%2A> Eigenschaft zum Konvertieren der Uhrzeit, die zurückgegeben werden, indem die <xref:System.DateTimeOffset.Now%2A> und <xref:System.DateTimeOffset.UtcNow%2A> Eigenschaften <xref:System.DateTime> Werte.  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">Konvertieren zwischen "DateTime" und "DateTimeOffset"</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tag des Monats ab, der durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Tagkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als Wert zwischen 1 und 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Day%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Sie können auch eine Zeichenfolgendarstellung des erstellen eine <xref:System.DateTimeOffset> Komponente "Tag" des Objekts durch Aufrufen der <xref:System.DateTimeOffset.ToString%2A> -Methode mit der benutzerdefinierten Formatbezeichner "d" oder "Dd".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Tageskomponente eine <xref:System.DateTimeOffset> Objekt auf drei verschiedene Arten:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Day%2A> Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> -Methode mit dem Formatbezeichner "d".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "Dd".  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tag der Woche ab, der durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Einer der Enumerationswerte, der den Wochentag des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der Konstanten in der <xref:System.DayOfWeek> Enumeration liegt zwischen <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> zu <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Bei der Umwandlung in eine ganze Zahl, der Wert 0 (null) (womit <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) auf sechs (womit <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Sie können auch den Wochentagsnamen eines bestimmten Datums anzeigen, mit dem Formatbezeichner "D" oder der benutzerdefinierte Formatbezeichner "Dddd". Zum Beispiel:  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 Beachten Sie, dass die Zeichenfolge, durch den Aufruf zurückgegeben der `ToString` -Methode der der <xref:System.DayOfWeek> -Enumerationsmember, der von dieser Eigenschaft zurückgegeben wird, ist nicht lokalisiert. Um eine Zeichenfolge zu extrahieren, die den Wochentagsnamen der aktuellen Kultur oder einer bestimmten Kultur enthält, rufen die <xref:System.DateTimeOffset.ToString%2A> -Methode mit der benutzerdefinierte Formatbezeichner "Dddd". Der folgende Code zeigt z. B. Name des Wochentags für ein Datum unter Verwendung der `fr-fr` Kultur.  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den Namen des ersten Tag des Monats des Jahres 2008 Wochentags.  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Tag des Jahres ab, der durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Der Tag des Jahres des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als Wert zwischen 1 und 366.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob zwei <see cref="T:System.DateTimeOffset" />-Objekte identisch sind oder ob ein <see cref="T:System.DateTimeOffset" />-Objekt mit einem angegebenen Objekt identisch ist.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Ein <see cref="T:System.DateTimeOffset" />-Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt denselben Zeitpunkt wie ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt darstellt.</summary>
        <returns>
          <see langword="true" />, wenn beide <see cref="T:System.DateTimeOffset" />-Objekte denselben <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor sie den Vergleich ausführt, wird diese Methode konvertiert die Werte von <xref:System.DateTimeOffset> Objekte in die koordinierte Weltzeit (UTC). Die Methode ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 Das heißt, die <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> Methode bestimmt, ob zwei <xref:System.DateTimeOffset> Objekte einen bestimmten Zeitpunkt dar. Direkt verglichen weder Datums- und Zeitangaben noch Offsets. Um festzustellen, ob zwei <xref:System.DateTimeOffset> Objekte dieselbe Zeit darstellen und haben denselben Offsetwert, verwenden Sie die <xref:System.DateTimeOffset.EqualsExact%2A> Methode.  
  
 Ein <xref:System.DateTimeOffset> -Objekt, das nicht ist `null` gilt höher (oder höher) als ein `null`.  
  
 Diese Überladung von der <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> Methode implementiert die <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> Methode. Er bietet eine etwas bessere Leistung als die <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> überladen, da die `other` Parameter enthält kein Objekt konvertiert werden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> zu testende Methode <xref:System.DateTimeOffset> Objekte auf Gleichheit mit dem aktuellen <xref:System.DateTimeOffset> Objekt.  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob ein <see cref="T:System.DateTimeOffset" />-Objekt denselben Zeitpunkt wie ein angegebenes Objekt darstellt.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="obj" />-Parameter ein <see cref="T:System.DateTimeOffset" />-Objekt ist und denselben Zeitpunkt wie das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor sie den Vergleich ausführt, wird diese Methode konvertiert die Werte des aktuellen <xref:System.DateTimeOffset> Objekt und die `obj` Parameter in die koordinierte Weltzeit (UTC). Die Methode ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 Das heißt, die <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> Methode bestimmt, ob die aktuelle <xref:System.DateTimeOffset> Objekt und ein angegebenes Objekt einen einzigen Zeitpunkt darstellen. Direkt verglichen weder Datums- und Zeitangaben noch Offsets. Um festzustellen, ob zwei <xref:System.DateTimeOffset> Objekte dieselbe Zeit darstellen und haben denselben Offsetwert, verwenden Sie die <xref:System.DateTimeOffset.EqualsExact%2A> Methode.  
  
 Wenn `obj` ist `null`, oder wenn der Laufzeittyp des `obj` nicht <xref:System.DateTimeOffset>, gibt die Methode zurück `false`.  
  
   
  
## Examples  
 Das folgende Beispiel gibt an, ob die aktuelle <xref:System.DateTimeOffset> Objekt ist gleich mehrere andere <xref:System.DateTimeOffset> -Objekte sowie für einen null-Verweis und eine <xref:System.DateTime> Objekt.  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Das erste zu vergleichende Objekt.</param>
        <param name="second">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob zwei angegebene <see cref="T:System.DateTimeOffset" />-Objekte denselben Zeitpunkt darstellen.</summary>
        <returns>
          <see langword="true" />, wenn die beiden <see cref="T:System.DateTimeOffset" />-Objekte denselben <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor sie den Vergleich ausführt, wird diese Methode konvertiert beide <xref:System.DateTimeOffset> Objekte in die koordinierte Weltzeit (UTC). Die Methode ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Das heißt, die <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> Methode bestimmt, ob die beiden <xref:System.DateTimeOffset> Objekte einen bestimmten Zeitpunkt dar. Direkt verglichen weder Datums- und Zeitangaben noch Offsets. Um festzustellen, ob zwei <xref:System.DateTimeOffset> Objekte dieselbe Zeit darstellen und haben denselben Offsetwert, verwenden Sie die <xref:System.DateTimeOffset.EqualsExact%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> Methode zum Testen verschiedener <xref:System.DateTimeOffset> Objekte auf Gleichheit.  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Das Objekt, das mit dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt denselben Zeitpunkt wie ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt darstellt und denselben Offset aufweist.</summary>
        <returns>
          <see langword="true" />, wenn das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt und <paramref name="other" /> denselben Datums- und Uhrzeitwert sowie denselben <see cref="P:System.DateTimeOffset.Offset" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da gemeinsam von verschiedenen Zeitzonen einen einzelnen Offset, der Rückgabewert `true` garantiert nicht, dass die aktuelle und die `other` Objekt darstellen Zeiten in der gleichen Zeitzone.  
  
 Im Gegensatz zu den <xref:System.DateTimeOffset.EqualsExact%2A> -Methode, die Überladungen der <xref:System.DateTimeOffset.Equals%2A> Methode zu ermitteln, ob zwei <xref:System.DateTimeOffset> Werte nur einen Zeitpunkt dar. Sie geben nicht an, dass zwei Werte auf das gleiche Datum und Uhrzeit sowie den gleichen Offset haben.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.DateTimeOffset.EqualsExact%2A> Methode zum Vergleichen ähnlicher <xref:System.DateTimeOffset> Objekte.  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Eine Windows-Dateizeit in Ticks.</param>
        <summary>Konvertiert die angegebene Windows-Dateizeit in eine entsprechende Ortszeit.</summary>
        <returns>Ein Objekt, das das Datum und die Uhrzeit von <paramref name="fileTime" /> darstellt, wobei der Offset auf den Ortszeitoffset festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Koordinierte Weltzeit (UTC). Windows verwendet eine Zeit, um aufzuzeichnen, wenn eine Anwendung erstellt, greift auf oder in eine Datei geschrieben.  
  
 Eine Windows-Dateizeit ist direkt über die Windows-API zugegriffen werden, durch den Aufruf der `GetFileTime` Funktion, die eine `FILETIME` Struktur. Der einzige Funktionsparameter ist das Handle der Datei an, deren Dateiinformationen abgerufen werden sollen. Das Dateihandle wird abgerufen, durch den Aufruf der `CreateFile` Funktion. Die `FILETIME` -Struktur `dwHighDateTime` Member enthält, die vier höherwertigen Bytes der Dateizeit und die zugehörige `dwLowDateTime` Member enthält, die vier niederwertigen Bytes. Das folgende Beispiel veranschaulicht das Abrufen von Zeitwerten für Windows-Datei, und konvertieren sie <xref:System.DateTimeOffset> Werte.  
  
 Zeitwerte für Windows-Datei können auch erstellt werden, von <xref:System.DateTime> Werte durch Aufrufen der <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> und <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> Methoden, und von <xref:System.DateTimeOffset> Werte durch Aufrufen der <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Windows-API, um die Zeiten der Windows-Dateien für die WordPad ausführbare Datei abzurufen.  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="filetime" /> ist kleiner als Null.  
  
- oder -  
 <paramref name="filetime" /> ist größer als <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Eine Unix-Zeit in Form der seit 1.1.1970T00:00:00Z (1. Januar 1970 um Mitternacht UTC) verstrichenen Millisekunden. Für Unix-Zeiten vor diesem Datum ist der Wert negativ.</param>
        <summary>Konvertiert eine Unix-Zeit in Form der seit dem 1. Januar 1970 um 00:00:00Z verstrichenen Millisekunden in einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
        <returns>Ein Datum und eine Uhrzeit, die denselben Zeitpunkt wie die Unix-Zeit darstellen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Offset%2A> Eigenschaftswert des zurückgegebenen <xref:System.DateTimeOffset> Instanz <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, die koordinierte Weltzeit darstellt. Sie können diese in die Zeit in einer bestimmten Zeitzone konvertieren, durch Aufrufen der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="milliseconds" /> ist kleiner als –62,135,596,800,000.  
  
- oder -  
 <paramref name="milliseconds" /> ist größer als 253,402,300,799,999.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">Eine Unix-Zeit in Form der seit 1.1.1970T00:00:00Z (1. Januar 1970 um Mitternacht UTC) verstrichenen Sekunden. Für Unix-Zeiten vor diesem Datum ist der Wert negativ.</param>
        <summary>Konvertiert eine Unix-Zeit in Form der seit dem 1. Januar 1970 um 00:00:00Z verstrichenen Sekunden in einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
        <returns>Ein Datum und eine Uhrzeit, die denselben Zeitpunkt wie die Unix-Zeit darstellen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Offset%2A> Eigenschaftswert des zurückgegebenen <xref:System.DateTimeOffset> Instanz <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, die koordinierte Weltzeit darstellt. Sie können diese in die Zeit in einer bestimmten Zeitzone konvertieren, durch Aufrufen der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="seconds" /> ist kleiner als –62,135,596,800.  
  
- oder -  
 <paramref name="seconds" /> ist größer als 253,402,300,799.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt zurück.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stundenkomponente der Zeit ab, die durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Stundenkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts. Diese Eigenschaft verwendet ein 24-Stunden-Format. Der Wert liegt zwischen 0 und 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Hour%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Sie können auch eine Zeichenfolgendarstellung des erstellen eine <xref:System.DateTimeOffset> Komponente für Stunden des Objekts durch Aufrufen der <xref:System.DateTimeOffset.ToString%2A> -Methode mit "H", oder der benutzerdefinierte Formatbezeichner "HH".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Stundenkomponente des eine <xref:System.DateTimeOffset> Objekt auf drei verschiedene Arten:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Hour%2A> Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "H".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> -Methode mit der "HH" Formatbezeichner.  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.DateTime" />-Wert ab, der die Datums- und Uhrzeitkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</summary>
        <value>Die lokale Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Bedarf die <xref:System.DateTimeOffset.LocalDateTime%2A> Eigenschaft konvertiert das aktuelle <xref:System.DateTimeOffset> Datum und Uhrzeit auf des lokalen Systems Datums- und Uhrzeitangabe des Objekts. Die Konvertierung ist ein zweistufiger Vorgang:  
  
1.  Die Eigenschaft konvertiert das aktuelle <xref:System.DateTimeOffset> des Objekts Uhrzeit in Coordinated Universal Time (UTC).  
  
2.  Die Eigenschaft konvertiert dann UTC in eine lokale Zeit.  
  
 Es gibt keine unzulässigen Zeitpunkten und mehrdeutige Zeiten der Standardzeit der lokalen Zeitzone zugeordnet sind. (Die Konvertierung kann jedoch eine Anomalie: Wenn ein <xref:System.DateTimeOffset> -Wert, der auf dem lokalen Computer stammt wiedergibt ein mehrdeutiger Datums- und Zeit, die Wert in UTC konvertiert werden kann, und klicken Sie dann zurück in die lokale Zeit, die von der ursprünglichen Zeit unterscheidet.)  Die Eigenschaft gilt Anpassungsregeln in die lokale Zeitzone aus, wenn es sich bei dieser Konvertierung.  
  
 Diese Eigenschaft gibt das Datum und die Zeitkomponente eine <xref:System.DateTimeOffset> -Objekt, das nützlich für <xref:System.DateTimeOffset> zu <xref:System.DateTime> Konvertierung. Zusätzlich zum Ausführen von Konvertierung erforderlichen Zeit, diese Eigenschaft unterscheidet sich von der <xref:System.DateTimeOffset.DateTime%2A> Eigenschaft durch Festlegen des Werts, der die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> -Objekt <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht mehrere Konvertierungen von <xref:System.DateTimeOffset> Werte, die lokalen Zeiten, in den USA „Pacific Standard Time“ (USA) ausgeführt wird. Beachten Sie, dass es sich bei der letzten drei Mal mehrdeutig sind. die Eigenschaft, die alle auf einer einzelnen Datums- und Uhrzeitangabe in die Zeitzone Pacific Standard Time zugeordnet.  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den größtmöglichen Wert von <see cref="T:System.DateTimeOffset" /> dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 12/31/9999 11:59:59 Uhr + 00:00.  
  
 Die <xref:System.DateTimeOffset.MaxValue> Eigenschaft wird verwendet, um zu bestimmen, ob der Wert eines neuen <xref:System.DateTimeOffset> Objekt oder die <xref:System.DateTimeOffset> von einer arithmetischen Operation zurückgegebene Wert ist identisch, oder früher als dieser maximalen Bereichswert. Wenn sie nicht der Fall ist, löst die Methode eine <xref:System.ArgumentOutOfRangeException>. Alle <xref:System.DateTimeOffset> Wert wird in die koordinierte Weltzeit (UTC) konvertiert, bevor die Methode ihn mit vergleicht <xref:System.DateTimeOffset.MaxValue>.  Dies bedeutet, dass eine <xref:System.DateTimeOffset> -Wert, dessen Datum und Uhrzeit in der Nähe der maximalbereich werden, aber dessen Offset negativ ist, möglicherweise eine Ausnahme auslösen. Z. B. den Wert 12/31/9999 11:00 Uhr-02: 00 ist außerhalb des gültigen Bereichs, da es sich um eine Stunde ist später als <xref:System.DateTimeOffset.MaxValue> Wenn es in die UTC konvertiert wird.  
  
 Einige Kalender, z. B. die <xref:System.Globalization.UmAlQuraCalendar>, unterstützen einen oberen Datumsbereich, die älter als <xref:System.DateTime.MaxValue>. In diesen Fällen versucht, den Zugriff auf <xref:System.DateTime.MaxValue> variablenzuweisungen oder formatieren und Analysieren Vorgänge auslösen kann eine <xref:System.ArgumentOutOfRangeException>. Anstatt durch Abrufen des Werts des <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, können Sie den Wert der angegebenen Kultur aktuellen gültigen Datumswert von Abrufen der <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="F:System.DateTime.MaxValue" /> liegt außerhalb des Bereichs des Standardkalenders der aktuellen oder einer angegebenen Kultur.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Millisekundenkomponente der Zeit ab, die durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Millisekundenkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als eine Ganzzahl zwischen 0 und 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch eine Zeichenfolgendarstellung des erstellen eine <xref:System.DateTimeOffset> Millisekundenkomponente des Objekts, durch den Aufruf der <xref:System.DateTimeOffset.ToString%2A> -Methode mit der benutzerdefinierte Formatbezeichner "fff".  
  
 Wenn Sie Eigenschaften wie z. B. <xref:System.DateTimeOffset.Now%2A> oder <xref:System.DateTimeOffset.UtcNow%2A> um die Anzahl der verstrichenen Millisekunden genau verfolgen zu können, die Genauigkeit der Millisekundenkomponente der Zeit, hängt die Auflösung der Systemuhr. Unter Windows NT 3.5 und höher und Windows Vista-Betriebssystemen ist die Auflösung der Uhr etwa 10 – 15 Millisekunden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Anzahl der Millisekunden, die von einem <xref:System.DateTimeOffset> Objekt mithilfe der benutzerdefinierte Formatbezeichner und durch direkten Zugriff auf die <xref:System.DateTimeOffset.Millisecond%2A> Eigenschaft.  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Minutenkomponente der Zeit ab, die durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Minutenkomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als eine Ganzzahl zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Minute%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Sie können auch eine Zeichenfolgendarstellung des erstellen eine <xref:System.DateTimeOffset> Minutenkomponente des Objekts, durch den Aufruf der <xref:System.DateTimeOffset.ToString%2A> Methode mit dem "m" oder der benutzerdefinierte Formatbezeichner "mm".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Minutenkomponente des eine <xref:System.DateTimeOffset> Objekt auf drei verschiedene Arten:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Minute%2A> Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "m".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "mm".  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den frühesten <see cref="T:System.DateTimeOffset" />-Wert dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 1/1/0001 12:00:00 Uhr + 00:00.  
  
 Die <xref:System.DateTimeOffset.MinValue> Eigenschaft wird verwendet, um zu bestimmen, ob der Wert eines neuen <xref:System.DateTimeOffset> Objekt oder die <xref:System.DateTimeOffset> von einer arithmetischen Operation zurückgegebene Wert ist identisch, oder später als dieser Wert der minimalen Bereich. Wenn sie nicht der Fall ist, löst die Methode eine <xref:System.ArgumentOutOfRangeException>. Alle <xref:System.DateTimeOffset> Wert wird in die koordinierte Weltzeit (UTC) konvertiert, bevor die Methode mit vergleicht <xref:System.DateTimeOffset.MinValue>.  Dies bedeutet, dass eine <xref:System.DateTimeOffset> -Wert, dessen Datum und Uhrzeit in der Nähe der minimalen Bereichs werden, aber dessen Offset positive Zahl ist, möglicherweise eine Ausnahme auslösen. Z. B. den Wert 1/1/0001 1:00:00 Uhr + 02:00 ist außerhalb des gültigen Bereichs, da es sich um eine Stunde ist älter als <xref:System.DateTimeOffset.MinValue> Wenn es in die UTC konvertiert wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Monatskomponente des Datums ab, das durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Monatskomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als eine Ganzzahl zwischen 1 und 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Month%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Sie können auch eine Zeichenfolgendarstellung des erstellen eine <xref:System.DateTimeOffset> Komponente "Monat" des Objekts durch Aufrufen der <xref:System.DateTimeOffset.ToString%2A> -Methode mit der benutzerdefinierten Formatbezeichner "M" oder "MM".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Monatskomponente des eine <xref:System.DateTimeOffset> Wert auf drei verschiedene Arten:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Month%2A> Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "M".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "MM".  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.DateTimeOffset" />-Objekt ab, das auf die aktuelle Datums- und Uhrzeitangabe des aktuellen Computers festgelegt ist, wobei der Offset auf den UTC (Coordinated Universal Time)-Offset der Ortszeit festgelegt ist.</summary>
        <value>Ein <see cref="T:System.DateTimeOffset" />-Objekt, dessen Datum und Uhrzeit die aktuelle Ortszeit ist und dessen Offset der UTC (Coordinated Universal Time)-Offset der lokalen Zeitzone ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Genauigkeit der Millisekundenkomponente für die aktuelle lokale Zeit hängt von der Auflösung der Systemuhr. Unter Windows NT 3.5 und höher und Windows Vista-Betriebssystemen ist die Auflösung der Uhr etwa 10 – 15 Millisekunden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.Now%2A> Eigenschaft, um das aktuelle Datum und die Uhrzeit abzurufen und zeigt sie unter Verwendung einer der [Formatzeichenfolgen für Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) von unterstützt die <xref:System.DateTimeOffset> Typ.  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.Now%2A> und <xref:System.DateTimeOffset.Millisecond%2A> Eigenschaften, die die Auflösung der Systemuhr zu bestimmen. Es zeigt an, wenn der Wert, der die Millisekundenkomponente geändert hat.  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den UTC (Coordinated Universal Time)-Offset der Zeit ab.</summary>
        <value>Die Differenz zwischen dem Zeitwert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts und der Coordinated Universal Time (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.TimeSpan.Hours%2A> -Eigenschaft des zurückgegebenen <xref:System.TimeSpan> Objekt kann zwischen-14 Stunden und 14 Stunden liegen.  
  
 Der Wert des der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft auf die Minute genau ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.Offset%2A> Eigenschaft zum Anzeigen der lokalen Zeit des Unterschied von Coordinated Universal Time (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netcore-2.2;netframework-2.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Objekt, dem das Zeitintervall hinzugefügt werden soll.</param>
        <param name="dateTimeTz">To be added.</param>
        <param name="timeSpan">Das hinzuzufügende Zeitintervall.</param>
        <summary>Fügt einem <see cref="T:System.DateTimeOffset" />-Objekt mit einer Datums- und Uhrzeitangabe ein angegebenes Zeitintervall hinzu und liefert ein <see cref="T:System.DateTimeOffset" />-Objekt mit einer neuen Datums- und Uhrzeitangabe.</summary>
        <returns>Ein Objekt, dessen Wert die Summe der Werte von <paramref name="dateTimeTz" /> und <paramref name="timeSpan" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Addition%2A> Methode definiert die Additionsoperation für <xref:System.DateTimeOffset> Werte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 Sprachen, die benutzerdefinierte Operatoren und überladene Operatoren nicht unterstützen können aufrufen, die <xref:System.DateTimeOffset.Add%2A> Methode stattdessen.  
  
 Die entsprechende Methode für diesen Operator <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste zu vergleichende Objekt.</param>
        <param name="right">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob zwei angegebene <see cref="T:System.DateTimeOffset" />-Objekte denselben Zeitpunkt darstellen.</summary>
        <returns>
          <see langword="true" />, wenn beide <see cref="T:System.DateTimeOffset" />-Objekte denselben <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Equality%2A> Methode definiert, den Vorgang des Gleichheitsoperators für <xref:System.DateTimeOffset> Objekte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 Vor der Auswertung der `left` und `right` Operanden hinsichtlich ihrer Gleichheit, den Operator konvertiert beide Werte in die koordinierte Weltzeit (UTC). Der Vorgang ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Das heißt, die <xref:System.DateTimeOffset.op_Equality%2A> Methode bestimmt, ob die beiden <xref:System.DateTimeOffset> Objekte einen bestimmten Zeitpunkt dar. Direkt verglichen weder Datums- und Zeitangaben noch Offsets. Um festzustellen, ob zwei <xref:System.DateTimeOffset> Objekte dieselbe Zeit darstellen und haben denselben Offsetwert, verwenden Sie die <xref:System.DateTimeOffset.EqualsExact%2A> Methode.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste zu vergleichende Objekt.</param>
        <param name="right">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt größer als (oder später als) ein zweites angegebenes <see cref="T:System.DateTimeOffset" />-Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn der <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="left" /> nach dem <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="right" /> liegt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_GreaterThan%2A> Methode definiert, den Vorgang des größer-als-Operators für <xref:System.DateTimeOffset> Objekte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 Sprachen, die keine benutzerdefinierte Operatoren unterstützen können aufrufen, die <xref:System.DateTimeOffset.Compare%2A> Methode stattdessen. Sie können auch aufrufen, die <xref:System.DateTimeOffset.op_GreaterThan%2A> direkt, wie im folgenden Beispiel wird verdeutlicht.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 Vor der Auswertung der `left` und `right` Operanden, der Operator konvertiert beide Werte in die koordinierte Weltzeit (UTC). Der Vorgang ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste zu vergleichende Objekt.</param>
        <param name="right">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt größer oder gleich einem zweiten angegebenen <see cref="T:System.DateTimeOffset" />-Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn der <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="left" /> nach dem <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="right" /> liegt oder mit diesem identisch ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_GreaterThan%2A> Methode definiert, den Vorgang, der größer als oder gleich-Operator für <xref:System.DateTimeOffset> Objekte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 Sprachen, die keine benutzerdefinierte Operatoren unterstützen können aufrufen, die <xref:System.DateTimeOffset.Compare%2A> Methode stattdessen. Bei einigen Sprachen können auch aufrufen, die <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> direkt, wie im folgenden Beispiel wird verdeutlicht.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 Vor der Auswertung der `left` und `right` Operanden, der Operator konvertiert beide Werte in die koordinierte Weltzeit (UTC). Der Vorgang ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das zu konvertierende Objekt.</param>
        <summary>Definiert eine implizite Konvertierung eines <see cref="T:System.DateTime" />-Objekts in ein <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Das konvertierte Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Implicit%2A> Methode kann der Compiler automatisch eine <xref:System.DateTime> -Objekt an eine <xref:System.DateTimeOffset> Objekt ohne einen expliziten Umwandlungsoperator (in c#) oder ein Aufruf eine Konvertierungsfunktion (in Visual Basic). Es definiert eine erweiternde Konvertierung, die Datenverlust ist nicht verbunden, und löst kein <xref:System.OverflowException>. Die <xref:System.DateTimeOffset.op_Implicit%2A> Methode übergibt, Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 Diese Methode entspricht der <xref:System.DateTimeOffset.%23ctor%2A> Konstruktor. Die Abweichung des resultierenden <xref:System.DateTimeOffset> Objekt abhängig ist, auf dem Wert der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Eigenschaft der `dateTime` Parameter:  
  
-   Wenn der Wert des der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> -Eigenschaft ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, Datum und Uhrzeit der der <xref:System.DateTimeOffset> Objekt gleich festgelegt ist `dateTime`, und die zugehörige <xref:System.DateTimeOffset.Offset%2A> Eigenschaft gleich 0 festgelegt ist.  
  
-   Wenn der Wert des der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, Datum und Uhrzeit der der <xref:System.DateTimeOffset> Objekt gleich festgelegt ist `dateTime`, und die zugehörige <xref:System.DateTimeOffset.Offset%2A> -Eigenschaft gleich dem Offset der Zeitzone des lokalen Systems festgelegt ist.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der UTC-Zeitpunkt (Datum und Uhrzeit in koordinierter Weltzeit), der sich nach Anwenden des Offsets ergeben hat, liegt vor <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der UTC-Zeitpunkt (Datum und Uhrzeit), der sich nach Anwenden des Offsets ergeben hat, liegt nach <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste zu vergleichende Objekt.</param>
        <param name="right">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob zwei angegebene <see cref="T:System.DateTimeOffset" />-Objekte auf unterschiedliche Zeitpunkte verweisen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> nicht denselben <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Inequality%2A> Methode definiert, den Betrieb der Ungleichheitsoperator zum <xref:System.DateTimeOffset> Objekte. Wird immer zurückgegeben, das entgegengesetzte Ergebnis <xref:System.DateTimeOffset.op_Equality%2A>. Die <xref:System.DateTimeOffset.op_Inequality%2A> Methode ermöglicht Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 Vor der Auswertung der `left` und `right` Operanden hinsichtlich ihrer Gleichheit, den Operator konvertiert beide Werte in die koordinierte Weltzeit (UTC). Der Vorgang ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 Das heißt, die <xref:System.DateTimeOffset.op_Inequality%2A> Methode bestimmt, ob die beiden <xref:System.DateTimeOffset> Objekte verschiedenen Stellen Zeitpunkte dar. Direkt verglichen weder Datums- und Zeitangaben noch Offsets.  
  
 Sprachen, die keine benutzerdefinierte Operatoren unterstützen können aufrufen, die <xref:System.DateTimeOffset.Compare%2A> Methode stattdessen. Darüber hinaus können einige Sprachen auch Aufrufen der <xref:System.DateTimeOffset.op_Inequality%2A> direkt, wie im folgenden Beispiel wird verdeutlicht.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste zu vergleichende Objekt.</param>
        <param name="right">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt kleiner als ein zweites angegebenes <see cref="T:System.DateTimeOffset" />-Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn der <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="left" /> vor dem <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="right" /> liegt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_LessThan%2A> Methode definiert, den Vorgang des kleiner-als-Operators für <xref:System.DateTimeOffset> Objekte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 Vor der Auswertung der `left` und `right` Operanden, der Operator konvertiert beide Operanden in Coordinated Universal Time (UTC). Der Vorgang ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 Sprachen, die keine benutzerdefinierte Operatoren unterstützen können aufrufen, die <xref:System.DateTimeOffset.Compare%2A> Methode stattdessen. Darüber hinaus können einige Sprachen auch Aufrufen der <xref:System.DateTimeOffset.op_LessThan%2A> direkt, wie im folgenden Beispiel wird verdeutlicht.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Das erste zu vergleichende Objekt.</param>
        <param name="right">Das zweite zu vergleichende Objekt.</param>
        <summary>Bestimmt, ob ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt kleiner als ein zweites angegebenes <see cref="T:System.DateTimeOffset" />-Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn der <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="left" /> vor dem <see cref="P:System.DateTimeOffset.UtcDateTime" />-Wert von <paramref name="right" /> liegt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> Methode definiert, den Betrieb der kleiner als oder gleich-Operator für <xref:System.DateTimeOffset> Objekte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 Sprachen, die keine benutzerdefinierte Operatoren unterstützen können aufrufen, die <xref:System.DateTimeOffset.Compare%2A> Methode stattdessen. Bei einigen Sprachen können auch aufrufen, die <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> direkt, wie im folgenden Beispiel wird verdeutlicht.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 Vor der Auswertung der `left` und `right` Operanden, der Operator konvertiert beide Werte in die koordinierte Weltzeit (UTC). Der Vorgang ist äquivalent zu folgendem:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrahiert ein angegebenes <see cref="T:System.DateTimeOffset" />-Objekt oder ein <see cref="T:System.TimeSpan" />-Objekt von einem <see cref="T:System.DateTimeOffset" />-Objekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Der Minuend.</param>
        <param name="right">Der Subtrahend.</param>
        <summary>Subtrahiert ein <see cref="T:System.DateTimeOffset" />-Objekt von einem anderen und ergibt ein Zeitintervall.</summary>
        <returns>Ein Objekt, das die Differenz zwischen <paramref name="left" /> und <paramref name="right" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Subtraction%2A> Methode definiert, für die Operation der Mengensubtraktion <xref:System.DateTimeOffset> Objekte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 Sprachen, die benutzerdefinierte Operatoren und überladene Operatoren nicht unterstützen können aufrufen, die <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> Methode stattdessen.  
  
 Die entsprechende Methode für diesen Operator <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netcore-2.2;netframework-2.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datums- und Uhrzeitobjekt, von dem subtrahiert werden soll.</param>
        <param name="dateTimeTz">To be added.</param>
        <param name="timeSpan">Das Zeitintervall, das subtrahiert werden soll.</param>
        <summary>Subtrahiert ein angegebenes Zeitintervall von einer Datums- und Uhrzeitangabe und gibt eine neue Datums- und Uhrzeitangabe zurück.</summary>
        <returns>Ein Objekt, das dem Wert von <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.op_Subtraction%2A> Methode definiert, für die Operation der Mengensubtraktion <xref:System.DateTimeOffset> Objekte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 Sprachen, die benutzerdefinierte Operatoren und überladene Operatoren nicht unterstützen können aufrufen, die <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> Methode stattdessen.  
  
 Die entsprechende Methode für diesen Operator <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" /> oder größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die <see cref="T:System.DateTimeOffset" />-Entsprechung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums-, Uhrzeit- und Offsetangabe in die <see cref="T:System.DateTimeOffset" />-Entsprechung.</summary>
        <returns>Ein Objekt, das mit der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe identisch ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen getrennt sind. Diese drei Elemente sind wie in der folgenden Tabelle gezeigt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Uhrzeit >|"13:02:03 UHR"|  
|\<Offset >|"-7: 30"|  
  
 Jedes dieser Elemente ist zwar optional, \<Offset > kann nicht allein. Es muss angegeben werden, zusammen mit den beiden \<Datum > oder \<Zeit >. Wenn \<Datum > fehlt, ist der Standardwert Wert ist der aktuelle Tag. Wenn \<Zeit > fehlt, ist der Standardwert Wert ist 12:00:00 Uhr. Wenn \<Datum > ist vorhanden, aber seine Jahr Komponente besteht aus nur zwei Ziffern umfasst, wird eine Konvertierung in ein Jahr im aktuellen Kalender von der aktuellen Kultur basierend auf den Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Wenn \<Offset > nicht angegeben ist, ist der Standardwert der Offset der lokalen Zeitzone. \<Offset > kann entweder eine Negative oder einen positiven Offset darstellen von Coordinated Universal Time (UTC). In beiden Fällen \<Offset > muss ein Vorzeichensymbol enthalten.  
  
 Die `input` Zeichenfolge wird analysiert, mithilfe den Formatierungsinformationen in eine <xref:System.Globalization.DateTimeFormatInfo> Objekt, für die aktuelle Kultur initialisiert wird. Um eine Zeichenfolge, die angegebene Formatierung enthält analysieren, die nicht unbedingt die Formatierung der aktuellen Kultur entsprechen, verwenden die <xref:System.DateTimeOffset.ParseExact%2A> Methode, und geben Sie einen Formatbezeichner.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.Parse%28System.String%29> -Methode zum Analysieren von mehreren Zeichenfolgen für Datum und Uhrzeit. Das Beispiel enthält die Ausgabe am 22. März 2007 auf einem System mit der Kultur En-us.  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
- oder -  
 <paramref name="input" /> enthält die Zeichenfolgendarstellung eines Offsetwerts ohne Datum oder Uhrzeit.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatinformationen zu <paramref name="input" /> bereitstellt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in den entsprechenden <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Ein Objekt, das der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="formatProvider" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen getrennt sind. Diese drei Elemente sind in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Uhrzeit >|"13:02:03 UHR"|  
|\<Offset >|"-7: 30"|  
  
 Jedes dieser Elemente ist zwar optional, \<Offset > kann nicht allein. Es muss angegeben werden, zusammen mit den beiden \<Datum > oder \<Zeit >. Wenn \<Datum > fehlt, ist der Standardwert Wert ist der aktuelle Tag. Wenn \<Datum > ist vorhanden, aber seine Jahr Komponente besteht aus nur zwei Ziffern umfasst, wird eine Konvertierung in ein Jahr in die `provider` aktuellen Kalender des Parameters basierend auf den Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Wenn \<Zeit > fehlt, ist der Standardwert Wert ist 12:00:00 Uhr. Wenn \<Offset > nicht angegeben ist, ist der Standardwert der Offset der lokalen Zeitzone. \<Offset > kann entweder eine Negative oder einen positiven Offset darstellen von Coordinated Universal Time (UTC). In beiden Fällen \<Offset > muss ein Vorzeichensymbol enthalten.  
  
 Das Format dieser drei Elemente wird definiert, durch die `formatProvider` -Parameter, der Folgendes möglich:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierung, in verwendet wird, der `input` Parameter. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft wird definiert, die in verwendete Formatierung `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die positiven oder negativen Vorzeichen verwendet \<Offset > muss entweder + oder –. Es ist nicht definiert, indem die <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> oder <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> Eigenschaften der <xref:System.Globalization.NumberFormatInfo> Objekt die `formatProvider` Parameter.  
  
   
  
## Examples  
 Im folgenden Beispiel wird analysiert, Datum und Uhrzeitzeichenfolgen, die für die Kultur "fr-FR" formatiert und zeigt sie mithilfe des lokalen Systems Standardwert En-us Kultur.  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
- oder -  
 <paramref name="input" /> enthält die Zeichenfolgendarstellung eines Offsetwerts ohne Datum oder Uhrzeit.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen und des Formatierungsstils in den entsprechenden <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Ein Objekt, das der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen getrennt sind. Diese drei Elemente sind in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Uhrzeit >|"13:02:03 UHR"|  
|\<Offset >|"-7: 30"|  
  
 Jedes dieser Elemente ist zwar optional, \<Offset > kann nicht allein. Es muss angegeben werden, zusammen mit den beiden \<Datum > oder \<Zeit >. Wenn \<Datum > fehlt, ist der Standardwert Wert ist der aktuelle Tag. Wenn \<Datum > ist vorhanden, aber seine Jahr Komponente besteht aus nur zwei Ziffern umfasst, wird eine Konvertierung in ein Jahr in die `provider` aktuellen Kalender des Parameters basierend auf den Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Wenn \<Zeit > fehlt, ist der Standardwert Wert ist 12:00:00 Uhr. Wenn \<Offset > fehlt, ist der Standardwert der Offset der lokalen Zeitzone oder <xref:System.TimeSpan.Zero?displayProperty=nameWithType> Wenn entweder die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> oder <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Wert wird angegeben, der `styles` Parameter. Wenn \<Offset > vorhanden ist, kann entweder eine Negative oder darstellen einer positiven Offset von Coordinated Universal Time (UTC). In beiden Fällen \<Offset > muss ein Vorzeichensymbol enthalten.  
  
 Das Format dieser drei Elemente wird definiert, durch die `formatProvider` -Parameter, der Folgendes möglich:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierung, in verwendet wird, der `input` Parameter. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft wird definiert, die in verwendete Formatierung `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Jedes Element kann auch durch führende oder nachgestellte Leerzeichen eingeschlossen werden und die \<Datum > und \<Zeit > Elemente können interne Leerzeichen (z. B. 6:00:00) enthalten. Nur die \<Offset > Komponente darf keine internen Leerzeichen enthalten.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die positiven oder negativen Vorzeichen verwendet \<Offset > muss entweder + oder –. Es ist nicht definiert, durch die <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> oder <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebenes Objekt der `formatProvider` Parameter.  
  
 Die folgende Tabelle zeigt die Mitglieder der <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> -Enumeration, die unterstützt werden.  
  
|DateTimeStyles-Element|Beschreibung |  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert die Zeichenfolge, die durch dargestellt `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> -Methode der zurückgegebenen <xref:System.DateTimeOffset> Objekt.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Interne Leerzeichen sind zulässig, der \<Datum > und \<Zeit > Elemente.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Vor jede Komponente in der analysierten Zeichenfolge ist der führende Leerzeichen zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Vor jede Komponente in der analysierten Zeichenfolge ist das nachfolgende Leerzeichen zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Dies ist das Standardverhalten. Es kann nicht überschrieben werden, durch Angeben eines restriktiveren <xref:System.Globalization.DateTimeStyles> Enumeration-Wert, z. B. <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass, wenn die `input` verfügt nicht über die Parameter einer \<Offset >-Element, den Offset der lokalen Zeitzone bereitgestellt werden soll. Dies ist das Standardverhalten der <xref:System.DateTimeOffset.Parse%2A> Methode.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass, wenn die `input` verfügt nicht über die Parameter einer \<Offset >-Element, der UTC-Offset (00:00) bereitgestellt werden soll.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl gültig ist, wird dieser Wert wird ignoriert, und hat keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft dieses Werts hat keine Auswirkungen.|  
  
 Nur die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> Wert wird nicht unterstützt. Ein <xref:System.ArgumentException> wird ausgelöst, wenn dieser Wert gehört die `styles` Parameter.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Auswirkung der Übergabe der <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, und <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> -Werte in der `styles` Parameter, der die <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> Methode.  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
  
- oder -  
 <paramref name="styles" /> ist kein gültiger <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
- oder -  
 <paramref name="styles" /> beinhaltet einen nicht unterstützten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
- oder -  
 <paramref name="styles" /> enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
- oder -  
 <paramref name="input" /> enthält die Zeichenfolgendarstellung eines Offsetwerts ohne Datum oder Uhrzeit.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die <see cref="T:System.DateTimeOffset" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss einem angegebenen Format genau entsprechen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erwartete Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung des angegebenen Formats und der angegebenen kulturabhängigen Formatierungsinformationen in die entsprechende <see cref="T:System.DateTimeOffset" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Objekt, das der in <paramref name="input" /> enthaltenen Datums- und Uhrzeitangabe nach den Angaben von <paramref name="format" /> und <paramref name="formatProvider" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der das Format von definiert sein muss die `format` Parameter. Sie erfordert außerdem, dass die \<Datum >, \<Zeit >, und \<Offset >-Elemente die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in der Reihenfolge gemäß `format`. Wenn die `input` Zeichenfolge stimmt nicht überein, dies `format` Parameter, löst die Methode eine <xref:System.FormatException>.  Im Gegensatz dazu die <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums in einem der Formate von des Formatanbieters erkannten <xref:System.Globalization.DateTimeFormatInfo> Objekt. <xref:System.DateTimeOffset.Parse%2A> ermöglicht auch die \<Datum >, \<Zeit >, und \<Offset > Elemente der Zeichenfolgendarstellung von Datum und Uhrzeit in beliebiger Reihenfolge angezeigt werden.  
  
 Die `format` Parameter ist eine Zeichenfolge, enthält entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren, die `input` Parameter. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn `format` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, löst die Methode eine <xref:System.FormatException>.  
  
 Wenn `format` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn `format` ist nicht erforderlich, `input` einen Offset enthält, die resultierende <xref:System.DateTimeOffset> -Objekt die angegebene Zeitzonenoffset der Zeitzone des lokalen Systems zugewiesen ist.  
  
 Die bestimmtes Datum und Uhrzeit verwendeten Symbole und Zeichenfolgen `input` werden definiert, indem die `formatProvider` Parameter, wie das exakte der Format `input` Wenn `format` ist eine Standardformatzeichenfolge für Bezeichner. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methode mit standardmäßigen und benutzerdefinierten Formatbezeichner und die invariante Kultur zum Analysieren verschiedener Zeichenfolgen für Datum und Uhrzeit.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

Im folgenden Beispiel wird analysiert, ein Array von Zeichenfolgen, von denen erwartet entsprechen [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Wie die Ausgabe des Beispiels zeigt nicht Zeichenfolgen, die mit voran- oder nachgestellten Leerzeichen erfolgreich analysiert werden, wie Zeichenfolgen mit Datum und Uhrzeit-Elemente, die sich außerhalb des gültigen Bereichs befinden.

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> ist eine leere Zeichenfolge ("").  
  
- oder -  
 <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
- oder -  
 <paramref name="format" /> ist eine leere Zeichenfolge.  
  
- oder -  
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Ein Zeichenbereich, der ein Datum und eine Uhrzeit darstellt.</param>
        <param name="format">Ein Zeichenbereich mit einem Formatspezifizierer, der das erwartete Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <summary>Konvertiert einen Zeichenbereich, der eine Datums- und Uhrzeitangabe darstellt, unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in den entsprechenden <see cref="T:System.DateTimeOffset" />. Das Format der Darstellung von Datum und Uhrzeit muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Objekt, das der im <paramref name="input" />-Parameter enthaltenen Datums- und Uhrzeitangabe nach den Angaben der Parameter <paramref name="format" />, <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Diese Methode analysiert eine Spanne von Zeichen, das ein Datum darstellt, der das Format von definiert sein muss die `format` Parameter. Sie erfordert außerdem, dass die \<Datum >, \<Zeit >, und \<Offset >-Elemente die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in der Reihenfolge gemäß `format`. Wenn `input` entspricht nicht der `format` Muster, löst die Methode eine <xref:System.FormatException>.  Im Gegensatz dazu die <xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums in einem der Formate von des Formatanbieters erkannten <xref:System.Globalization.DateTimeFormatInfo> Objekt. <xref:System.DateTimeOffset.Parse%2A> ermöglicht auch die \<Datum >, \<Zeit >, und \<Offset > Elemente der Zeichenfolgendarstellung von Datum und Uhrzeit in beliebiger Reihenfolge angezeigt werden.  
  
 Die `format` -Parameter ist eine Spanne von Zeichen, das entweder ein einzelnes Zeichen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von enthält, die `input` Parameter. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn `format` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, löst die Methode eine <xref:System.FormatException>.  
  
 Wenn `format` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn `format` ist nicht erforderlich, `input` einen Offset enthält, die resultierende <xref:System.DateTimeOffset> -Objekt die angegebene Zeitzonenoffset der Zeitzone des lokalen Systems zugewiesen ist.  
  
 Die bestimmtes Datum und Uhrzeit verwendeten Symbole und Zeichenfolgen `input` werden definiert, indem die `formatProvider` Parameter, ebenso wie das genaue Format der `input` Wenn `format` Standardformatbezeichner ist. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt seine <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> Eigenschaft definiert, die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
- oder -   
Der <paramref name="styles" />-Parameter enthält einen nicht unterstützten Wert.  
- oder -   
Der <paramref name="styles" />-Parameter enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> ist einer leerer Zeichenbereich.  
 oder <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit.  
 oder <paramref name="format" /> ist einer leerer Zeichenbereich.  
 - oder -   
 Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Ein Zeichenbereich, der die zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formats">Ein Array von Formatbezeichnern, die die erwarteten Formate von <paramref name="input" /> definieren.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <summary>Konvertiert einen Zeichenbereich mit der Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in den entsprechenden <see cref="T:System.DateTimeOffset" />. Das Format der Darstellung von Datum und Uhrzeit muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>Ein Objekt, das der im <paramref name="input" />-Parameter enthaltenen Datums- und Uhrzeitangabe nach den Angaben der Parameter <paramref name="formats" />, <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
Diese Methode analysiert eine Zeichen Spanne, der ein Datum, das eine der zugewiesenen Muster entspricht der `formats` Parameter. Wenn `input` entspricht nicht eines dieser Muster, mit der Varianten von definiert die `styles` Parameter, löst die Methode eine <xref:System.FormatException>. Abgesehen von Vergleichen `input` mit mehreren Formatierungsmustern, diese Überladung verhält sich genauso wie die <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> Methode.  
  
 Die `formats` -Parameter ist ein Zeichenfolgen-Array, dessen Elemente enthält, entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, der das mögliche Muster von definieren, die `input` Parameter. Wenn die Methode aufgerufen wird, `input` muss einem der folgenden Muster übereinstimmen. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn das übereinstimmende Element im `formats` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, löst die Methode eine <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Mithilfe der `formats` Parameter dieser Überladung, die mehrere Formate angeben, kann Probleme der vermindert, die viele Benutzer beim Eingeben von Datumsangaben und Uhrzeiten auftreten. Insbesondere können Sie mehrere Eingabemuster definieren eine Anwendung zur Handhabung von Datums- und uhrzeitdarstellungen, die kann entweder ein- oder verfügen nicht über führende Nullen in Monaten, Tagen, Stunden, Minuten und Sekunden.
  
 Wenn das übereinstimmende Element im `formats` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn das übereinstimmende Element im `formats` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` einen Offset enthält, die Abweichung des resultierenden <xref:System.DateTimeOffset> Objekt abhängig ist, auf dem Wert der `styles` Parameter. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeLocal>, der Offset der lokalen Zeitzone zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, den Offset von Coordinated Universal Time (UTC) oder + 00:00, zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn kein Wert angegeben wird, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmtes Datum und Uhrzeit verwendeten Symbole und Zeichenfolgen `input` werden definiert, indem die `formatProvider` Parameter. Das gleiche gilt für das exakte Format der `input`, wenn das entsprechende Element der `formats` ist eine Standardformatzeichenfolge Spezifizierer. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert, die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter definiert, ob Leerzeichen erlaubt, wird in der Eingabezeichenfolge, gibt an, wie Zeichenfolgen ohne eine explizite Offset-Komponente analysiert werden und unterstützt die UTC-Konvertierung als Teil des Analysevorgangs. Alle Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration werden unterstützt, mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Die folgende Tabelle enthält die Auswirkungen der einzelnen unterstützten Mitglied.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> -Methode der zurückgegebenen <xref:System.DateTimeOffset> Objekt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt erhält den UTC-Offset (+ 00:00 Uhr).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht das `input` auf interne Leerzeichen nicht angegeben wird, durch Einfügen `format`. Zusätzliche Leerzeichen auftreten können, zwischen Datums- und Zeitkomponenten und innerhalb der einzelnen Komponenten (außer der Offset) und wird ignoriert, wenn die Zeichenfolge zu analysieren.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht das `input` zum Einschließen von führenden Leerzeichen nicht anhand des `formats`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht das `input` sollen nachfolgende Leerzeichen nicht anhand des `formats`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht das `input` einschließen vorangestellte, nachfolgende und innere Leerzeichen nicht anhand des `formats`. Alle zusätzlichen Leerzeichen nicht in das übereinstimmende Element im angegebenen `formats` beim Analysieren der Zeichenfolge werden ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerraum ist nicht zulässig `input`. Leerraum muss angezeigt werden, genau wie angegeben in ein bestimmtes Element des `formats` für eine Übereinstimmung vorliegt. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkungen, da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
oder <paramref name="styles" /> enthält einen nicht unterstützten Wert.  
- oder -   
Der <paramref name="styles" />-Parameter enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> ist einer leerer Zeichenbereich.  
oder <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit.  
- oder -   
Kein Element von <paramref name="formats" /> enthält einen gültigen Formatbezeichner.  
- oder -   
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erwartete Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in die entsprechende <see cref="T:System.DateTimeOffset" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Objekt, das der im <paramref name="input" />-Parameter enthaltenen Datums- und Uhrzeitangabe nach den Angaben der Parameter <paramref name="format" />, <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der das Format von definiert sein muss die `format` Parameter. Sie erfordert außerdem, dass die \<Datum >, \<Zeit >, und \<Offset >-Elemente die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in der Reihenfolge gemäß `format`. Wenn die `input` Zeichenfolge entspricht nicht das Muster der `format` -Parameter mit allen Varianten von definiert die `styles` Parameter, löst die Methode eine <xref:System.FormatException>.  Im Gegensatz dazu die <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums in einem der Formate von des Formatanbieters erkannten <xref:System.Globalization.DateTimeFormatInfo> Objekt. <xref:System.DateTimeOffset.Parse%2A> ermöglicht auch die \<Datum >, \<Zeit >, und \<Offset > Elemente der Zeichenfolgendarstellung von Datum und Uhrzeit in beliebiger Reihenfolge angezeigt werden.  
  
 Die `format` Parameter ist eine Zeichenfolge, enthält entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Muster von definieren, die `input` Parameter. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn `format` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, löst die Methode eine <xref:System.FormatException>.  
  
 Wenn `format` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn `format` ist nicht erforderlich, `input` einen Offset enthält, die Abweichung des resultierenden <xref:System.DateTimeOffset> Objekt abhängig ist, auf dem Wert der `styles` Parameter. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeLocal>, der Offset der lokalen Zeitzone zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, den Offset von Coordinated Universal Time (UTC) oder + 00:00, zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn kein Wert angegeben wird, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmtes Datum und Uhrzeit verwendeten Symbole und Zeichenfolgen `input` werden definiert, indem die `formatProvider` Parameter. Das gleiche gilt für das exakte Format der `input`, wenn `format` ist eine Standardformatzeichenfolge Spezifizierer. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert, die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter definiert, ob Leerzeichen zulässig ist in der Eingabezeichenfolge, gibt an, wie Zeichenfolgen ohne eine explizite Offset-Komponente analysiert werden und unterstützt die UTC-Konvertierung als Teil des Analysevorgangs. Alle Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration werden unterstützt, mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Die folgende Tabelle enthält die Auswirkungen der einzelnen unterstützten Mitglied.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> -Methode der zurückgegebenen <xref:System.DateTimeOffset> Objekt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `format` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `format` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt erhält den UTC-Offset (+ 00:00 Uhr).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht das `input` auf interne Leerzeichen nicht angegeben wird, durch Einfügen `format`. Zusätzliche Leerzeichen zwischen Datums- und Zeitkomponenten und innerhalb der einzelnen Komponenten auftreten können und wird ignoriert, wenn die Zeichenfolge zu analysieren.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht das `input` zum Einschließen von führenden Leerzeichen nicht anhand des `format`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht das `input` sollen nachfolgende Leerzeichen nicht anhand des `format`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht das `input` einschließen vorangestellte, nachfolgende und innere Leerzeichen nicht anhand des `format`. Alle zusätzlichen Leerzeichen nicht im angegebenen `format` beim Analysieren der Zeichenfolge werden ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerraum ist nicht zulässig `input`. Leerraum muss angezeigt werden, genau wie angegeben in `format`. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkungen, da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode mit der standardmäßigen und benutzerdefinierten Formatbezeichnern, die invariante Kultur und verschiedenen <xref:System.Globalization.DateTimeStyles> Werte beim Analysieren verschiedener Zeichenfolgen für Datum und Uhrzeit.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

Im folgenden Beispiel wird eine Vielzahl von <xref:System.Globalization.DateTimeStyles> Werte, um ein Array von Zeichenfolgen zu analysieren, die voraussichtlich entsprechen [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Wie die Ausgabe des Beispiels zeigt, wenn analysieren nicht Zeichenfolgen, die das richtige Format aufweisen:

- Sie enthalten Leerzeichen, und eine entsprechende <xref:System.Globalization.DateTimeStyles> Flag (z. B. <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> wurde nicht im Aufruf Methode bereitgestellt.

- Sie enthalten die Datum und Uhrzeit-Elemente, die sich außerhalb des gültigen Bereichs befinden.

Zeichenfolgen, die keine UTC-zeitverschiebung angeben, wird angenommen, dass der Offset von der lokalen Zeitzone haben (in diesem Fall-07: 00), wenn die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag im Aufruf Methode angegeben wird. In diesem Fall werden diese als koordinierte Weltzeit sein.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
  
- oder -  
Der <paramref name="styles" />-Parameter enthält einen nicht unterstützten Wert.  
  
- oder -  
Der <paramref name="styles" />-Parameter enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> ist eine leere Zeichenfolge ("").  
  
- oder -  
 <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
- oder -  
 <paramref name="format" /> ist eine leere Zeichenfolge.  
  
- oder -  
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formats">Ein Array von Formatbezeichnern, die die erwarteten Formate von <paramref name="input" /> definieren.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe unter Verwendung der angegebenen Formate, kulturspezifischen Formatierungsinformationen und des Stils in den entsprechenden <see cref="T:System.DateTimeOffset" />. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>Ein Objekt, das der im <paramref name="input" />-Parameter enthaltenen Datums- und Uhrzeitangabe nach den Angaben der Parameter <paramref name="formats" />, <paramref name="formatProvider" /> und <paramref name="styles" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der eine der zugewiesenen Muster entspricht der `formats` Parameter. Wenn die `input` Zeichenfolge entspricht nicht eines dieser Muster mit den Varianten von definiert die `styles` Parameter, löst die Methode eine <xref:System.FormatException>. Abgesehen von Vergleichen `input` mit mehreren Formatierungsmustern, diese Überladung verhält sich genauso wie die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode.  
  
 Die `formats` -Parameter ist ein Zeichenfolgen-Array, dessen Elemente enthält, entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, der das mögliche Muster von definieren, die `input` Parameter. Wenn die Methode aufgerufen wird, `input` muss einem der folgenden Muster übereinstimmen. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn das übereinstimmende Element im `formats` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, löst die Methode eine <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Mithilfe der `formats` Parameter dieser Überladung, die mehrere Formate angeben, kann Probleme der vermindert, die viele Benutzer beim Eingeben von Datumsangaben und Uhrzeiten auftreten. Insbesondere können Sie mehrere Eingabemuster definieren eine Anwendung zur Handhabung von Datums- und uhrzeitdarstellungen, die kann entweder ein- oder verfügen nicht über führende Nullen in Monaten, Tagen, Stunden, Minuten und Sekunden. Im Beispiel wird veranschaulicht, der an.  
  
 Wenn das übereinstimmende Element im `formats` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn das übereinstimmende Element im `formats` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` einen Offset enthält, die Abweichung des resultierenden <xref:System.DateTimeOffset> Objekt abhängig ist, auf dem Wert der `styles` Parameter. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeLocal>, der Offset der lokalen Zeitzone zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, den Offset von Coordinated Universal Time (UTC) oder + 00:00, zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn kein Wert angegeben wird, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmtes Datum und Uhrzeit verwendeten Symbole und Zeichenfolgen `input` werden definiert, indem die `formatProvider` Parameter. Das gleiche gilt für das exakte Format der `input`, wenn das entsprechende Element der `formats` ist eine Standardformatzeichenfolge Spezifizierer. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert, die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter definiert, ob Leerzeichen erlaubt, wird in der Eingabezeichenfolge, gibt an, wie Zeichenfolgen ohne eine explizite Offset-Komponente analysiert werden und unterstützt die UTC-Konvertierung als Teil des Analysevorgangs. Alle Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration werden unterstützt, mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Die folgende Tabelle enthält die Auswirkungen der einzelnen unterstützten Mitglied.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> -Methode der zurückgegebenen <xref:System.DateTimeOffset> Objekt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt erhält den UTC-Offset (+ 00:00 Uhr).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht das `input` auf interne Leerzeichen nicht angegeben wird, durch Einfügen `format`. Zusätzliche Leerzeichen auftreten können, zwischen Datums- und Zeitkomponenten und innerhalb der einzelnen Komponenten (außer der Offset) und wird ignoriert, wenn die Zeichenfolge zu analysieren.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht das `input` zum Einschließen von führenden Leerzeichen nicht anhand des `formats`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht das `input` sollen nachfolgende Leerzeichen nicht anhand des `formats`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht das `input` einschließen vorangestellte, nachfolgende und innere Leerzeichen nicht anhand des `formats`. Alle zusätzlichen Leerzeichen nicht in das übereinstimmende Element im angegebenen `formats` beim Analysieren der Zeichenfolge werden ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerraum ist nicht zulässig `input`. Leerraum muss angezeigt werden, genau wie angegeben in ein bestimmtes Element des `formats` für eine Übereinstimmung vorliegt. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkungen, da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft.|  
  
   
  
## Examples  
 Das folgende Beispiel definiert mehrere Eingabeformate für die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe und Offsetwert und übergibt dann die Zeichenfolge, die vom Benutzer eingegeben wird die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Offset ist größer als 14 Stunden oder kleiner als -14 Stunden.  
  
- oder -  
 <paramref name="styles" /> beinhaltet einen nicht unterstützten Wert.  
  
- oder -  
Der <paramref name="styles" />-Parameter enthält <see cref="T:System.Globalization.DateTimeStyles" />-Werte, die nicht zusammen verwendet werden können.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> ist eine leere Zeichenfolge ("").  
  
- oder -  
 <paramref name="input" /> enthält keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe.  
  
- oder -  
Kein Element von <paramref name="formats" /> enthält einen gültigen Formatbezeichner.  
  
- oder -  
Die Komponente für Stunden und der AM/PM-Kennzeichner in <paramref name="input" /> stimmen nicht überein.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.ParseExact" /> -Methode löst eine <see cref="T:System.FormatException" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Sekundenkomponente der Systemzeit ab, die durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Sekundenkomponente des <see cref="T:System.DateTimeOffset" />-Objekts als Ganzzahlwert zwischen 0 und 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Second%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Sie können auch eine Zeichenfolgendarstellung des erstellen eine <xref:System.DateTimeOffset> zweiten Komponente des Objekts, durch den Aufruf der <xref:System.DateTimeOffset.ToString%2A> Methode mit dem "s" oder der benutzerdefinierte Formatbezeichner "ss".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Sekundenkomponente des eine <xref:System.DateTimeOffset> Objekt auf drei verschiedene Arten:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Second%2A> Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "s".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> -Methode mit der "ss" Formatbezeichner.  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtrahiert eine angegebene Zeit oder eine Dauer vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">Ein Objekt, das den zu subtrahierenden Wert darstellt.</param>
        <summary>Subtrahiert einen <see cref="T:System.DateTimeOffset" />-Wert, der eine bestimmte Datums- und Uhrzeitangabe darstellt, vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt.</summary>
        <returns>Ein Objekt, das das Intervall zwischen den zwei <see cref="T:System.DateTimeOffset" />-Objekten angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode konvertiert beide <xref:System.DateTimeOffset> Objekte in die koordinierte Weltzeit (UTC) vor dem Berechnen des Zeitintervalls, die voneinander getrennt sind. Dadurch werden keinerlei Auswirkungen, die verschiedene abweichungen von der UTC auf den Vergleich möglicherweise entfernt.  
  
> [!NOTE]
>  Für Sprachen, die benutzerdefinierte Operatoren unterstützt, können Sie auch Subtraktion von Datums- und Uhrzeitangabe unter Verwendung des Subtraktionsoperators ausführen. Weitere Informationen finden Sie unter den <xref:System.DateTimeOffset.op_Subtraction%2A> Methode.  
  
 Da keiner der aktuellen <xref:System.DateTimeOffset> Objekt noch das `value` Parameter darstellen, Datum und Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> Methode berücksichtigt nicht die Regeln einer bestimmten Zeitzone Anpassung, wenn es sich um Datums- und Uhrzeitwerten.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Subtraktion mit den <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> Methode.  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Das Zeitintervall, das subtrahiert werden soll.</param>
        <summary>Subtrahiert ein angegebenes Zeitintervall vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt.</summary>
        <returns>Ein Objekt, das gleich der vom aktuellen <see cref="T:System.DateTimeOffset" />-Objekt dargestellten Datums- und Uhrzeitangabe minus dem durch <paramref name="value" /> dargestellten Zeitintervall ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.DateTimeOffset.Subtract%2A> Methode, um mehr als eine Art des Zeitfensters (Tage, Stunden, Minuten, Sekunden oder Millisekunden) in einem einzigen Vorgang zu subtrahieren. Das Verhalten ist identisch mit der <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> -Methode, die den Subtraktionsoperator definiert. Die <xref:System.DateTimeOffset> Struktur unterstützt auch spezielle Additionsmethoden (z. B. <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, und <xref:System.DateTimeOffset.AddMinutes%2A>), mit denen Sie eine Subtraktion ausgeführt werden, indem Sie den Methodenparameter einen negativen Wert zuweisen.  
  
> [!NOTE]
>  Diese Methode gibt ein neues <xref:System.DateTimeOffset> Objekt. Er ändert nicht den Wert des aktuellen Objekts durch Hinzufügen von `timeSpan` , Datum und Uhrzeit.  
  
 Die <xref:System.DateTimeOffset.Subtract%2A> Methode wirkt sich nicht auf den Wert des der <xref:System.DateTimeOffset> des Objekts <xref:System.DateTimeOffset.Offset%2A> Eigenschaft. Das zurückgegebene <xref:System.DateTimeOffset> Objekt hat den gleichen Offset des ursprünglichen Objekts.  
  
 Da die aktuelle <xref:System.DateTimeOffset> Objekt stellt keine dar, das Datum und die Uhrzeit in einer bestimmten Zeitzone, die <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> Methode berücksichtigt nicht die einer bestimmten Zeitzone die Anpassungsregeln beim Ausführen der Subtraktion.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Subtraktion mit den <xref:System.DateTimeOffset.Subtract%2A> Methode.  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist kleiner als <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der resultierende <see cref="T:System.DateTimeOffset" />-Wert ist größer als <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Durchführen arithmetischer Datums- und Uhrzeitoperationen</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit dem aktuellen <see cref="T:System.DateTimeOffset" />-Objekt verglichen werden soll.</param>
        <summary>Vergleicht den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts mit einem anderen Objekt desselben Typs.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die angibt, ob das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt kleiner, gleich oder größer als <paramref name="obj" /> ist. Die Rückgabewerte der Methode werden wie folgt interpretiert: 
 <list type="table"><listheader><term> Rückgabewert 
 </term><description> Beschreibung  
 </description></listheader><item><term> Kleiner als 0 (null) 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ist kleiner als (liegt vor) <paramref name="obj" />.  
  
 </description></item><item><term> Zero 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ist gleich (liegt auf demselben Zeitpunkt wie) <paramref name="obj" />.  
  
 </description></item><item><term> Größer als 0 (null) 
 </term><description> Das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ist größer als (später als) <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Das Objekt, das den Rückruf initiiert hat. Die Funktionen für diesen Parameter sind derzeit nicht implementiert.</param>
        <summary>Wird ausgeführt, wenn die Deserialisierung eines Objekts abgeschlossen ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Das mit Daten zu füllende Objekt.</param>
        <param name="context">Das Ziel dieser Serialisierung (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Füllt ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den für das Serialisieren des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts erforderlichen Daten.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="info" />-Parameter ist <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Ticks ab, die das Datum und die Uhrzeit des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in Systemzeit darstellt.</summary>
        <value>Die Anzahl der Ticks in der Uhrzeit des <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Ticks%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Der Wert des der <xref:System.DateTimeOffset.Ticks%2A> Eigenschaft darstellt, die Anzahl der 100-Nanosekunden-Intervalle, die seit 12:00:00 Mitternacht am 1. Januar 0001 verstrichen sind (der Wert des <xref:System.DateTimeOffset.MinValue>). Er umfasst keine Ticks, die von Schaltsekunden hinzugefügt werden. Eine Nanosekunden ist eine den milliardsten Teil einer Sekunde. Es gibt zehn Millionen Ticks pro Sekunde. Der Wert des der <xref:System.DateTimeOffset.Ticks%2A> Eigenschaft liegt zwischen `DateTimeOffset.MinValue.Ticks` zu `DateTimeOffset.MaxValue.Ticks`.  
  
 Sie können die Anzahl von Ticks zum Zuweisen eine <xref:System.DateTimeOffset> -Objekt unter Verwendung der <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> Überladung des Konstruktors.  
  
   
  
## Examples  
 Im folgenden Beispiel initialisiert einen <xref:System.DateTimeOffset> Objekt, indem Sie die Anzahl der Ticks in der Date-1. Juli 2008 annähern 1:23:07. Klicken Sie dann das Datum und die Anzahl der Ticks, die nach diesem Datum dargestellt werden, in der Konsole angezeigt.  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Uhrzeit für das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt ab.</summary>
        <value>Das Zeitintervall des aktuellen Datums, das seit Mitternacht verstrichen ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.TimeOfDay%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Die <xref:System.DateTimeOffset.TimeOfDay%2A> Eigenschaft gibt die Zeitkomponente eine <xref:System.DateTimeOffset> Objekt in Form von einer <xref:System.TimeSpan> Objekt. Dies entspricht der <xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.TimeOfDay%2A> Eigenschaft, um die Uhrzeit zu extrahieren und in der Konsole anzuzeigen.  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in eine Windows-Dateizeit.</summary>
        <returns>Der Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als Windows-Dateizeit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Windows-Dateizeit ist ein 64-Bit-Wert, der die Anzahl der 100-Nanosekunden-Intervalle darstellt, die seit 12:00 Mitternacht, 1. Januar 1601 n. Chr. vergangen sind (C.E.) Koordinierte Weltzeit (UTC). Windows verwendet eine Zeit, um aufzuzeichnen, wenn eine Anwendung erstellt, greift auf oder in eine Datei geschrieben.  
  
 Die <xref:System.DateTimeOffset.ToFileTime%2A> Methode konvertiert das aktuelle <xref:System.DateTimeOffset> des Objekts Datum und Uhrzeit in UTC, bevor die Konvertierung durchgeführt. Das heißt, Aufrufen der <xref:System.DateTimeOffset.ToFileTime%2A> Methode entspricht der folgende Methodenaufruf:  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die resultierende Dateizeit stellt ein Datum und eine Uhrzeit vor dem 1. Januar 1601 u. Z. 00:00 Uhr dar. Coordinated Universal Time (UTC).</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt in ein <see cref="T:System.DateTimeOffset" />-Objekt, das die Ortszeit darstellt.</summary>
        <returns>Ein Objekt, das die in Ortszeit konvertierte Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Durchführung der Konvertierung in die Ortszeit, konvertiert die Methode zunächst die aktuelle <xref:System.DateTimeOffset> Datum und Uhrzeit in Coordinated Universal Time (UTC) durch Subtrahieren des Offsets, ab dem Zeitpunkt des Objekts. Klicken Sie dann konvertiert das UTC-Datum und die Uhrzeit in Ortszeit durch Hinzufügen der lokalen Zeitzone. Auf diese Weise werden alle Anpassungsregeln für die lokale Zeitzone dauert.  
  
 Beide den Wert des aktuellen <xref:System.DateTimeOffset> Objekt und der Wert des der <xref:System.DateTimeOffset> vom Methodenaufruf zurückgegebene Objekt der gleichen Zeitpunkt darstellen. D. h. sowohl an übergeben werden die <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> -Methode, die Methode gibt `true`.  
  
 Wenn die Konvertierung eine Zeit ergibt, der außerhalb des gültigen Bereichs von der <xref:System.DateTimeOffset> Typ, der <xref:System.DateTimeOffset.ToLocalTime%2A> Methode gibt eine <xref:System.DateTimeOffset> Objekt, das Datum und Uhrzeit festlegen <xref:System.DateTimeOffset.MaxValue> oder <xref:System.DateTimeOffset.MinValue> und der Offset auf den Offset der lokalen Zeitzone festgelegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ToLocalTime%2A> Methode zum Konvertieren einer <xref:System.DateTimeOffset> -Wert in Ortszeit in die Zeitzone Pacific Standard Time. Es zeigt auch der Methode-Unterstützung für Regeln zur zeitzonenanpassung berücksichtigt die lokale Zeitzone.  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">Der Offset, in den der <see cref="T:System.DateTimeOffset" />-Wert konvertiert werden soll.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in die durch einen Offsetwert angegebene Datums- und Uhrzeitangabe.</summary>
        <returns>Ein Objekt, das gleich dem ursprünglichen <see cref="T:System.DateTimeOffset" />-Objekt ist (d. h. die zugehörigen <see cref="M:System.DateTimeOffset.ToUniversalTime" />-Methoden geben identische Zeitpunkte zurück), dessen <see cref="P:System.DateTimeOffset.Offset" />-Eigenschaft jedoch auf <paramref name="offset" /> festgelegt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.ToOffset%2A> Methode ist eine Alternative zum Aufrufen der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> Methode. Es kann für einfache Konvertierungen von einer Zeitzone in eine andere durchführen, wenn die Zeitzonen-Offsets von Coordinated Universal Time (UTC) bekannt sind nützlich sein. Aber da weder das ursprüngliche <xref:System.DateTimeOffset> Objekt noch das neue <xref:System.DateTimeOffset> vom Methodenaufruf zurückgegebenen Objekts eindeutig beziehen sich auf einer bestimmten Zeitzone, die Methode gilt Anpassungsregeln der Zeitzone bei der Konvertierung nicht.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht, wie Sie mit der <xref:System.DateTimeOffset.ToOffset%2A> Methode zum Konvertieren einer <xref:System.DateTimeOffset> -Objekt an eine <xref:System.DateTimeOffset> Objekt mit einem anderen Offset.  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <see cref="T:System.DateTimeOffset" />-Wert des sich ergebenden <see cref="P:System.DateTimeOffset.DateTime" />-Objekts liegt vor <see cref="F:System.DateTimeOffset.MinValue" />.  
  
- oder -  
Der <see cref="T:System.DateTimeOffset" />-Wert des sich ergebenden <see cref="P:System.DateTimeOffset.DateTime" />-Objekts liegt nach <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> ist kleiner als -14 Stunden.  
  
- oder -  
 <paramref name="offset" /> ist größer als 14 Stunden.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Eine Zeichenfolgendarstellung eines <see cref="T:System.DateTimeOffset" />-Objekts, die den am Ende der Zeichenfolge angefügten Offset einschließt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert dieser Methode ist identisch mit der <xref:System.DateTime.ToString?displayProperty=nameWithType> Methode, mit dem Unterschied, dass die It ein Leerzeichen enthält, gefolgt von dem am Ende der Zeichenfolge angefügten Offset. Das heißt, es formatiert die Ausgabe, die mit dem langen Datumsmuster, das kurze Datumsmuster und `zzz` benutzerdefinierte Formatzeichenfolge, wobei jedes Element aus dem vorherigen Element durch ein Leerzeichen getrennt. Z. B. wenn <xref:System.DateTime.ToString?displayProperty=nameWithType> gibt einen Wert von 1/12/2008 6:15:50 PM, <xref:System.DateTimeOffset.ToString> gibt einen Wert von 1/12/2008 6:15:50 PM-08: 00 für eine Zeit, die acht Stunden hinter der Coordinated Universal Time (UTC) ist.  
  
 Diese Methode verwendet die Formatierungsinformationen, die von der aktuellen Kultur abgeleitet. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A>. Andere Überladungen der <xref:System.DateTimeOffset.ToString%2A> Methode können Sie die Kultur angeben, deren Formatierung verwendet, und klicken Sie zum Definieren der Ausgabe-Muster von den <xref:System.DateTimeOffset> Wert.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht Aufrufe der <xref:System.DateTimeOffset.ToString> Methode und zeigt die Ausgabe auf einem System, dessen aktuelle Kultur En-us.  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die von dem Kalender unterstützt werden, der von der aktuellen Kultur verwendet wird.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTimeOffset.ToString" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit zurück, in der von der aktuellen Kultur verwendeten Kalenders. Wenn der Wert des aktuellen <see cref="T:System.DateTimeOffset" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Es versucht, ein Datum zu formatieren, die außerhalb des Bereichs von ist das <see cref="T:System.Globalization.HijriCalendar" /> Klasse, wenn die aktuelle Kultur Arabisch (Syrien) ist.  
  
[! Code-Csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [! Code – Vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts entsprechend den Angaben in <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert dieser Methode ist identisch mit der entsprechenden Überladung von der <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> Methode, mit dem Unterschied, dass die It ein Leerzeichen enthält, gefolgt von dem am Ende der Zeichenfolge angefügten Offset. Das heißt, es formatiert die Ausgabe, die mit dem langen Datumsmuster, das kurze Datumsmuster und `zzz` benutzerdefinierte Formatzeichenfolge, wobei jedes Element aus dem vorherigen Element durch ein Leerzeichen getrennt.  
  
 Das Format dieser drei Elemente wird definiert, durch die `formatProvider` Parameter. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> Objekt, das die Kultur darstellt, deren Formatierungskonventionen auf die zurückgegebene Zeichenfolge angewendet werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt der aktuellen Kultur zugeordnet werden (finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine <xref:System.DateTimeOffset> -Objekt unter Verwendung der <xref:System.Globalization.CultureInfo> Objekte, die die invariante Kultur sowie vier anderen Kulturen darstellen.  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die vom Kalender unterstützt werden, der von <paramref name="formatProvider" /> verwendet wird.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit im Kalender verwendet, die von der Kultur, dargestellt durch die <paramref name="formatProvider" /> Parameter. Der Kalender wird definiert, indem die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> Eigenschaft. Wenn der Wert des aktuellen <see cref="T:System.DateTimeOffset" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Es versucht, ein Datum zu formatieren, die außerhalb des Bereichs von ist das <see cref="T:System.Globalization.JapaneseCalendar" /> Klasse.  
  
[! Code-Csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [! Code – Vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Eine Formatzeichenfolge.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts unter Verwendung des angegebenen Formats in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts entsprechend den Angaben in <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` -Parameter sollte entweder einen einzelnen Formatbezeichner enthalten (finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) oder ein benutzerdefiniertes Formatmuster (finden Sie unter [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ), definiert das Format der zurückgegebenen Zeichenfolge. Wenn `format` ist null oder eine leere Zeichenfolge (""), wird die <xref:System.DateTimeOffset> -Wert mithilfe des Standardformats ausgegeben.  
  
 Die folgende Tabelle zeigt die genaue Operation von bestimmten Formatbezeichnern, die bei der Verwendung mit <xref:System.DateTimeOffset>, unterscheidet sich ihr Verhalten bei der Verwendung mit <xref:System.DateTime>.  
  
|Vorhandene Formatbezeichner|Neues Verhalten|  
|-------------------------------|------------------|  
|"K"|Round-Trip soll ein Datums- und Uhrzeitwert. Mit <xref:System.DateTimeOffset>, ordnet "Zzz" (der Offset wird immer angezeigt, mit Stunden und Minuten). Beachten Sie, dass "K" benutzerdefinierter Formatbezeichner; Es darf nicht als einzelne Zeichen im `format`.|  
|"U"|Wird nicht unterstützt.|  
|"r"|Konvertiert die <xref:System.DateTimeOffset> Objekt in die koordinierte Weltzeit (UTC) und gibt diesen mit der benutzerdefinierten Formatzeichenfolge `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Konvertiert die <xref:System.DateTimeOffset> Objekt in die UTC und gibt diesen mit dem Format `yyyy-MM-dd HH:mm:ssZ`.|  
  
 Verbleibende Standardformatbezeichner für Datum und Uhrzeit, Verhalten Sie sich bei der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode wie bei der <xref:System.DateTime.ToString%2A> Methode.  
  
 Diese Methode verwendet die Formatierungsinformationen, die von der aktuellen Kultur abgeleitet. Weitere Informationen finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A>.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine <xref:System.DateTimeOffset> Objekt in der Konsole unter Verwendung der Standardformatbezeichner für Datum und Uhrzeit. Die Ausgabe so formatiert wird, mithilfe der En-us Kultur.  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Die Länge des <paramref name="format" /> ist 1, und es ist keines der standardmäßigen Formatbezeichnerzeichen, die für <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiert sind.  
  
- oder -  
 <paramref name="format" /> enthält kein gültiges benutzerdefiniertes Formatmuster.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die von dem Kalender unterstützt werden, der von der aktuellen Kultur verwendet wird.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTimeOffset.ToString(System.String)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit zurück, in der von der aktuellen Kultur verwendeten Kalenders. Wenn der Wert des aktuellen <see cref="T:System.DateTimeOffset" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Es versucht, ein Datum zu formatieren, die außerhalb des Bereichs von ist das <see cref="T:System.Globalization.HebrewCalendar" /> Klasse, wenn die aktuelle Kultur Hebräisch (Israel) ist.  
  
[! Code-Csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [! Code – Vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Eine Formatzeichenfolge.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts unter Verwendung des angegebenen Formats sowie der kulturabhängigen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts wie von <paramref name="format" /> und <paramref name="provider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` -Parameter sollte entweder einen einzelnen Formatbezeichner enthalten (finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) oder ein benutzerdefiniertes Formatmuster (finden Sie unter [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ). Wenn `format` ist null oder eine leere Zeichenfolge (""), wird die <xref:System.DateTimeOffset> -Objekt mithilfe des Standardformats ausgegeben.  
  
 Die folgende Tabelle zeigt die genaue Operation von bestimmten Formatbezeichnern, die bei der Verwendung mit <xref:System.DateTimeOffset>, unterscheidet sich ihr Verhalten bei der Verwendung mit <xref:System.DateTime>.  
  
|Vorhandene Formatbezeichner|Neues Verhalten|  
|-------------------------------|------------------|  
|"K"|Round-Trip soll ein Datums- und Uhrzeitwert. Mit <xref:System.DateTimeOffset>, ordnet "Zzz" (der Offset wird immer angezeigt, mit Stunden und Minuten). Beachten Sie, dass "K" benutzerdefinierter Formatbezeichner; Es darf nicht als einzelne Zeichen im `format`.|  
|"U"|Wird nicht unterstützt.|  
|"r"|Konvertiert die <xref:System.DateTimeOffset> Objekt in die koordinierte Weltzeit (UTC) und gibt diesen mit der benutzerdefinierten Formatzeichenfolge `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Konvertiert die <xref:System.DateTimeOffset> Wert in UTC und gibt diesen mit dem Format `yyyy-MM-dd HH:mm:ssZ`.|  
  
 Verbleibende Standardformatbezeichner für Datum und Uhrzeit, Verhalten Sie sich bei der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode wie bei der <xref:System.DateTime.ToString%2A> Methode.  
  
 Das Muster, das Standardformatbezeichner, als auch die Symbole und die Namen der Datums- und Zeitkomponenten, entspricht, wird definiert, durch die `formatProvider` Parameter. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierung, in verwendet wird `input`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft wird definiert, die in verwendete Formatierung `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt der aktuellen Kultur zugeordnet werden (finden Sie unter <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> -Methode zum Anzeigen einer <xref:System.DateTimeOffset> -Objekt unter Verwendung einer benutzerdefinierten Formatzeichenfolge für verschiedene Kulturen.  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Die Länge des <paramref name="format" /> ist 1, und es ist keines der standardmäßigen Formatbezeichnerzeichen, die für <see cref="T:System.Globalization.DateTimeFormatInfo" /> definiert sind.  
  
- oder -  
 <paramref name="format" /> enthält kein gültiges benutzerdefiniertes Formatmuster.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Datum und Uhrzeit liegen außerhalb des Bereichs von Datumsangaben, die vom Kalender unterstützt werden, der von <paramref name="formatProvider" /> verwendet wird.</exception>
        <block subset="none" type="usage">
          <para>Die <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> Methode gibt eine Zeichenfolgendarstellung von Datum und Uhrzeit im Kalender ein, die die <paramref name="formatProvider" /> Parameter. Der Kalender wird definiert, indem die <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> Eigenschaft. Wenn der Wert des aktuellen <see cref="T:System.DateTimeOffset" /> Instanz liegt vor <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> oder später als <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, löst die Methode eine <see cref="T:System.ArgumentOutOfRangeException" />. Dies wird im folgenden Beispiel veranschaulicht. Es versucht, ein Datum zu formatieren, die außerhalb des Bereichs von ist das <see cref="T:System.Globalization.UmAlQuraCalendar" /> Klasse.  
  
[! Code-Csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [! Code – Vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Standard-Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Benutzerdefinierte Formatzeichenfolgen für Datum und Uhrzeit</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Beispiel: .NET Framework 4-Hilfsprogramm zur Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt in einen <see cref="T:System.DateTimeOffset" />-Wert, der die Coordinated Universal Time (UTC) darstellt.</summary>
        <returns>Ein Objekt, das die in Coordinated Universal Time (UTC) konvertierte Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt eine <xref:System.DateTimeOffset> Objekt, dessen <xref:System.DateTimeOffset.Offset%2A> Eigenschaft auf 0 (null) festgelegt ist.  
  
 Beide den Wert des aktuellen <xref:System.DateTimeOffset> Objekt und der Wert des der <xref:System.DateTimeOffset> vom Methodenaufruf zurückgegebene Objekt der gleichen Zeitpunkt darstellen. D. h. sowohl an übergeben werden die <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> -Methode, die Methode gibt `true`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ToUniversalTime%2A> Methode, um eine lokale Uhrzeit sowie verschiedene weitere Uhrzeiten in Coordinated Universal Time (UTC) zu konvertieren.  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Anzahl der Millisekunden zurück, die seit dem 1. Januar 1970 um 00:00:00.000Z verstrichen sind.</summary>
        <returns>Die Anzahl der Millisekunden, die seit dem 1. Januar 1970 um 00:00:00.000Z verstrichen sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 UNIX-Zeit darstellt, die Anzahl der Sekunden seit 1970 verstrichen sind, die-01-01T00:00:00Z (1. Januar 1970, 00:00 Uhr UTC). Dies ist keine Schaltsekunden zu berücksichtigen. Diese Methode gibt die Anzahl der Millisekunden in Unix-Zeit zurück.  
  
 Diese Methode konvertiert die aktuelle Instanz zuerst in UTC, vor der Rückgabe der Anzahl der Millisekunden in die Unix-Zeit. Für Datum und Uhrzeit-Werte vor 1970-01-01T00:00:00Z, diese Methode gibt einen negativen Wert zurück.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Anzahl der Sekunden zurück, die seit dem 1. Januar 1970 um 00:00:00Z verstrichen sind.</summary>
        <returns>Die Anzahl der Sekunden, die seit dem 1. Januar 1970 um 00:00:00Z verstrichen sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 UNIX-Zeit darstellt, die Anzahl der Sekunden seit 1970 verstrichen sind, die-01-01T00:00:00Z (1. Januar 1970, 00:00 Uhr UTC). Dies ist keine Schaltsekunden zu berücksichtigen.  
  
 Diese Methode konvertiert die aktuelle Instanz zuerst in UTC, vor der Rückgabe der Unix-Zeit. Für Datum und Uhrzeit-Werte vor 1970-01-01T00:00:00Z, diese Methode gibt einen negativen Wert zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> Methode, um die Unix-Zeit von Werten zurückgegeben, die gleich, kurz vor, und kurz nach 1970 sind-01-01T00:00:00Z.  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert eine angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in den entsprechenden <see cref="T:System.DateTimeOffset" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" /> zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn der <paramref name="input" />-Parameter <see langword="null" /> ist oder keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Versucht, eine angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in deren <see cref="T:System.DateTimeOffset" />-Entsprechung zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> Methode entspricht der <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl. Es analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen getrennt sind. Diese drei Elemente sind in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Uhrzeit >|"13:02:03 UHR"|  
|\<Offset >|"-7: 30"|  
  
 Jedes dieser Elemente ist zwar optional, \<Offset > kann nicht allein. Es muss angegeben werden, zusammen mit den beiden \<Datum > oder \<Zeit >. Wenn \<Datum > fehlt, ist der Standardwert Wert ist der aktuelle Tag. Wenn \<Datum > ist vorhanden, aber seine Jahr Komponente besteht aus nur zwei Ziffern umfasst, wird eine Konvertierung in ein Jahr im aktuellen Kalender von der aktuellen Kultur basierend auf den Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Wenn \<Zeit > fehlt, ist der Standardwert Wert ist 12:00:00 Uhr. Wenn \<Offset > nicht angegeben ist, ist der Standardwert der Offset der lokalen Zeitzone. Wenn \<Offset > vorhanden ist, kann entweder eine Negative oder darstellen einer positiven Offset von Coordinated Universal Time (UTC). In beiden Fällen \<Offset > muss ein Vorzeichensymbol oder der Rückgabe der Methode enthalten `false`.  
  
 Die `input` Zeichenfolge wird analysiert, mithilfe den Formatierungsinformationen in eine <xref:System.Globalization.DateTimeFormatInfo> Objekt initialisiert wurde, für die aktuelle Kultur. Wenn Sie um eine Zeichenfolge, die angegebene Formatierung enthält, die nicht unbedingt mit der aktuellen Kultur entsprechen zu analysieren, verwenden die <xref:System.DateTimeOffset.TryParseExact%2A> Methode, und geben Sie einen Formatbezeichner.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> Methode zum Analysieren von mehreren Zeichenfolgen in unterschiedlichen Formaten für Datum und Uhrzeit.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Beispiel: .NET Framework 4-Hilfsprogramm zur Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" />-Wert zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung fehlgeschlagen ist. Die Konvertierung schlägt fehl, wenn der <paramref name="input" />-Parameter <see langword="null" /> ist oder keine gültige Zeichenfolgendarstellung eines Datums und einer Uhrzeit enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Versucht, eine angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in deren <see cref="T:System.DateTimeOffset" />-Entsprechung zu konvertieren, und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> Methode entspricht der <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl. Die-Methode analysiert eine Zeichenfolge mit drei Elementen, die in beliebiger Reihenfolge angezeigt werden können und durch Leerzeichen getrennt sind. Diese drei Elemente sind in der folgenden Tabelle dargestellt.  
  
|Element|Beispiel|  
|-------------|-------------|  
|\<Datum >|"2/10/2007"|  
|\<Uhrzeit >|"13:02:03 UHR"|  
|\<Offset >|"-7: 30"|  
  
 Jedes dieser Elemente ist zwar optional, \<Offset > kann nicht allein. Es muss angegeben werden, zusammen mit den beiden \<Datum > oder \<Zeit >. Wenn \<Datum > fehlt, ist der Standardwert Wert ist der aktuelle Tag. Wenn \<Datum > ist vorhanden, aber seine Jahr Komponente besteht aus nur zwei Ziffern umfasst, wird eine Konvertierung in ein Jahr in die `provider` aktuellen Kalender des Parameters basierend auf den Wert der <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> Eigenschaft. Wenn \<Zeit > fehlt, ist der Standardwert Wert ist 12:00:00 Uhr. Wenn \<Offset > fehlt, ist der Standardwert der Offset der lokalen Zeitzone oder <xref:System.TimeSpan.Zero> Wenn entweder die <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> oder <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Wert wird angegeben, `styles`. Wenn \<Offset > vorhanden ist, kann entweder eine Negative oder darstellen einer positiven Offset von Coordinated Universal Time (UTC). In beiden Fällen \<Offset > muss ein Vorzeichensymbol oder der Rückgabe der Methode enthalten `false`.  
  
 Die `input` Zeichenfolge wird analysiert, unter Verwendung der kulturspezifischen Formatierungsinformationen in eine <xref:System.Globalization.DateTimeFormatInfo> angegebenen die `formatProvider` Parameter. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierung, in verwendet wird `input`. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert das Format, das verwendet wird `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Darüber hinaus kann jedes Element getrennt werden, von führenden oder nachgestellten Leerzeichen, und die \<Datum > und \<Zeit > Komponenten zählen interne Leerzeichen (z. B. 6:00:00). Nur die \<Offset > Komponente darf keine internen Leerzeichen enthalten.  
  
 Wenn `provider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die positiven oder negativen Vorzeichen verwendet \<Offset > muss entweder + oder –. Es ist nicht definiert, durch die <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> oder <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> Eigenschaften der <xref:System.Globalization.NumberFormatInfo> zurückgegebenes Objekt der `formatprovider` des Parameters <xref:System.Globalization.CultureInfo.NumberFormat%2A> Eigenschaft.  
  
 Die folgenden Elemente von der <xref:System.Globalization.DateTimeStyles> Enumeration werden unterstützt:  
  
|DateTimeStyles-Element|Kommentare|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert die Zeichenfolge, die durch dargestellt `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Zeichenfolge und dem anschließenden Aufrufen des zurückgegebenen Objekts <xref:System.DateTimeOffset.ToUniversalTime> Methode.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Innerer Leerraum ist zulässig, der \<Datum > und \<Zeit > Komponenten.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Vor jede Komponente in der analysierten Zeichenfolge ist der führende Leerzeichen zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Obwohl gültig ist, wird dieser Wert ignoriert. Vor jede Komponente in der analysierten Zeichenfolge ist das nachfolgende Leerzeichen zulässig.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Dies ist das Standardverhalten. Es kann nicht überschrieben werden, durch Angeben eines restriktiveren <xref:System.Globalization.DateTimeStyles> Enumeration-Wert, z. B. <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Gibt an, dass, wenn die `input` verfügt nicht über die Parameter einer \<Offset >-Element, den Offset der lokalen Zeitzone bereitgestellt werden soll. Dies ist das Standardverhalten der <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> Methode.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Gibt an, dass, wenn die `input` verfügt nicht über die Parameter einer \<Offset >-Element, der UTC-Offset (00:00) bereitgestellt werden soll.|  
|<xref:System.Globalization.DateTimeStyles.None>|Obwohl gültig ist, wird dieser Wert wird ignoriert, und hat keine Auswirkungen.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft dieses Werts hat keine Auswirkungen.|  
  
 Nur die <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> Wert wird nicht unterstützt. Ein <xref:System.ArgumentException> wird ausgelöst, wenn dieser Wert gehört die `styles` Parameter.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> Methode mit einer Vielzahl von <xref:System.Globalization.DateTimeStyles> Werte zum Analysieren von einigen Zeichenfolgen in unterschiedlichen Formaten für Datum und Uhrzeit.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
- oder -  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
  
- oder -  
 <paramref name="styles" /> beinhaltet sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe in die <see cref="T:System.DateTimeOffset" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss einem angegebenen Format genau entsprechen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Ein Zeichenbereich, der die Darstellung der zu konvertierenden Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erforderliche Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Format von <paramref name="input" /> angibt. Ein häufig angegebener Wert ist <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" /> zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung schlägt fehl, wenn</param>
        <summary>Konvertiert die Darstellung einer Datums- und Uhrzeitangabe in einem Zeichenbereich unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in den entsprechenden <see cref="System.DateTimeOffset" />. Das Format der Darstellung von Datum und Uhrzeit muss dem angegebenen Format genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Diese Überladung entspricht dem <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> -Methode, mit dem Unterschied, dass diese Methode keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl. Es analysiert die Darstellung von Datum und Uhrzeit, die genau das vom angegebenen Muster entsprechen muss die `format` Parameter. Wenn `input` entspricht nicht diesem Muster mit möglichen Varianten Leerraum durch definiert die `styles` Parameter, die der Analysevorgang ein Fehler auftritt und die Methode gibt `false`.  
  
Die `format` -Parameter ist eine Spanne von Zeichen, die entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Muster von enthält `input`. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn `format` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, der Analysevorgang ein Fehler auftritt und die Methode gibt `false`.  
  
Wenn `format` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn `format` ist nicht erforderlich, `input` einen Offset enthält, die Abweichung des resultierenden <xref:System.DateTimeOffset> Objekt abhängig ist, auf dem Wert der `styles` Parameter. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeLocal>, der Offset der lokalen Zeitzone zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, den Offset von Coordinated Universal Time (UTC) oder + 00:00, zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn kein Wert angegeben wird, wird der Offset der lokalen Zeitzone verwendet.  
  
Die bestimmtes Datum und Uhrzeit verwendeten Symbole und Zeichenfolgen `input` werden definiert, indem die `formatProvider` Parameter. Das gleiche gilt für die exakte Muster von `input` Wenn `format` ist eine Standardformatzeichenfolge Spezifizierer. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert, die Symbole und innerhalb von standard-Formate `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter definiert, ob Leerzeichen zulässig ist in der Eingabezeichenfolge, gibt an, wie Zeichenfolgen ohne eine explizite Offset-Komponente analysiert werden und unterstützt die UTC-Konvertierung als Teil des Analysevorgangs. Alle Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration werden unterstützt, mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Die folgende Tabelle enthält die Auswirkungen der einzelnen unterstützten Mitglied.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Darstellung von Datum und Uhrzeit und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> -Methode der zurückgegebenen <xref:System.DateTimeOffset> Objekt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `format` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `format` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt erhält den UTC-Offset (+ 00:00 Uhr).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht das `input` einschließen inneren Leerraum von Format nicht angegeben. Zusätzliche Leerzeichen zwischen Datums- und Zeitkomponenten und innerhalb der einzelnen Komponenten, als der Offset kann angezeigt werden und wird ignoriert, wenn die Zeichenfolge zu analysieren.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht das `input` zum Einschließen von führenden Leerzeichen nicht anhand des `format`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht das `input` sollen nachfolgende Leerzeichen nicht anhand des `format`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht das `input` einschließen vorangestellte, nachfolgende und innere Leerzeichen nicht anhand des `format`. Alle zusätzlichen Leerzeichen nicht im angegebenen `format` beim Analysieren der Zeichenfolge werden ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerraum ist nicht zulässig `input`. Leerraum muss angezeigt werden, genau wie angegeben in `format`. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkungen, da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft.|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
oder <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
oder <paramref name="styles" /> enthält sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
Diese Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der eine der zugewiesenen Muster entspricht der `formats` Array. Wenn `input` entspricht nicht eines dieser Muster mit allen Varianten von definiert die `styles` Parameter, die der Analysevorgang ein Fehler auftritt und die Methode gibt `false`. Abgesehen von Vergleichen `input` , mehrere Zeichenfolgen-Formatbezeichner, diese Überladung verhält sich genauso wie die <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> Methode.  
  
 Die `formats` -Parameter ist ein Zeichenfolgen-Array, dessen Elemente enthält, entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das mögliche Muster von `input`. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn das übereinstimmende Element im `formats` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, der Analysevorgang misslingt, und die Methode gibt `false`.  
  
> [!IMPORTANT]
>  Mithilfe der `formats` Parameter dieser Überladung, die mehrere Formate angeben, kann Probleme der vermindert, die viele Benutzer beim Eingeben von Datumsangaben und Uhrzeiten auftreten. Insbesondere können Sie mehrere Eingabemuster definieren eine Anwendung zur Handhabung von Datums- und uhrzeitdarstellungen, die kann entweder ein- oder verfügen nicht über führende Nullen in Monaten, Tagen, Stunden, Minuten und Sekunden. Im Beispiel wird veranschaulicht, der an.  
  
 Wenn das übereinstimmende Element im `formats` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn das übereinstimmende Element im `formats` erfordert, dass die Eingabe zeilenweise, aber kein Datum enthält, wird die resultierende enthält <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` einen Offset enthält, die Abweichung des resultierenden <xref:System.DateTimeOffset> Objekt abhängig ist, auf dem Wert der `styles` Parameter. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, der Offset der lokalen Zeitzone zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, den Offset von Coordinated Universal Time (UTC) oder + 00:00, zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn kein Wert angegeben wird, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmtes Datum und Uhrzeit Symbole `input` werden definiert, indem die `formatProvider` Parameter. Das gleiche gilt für die exakte Muster von `input` Wenn das entsprechende Element der `formats` ist eine Standardformatzeichenfolge Spezifizierer. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert, die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter definiert, ob Leerzeichen erlaubt, wird in der Eingabezeichenfolge, gibt an, wie Zeichenfolgen ohne eine explizite Offset-Komponente analysiert werden und unterstützt die UTC-Konvertierung als Teil des Analysevorgangs. Alle Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration werden unterstützt, mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Die folgende Tabelle enthält die Auswirkungen der einzelnen unterstützten Mitglied.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> -Methode der zurückgegebenen <xref:System.DateTimeOffset> Objekt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt erhält den UTC-Offset (+ 00:00 Uhr).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht das `input` einschließen inneren Leerraum, die nicht durch die Elemente im angegebenen `formats`. Zusätzliche Leerzeichen können angezeigt werden, zwischen Datums- und Zeitkomponenten und innerhalb der einzelnen Komponenten (mit Ausnahme der Offset) und wird ignoriert, wenn die Zeichenfolge zu analysieren.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht das `input` , einschließlich des vorangestellten Leerzeichen nicht angegeben werden, durch die Elemente in `formats`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht das `input` sollen nachfolgende Leerzeichen, die nicht durch die Elemente im angegebenen `formats`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht das `input` einschließen führende, innere und nachfolgende Leerzeichen nicht angegeben wird, durch die Elemente in `formats`. Alle zusätzlichen Leerzeichen nicht in das übereinstimmende Element im angegebenen `formats` beim Analysieren der Zeichenfolge werden ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerraum ist nicht zulässig `input`. Leerraum muss angezeigt werden, genau wie angegeben in einem bestimmten Element in `formats` für eine erfolgreiche Übereinstimmung vorliegt. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkungen, da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
oder <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
oder <paramref name="styles" /> enthält sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="format">Ein Formatbezeichner, der das erforderliche Format von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Eingabeformat angibt. Ein häufig angegebener Wert ist <see langword="None" />.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" /> zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung kann nicht durchgeführt werden, wenn der <paramref name="input" />-Parameter den Wert <see langword="null" /> hat oder keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe im von <paramref name="format" /> und <c>provider</c> definierten erwarteten Format enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung der Angaben über Format, kulturabhängige Formatierungsinformationen und Stil in die entsprechende <see cref="T:System.DateTimeOffset" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> Methode entspricht der <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> -Methode, mit dem Unterschied, dass diese Methode keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl. Es analysiert die angegebene Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe, die genau das vom angegebenen Muster entsprechen muss die `format` Parameter. Wenn die `input` Zeichenfolge entspricht nicht diesem Muster mit möglichen Varianten Leerraum durch definiert die `styles` Parameter, die der Analysevorgang ein Fehler auftritt und die Methode gibt `false`.  
  
 Die `format` Parameter ist eine Zeichenfolge, enthält entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Muster von `input`. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn `format` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, der Analysevorgang ein Fehler auftritt und die Methode gibt `false`.  
  
 Wenn `format` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn `format` erfordert, dass `input` eine Uhrzeit, aber kein Datum enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn `format` ist nicht erforderlich, `input` einen Offset enthält, die Abweichung des resultierenden <xref:System.DateTimeOffset> Objekt abhängig ist, auf dem Wert der `styles` Parameter. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeLocal>, der Offset der lokalen Zeitzone zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, den Offset von Coordinated Universal Time (UTC) oder + 00:00, zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn kein Wert angegeben wird, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmtes Datum und Uhrzeit verwendeten Symbole und Zeichenfolgen `input` werden definiert, indem die `formatProvider` Parameter. Das gleiche gilt für die exakte Muster von `input` Wenn `format` ist eine Standardformatzeichenfolge Spezifizierer. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert, die Symbole und innerhalb von standard-Formate `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter definiert, ob Leerzeichen zulässig ist in der Eingabezeichenfolge, gibt an, wie Zeichenfolgen ohne eine explizite Offset-Komponente analysiert werden und unterstützt die UTC-Konvertierung als Teil des Analysevorgangs. Alle Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration werden unterstützt, mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Die folgende Tabelle enthält die Auswirkungen der einzelnen unterstützten Mitglied.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> -Methode der zurückgegebenen <xref:System.DateTimeOffset> Objekt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn `format` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn `format` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt erhält den UTC-Offset (+ 00:00 Uhr).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht das `input` einschließen inneren Leerraum von Format nicht angegeben. Zusätzliche Leerzeichen zwischen Datums- und Zeitkomponenten und innerhalb der einzelnen Komponenten, als der Offset kann angezeigt werden und wird ignoriert, wenn die Zeichenfolge zu analysieren.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht das `input` zum Einschließen von führenden Leerzeichen nicht anhand des `format`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht das `input` sollen nachfolgende Leerzeichen nicht anhand des `format`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht das `input` einschließen vorangestellte, nachfolgende und innere Leerzeichen nicht anhand des `format`. Alle zusätzlichen Leerzeichen nicht im angegebenen `format` beim Analysieren der Zeichenfolge werden ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerraum ist nicht zulässig `input`. Leerraum muss angezeigt werden, genau wie angegeben in `format`. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkungen, da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft.|  
  
## Examples 

 Im folgenden Beispiel wird die <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> -Methode mit der standardmäßigen und benutzerdefinierten Formatbezeichnern, die invariante Kultur und verschiedenen <xref:System.Globalization.DateTimeStyles> Werte beim Analysieren verschiedener Zeichenfolgen für Datum und Uhrzeit.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

Im folgenden Beispiel wird eine Vielzahl von <xref:System.Globalization.DateTimeStyles> Werte, um ein Array von Zeichenfolgen zu analysieren, die voraussichtlich entsprechen [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Wie die Ausgabe des Beispiels zeigt, wenn analysieren nicht Zeichenfolgen, die das richtige Format aufweisen:

- Sie enthalten Leerzeichen, und eine entsprechende <xref:System.Globalization.DateTimeStyles> Flag (z. B. <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> wurde nicht im Aufruf Methode bereitgestellt.

- Sie enthalten die Datum und Uhrzeit-Elemente, die sich außerhalb des gültigen Bereichs befinden.

Zeichenfolgen, die keine UTC-zeitverschiebung angeben, wird angenommen, dass der Offset von der lokalen Zeitzone haben (in diesem Fall-07: 00, die angibt, den Offset der Zeitzone Pacific Daylight Time), wenn die <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> Flag im Aufruf Methode angegeben wird. In diesem Fall werden diese als koordinierte Weltzeit sein.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
- oder -  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
  
- oder -  
 <paramref name="styles" /> beinhaltet sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.TryParseExact" /> gibt <see langword="false" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die eine zu konvertierende Datums- und Zeitangabe enthält.</param>
        <param name="formats">Ein Array, das die erwarteten Formate von <paramref name="input" /> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen zu <paramref name="input" /> bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die das zulässige Eingabeformat angibt. Ein häufig angegebener Wert ist <see langword="None" />.</param>
        <param name="result">Die Methode gibt bei erfolgreicher Konvertierung den <see cref="T:System.DateTimeOffset" /> zurück, der dem Datum und der Uhrzeit von <paramref name="input" /> entspricht, oder <see cref="F:System.DateTimeOffset.MinValue" />, wenn die Konvertierung nicht durchgeführt werden konnte. Die Konvertierung kann nicht durchgeführt werden, wenn <paramref name="input" /> keine gültige Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe enthält oder wenn die enthaltene Datums- und Uhrzeitangabe nicht das von <paramref name="format" /> definierte Format aufweist oder wenn <paramref name="formats" /> den Wert <see langword="null" /> hat. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgenentsprechung einer Datums- und Uhrzeitangabe unter Verwendung des angegebenen Formatarrays, der kulturspezifischen Formatierungsinformationen und des Stils in die <see cref="T:System.DateTimeOffset" />-Entsprechung. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="input" />-Parameter erfolgreich konvertiert wird, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Datums, der eine der zugewiesenen Muster entspricht der `formats` Array. Wenn die `input` Zeichenfolge entspricht nicht eines dieser Muster mit allen Varianten von definiert die `styles` Parameter, die der Analysevorgang ein Fehler auftritt und die Methode gibt `false`. Abgesehen von Vergleichen `input` , mehrere Zeichenfolgen-Formatbezeichner, diese Überladung verhält sich genauso wie die <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> Methode.  
  
 Die `formats` -Parameter ist ein Zeichenfolgen-Array, dessen Elemente enthält, entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das mögliche Muster von `input`. Ausführliche Informationen zu gültigen Formatierungscodes finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Wenn das übereinstimmende Element im `formats` enthält die `z`, `zz`, oder `zzz` benutzerdefinierte Formatbezeichner, um anzugeben, dass ein Offset in vorhanden sein muss `input`, dem Offset muss entweder ein negativen Vorzeichen oder ein positives Vorzeichen enthalten. Wenn die Anmeldung nicht vorhanden ist, der Analysevorgang misslingt, und die Methode gibt `false`.  
  
> [!IMPORTANT]
>  Mithilfe der `formats` Parameter dieser Überladung, die mehrere Formate angeben, kann Probleme der vermindert, die viele Benutzer beim Eingeben von Datumsangaben und Uhrzeiten auftreten. Insbesondere können Sie mehrere Eingabemuster definieren eine Anwendung zur Handhabung von Datums- und uhrzeitdarstellungen, die kann entweder ein- oder verfügen nicht über führende Nullen in Monaten, Tagen, Stunden, Minuten und Sekunden. Im Beispiel wird veranschaulicht, der an.  
  
 Wenn das übereinstimmende Element im `formats` erfordert, dass `input` enthalten ein Datum, aber keine Uhrzeit enthält, wird die resultierende <xref:System.DateTimeOffset> -Objekt zugewiesen ist eine Zeit von Mitternacht (0: 00:00). Wenn das übereinstimmende Element im `formats` erfordert, dass die Eingabe zeilenweise, aber kein Datum enthält, wird die resultierende enthält <xref:System.DateTimeOffset> -Objekt das aktuelle Datum auf dem lokalen System zugewiesen ist. Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` einen Offset enthält, die Abweichung des resultierenden <xref:System.DateTimeOffset> Objekt abhängig ist, auf dem Wert der `styles` Parameter. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeLocal>, der Offset der lokalen Zeitzone zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn `styles` enthält <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, den Offset von Coordinated Universal Time (UTC) oder + 00:00, zugewiesen ist die <xref:System.DateTimeOffset> Objekt. Wenn kein Wert angegeben wird, wird der Offset der lokalen Zeitzone verwendet.  
  
 Die bestimmtes Datum und Uhrzeit verwendeten Symbole und Zeichenfolgen `input` werden definiert, indem die `formatProvider` Parameter. Das gleiche gilt für die exakte Muster von `input` Wenn das entsprechende Element der `formats` ist eine Standardformatzeichenfolge Spezifizierer. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, auf dessen Grundlage die `input` interpretiert wird. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert, die Symbole und die Formatierung in `input`.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das das Format von Datums-und Uhrzeitdaten definiert.  
  
 Wenn `formatprovider` ist `null`, <xref:System.Globalization.CultureInfo> -Objekt, das der aktuellen Kultur entspricht, wird verwendet.  
  
 Die `styles` Parameter definiert, ob Leerzeichen erlaubt, wird in der Eingabezeichenfolge, gibt an, wie Zeichenfolgen ohne eine explizite Offset-Komponente analysiert werden und unterstützt die UTC-Konvertierung als Teil des Analysevorgangs. Alle Mitglieder der <xref:System.Globalization.DateTimeStyles> Enumeration werden unterstützt, mit Ausnahme von <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Die folgende Tabelle enthält die Auswirkungen der einzelnen unterstützten Mitglied.  
  
|`DateTimeStyles` -Member|Verhalten|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analysiert `input` und, falls erforderlich, eine Konvertierung in UTC. Dies ist äquivalent zum Analysieren einer Zeichenfolge und dem anschließenden Aufrufen der <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> -Methode der zurückgegebenen <xref:System.DateTimeOffset> Objekt.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt der Offset der lokalen Zeitzone zugewiesen. Dies ist der Standardwert.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Wenn das übereinstimmende Element im `formats` ist nicht erforderlich, `input` enthalten einen Offset-Wert, der zurückgegebenen <xref:System.DateTimeOffset> Objekt erhält den UTC-Offset (+ 00:00 Uhr).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Ermöglicht das `input` einschließen inneren Leerraum, die nicht durch die Elemente im angegebenen `formats`. Zusätzliche Leerzeichen können angezeigt werden, zwischen Datums- und Zeitkomponenten und innerhalb der einzelnen Komponenten (mit Ausnahme der Offset) und wird ignoriert, wenn die Zeichenfolge zu analysieren.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Ermöglicht das `input` , einschließlich des vorangestellten Leerzeichen nicht angegeben werden, durch die Elemente in `formats`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Ermöglicht das `input` sollen nachfolgende Leerzeichen, die nicht durch die Elemente im angegebenen `formats`. Beim Analysieren der Zeichenfolge, werden diese ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Ermöglicht das `input` einschließen führende, innere und nachfolgende Leerzeichen nicht angegeben wird, durch die Elemente in `formats`. Alle zusätzlichen Leerzeichen nicht in das übereinstimmende Element im angegebenen `formats` beim Analysieren der Zeichenfolge werden ignoriert.|  
|<xref:System.Globalization.DateTimeStyles.None>|Gibt an, dass zusätzliche Leerraum ist nicht zulässig `input`. Leerraum muss angezeigt werden, genau wie angegeben in einem bestimmten Element in `formats` für eine erfolgreiche Übereinstimmung vorliegt. Dies ist das Standardverhalten.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Hat keine Auswirkungen, da die <xref:System.DateTimeOffset> Struktur enthält keine `Kind` Eigenschaft.|  
  
   
  
## Examples  
 Das folgende Beispiel definiert mehrere Eingabeformate für die Zeichenfolgendarstellung einer Datums- und Uhrzeitangabe und Offsetwert und übergibt dann die Zeichenfolge, die vom Benutzer eingegeben wird die <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> Methode.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> beinhaltet einen nicht definierten <see cref="T:System.Globalization.DateTimeStyles" />-Wert.  
  
- oder -  
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> wird nicht unterstützt.  
  
- oder -  
 <paramref name="styles" /> beinhaltet sich gegenseitig ausschließende <see cref="T:System.Globalization.DateTimeStyles" />-Werte.</exception>
        <block subset="none" type="usage">
          <para>In der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTimeOffset.TryParseExact" /> gibt <see langword="false" /> , wenn die zu analysierende Zeichenfolge enthält, eine Komponente für Stunden und eine AM/PM-Kennzeichner, die nicht in der Vereinbarung sind. In der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, die AM/PM-Kennzeichner wird ignoriert.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.DateTime" />-Wert ab, der die UTC (Coordinated Universal Time)-Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts darstellt.</summary>
        <value>Die UTC (Coordinated Universal Time)-Datums- und Uhrzeitangabe des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.UtcDateTime%2A> -Eigenschaft liefert eine duale Konvertierung:  
  
-   Konvertiert die Datums- und Uhrzeitangabe des aktuellen <xref:System.DateTimeOffset> Objekt in die koordinierte Weltzeit (UTC). Die Konvertierung erfolgt durch den Wert der Subtraktion der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft von Datum und Uhrzeit des aktuellen <xref:System.DateTimeOffset> Objekt.  
  
-   Konvertiert die <xref:System.DateTimeOffset> -Werts in einen <xref:System.DateTime> Wert.  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTimeOffset.DateTime%2A> Wert wird festgelegt, um <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Abrufen des Werts der <xref:System.DateTimeOffset.UtcDateTime%2A> Eigenschaft entspricht dem Aufrufen der aktuellen <xref:System.DateTimeOffset> des Objekts `ToUniversalTime.DateTime` -Eigenschaft, außer dass die <xref:System.DateTime.Kind%2A> -Eigenschaft des letzten <xref:System.DateTime> Wert ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie mit der die <xref:System.DateTimeOffset.UtcDateTime%2A> Eigenschaft zum Anzeigen einer <xref:System.DateTimeOffset> Wert und die entsprechende UTC-Zeit.  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.DateTimeOffset" />-Objekt ab, dessen Datum und Uhrzeit auf die aktuelle UTC (Coordinated Universal Time)-Datums- und Uhrzeitangabe festgelegt und dessen Offset <see cref="F:System.TimeSpan.Zero" /> ist.</summary>
        <value>Ein Objekt, dessen Datum und Uhrzeit die aktuelle Coordinated Universal Time (UTC) ist und dessen Offset <see cref="F:System.TimeSpan.Zero" /> ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.UtcNow%2A> Eigenschaft berechnet, die basierend auf der lokalen Systemzeit aktuelle koordinierte Weltzeit (UTC) und einem Offset von der Zeitzone des lokalen Systems definiert.  
  
 Die Genauigkeit der Millisekundenkomponente für die aktuelle UTC-Zeit hängt von der Auflösung der Systemuhr. Unter Windows NT 3.5 und höher und Windows Vista-Betriebssystemen ist die Auflösung der Uhr etwa 10 – 15 Millisekunden.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Beziehung zwischen Coordinated Universal Time (UTC) und Ortszeit.  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Ticks ab, die das Datum und die Uhrzeit des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts in Coordinated Universal Time (UTC) darstellt.</summary>
        <value>Die Anzahl der Ticks in der Coordinated Universal Time (UTC) des <see cref="T:System.DateTimeOffset" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.DateTimeOffset.UtcTicks%2A> Eigenschaft darstellt, die Anzahl der 100-Nanosekunden-Intervalle, die seit 12:00:00 Mitternacht am 1. Januar 0001 verstrichen sind (der Wert des <xref:System.DateTimeOffset.MinValue>). Er umfasst keine Ticks, die von Schaltsekunden hinzugefügt werden. Eine Nanosekunden ist eine den milliardsten Teil einer Sekunde. Es gibt zehn Millionen Ticks pro Sekunde. Der Wert des der <xref:System.DateTimeOffset.UtcTicks%2A> Eigenschaft liegt zwischen `DateTimeOffset.MinValue.Ticks` zu `DateTimeOffset.MaxValue.Ticks`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Jahreskomponente des Datums ab, das durch das aktuelle <see cref="T:System.DateTimeOffset" />-Objekt dargestellt wird.</summary>
        <value>Die Jahreskomponente des aktuellen <see cref="T:System.DateTimeOffset" />-Objekts als Ganzzahlwert zwischen 0 und 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.DateTimeOffset.Year%2A> Eigenschaft ist nicht betroffen, durch den Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft.  
  
 Sie können auch eine Zeichenfolgendarstellung des erstellen eine <xref:System.DateTimeOffset> Komponente "Jahr" des Objekts durch Aufrufen der <xref:System.DateTimeOffset.ToString%2A> -Methode mit der benutzerdefinierten Formatbezeichner "y", "Yy" oder "Yyyy".  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Jahreskomponente des eine <xref:System.DateTimeOffset> Wert in vier verschiedene Arten:  
  
-   Durch Abrufen des Werts der <xref:System.DateTimeOffset.Year%2A> Eigenschaft.  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "y".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "Yy".  
  
-   Durch Aufrufen der <xref:System.DateTimeOffset.ToString%28System.String%29> Methode mit dem Formatbezeichner "Yyyy".  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af4cae868333721997233f2ac2270d3287455362" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65009439" /></Metadata><TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <TypeSignature Language="F#" Value="type AccessViolationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Ausnahme, die bei dem Versuch ausgelöst wird, im geschützten Speicher zu lesen oder zu schreiben.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Zugriffsverletzung tritt in nicht verwaltetem oder unsicherem Code auf, wenn der Code versucht, in den Speicher zu lesen oder zu schreiben, der nicht zugeordnet wurde oder auf den er keinen Zugriff hat. Dies tritt normalerweise auf, wenn ein Zeiger einen ungültigen Wert aufweist. Nicht alle Lese- und Schreibvorgänge, die aufgrund ungültiger Zeiger aufgetreten sind, führen zu Zugriffsverletzungen. Eine Zugriffsverletzung gibt somit an, dass mehrere Lese- und Schreibvorgänge aufgrund ungültiger Zeiger aufgetreten sind und dass der Arbeitsspeicher u. U. beschädigt sein kann. Daher weisen Zugriffs Verletzungen fast immer auf schwerwiegende Programmierfehler hin. Mit werden diese ernsthaften Fehler eindeutigidentifiziert.<xref:System.AccessViolationException>  
  
 In Programmen, die ausschließlich aus überprüfbarem verwaltetem Code bestehen, sind alle Verweise entweder gültig oder NULL, und Zugriffs Verletzungen sind nicht zulässig. Jeder Vorgang, der versucht, auf einen NULL-Verweis in überprüfbarem Code zu verweisen, löst eine <xref:System.NullReferenceException> -Ausnahme Ein <xref:System.AccessViolationException> tritt nur auf, wenn überprüfbarer verwalteter Code mit nicht verwaltetem Code oder mit unsicherer verwaltetem Code interagiert.  
  
## <a name="troubleshooting-accessviolationexception-exceptions"></a>Problembehandlung bei AccessViolationException-Ausnahmen  
 Eine <xref:System.AccessViolationException> Ausnahme kann nur in unsicherem verwaltetem Code auftreten, oder wenn überprüfbarer verwalteter Code mit nicht verwaltetem Code interagiert:  
  
-   Eine Zugriffsverletzung, die in unsicherer verwaltetem Code auftritt, kann je nach <xref:System.NullReferenceException> Plattform entweder als <xref:System.AccessViolationException> eine-Ausnahme oder als Ausnahme ausgedrückt werden.  
  
-   Eine Zugriffsverletzung in nicht verwaltetem Code, die zu verwaltetem Code aufblasen, wird <xref:System.AccessViolationException> immer in eine Ausnahme umschließen.  
  
 In beiden Fällen können Sie die Ursache der <xref:System.AccessViolationException> Ausnahme wie folgt identifizieren und beheben:  
  
 Stellen Sie sicher, dass der Arbeitsspeicher, auf den Sie zugreifen möchten, belegt wurde.  
 Eine <xref:System.AccessViolationException> Ausnahme wird immer durch einen Versuch ausgelöst, auf geschützten Speicher zuzugreifen, d. h., um auf Arbeitsspeicher zuzugreifen, der nicht zugeordnet ist oder nicht im Besitz eines Prozesses ist.  
  
 Bei der automatischen Speicherverwaltung handelt es sich um einen Dienst, der von der Common Language Runtime zur Verfügung gestellt wird. Wenn verwalteter Code die gleiche Funktionalität wie der nicht verwaltete Code bereitstellt, können Sie zu verwaltetem Code wechseln, um diese Funktionalität zu nutzen. Weitere Informationen finden Sie unter [Automatic Memory Management](~/docs/standard/automatic-memory-management.md).  
  
 Stellen Sie sicher, dass der Arbeitsspeicher, auf den Sie zugreifen möchten, nicht beschädigt worden ist.  
 Wenn aufgrund ungültiger Zeiger mehrere Lese- und Schreibvorgänge erfolgt sind, kann das möglicherweise zu einer Beschädigung des Arbeitsspeichers führen. Dies tritt in der Regel beim Lesen oder Schreiben von Adressen außerhalb eines vordefinierten Puffers auf.  
  
## <a name="accessviolationexception-and-trycatch-blocks"></a>AccessViolationException-und try/catch-Blöcke  
 Ab werden Ausnahmen <xref:System.AccessViolationException> `catch` , die vom Common Language Runtime ausgelöst werden, nicht von der Anweisung in einem strukturierten Ausnahmehandler behandelt, wenn die Ausnahme außerhalb des von der Common Language reservierten [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]Speichers auftritt. Runtime. Um eine solche <xref:System.AccessViolationException> Ausnahme zu behandeln, sollten Sie das <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> -Attribut auf die Methode anwenden, in der die Ausnahme ausgelöst wird. Diese Änderung wirkt sich nicht <xref:System.AccessViolationException> auf Ausnahmen aus, die von Benutzercode ausgelöst werden, der durch eine `catch` -Anweisung weiterhin abgefangen werden kann. Für Code [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], der für frühere Versionen der .NET Framework geschrieben wurde, die Sie neu kompilieren und ohne Änderungen auf ausführen möchten, können Sie der Konfiguration der APP das [ \<legacykorruptedstateexceptionspolicy >](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md) -Element hinzufügen. Datei. Beachten Sie, dass Sie auch eine Benachrichtigung über die Ausnahmen erhalten können, wenn Sie einen Handler <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> für <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> das-Ereignis oder das-Ereignis definiert haben.  
  
## <a name="version-information"></a>Versionsinformationen  
 Diese Ausnahme wird in der .NET Framework 2,0 und höheren Versionen ausgelöst. In früheren Versionen des .NET Framework wird eine Zugriffsverletzung in nicht verwaltetem Code oder unsicherer verwaltetem Code durch eine <xref:System.NullReferenceException> in verwaltetem Code dargestellt. Eine <xref:System.NullReferenceException> wird auch ausgelöst, wenn ein NULL-Verweis in überprüfbarem verwaltetem Code dereferenziert wird, ein vorkommen, bei dem keine Daten beschädigt werden, und es gibt keine Möglichkeit, zwischen den beiden Situationen in den Versionen 1,0 oder 1,1 zu unterscheiden.  
  
 Administratoren können zulassen, dass ausgewählte Anwendungen auf das Verhalten der .NET Framework Version 1,1 zurückgreifen. Platzieren Sie die folgende Zeile im [ &lt;Abschnitt&gt; Lauf Zeit Element](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) der Konfigurationsdatei für die Anwendung:  
  
```  
<legacyNullReferenceExceptionPolicy enabled = "1"/>  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.AccessViolationException" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.AccessViolationException" />-Klasse mit einer vom System generierten Meldung, die den Fehler beschreibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A> -Eigenschaft der neuen Instanz mit einer vom System bereitgestellten Meldung, die den Fehler beschreibt, z. b. "Es wurde versucht, den geschützten Speicher zu lesen oder zu schreiben. Dies ist häufig ein Hinweis darauf, dass anderer Arbeitsspeicher beschädigt wurde. " Diese Meldung berücksichtigt die aktuelle Systemkultur.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.AccessViolationException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Die lokalisierte Zeichenfolge mit der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string -&gt; AccessViolationException" Usage="new System.AccessViolationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, in der die Ausnahme beschrieben wird Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.AccessViolationException" />-Klasse mit einer angegebenen Meldung, die den Fehler beschreibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.AccessViolationException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Die in `message` angegebene Fehlermeldungszeichenfolge.|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; AccessViolationException" Usage="new System.AccessViolationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt, das die Daten des serialisierten Objekts enthält.</param>
        <param name="context">Der <see cref="T:System.Runtime.Serialization.StreamingContext" />, der die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.AccessViolationException" />-Klasse mit serialisierten Daten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird während der Deserialisierung aufgerufen, um das über einen Stream übertragene Ausnahmeobjekt wiederherzustellen. Weitere Informationen finden Sie unter [XML- und SOAP-Serialisierung](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML- und SOAP-Serialisierung</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string * Exception -&gt; AccessViolationException" Usage="new System.AccessViolationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, in der die Ausnahme beschrieben wird Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.AccessViolationException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ausnahme, die als direktes Ergebnis einer vorhergehenden Ausnahme ausgelöst wird, muss in der <xref:System.Exception.InnerException%2A>-Eigenschaft über einen Verweis auf die vorhergehende Ausnahme verfügen. Die <xref:System.Exception.InnerException%2A>-Eigenschaft gibt den gleichen Wert zurück, der an den Konstruktor übergeben wird, oder `null`, wenn die <xref:System.Exception.InnerException%2A>-Eigenschaft den Wert der inneren Ausnahme nicht an den Konstruktor übergibt.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.AccessViolationException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Die in `message` angegebene Fehlermeldungszeichenfolge.|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
      </Docs>
    </Member>
  </Members>
</Type>
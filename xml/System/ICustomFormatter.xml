<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9905ea1b04870148d87d7b4065ef7e2d5ad1d34" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37728458" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert eine Methode, die die benutzerdefinierte Formatierung des Werts eines Objekts unterstützt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ICustomFormatter> Schnittstelle enthält eine einzelne Methode, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Wenn diese Schnittstelle, von einem Typ Verweis- oder Werttyp implementiert wird, der <xref:System.ICustomFormatter.Format%2A> Methode gibt eine benutzerdefinierte formatierte Zeichenfolgendarstellung des Werts eines Objekts zurück.  
  
 In der Regel die <xref:System.ICustomFormatter> Schnittstelle wird implementiert, mit der <xref:System.IFormatProvider> Schnittstelle verhaltensanpassung der beiden Methoden für die Formatierung von .NET Framework kombinierte Zeichenfolge, die enthalten eine <xref:System.IFormatProvider> Parameter. Insbesondere die <xref:System.ICustomFormatter> Schnittstelle bieten benutzerdefinierte Formatierung des Werts eines Objekts, die an die <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> und <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Methoden.  
  
 Bereitstellen einer benutzerdefinierten Darstellung des Werts eines Objekts erfordert, dass Sie die folgenden Schritte ausführen:  
  
1.  Definieren Sie eine Klasse, die implementiert die <xref:System.ICustomFormatter> Schnittstelle und die einzelnen Member, die <xref:System.ICustomFormatter.Format%2A> Methode.  
  
2.  Definieren Sie eine Klasse, die implementiert die <xref:System.IFormatProvider> Schnittstelle und die einzelnen Member, die <xref:System.IFormatProvider.GetFormat%2A> Methode. Die <xref:System.IFormatProvider.GetFormat%2A> Methode gibt eine Instanz Ihrer <xref:System.ICustomFormatter> Implementierung. Häufig eine einzelne Klasse implementiert beide <xref:System.ICustomFormatter> und <xref:System.IFormatProvider>. In diesem Fall die Klasse des `GetFormat` Implementierung gibt nur eine Instanz von sich selbst zurück.  
  
3.  Übergeben der <xref:System.IFormatProvider> Implementierung als die `provider` Argument der <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Methode oder eine vergleichbare Methode.  
  
 Die .NET Framework-Methode wird verwendet, die benutzerdefinierte Formatierung anstelle der eigenen.  
  
   
  
## Examples  
 Das folgende Beispiel implementiert <xref:System.ICustomFormatter> um binäre, oktale und hexadezimale Formatierung von ganzzahligen Werten zu ermöglichen. In diesem Beispiel ist eine einzelne Klasse, `IBinaryFormatter`, implementiert beide <xref:System.ICustomFormatter> und <xref:System.IFormatProvider>. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode bestimmt, ob die `formatType` Parameter repräsentiert eine <xref:System.ICustomFormatter> Typ. Wenn dies der Fall, `BinaryFormatter` gibt eine Instanz von sich selbst; andernfalls wird `null`. Die <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> -Implementierung bestimmt, ob der Parameter "Format" eines der drei unterstützten Formatzeichenfolgen ist ("B" bei "O" für Binärdateien oktale, und "H" für hexadezimal) und formatiert die `arg` Parameter entsprechend. Andernfalls gilt: Wenn `arg` ist nicht `null`, ruft der `arg` des Parameters <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> -Implementierung, sofern vorhanden, oder die parameterlose `ToString` -Methode, wenn eine nicht der Fall ist. Wenn `arg` gleich `null` ist, gibt die Methode <xref:System.String.Empty?displayProperty=nameWithType> zurück.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` kann dann verwendet werden, zu der benutzerdefinierten Formatierung durch die Übergabe einer `BinaryFormatter` als Objekt der `provider` Parameter der <xref:System.String.Format%2A> Methode, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Die common Language Runtime versucht, verwenden Ihre <see cref="T:System.ICustomFormatter" /> Implementierung für jedes Formatelement in einer kombinierten Formatzeichenfolge. Daher sollten Sie erwarten, dass Ihre <see cref="T:System.ICustomFormatter" /> Implementierung wird aufgerufen, um das Bereitstellen von Formatierungsdiensten für Objekte oder Werte, die es ist nicht für ausgelegt. In diesen Fällen Ihre <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> Methode muss die entsprechende Formatierungsmethode aufrufen, für das Objekt oder den Wert.  Es gibt zwei Arten von <see cref="T:System.ICustomFormatter" /> Implementierungen: systeminterne und der Erweiterung.  Systeminterne Implementierungen sind Implementierungen, die eine benutzerdefinierte Formatierung für eine der Anwendung definiertes Objekt bereitstellen. In diesem Fall sollte Ihre Implementierung Folgendes enthalten:-eine Definition der Formatzeichenfolgen, mit denen die Formatierung des Objekts zu definieren. Formatzeichenfolgen sind optional. Eine Formatzeichenfolge "G" oder "g" wird in der Regel das allgemeine (oder am häufigsten verwendete)-Format definiert. Allerdings sind Sie von Formatzeichenfolgen zu definieren, die Sie auswählen. Sie können auch entscheiden, ob die Groß- und Kleinschreibung beachtet werden.  – Ein Test, um sicherzustellen, dass der Typ des Objekts zu übergeben Ihrer <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> Methode ist der Anwendung definierte Typ. Wenn sie nicht der Fall ist, sollten Sie des Objekts aufrufen <see cref="T:System.IFormattable" /> Implementierung wird, falls vorhanden, oder den zugehörigen <see cref="M:System.Object.ToString" /> -Methode, sofern dies nicht der Fall. Sie sollten alle Ausnahmen behandeln diese Methodenaufrufe auslösen können darauf vorbereitet sein.  -Code, eine null-Zeichenfolge, zu behandeln, wenn die Implementierung Formatzeichenfolgen unterstützt. Der gängigste Ansatz ist eine null-Zeichenfolge mit dem allgemeinen Formatbezeichner zu ersetzen.  -Code zum Behandeln von Formatzeichenfolgen, die Ihre Implementierung unterstützt.  -Code zum Behandeln von Formatzeichenfolgen, die Sie nicht unterstützen. Die am häufigsten verwendete Ansatz besteht darin, lösen eine <see cref="T:System.FormatException" />, obwohl Sie die standardformatierung bereitstellen können.  Implementierungen sind Implementierungen, die eine benutzerdefinierte Formatierung bereitstellen für einen Typ, die bereits formatierungsunterstützung. Beispielsweise können Sie definieren eine <c>CustomerNumberFormatter</c> ab, die einen ganzzahligen Typ mit Bindestrichen zwischen bestimmten Ziffern formatiert. In diesem Fall sollte Ihre Implementierung Folgendes enthalten:-eine Definition der Formatzeichenfolgen, mit denen die Formatierung des Objekts zu erweitern. Diese Formatzeichenfolgen sind erforderlich, aber sie müssen nicht in Konflikt mit vorhandenen Formatzeichenfolgen des Typs. Angenommen, Sie erweitern Formatierung für die <see cref="T:System.Int32" /> geben, sollten Sie u. a. die Formatbezeichner "C", "D", "E", "F" und "G" nicht implementieren.  – Ein Test, der der Typ des Objekts an Ihre <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> Methode ist ein Typ, deren Formatierung die Erweiterung unterstützt. Wenn sie nicht der Fall ist, rufen Sie des Objekts <see cref="T:System.IFormattable" /> Implementierung wird, falls vorhanden, oder das Objekt der parameterlosen <see cref="M:System.Object.ToString" /> -Methode, sofern dies nicht der Fall. Sie sollten alle Ausnahmen behandeln diese Methodenaufrufe auslösen können darauf vorbereitet sein.  -Code zum Behandeln von Formatzeichenfolgen, die Ihre Erweiterung unterstützen.  -Code zum Behandeln von Formatzeichenfolgen, die die Erweiterung nicht unterstützt. Diese sollte in des Typs des übergeben werden <see cref="T:System.IFormattable" /> Implementierung. Sie sollten alle Ausnahmen behandeln diese Methodenaufrufe auslösen können darauf vorbereitet sein.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Eine Formatzeichenfolge mit Formatierungsangaben.</param>
        <param name="arg">Ein zu formatierendes Objekt.</param>
        <param name="formatProvider">Ein Objekt, das Formatierungsinformationen zur aktuellen Instanz bereitstellt.</param>
        <summary>Konvertiert den Wert eines angegebenen Objekts unter Verwendung des angegebenen Formats sowie der kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgenentsprechung des Werts von <paramref name="arg" /> im durch <paramref name="format" /> und <paramref name="formatProvider" /> angegebenen Format.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> ist eine Rückrufmethode. Durch Aufruf von einer Methode, die benutzerdefinierte Formatierung, z. B. unterstützt <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> oder <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Die Implementierung wird einmal aufgerufen, für jedes Formatelement in einer [kombinierte Formatzeichenfolge](~/docs/standard/base-types/composite-formatting.md). Beispielsweise in der folgenden Anweisung die <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> -Methode dreimal aufgerufen.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 Die `arg` -Parameter ist das Objekt in der Liste, deren nullbasierte Position dem Index eines bestimmten Formats-Elements entspricht.  
  
 Die `format` -Parameter enthält eine Formatzeichenfolge, die ist die `formatString` Komponente eines Formatelements. Wenn dem Formatelement, das keine `formatString` -Komponente, die den Wert der `format` ist `null`. Wenn `format` ist `null`, je nachdem, auf dem Typ des `arg`, möglicherweise die standardmäßigen Formatspezifikation Ihrer Wahl verwenden können.  
  
 Die `formatProvider` -Parameter ist der <xref:System.IFormatProvider> Implementierung, die bereitstellt, für die Formatierung `arg`. In der Regel ist es eine Instanz Ihrer <xref:System.ICustomFormatter> Implementierung. Wenn `formatProvider` ist `null`, ignorieren Sie diesen Parameter.  
  
 Die Implementierung von der <xref:System.ICustomFormatter.Format%2A> -Methode muss die folgende Funktionen enthalten, damit die .NET Framework bereitstellen können, formatieren Sie nicht unterstützt. Wenn die Formatierungsmethode ein Format nicht unterstützt, zu bestimmen, ob die zu Objekt formatierende die <xref:System.IFormattable> Schnittstelle. Wenn sie aufgerufen wird, die <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> -Methode dieser Schnittstelle. Rufen Sie andernfalls die Standardeinstellung <xref:System.Object.ToString%2A?displayProperty=nameWithType> -Methode des zugrunde liegenden Objekts. Der folgende Code veranschaulicht dieses Muster.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 Das folgende Beispiel implementiert <xref:System.ICustomFormatter> um binäre, oktale und hexadezimale Formatierung von ganzzahligen Werten zu ermöglichen. Die <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> -Implementierung bestimmt, ob der Parameter "Format" eines der drei unterstützten Formatzeichenfolgen ist ("B" bei "O" für Binärdateien oktale, und "H" für hexadezimal) und formatiert die `arg` Parameter entsprechend. Andernfalls gilt: Wenn `arg` ist nicht `null`, ruft der `arg` des Parameters <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> -Implementierung, sofern vorhanden, oder die parameterlose `ToString` -Methode, wenn eine nicht der Fall ist. Wenn `arg` gleich `null` ist, gibt die Methode <xref:System.String.Empty?displayProperty=nameWithType> zurück.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` kann dann verwendet werden, zu der benutzerdefinierten Formatierung durch die Übergabe einer `BinaryFormatter` als Objekt der `provider` Parameter der <xref:System.String.Format%2A> Methode, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e446f51bdbd0e5e4d0ecd465daedf974a1513386" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70473076" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert eine Methode, die die benutzerdefinierte Formatierung des Werts eines Objekts unterstützt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ICustomFormatter> -Schnittstelle enthält eine einzige <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>Methode,. Wenn diese Schnittstelle durch einen Verweis-oder Werttyp implementiert <xref:System.ICustomFormatter.Format%2A> wird, gibt die Methode eine benutzerdefinierte Zeichen folgen Darstellung des Werts eines Objekts zurück.  
  
 Normalerweise wird <xref:System.ICustomFormatter> die-Schnittstelle mit <xref:System.IFormatProvider> der-Schnittstelle implementiert, um das Verhalten von zwei .NET Framework Methoden zur kombinierten <xref:System.IFormatProvider> Zeichen folgen Formatierung anzupassen, die einen-Parameter enthalten. Insbesondere kann die <xref:System.ICustomFormatter> -Schnittstelle eine benutzerdefinierte Formatierung des Werts eines Objekts bereitstellen, <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> das <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> an die Methoden und übertragen wird.  
  
 Zum Bereitstellen einer benutzerdefinierten Darstellung des Werts eines Objekts müssen Sie die folgenden Schritte ausführen:  
  
1.  Definieren Sie eine Klasse, die <xref:System.ICustomFormatter> die-Schnittstelle und ihren einzelnen <xref:System.ICustomFormatter.Format%2A> Member implementiert (die-Methode).  
  
2.  Definieren Sie eine Klasse, die <xref:System.IFormatProvider> die-Schnittstelle und ihren einzelnen <xref:System.IFormatProvider.GetFormat%2A> Member implementiert (die-Methode). Die <xref:System.IFormatProvider.GetFormat%2A> -Methode gibt eine Instanz <xref:System.ICustomFormatter> der-Implementierung zurück. Häufig implementiert eine einzelne Klasse sowohl <xref:System.ICustomFormatter> als auch. <xref:System.IFormatProvider> In diesem Fall gibt die- `GetFormat` Implementierung der Klasse nur eine Instanz von sich selbst zurück.  
  
3.  Übergeben Sie <xref:System.IFormatProvider> die-Implementierung `provider` als Argument der <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> -Methode oder einer vergleichbaren Methode.  
  
 Die .NET Framework-Methode verwendet dann die benutzerdefinierte Formatierung anstelle ihrer eigenen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.ICustomFormatter> implementiert, um die binäre, oktale und hexadezimale Formatierung von ganzzahligen Werten zuzulassen. In diesem Beispiel implementiert eine einzelne Klasse, `IBinaryFormatter`, sowohl <xref:System.ICustomFormatter> als auch <xref:System.IFormatProvider>. Die- `formatType`  <xref:System.ICustomFormatter> Methode bestimmt , ob der Parameter einen-Typ darstellt. <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Wenn dies der Fall `BinaryFormatter` ist, wird eine Instanz von sich selbst zurückgegeben `null`; andernfalls wird zurückgegeben. Die Implementierung bestimmt, ob der Format-Parameter eine der drei unterstützten Format Zeichenfolgen ("B" für "Binary", "O" für oktal und "H" für hexadezimale) ist und den `arg` Parameter entsprechend formatiert. <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> Andernfalls, wenn `arg` nicht `null`ist, wird die- `arg` Implementierung des <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> Parameters, sofern vorhanden, oder die Parameter lose `ToString` -Methode aufgerufen, sofern dies nicht der Fall ist. Wenn `arg` gleich `null` ist, gibt die Methode <xref:System.String.Empty?displayProperty=nameWithType> zurück.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter`kann dann verwendet werden, um eine benutzerdefinierte Formatierung bereit `BinaryFormatter` zustellen, indem `provider` ein-Objekt <xref:System.String.Format%2A> als Parameter der-Methode übergeben wird, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Der Common Language Runtime versucht, die <see cref="T:System.ICustomFormatter" /> Implementierung für jedes Format Element in einer zusammengesetzten Format Zeichenfolge zu verwenden. Daher sollten Sie davon ausgehen, dass Ihre <see cref="T:System.ICustomFormatter" /> -Implementierung aufgerufen wird, um Formatierungs Dienste für Objekte oder Werte bereitzustellen, die nicht verarbeitet werden sollen. In diesen Fällen <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> muss die-Methode die entsprechende Formatierungs Methode für dieses Objekt oder den Wert aufruft.  
  
Es gibt zwei Arten von <see cref="T:System.ICustomFormatter" /> Implementierungen: systeminterne Erweiterungen und Erweiterungen.  
  
Systeminterne Implementierungen sind Implementierungen, die eine benutzerdefinierte Formatierung für ein Anwendungs definiertes Objekt bereitstellen. In diesem Fall sollte die Implementierung Folgendes umfassen: 
: Eine Definition von Format Zeichenfolgen, die die Formatierung des-Objekts definieren. Format Zeichenfolgen sind optional. Normalerweise definiert eine Format Zeichenfolge "g" oder "g" das allgemeine Format (oder das am häufigsten verwendete Format). Allerdings können Sie beliebige Format Zeichenfolgen definieren, die Sie auswählen. Außerdem können Sie entscheiden, ob die Groß-/Kleinschreibung beachtet werden soll.  
  
-Ein Test, um sicherzustellen, dass der Typ des Objekts, <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> das an Ihre Methode übertragen wird, der von der Anwendung definierte Typ ist. Wenn dies nicht der Fall ist, sollten Sie die- <see cref="T:System.IFormattable" /> Implementierung des Objekts, sofern vorhanden, <see cref="M:System.Object.ToString" /> oder die zugehörige-Methode (sofern vorhanden) aufzurufen. Sie sollten darauf vorbereitet sein, alle Ausnahmen zu behandeln, die von diesen Methoden aufrufen ausgelöst werden können.  
  
-Code, der eine NULL-Format Zeichenfolge behandelt, wenn die Implementierung Format Zeichenfolgen unterstützt. Der gängigste Ansatz besteht darin, eine NULL-Format Zeichenfolge durch den allgemeinen Format Bezeichner zu ersetzen.  
  
-Code zum Behandeln von Format Zeichenfolgen, die von der Implementierung unterstützt werden.  
  
-Code zum Behandeln von Format Zeichenfolgen, die Sie nicht unterstützen. Der gängigste Ansatz besteht darin, eine <see cref="T:System.FormatException" />auszulösen, obwohl Sie die Standard Formatierung bereitstellen können.  
  
Erweiterungs Implementierungen sind Implementierungen, die eine benutzerdefinierte Formatierung für einen Typ bereitstellen, der bereits Formatierungs Unterstützung unterstützt. Beispielsweise können Sie einen <c>customernumformatter</c> definieren, der einen ganzzahligen Typ mit Bindestrichen zwischen bestimmten Ziffern formatiert. In diesem Fall sollte die Implementierung Folgendes umfassen: 
: Eine Definition von Format Zeichenfolgen, die die Formatierung des-Objekts erweitern. Diese Format Zeichenfolgen sind erforderlich, aber Sie dürfen nicht mit den vorhandenen Format Zeichenfolgen des Typs in Konflikt stehen. Wenn Sie z. b. die Formatierung für den <see cref="T:System.Int32" /> Typ erweitern, sollten Sie nicht die Format Bearbeiter "C", "D", "E", "F" und "G" implementieren.  
  
-Ein Test, bei dem der Typ des Objekts, das <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> an die Methode übermittelt wird, ein Typ ist, dessen Formatierung von der Erweiterung unterstützt Wenn dies nicht der Fall ist, müssen Sie <see cref="T:System.IFormattable" /> die-Implementierung des-Objekts, sofern vorhanden, oder die Parameter <see cref="M:System.Object.ToString" /> lose-Methode des-Objekts, wenn dies nicht der Fall ist, aufzurufen. Sie sollten darauf vorbereitet sein, alle Ausnahmen zu behandeln, die von diesen Methoden aufrufen ausgelöst werden können.  
  
-Code zum Behandeln von Format Zeichenfolgen, die von der Erweiterung unterstützt werden.  
  
-Code zum Behandeln von Format Zeichenfolgen, die von der Erweiterung nicht unterstützt werden. Diese sollten an die <see cref="T:System.IFormattable" /> Implementierung des Typs weitergegeben werden. Sie sollten darauf vorbereitet sein, alle Ausnahmen zu behandeln, die von diesen Methoden aufrufen ausgelöst werden können.</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Eine Formatzeichenfolge mit Formatierungsangaben.</param>
        <param name="arg">Ein zu formatierendes Objekt.</param>
        <param name="formatProvider">Ein Objekt, das Formatinformationen über die aktuelle Instanz bereitstellt.</param>
        <summary>Konvertiert den Wert eines angegebenen Objekts unter Verwendung des angegebenen Formats und der kulturabhängigen Formatierungsinformationen in eine entsprechende Zeichenfolgenentsprechung.</summary>
        <returns>Die Zeichenfolgenentsprechung des Werts von <paramref name="arg" /> im durch <paramref name="format" /> und <paramref name="formatProvider" /> angegebenen Format.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> ist eine Rückrufmethode. Sie wird von einer Methode aufgerufen, die benutzerdefinierte Formatierung unterstützt <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> , <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>z. b. oder. Die-Implementierung wird einmal für jedes Format Element in einer zusammen [gesetzten Format Zeichenfolge](~/docs/standard/base-types/composite-formatting.md)aufgerufen. In der folgenden-Anweisung wird die <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> -Methode z. b. dreimal aufgerufen.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 Der `arg` -Parameter ist das Objekt in der Objektliste, dessen null basierte Position dem Index eines bestimmten Format Elements entspricht.  
  
 Der `format` -Parameter enthält eine Format Zeichenfolge, `formatString` die die Komponente eines Format Elements ist. Wenn das Format Element über keine `formatString` Komponente verfügt, ist `null`der `format` Wert von. Wenn  `format` den Wert hat `arg`, können Sie je nach Typ von die Standardformat Spezifikation ihrer Wahl verwenden. `null`  
  
 Der `formatProvider` -Parameter ist <xref:System.IFormatProvider> die-Implementierung, die `arg`die Formatierung für bereitstellt. In der Regel handelt es sich um eine <xref:System.ICustomFormatter> Instanz der-Implementierung. Wenn `formatProvider` ist `null` , wird dieser Parameter ignoriert.  
  
 Die Implementierung <xref:System.ICustomFormatter.Format%2A> der-Methode muss die folgende Funktionalität enthalten, damit die .NET Framework die Formatierung bereitstellen können, die Sie nicht unterstützen. Wenn die Format Methode kein Format unterstützt, stellen Sie fest, ob das Objekt, das <xref:System.IFormattable> formatiert wird, die-Schnittstelle implementiert. Wenn dies der Fall ist, <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> rufen Sie die-Methode dieser Schnittstelle auf. Rufen Sie andernfalls die Standard <xref:System.Object.ToString%2A?displayProperty=nameWithType> Methode des zugrunde liegenden Objekts auf. Der folgende Code veranschaulicht dieses Muster.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.ICustomFormatter> implementiert, um die binäre, oktale und hexadezimale Formatierung von ganzzahligen Werten zuzulassen. Die Implementierung bestimmt, ob der Format-Parameter eine der drei unterstützten Format Zeichenfolgen ("B" für "Binary", "O" für oktal und "H" für hexadezimale) ist und den `arg` Parameter entsprechend formatiert. <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> Andernfalls, wenn `arg` nicht `null`ist, wird die- `arg` Implementierung des <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> Parameters, sofern vorhanden, oder die Parameter lose `ToString` -Methode aufgerufen, sofern dies nicht der Fall ist. Wenn `arg` gleich `null` ist, gibt die Methode <xref:System.String.Empty?displayProperty=nameWithType> zurück.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter`kann dann verwendet werden, um eine benutzerdefinierte Formatierung bereit `BinaryFormatter` zustellen, indem `provider` ein-Objekt <xref:System.String.Format%2A> als Parameter der-Methode übergeben wird, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
  </Members>
</Type>

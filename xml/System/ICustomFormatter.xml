<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="440e566843bd8a6f7aa2849b29bdd2300c580fd1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39853296" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="13772-101">Definiert eine Methode, die die benutzerdefinierte Formatierung des Werts eines Objekts unterstützt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="13772-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13772-102">Die <xref:System.ICustomFormatter> Schnittstelle enthält eine einzelne Methode, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="13772-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="13772-103">Wenn diese Schnittstelle, von einem Typ Verweis- oder Werttyp implementiert wird, der <xref:System.ICustomFormatter.Format%2A> Methode gibt eine benutzerdefinierte formatierte Zeichenfolgendarstellung des Werts eines Objekts zurück.</span><span class="sxs-lookup"><span data-stu-id="13772-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="13772-104">In der Regel die <xref:System.ICustomFormatter> Schnittstelle wird implementiert, mit der <xref:System.IFormatProvider> Schnittstelle verhaltensanpassung der beiden Methoden für die Formatierung von .NET Framework kombinierte Zeichenfolge, die enthalten eine <xref:System.IFormatProvider> Parameter.</span><span class="sxs-lookup"><span data-stu-id="13772-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="13772-105">Insbesondere die <xref:System.ICustomFormatter> Schnittstelle bieten benutzerdefinierte Formatierung des Werts eines Objekts, die an die <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> und <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Methoden.</span><span class="sxs-lookup"><span data-stu-id="13772-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="13772-106">Bereitstellen einer benutzerdefinierten Darstellung des Werts eines Objekts erfordert, dass Sie die folgenden Schritte ausführen:</span><span class="sxs-lookup"><span data-stu-id="13772-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="13772-107">Definieren Sie eine Klasse, die implementiert die <xref:System.ICustomFormatter> Schnittstelle und die einzelnen Member, die <xref:System.ICustomFormatter.Format%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="13772-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="13772-108">Definieren Sie eine Klasse, die implementiert die <xref:System.IFormatProvider> Schnittstelle und die einzelnen Member, die <xref:System.IFormatProvider.GetFormat%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="13772-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="13772-109">Die <xref:System.IFormatProvider.GetFormat%2A> Methode gibt eine Instanz Ihrer <xref:System.ICustomFormatter> Implementierung.</span><span class="sxs-lookup"><span data-stu-id="13772-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="13772-110">Häufig eine einzelne Klasse implementiert beide <xref:System.ICustomFormatter> und <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="13772-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="13772-111">In diesem Fall die Klasse des `GetFormat` Implementierung gibt nur eine Instanz von sich selbst zurück.</span><span class="sxs-lookup"><span data-stu-id="13772-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="13772-112">Übergeben der <xref:System.IFormatProvider> Implementierung als die `provider` Argument der <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> Methode oder eine vergleichbare Methode.</span><span class="sxs-lookup"><span data-stu-id="13772-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="13772-113">Die .NET Framework-Methode wird verwendet, die benutzerdefinierte Formatierung anstelle der eigenen.</span><span class="sxs-lookup"><span data-stu-id="13772-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="13772-114">Das folgende Beispiel implementiert <xref:System.ICustomFormatter> um binäre, oktale und hexadezimale Formatierung von ganzzahligen Werten zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="13772-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="13772-115">In diesem Beispiel ist eine einzelne Klasse, `IBinaryFormatter`, implementiert beide <xref:System.ICustomFormatter> und <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="13772-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="13772-116">Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode bestimmt, ob die `formatType` Parameter repräsentiert eine <xref:System.ICustomFormatter> Typ.</span><span class="sxs-lookup"><span data-stu-id="13772-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="13772-117">Wenn dies der Fall, `BinaryFormatter` gibt eine Instanz von sich selbst; andernfalls wird `null`.</span><span class="sxs-lookup"><span data-stu-id="13772-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="13772-118">Die <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> -Implementierung bestimmt, ob der Parameter "Format" eines der drei unterstützten Formatzeichenfolgen ist ("B" bei "O" für Binärdateien oktale, und "H" für hexadezimal) und formatiert die `arg` Parameter entsprechend.</span><span class="sxs-lookup"><span data-stu-id="13772-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="13772-119">Andernfalls gilt: Wenn `arg` ist nicht `null`, ruft der `arg` des Parameters <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> -Implementierung, sofern vorhanden, oder die parameterlose `ToString` -Methode, wenn eine nicht der Fall ist.</span><span class="sxs-lookup"><span data-stu-id="13772-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="13772-120">Wenn `arg` gleich `null` ist, gibt die Methode <xref:System.String.Empty?displayProperty=nameWithType> zurück.</span><span class="sxs-lookup"><span data-stu-id="13772-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="13772-121">`BinaryFormatter` kann dann verwendet werden, zu der benutzerdefinierten Formatierung durch die Übergabe einer `BinaryFormatter` als Objekt der `provider` Parameter der <xref:System.String.Format%2A> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="13772-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="13772-122">
        <para>Die common Language Runtime versucht, verwenden Ihre <see cref="T:System.ICustomFormatter" /> Implementierung für jedes Formatelement in einer kombinierten Formatzeichenfolge. Daher sollten Sie erwarten, dass Ihre <see cref="T:System.ICustomFormatter" /> Implementierung wird aufgerufen, um das Bereitstellen von Formatierungsdiensten für Objekte oder Werte, die es ist nicht für ausgelegt. In diesen Fällen Ihre <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> Methode muss die entsprechende Formatierungsmethode aufrufen, für das Objekt oder den Wert.  Es gibt zwei Arten von <see cref="T:System.ICustomFormatter" /> Implementierungen: systeminterne und der Erweiterung.  Systeminterne Implementierungen sind Implementierungen, die eine benutzerdefinierte Formatierung für eine der Anwendung definiertes Objekt bereitstellen. In diesem Fall sollte Ihre Implementierung Folgendes enthalten:-eine Definition der Formatzeichenfolgen, mit denen die Formatierung des Objekts zu definieren. Formatzeichenfolgen sind optional. Eine Formatzeichenfolge "G" oder "g" wird in der Regel das allgemeine (oder am häufigsten verwendete)-Format definiert. Allerdings sind Sie von Formatzeichenfolgen zu definieren, die Sie auswählen. Sie können auch entscheiden, ob die Groß- und Kleinschreibung beachtet werden.  – Ein Test, um sicherzustellen, dass der Typ des Objekts zu übergeben Ihrer <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> Methode ist der Anwendung definierte Typ. Wenn sie nicht der Fall ist, sollten Sie des Objekts aufrufen <see cref="T:System.IFormattable" /> Implementierung wird, falls vorhanden, oder den zugehörigen <see cref="M:System.Object.ToString" /> -Methode, sofern dies nicht der Fall. Sie sollten alle Ausnahmen behandeln diese Methodenaufrufe auslösen können darauf vorbereitet sein.  -Code, eine null-Zeichenfolge, zu behandeln, wenn die Implementierung Formatzeichenfolgen unterstützt. Der gängigste Ansatz ist eine null-Zeichenfolge mit dem allgemeinen Formatbezeichner zu ersetzen.  -Code zum Behandeln von Formatzeichenfolgen, die Ihre Implementierung unterstützt.  -Code zum Behandeln von Formatzeichenfolgen, die Sie nicht unterstützen. Die am häufigsten verwendete Ansatz besteht darin, lösen eine <see cref="T:System.FormatException" />, obwohl Sie die standardformatierung bereitstellen können.  Implementierungen sind Implementierungen, die eine benutzerdefinierte Formatierung bereitstellen für einen Typ, die bereits formatierungsunterstützung. Beispielsweise können Sie definieren eine <c>CustomerNumberFormatter</c> ab, die einen ganzzahligen Typ mit Bindestrichen zwischen bestimmten Ziffern formatiert. In diesem Fall sollte Ihre Implementierung Folgendes enthalten:-eine Definition der Formatzeichenfolgen, mit denen die Formatierung des Objekts zu erweitern. Diese Formatzeichenfolgen sind erforderlich, aber sie müssen nicht in Konflikt mit vorhandenen Formatzeichenfolgen des Typs. Angenommen, Sie erweitern Formatierung für die <see cref="T:System.Int32" /> geben, sollten Sie u. a. die Formatbezeichner "C", "D", "E", "F" und "G" nicht implementieren.  – Ein Test, der der Typ des Objekts an Ihre <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> Methode ist ein Typ, deren Formatierung die Erweiterung unterstützt. Wenn sie nicht der Fall ist, rufen Sie des Objekts <see cref="T:System.IFormattable" /> Implementierung wird, falls vorhanden, oder das Objekt der parameterlosen <see cref="M:System.Object.ToString" /> -Methode, sofern dies nicht der Fall. Sie sollten alle Ausnahmen behandeln diese Methodenaufrufe auslösen können darauf vorbereitet sein.  -Code zum Behandeln von Formatzeichenfolgen, die Ihre Erweiterung unterstützen.  -Code zum Behandeln von Formatzeichenfolgen, die die Erweiterung nicht unterstützt. Diese sollte in des Typs des übergeben werden <see cref="T:System.IFormattable" /> Implementierung. Sie sollten alle Ausnahmen behandeln diese Methodenaufrufe auslösen können darauf vorbereitet sein.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="13772-122">
          <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  -   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  -   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  -   Code to handle any format strings that your implementation supports.  -   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  -   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  -   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle any format strings that your extension supports.  -   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="13772-123">Eine Formatzeichenfolge mit Formatierungsangaben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="13772-123">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="13772-124">Ein zu formatierendes Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="13772-124">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="13772-125">Ein Objekt, das Formatierungsinformationen zur aktuellen Instanz bereitstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="13772-125">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="13772-126">Konvertiert den Wert eines angegebenen Objekts unter Verwendung des angegebenen Formats sowie der kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="13772-126">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="13772-127">Die Zeichenfolgenentsprechung des Werts von <paramref name="arg" /> im durch <paramref name="format" /> und <paramref name="formatProvider" /> angegebenen Format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="13772-127">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13772-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> ist eine Rückrufmethode.</span><span class="sxs-lookup"><span data-stu-id="13772-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="13772-129">Durch Aufruf von einer Methode, die benutzerdefinierte Formatierung, z. B. unterstützt <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> oder <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="13772-129">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="13772-130">Die Implementierung wird einmal aufgerufen, für jedes Formatelement in einer [kombinierte Formatzeichenfolge](~/docs/standard/base-types/composite-formatting.md).</span><span class="sxs-lookup"><span data-stu-id="13772-130">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="13772-131">Beispielsweise in der folgenden Anweisung die <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> -Methode dreimal aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="13772-131">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="13772-132">Die `arg` -Parameter ist das Objekt in der Liste, deren nullbasierte Position dem Index eines bestimmten Formats-Elements entspricht.</span><span class="sxs-lookup"><span data-stu-id="13772-132">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="13772-133">Die `format` -Parameter enthält eine Formatzeichenfolge, die ist die `formatString` Komponente eines Formatelements.</span><span class="sxs-lookup"><span data-stu-id="13772-133">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="13772-134">Wenn dem Formatelement, das keine `formatString` -Komponente, die den Wert der `format` ist `null`.</span><span class="sxs-lookup"><span data-stu-id="13772-134">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="13772-135">Wenn `format` ist `null`, je nachdem, auf dem Typ des `arg`, möglicherweise die standardmäßigen Formatspezifikation Ihrer Wahl verwenden können.</span><span class="sxs-lookup"><span data-stu-id="13772-135">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="13772-136">Die `formatProvider` -Parameter ist der <xref:System.IFormatProvider> Implementierung, die bereitstellt, für die Formatierung `arg`.</span><span class="sxs-lookup"><span data-stu-id="13772-136">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="13772-137">In der Regel ist es eine Instanz Ihrer <xref:System.ICustomFormatter> Implementierung.</span><span class="sxs-lookup"><span data-stu-id="13772-137">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="13772-138">Wenn `formatProvider` ist `null`, ignorieren Sie diesen Parameter.</span><span class="sxs-lookup"><span data-stu-id="13772-138">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="13772-139">Die Implementierung von der <xref:System.ICustomFormatter.Format%2A> -Methode muss die folgende Funktionen enthalten, damit die .NET Framework bereitstellen können, formatieren Sie nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="13772-139">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="13772-140">Wenn die Formatierungsmethode ein Format nicht unterstützt, zu bestimmen, ob die zu Objekt formatierende die <xref:System.IFormattable> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="13772-140">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="13772-141">Wenn sie aufgerufen wird, die <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> -Methode dieser Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="13772-141">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="13772-142">Rufen Sie andernfalls die Standardeinstellung <xref:System.Object.ToString%2A?displayProperty=nameWithType> -Methode des zugrunde liegenden Objekts.</span><span class="sxs-lookup"><span data-stu-id="13772-142">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="13772-143">Der folgende Code veranschaulicht dieses Muster.</span><span class="sxs-lookup"><span data-stu-id="13772-143">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="13772-144">Das folgende Beispiel implementiert <xref:System.ICustomFormatter> um binäre, oktale und hexadezimale Formatierung von ganzzahligen Werten zu ermöglichen.</span><span class="sxs-lookup"><span data-stu-id="13772-144">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="13772-145">Die <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> -Implementierung bestimmt, ob der Parameter "Format" eines der drei unterstützten Formatzeichenfolgen ist ("B" bei "O" für Binärdateien oktale, und "H" für hexadezimal) und formatiert die `arg` Parameter entsprechend.</span><span class="sxs-lookup"><span data-stu-id="13772-145">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="13772-146">Andernfalls gilt: Wenn `arg` ist nicht `null`, ruft der `arg` des Parameters <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> -Implementierung, sofern vorhanden, oder die parameterlose `ToString` -Methode, wenn eine nicht der Fall ist.</span><span class="sxs-lookup"><span data-stu-id="13772-146">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="13772-147">Wenn `arg` gleich `null` ist, gibt die Methode <xref:System.String.Empty?displayProperty=nameWithType> zurück.</span><span class="sxs-lookup"><span data-stu-id="13772-147">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="13772-148">`BinaryFormatter` kann dann verwendet werden, zu der benutzerdefinierten Formatierung durch die Übergabe einer `BinaryFormatter` als Objekt der `provider` Parameter der <xref:System.String.Format%2A> Methode, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="13772-148">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>
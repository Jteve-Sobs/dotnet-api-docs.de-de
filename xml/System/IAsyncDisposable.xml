<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9be69d0838c49a8a2afd6b503cbe1c0b250ecbab" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172868" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Mechanismus für die asynchrone Freigabe nicht verwalteter Ressourcen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

In .NET implementieren Klassen, die nicht verwaltete Ressourcen besitzen, normalerweise die <xref:System.IDisposable>-Schnittstelle, um einen Mechanismus zur synchronen Freigabe nicht verwalteter Ressourcen bereitzustellen. In einigen Fällen müssen Sie jedoch einen asynchronen Mechanismus bereitstellen, um nicht verwaltete Ressourcen zusätzlich zu (oder anstelle von) dem synchronen freizugeben. Durch die Bereitstellung eines solchen Mechanismus kann der Consumer ressourcenintensive Löschvorgänge ausführen, ohne dass der Haupt Thread einer GUI-Anwendung lange Zeit blockiert wird.

Die <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType>-Methode dieser Schnittstelle gibt eine <xref:System.Threading.Tasks.ValueTask> zurück, die den asynchronen Löschvorgang darstellt. Klassen, die nicht verwaltete Ressourcen besitzen, implementieren diese Methode, und der Consumer dieser Klassen ruft diese Methode für ein Objekt auf, wenn es nicht mehr benötigt wird.

Die Async-Methoden werden in Verbindung mit den Schlüsselwörtern `async` und `await` C# in und Visual Basic verwendet. Weitere Informationen finden Sie [unter dem Task "asynchrones Programmiermodell C# " in oder der](/dotnet/csharp/programming-guide/concepts/async/index) [asynchronen Programmierung mit Async und warten (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).

### <a name="using-an-object-that-implements-iasyncdisposable"></a>Verwenden eines Objekts, das iasyncverwerfimplementiert

Wenn Ihre Anwendung ein Objekt verwendet, das `IAsyncDisposable`implementiert, sollten Sie die <xref:System.IAsyncDisposable.DisposeAsync%2A>-Implementierung des Objekts nach Abschluss der Verwendung von abrufen. Um sicherzustellen, dass Ressourcen auch im Falle einer Ausnahme freigegeben werden, müssen Sie die <xref:System.IAsyncDisposable.DisposeAsync%2A>-Methode in einer `finally`-Klausel der `try`/`finally`-Anweisung abrufen. Weitere Informationen zum `try`/`finally` Muster finden [Sie unter try-endlich](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) oder [try... Catch... Abschließend-Anweisung](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).

### <a name="implementing-iasyncdisposable"></a>Implementieren von iasyncverwerf   
    
In den folgenden Situationen können Sie `IAsyncDisposable` implementieren:

- Wenn Sie einen asynchronen Enumerator entwickeln, der nicht verwaltete Ressourcen besitzt. Asynchrone Enumeratoren werden mit der C# 8,0 Async Streams-Funktion verwendet. Weitere Informationen zu asynchronen Streams finden [Sie unter Tutorial: generieren und Verwenden von asynchronen Streams mit C# 8,0 und .net Core 3,0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).

- Wenn Ihre Klasse nicht verwaltete Ressourcen besitzt und diese freigibt, ist ein ressourcenintensiver e/a-Vorgang erforderlich, z. b. das Leeren des Inhalts eines zwischen Puffers in eine Datei oder das Senden eines Pakets über ein Netzwerk, um eine Verbindung zu schließen.

Verwenden Sie die <xref:System.IAsyncDisposable.DisposeAsync%2A>-Methode, um die Bereinigung durchzuführen, die nach dem Verwenden der nicht verwalteten Ressourcen erforderlich ist, z. b. das freigeben, freigeben oder Zurücksetzen der nicht verwalteten Ressourcen. Weitere Informationen zu nicht verwalteten Ressourcen in .net finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](/dotnet/standard/garbage-collection/unmanaged).
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt anwendungsspezifische Aufgaben aus, die mit dem asynchronen Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</summary>
        <returns>Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Verwenden Sie diese Methode, um nicht verwaltete Ressourcen, wie z. b. Dateien, Streams und Handles, die von einer Instanz der-Klasse, die diese Schnittstelle implementiert, asynchron zu schließen oder freizugeben. Wenn Sie diese Methode anstelle von <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> verwenden, können Sie einen ressourcenintensiven Löschvorgang ausführen, ohne den Haupt Thread einer GUI-Anwendung lange Zeit blockieren zu müssen.

> [!WARNING]
>  Wenn Sie eine Klasse verwenden, die die <xref:System.IAsyncDisposable>-Schnittstelle implementiert, sollten Sie Ihre `DisposeAsync`-Implementierung aufzurufen, wenn Sie die Verwendung der-Klasse abgeschlossen haben. Weitere Informationen finden Sie im Abschnitt "Verwenden eines Objekts, das iasyncverwerfimplementiert" im <xref:System.IAsyncDisposable> Thema.

Wenn Sie diese Methode implementieren, stellen Sie sicher, dass alle gehaltenen Ressourcen freigegeben werden, indem Sie den-Befehl über die Kapselungs Hierarchie Wenn ein Objekt a z. b. ein Objekt b zuordnet und Objekt b ein Objekt C zuordnet, muss die `DisposeAsync`-Implementierung von a `DisposeAsync` auf B abrufen, das wiederum `DisposeAsync` in C aufgerufen werden muss. Ein Objekt muss auch die `DisposeAsync`-Methode seiner Basisklasse aufzurufen, wenn die Basisklasse <xref:System.IAsyncDisposable>implementiert.

Wenn die `DisposeAsync`-Methode eines Objekts mehrmals aufgerufen wird, muss das Objekt alle Aufrufe nach dem ersten ignorieren und synchron einen erfolgreich abgeschlossenen <xref:System.Threading.Tasks.ValueTask>zurückgeben. Das-Objekt darf keine Ausnahme auslösen, wenn die `DisposeAsync`-Methode mehrmals aufgerufen wird. Andere Instanzmethoden als `DisposeAsync` können eine <xref:System.ObjectDisposedException> auslösen, wenn bereits Ressourcen verworfen wurden.
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

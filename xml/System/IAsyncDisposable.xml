<Type Name="IAsyncDisposable" FullName="System.IAsyncDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5091a2d0242c3592559a7ebd15927112cee76d5a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69406010" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type IAsyncDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b3a78-101">Stellt einen Mechanismus für die asynchrone Freigabe nicht verwalteter Ressourcen bereit.</span><span class="sxs-lookup"><span data-stu-id="b3a78-101">Provides a mechanism for releasing unmanaged resources asynchronously.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="b3a78-102">In .NET implementieren Klassen, die nicht verwaltete Ressourcen besitzen, Normal <xref:System.IDisposable> erweise die-Schnittstelle, um einen Mechanismus zur synchronen Freigabe nicht verwalteter Ressourcen bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="b3a78-102">In .NET, classes that own unmanaged resources usually implement the <xref:System.IDisposable> interface to provide a mechanism for releasing unmanaged resources synchronously.</span></span> <span data-ttu-id="b3a78-103">In einigen Fällen müssen Sie jedoch einen asynchronen Mechanismus bereitstellen, um nicht verwaltete Ressourcen zusätzlich zu (oder anstelle von) dem synchronen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="b3a78-103">However, in some cases they need to provide an asynchronous mechanism for releasing unmanaged resources in addition to (or instead of) the synchronous one.</span></span> <span data-ttu-id="b3a78-104">Durch die Bereitstellung eines solchen Mechanismus kann der Consumer ressourcenintensive Löschvorgänge ausführen, ohne dass der Haupt Thread einer GUI-Anwendung lange Zeit blockiert wird.</span><span class="sxs-lookup"><span data-stu-id="b3a78-104">Providing such a mechanism enables the consumer to perform resource-intensive dispose operations without blocking the main thread of a GUI application for a long time.</span></span>

<span data-ttu-id="b3a78-105">Die <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> -Methode dieser Schnittstelle gibt <xref:System.Threading.Tasks.ValueTask> einen zurück, der den asynchronen Löschvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="b3a78-105">The <xref:System.IAsyncDisposable.DisposeAsync%2A?displayProperty=nameWithType> method of this interface returns a <xref:System.Threading.Tasks.ValueTask> that represents the asynchronous dispose operation.</span></span> <span data-ttu-id="b3a78-106">Klassen, die nicht verwaltete Ressourcen besitzen, implementieren diese Methode, und der Consumer dieser Klassen ruft diese Methode für ein Objekt auf, wenn es nicht mehr benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="b3a78-106">Classes that own unmanaged resources implement this method, and the consumer of these classes calls this method on an object when it is no longer needed.</span></span>

<span data-ttu-id="b3a78-107">Die Async-Methoden werden in Verbindung mit den `async` Schlüssel `await` Wörtern und C# in und Visual Basic verwendet.</span><span class="sxs-lookup"><span data-stu-id="b3a78-107">The async methods are used in conjunction with the `async` and `await` keywords in C# and Visual Basic.</span></span> <span data-ttu-id="b3a78-108">Weitere Informationen finden Sie [unter dem Task "asynchrones Programmiermodell C# " in oder der](/dotnet/csharp/programming-guide/concepts/async/index) [asynchronen Programmierung mit Async und warten (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span><span class="sxs-lookup"><span data-stu-id="b3a78-108">For more insformation, see [The Task asynchronous programming model in C#](/dotnet/csharp/programming-guide/concepts/async/index) or [Asynchronous Programming with Async and Await (Visual Basic)](/dotnet/visual-basic/programming-guide/concepts/async/).</span></span>

### <a name="using-an-object-that-implements-iasyncdisposable"></a><span data-ttu-id="b3a78-109">Verwenden eines Objekts, das iasyncverwerfimplementiert</span><span class="sxs-lookup"><span data-stu-id="b3a78-109">Using an object that implements IAsyncDisposable</span></span>

<span data-ttu-id="b3a78-110">Wenn die Anwendung ein Objekt verwendet, das `IAsyncDisposable`implementiert, sollten Sie die-Implementierung <xref:System.IAsyncDisposable.DisposeAsync%2A> des Objekts nach Abschluss der Verwendung von abrufen.</span><span class="sxs-lookup"><span data-stu-id="b3a78-110">If your application uses an object that implements `IAsyncDisposable`, you should call the object's <xref:System.IAsyncDisposable.DisposeAsync%2A> implementation when you are finished using it.</span></span> <span data-ttu-id="b3a78-111">Um sicherzustellen, dass Ressourcen auch im Falle einer Ausnahme freigegeben werden, <xref:System.IAsyncDisposable.DisposeAsync%2A> müssen Sie die `finally` -Methode in `try` einer-Klausel der / `finally` -Anweisung abrufen.</span><span class="sxs-lookup"><span data-stu-id="b3a78-111">To make sure resources are released even in case of an exception, call the <xref:System.IAsyncDisposable.DisposeAsync%2A> method inside a `finally` clause of the `try`/`finally` statement.</span></span> <span data-ttu-id="b3a78-112">Weitere Informationen `try` / C#zum Muster finden [Sie unter try-endlich](~/docs/csharp/language-reference/keywords/try-finally.md) () oder try... `finally` [ Catch... Abschließend-Anweisung](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="b3a78-112">For more information about the `try`/`finally` pattern, see [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md) (C#) or [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md) (Visual Basic).</span></span>

### <a name="implementing-iasyncdisposable"></a><span data-ttu-id="b3a78-113">Implementieren von iasyncverwerf</span><span class="sxs-lookup"><span data-stu-id="b3a78-113">Implementing IAsyncDisposable</span></span>   
    
<span data-ttu-id="b3a78-114">Sie können in `IAsyncDisposable` den folgenden Situationen implementieren:</span><span class="sxs-lookup"><span data-stu-id="b3a78-114">You might implement `IAsyncDisposable` in the following situations:</span></span>

- <span data-ttu-id="b3a78-115">Wenn Sie einen asynchronen Enumerator entwickeln, der nicht verwaltete Ressourcen besitzt.</span><span class="sxs-lookup"><span data-stu-id="b3a78-115">When developing an asynchronous enumerator that owns unmanaged resources.</span></span> <span data-ttu-id="b3a78-116">Asynchrone Enumeratoren werden mit der C# 8,0 Async Streams-Funktion verwendet.</span><span class="sxs-lookup"><span data-stu-id="b3a78-116">Asynchronous enumerators are used with the C# 8.0 async streams feature.</span></span> <span data-ttu-id="b3a78-117">Weitere Informationen zu Async-Streams finden [Sie unter Tutorial: Generieren und verwenden Sie asynchrone C# Streams mit 8,0 und .net](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream)Core 3,0.</span><span class="sxs-lookup"><span data-stu-id="b3a78-117">For more information about async streams, see [Tutorial: Generate and consume async streams using C# 8.0 and .NET Core 3.0](/dotnet/csharp/tutorials/generate-consume-asynchronous-stream).</span></span>

- <span data-ttu-id="b3a78-118">Wenn Ihre Klasse nicht verwaltete Ressourcen besitzt und diese freigibt, ist ein ressourcenintensiver e/a-Vorgang erforderlich, z. b. das Leeren des Inhalts eines zwischen Puffers in eine Datei oder das Senden eines Pakets über ein Netzwerk, um eine Verbindung zu schließen.</span><span class="sxs-lookup"><span data-stu-id="b3a78-118">When your class owns unmanaged resources and releasing them requires a resource-intensive I/O operation, such as flushing the contents of an intermediate buffer into a file or sending a packet over a network to close a connection.</span></span>

<span data-ttu-id="b3a78-119">Verwenden Sie <xref:System.IAsyncDisposable.DisposeAsync%2A> die-Methode, um die Bereinigung durchzuführen, die nach dem Verwenden der nicht verwalteten Ressourcen erforderlich ist, z. b. das freigeben, freigeben oder Zurücksetzen der nicht verwalteten Ressourcen.</span><span class="sxs-lookup"><span data-stu-id="b3a78-119">Use the <xref:System.IAsyncDisposable.DisposeAsync%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span> <span data-ttu-id="b3a78-120">Weitere Informationen zu nicht verwalteten Ressourcen in .net finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](/dotnet/standard/garbage-collection/unmanaged).</span><span class="sxs-lookup"><span data-stu-id="b3a78-120">For more information about unmanaged resources in .NET, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IAsyncDisposable.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="iAsyncDisposable.DisposeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bcl.AsyncInterfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b3a78-121">Führt anwendungsspezifische Aufgaben aus, die mit dem asynchronen Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</span><span class="sxs-lookup"><span data-stu-id="b3a78-121">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</span></span></summary>
        <returns><span data-ttu-id="b3a78-122">Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="b3a78-122">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="b3a78-123">Verwenden Sie diese Methode, um nicht verwaltete Ressourcen, wie z. b. Dateien, Streams und Handles, die von einer Instanz der-Klasse, die diese Schnittstelle implementiert, asynchron zu schließen oder freizugeben.</span><span class="sxs-lookup"><span data-stu-id="b3a78-123">Use this method to asynchronously close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="b3a78-124">Wenn Sie diese Methode anstelle <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> von verwenden, können Sie einen ressourcenintensiven Löschvorgang ausführen, ohne den Haupt Thread einer GUI-Anwendung lange Zeit blockieren zu müssen.</span><span class="sxs-lookup"><span data-stu-id="b3a78-124">Using this method instead of <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> enables you to perform a resource-intensive dispose operation without blocking the main thread of a GUI application for a long time.</span></span>

> [!WARNING]
>  <span data-ttu-id="b3a78-125">Wenn Sie eine Klasse verwenden, die die <xref:System.IAsyncDisposable> -Schnittstelle implementiert, sollten Sie Ihre `DisposeAsync` -Implementierung aufzurufen, wenn Sie die Verwendung der-Klasse abgeschlossen haben.</span><span class="sxs-lookup"><span data-stu-id="b3a78-125">If you are using a class that implements the <xref:System.IAsyncDisposable> interface, you should call its `DisposeAsync` implementation when you are finished using the class.</span></span> <span data-ttu-id="b3a78-126">Weitere Informationen finden Sie im Abschnitt "Verwenden eines Objekts, das iasyncverwerfimplementiert" im <xref:System.IAsyncDisposable> Thema.</span><span class="sxs-lookup"><span data-stu-id="b3a78-126">For more information, see the "Using an object that implements IAsyncDisposable" section in the <xref:System.IAsyncDisposable> topic.</span></span>

<span data-ttu-id="b3a78-127">Wenn Sie diese Methode implementieren, stellen Sie sicher, dass alle gehaltenen Ressourcen freigegeben werden, indem Sie den-Befehl über die Kapselungs Hierarchie</span><span class="sxs-lookup"><span data-stu-id="b3a78-127">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="b3a78-128">Wenn ein Objekt a z. b. ein Objekt b zuordnet und Objekt b ein Objekt C zuordnet, `DisposeAsync` `DisposeAsync` muss die Implementierung von a auf B, das wiederum auf C aufgerufen `DisposeAsync` werden muss, aufgerufen werden. Ein Objekt muss auch die `DisposeAsync` -Methode seiner Basisklasse aufzurufen, wenn die Basisklasse implementiert. <xref:System.IAsyncDisposable></span><span class="sxs-lookup"><span data-stu-id="b3a78-128">For example, if an object A allocates an object B, and object B allocates an object C, then A's `DisposeAsync` implementation must call `DisposeAsync` on B, which must in turn call `DisposeAsync` on C. An object must also call the `DisposeAsync` method of its base class if the base class implements <xref:System.IAsyncDisposable>.</span></span>

<span data-ttu-id="b3a78-129">Wenn die-Methode `DisposeAsync` eines-Objekts mehrmals aufgerufen wird, muss das-Objekt alle Aufrufe nach dem ersten ignorieren und synchron einen erfolgreich abgeschlossenen <xref:System.Threading.Tasks.ValueTask>zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="b3a78-129">If an object's `DisposeAsync` method is called more than once, the object must ignore all calls after the first one and synchronously return a successfully completed <xref:System.Threading.Tasks.ValueTask>.</span></span> <span data-ttu-id="b3a78-130">Das-Objekt darf keine Ausnahme auslösen, wenn `DisposeAsync` die zugehörige-Methode mehrmals aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="b3a78-130">The object must not throw an exception if its `DisposeAsync` method is called multiple times.</span></span> <span data-ttu-id="b3a78-131">Andere Instanzmethoden `DisposeAsync` als können eine <xref:System.ObjectDisposedException> auslösen, wenn Ressourcen bereits verworfen wurden.</span><span class="sxs-lookup"><span data-stu-id="b3a78-131">Instance methods other than `DisposeAsync` can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

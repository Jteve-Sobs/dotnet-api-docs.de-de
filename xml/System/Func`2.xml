<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b8e61fc6c0b3a63f6c5b45d2c39e516162e13e0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39776720" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="74eb7-101">Der Typ des Parameters der Methode, die dieser Delegat kapselt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="74eb7-101">The type of the parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="TResult">
      <span data-ttu-id="74eb7-102">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="74eb7-102">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg">
      <span data-ttu-id="74eb7-103">Der Parameter der Methode, die dieser Delegat kapselt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="74eb7-103">The parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="74eb7-104">Kapselt eine Methode, die über einen Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <typeparamref name="TResult" />-Parameter angegeben wird.</span>
      <span class="sxs-lookup">
        <span data-stu-id="74eb7-104">Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="74eb7-105">Der Rückgabewert der Methode, die dieser Delegat kapselt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="74eb7-105">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74eb7-106">Sie können diesen Delegaten verwenden, um eine Methode darstellen, die als Parameter übergeben werden können, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren.</span><span class="sxs-lookup"><span data-stu-id="74eb7-106">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="74eb7-107">Die der gekapselte Methode muss die Signatur der Methode entsprechen, die von diesem Delegaten definiert ist.</span><span class="sxs-lookup"><span data-stu-id="74eb7-107">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="74eb7-108">Dies bedeutet, dass die gekapselte Methode einen Parameter verfügen muss, das zuvor als Wert übergeben wird, und sie einen Wert zurückgeben muss.</span><span class="sxs-lookup"><span data-stu-id="74eb7-108">This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="74eb7-109">Um eine Methode zu verweisen, die über einen Parameter verfügt und zurückgibt `void` (oder in Visual Basic deklariert wird als eine `Sub` statt als ein `Function`), die generische <xref:System.Action%601> stattdessen delegieren.</span><span class="sxs-lookup"><span data-stu-id="74eb7-109">To reference a method that has one parameter and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%601> delegate instead.</span></span>  
  
 <span data-ttu-id="74eb7-110">Bei Verwendung der <xref:System.Func%602> Delegaten, Sie müssen nicht explizit einen Delegaten definieren, die eine Methode mit einem einzigen Parameter kapselt.</span><span class="sxs-lookup"><span data-stu-id="74eb7-110">When you use the <xref:System.Func%602> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="74eb7-111">Der folgende Code deklariert beispielsweise explizit einen Delegaten, der mit dem Namen `ConvertMethod` und weist einen Verweis auf die `UppercaseString` Methode, um eine Delegatinstanz.</span><span class="sxs-lookup"><span data-stu-id="74eb7-111">For example, the following code explicitly declares a delegate named `ConvertMethod` and assigns a reference to the `UppercaseString` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="74eb7-112">Im folgende Beispiel wird dieser Code vereinfacht, durch die Instanziierung der <xref:System.Func%602> Delegaten aufrufen, anstatt explizit definieren einen neuen Delegaten und eine benannte Methode zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="74eb7-112">The following example simplifies this code by instantiating the <xref:System.Func%602> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 <span data-ttu-id="74eb7-113">Sie können auch die <xref:System.Func%602> delegieren mit anonymen Methoden in C# geschrieben, wie im folgende Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="74eb7-113">You can also use the <xref:System.Func%602> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="74eb7-114">(Eine Einführung in anonyme Methoden, finden Sie unter [anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="74eb7-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 <span data-ttu-id="74eb7-115">Sie können auch einen Lambda-Ausdruck zuweisen einer <xref:System.Func%602> zu delegieren, wie im folgende Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="74eb7-115">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="74eb7-116">(Eine Einführung in Lambda-Ausdrücke, finden Sie unter [Lambda-Ausdrücke](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) und [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="74eb7-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="74eb7-117">Der zugrunde liegende Typ eines Lambda-Ausdrucks ist eine der generischen `Func` Delegaten.</span><span class="sxs-lookup"><span data-stu-id="74eb7-117">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="74eb7-118">Dadurch wird es möglich, einen Lambda-Ausdruck als Parameter übergeben werden, ohne explizit einen Delegaten zuzuweisen.</span><span class="sxs-lookup"><span data-stu-id="74eb7-118">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="74eb7-119">Insbesondere, da viele Methoden der Typen in der <xref:System.Linq> Namespace verfügen <xref:System.Func%602> Parameter können Sie übergeben diese Methoden einen Lambda-Ausdruck ohne explizit zu instanziieren ein <xref:System.Func%602> delegieren.</span><span class="sxs-lookup"><span data-stu-id="74eb7-119">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%602> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%602> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="74eb7-120">Im folgende Beispiel wird veranschaulicht, wie deklariert und verwendet eine <xref:System.Func%602> delegieren.</span><span class="sxs-lookup"><span data-stu-id="74eb7-120">The following example demonstrates how to declare and use a <xref:System.Func%602> delegate.</span></span> <span data-ttu-id="74eb7-121">Das folgende Beispiel deklariert eine <xref:System.Func%602> Variable und weist ihr einen Lambda-Ausdruck, der die Zeichen in einer Zeichenfolge in Großbuchstaben konvertiert.</span><span class="sxs-lookup"><span data-stu-id="74eb7-121">This example declares a <xref:System.Func%602> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</span></span> <span data-ttu-id="74eb7-122">Der Delegat, der diese Methode kapselt wird anschließend zum Übergeben der <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> Methode, um die Zeichenfolgen in ein Array von Zeichenfolgen in Großbuchstaben zu ändern.</span><span class="sxs-lookup"><span data-stu-id="74eb7-122">The delegate that encapsulates this method is subsequently passed to the <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> method to change the strings in an array of strings to uppercase.</span></span>  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
<Type Name="Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="68c24f0f3fa867e327d7949c2bcb6e84520b05b2" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70456056" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`7&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`7" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
    <summary>Kapselt eine Methode, die über sieben Parameter verfügt und keinen Wert zurückgibt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den <xref:System.Action%607> -Delegaten verwenden, um eine Methode als Parameter zu übergeben, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren. Die gekapselte Methode muss der Methoden Signatur entsprechen, die von diesem Delegaten definiert wird. Dies bedeutet, dass die gekapselte Methode über sieben Parameter verfügen muss, die alle als Wert an Sie übermittelt werden, und Sie darf keinen Wert zurückgeben. (In C#muss die-Methode zurück `void`geben. In Visual Basic muss Sie von der `Sub`...`End Sub` Erstellen. Es kann auch eine Methode sein, die einen Wert zurückgibt, der ignoriert wird.) In der Regel wird eine solche Methode verwendet, um einen Vorgang auszuführen.  
  
> [!NOTE]
>  Verwenden Sie stattdessen den generischen <xref:System.Func%608> Delegaten, um auf eine Methode zu verweisen, die über sieben Parameter verfügt und einen Wert zurückgibt.  
  
 Sie können den <xref:System.Action%607> Delegaten auch mit anonymen Methoden und Lambda Ausdrücken verwenden.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`8" />
  </Docs>
</Type>

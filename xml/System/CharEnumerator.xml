<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CharEnumerator.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50570f4e2dd53178598e0e6fbf7b325d2cd252378.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0570f4e2dd53178598e0e6fbf7b325d2cd252378</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CharEnumerator">
          <source>Supports iterating over a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object and reading its individual characters.</source>
          <target state="translated">Unterstützt das Durchlaufen eines <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>-Objekts und Lesen seiner einzelnen Zeichen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.CharEnumerator">
          <source>This class cannot be inherited.</source>
          <target state="translated">Diese Klasse kann nicht vererbt werden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> provides read-only access to the characters in a referenced <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> bietet schreibgeschützten Zugriff auf die Zeichen in einer referenzierten <ph id="ph2">&lt;xref:System.String&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>For example, the <ph id="ph1">`foreach`</ph> statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> from a <ph id="ph3">&lt;xref:System.String&gt;</ph> object in order to iterate through the characters in that object.</source>
          <target state="translated">Z. B. die <ph id="ph1">`foreach`</ph> -Anweisung der Microsoft Visual Basic- und C#-Programmiersprachen verwenden, die die Elemente einer Auflistung durchläuft, ruft eine <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> aus einem <ph id="ph3">&lt;xref:System.String&gt;</ph> Objekt, um die Zeichen, die durchlaufen -Objekt.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>There is no public constructor for <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Es gibt keinen öffentlicher Konstruktor für <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Instead, call a <ph id="ph1">&lt;xref:System.String&gt;</ph> object's <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> method to obtain a <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> that is initialized to reference the string.</source>
          <target state="translated">Rufen Sie stattdessen eine <ph id="ph1">&lt;xref:System.String&gt;</ph> des Objekts <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> Methode zum Abrufen einer <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> , Verweis auf die Zeichenfolge initialisiert wird.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> maintains an internal index to the characters in the string the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> references.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> verwaltet einen internen Index auf die Zeichen in der Zeichenfolge die <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> Verweise.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</source>
          <target state="translated">Der Status des Indexes ist ungültig, wenn es sich um eine Zeichenposition logisch vor das erste Zeichen oder nach dem letzten Zeichen in der Zeichenfolge verweist und gültig, wenn darauf ein Zeichen innerhalb der Zeichenfolge verweist.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</source>
          <target state="translated">Der Index wird an eine Position vor dem ersten Zeichen logisch initialisiert und an eine Position hinter dem letzten Zeichen festgelegt ist, wenn die Iteration abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>An exception is thrown if you attempt to access a character while the index is invalid.</source>
          <target state="translated">Eine Ausnahme wird ausgelöst, wenn Sie versuchen, ein Zeichen zugreifen, während der Index ungültig ist.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method increments the index by one, so the first and subsequent characters are accessed in turn.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> Methode erhöht den Index, damit die ersten und nachfolgenden Zeichen wiederum zugegriffen werden.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method sets the index to a position logically before the first character.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> Methode setzt den Index auf eine Position logisch vor dem ersten Zeichen.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property retrieves the character currently referenced by index.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> Eigenschaft ruft das Zeichen, die derzeit über einen Index verwiesen.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> method creates a copy of the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> Methode erstellt eine Kopie der <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Several independent instances of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> across one or more threads can have access to a single instance of <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Mehrere unabhängige Instanzen von <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> über eine oder mehrere Threads können haben Zugriff auf eine Einzelinstanz des <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>This class is implemented to support the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">Diese Klasse wird implementiert, um die Unterstützung der <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> Schnittstelle.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>For more information regarding the use of an enumerator, see the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> topic.</source>
          <target state="translated">Weitere Informationen zur Verwendung eines Enumerators finden Sie unter der <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> Thema.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasse, um die einzelnen Zeichen in einer Zeichenfolge aufzulisten.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Instanziiert eine <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Objekt durch Aufrufen der <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> -Methode, von einem Zeichen zum nächsten wechselt durch Aufrufen der <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> -Methode, und zeigt das aktuelle Zeichen durch das Abrufen des Werts der <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">Beachten Sie jedoch, die der gleiche Vorgang intuitiver ausgeführt werden kann, können Sie mithilfe von <ph id="ph1">`foreach`</ph> (in c#) oder <ph id="ph2">`For Each`</ph> (in Visual Basic), wie im folgenden Beispiel dargestellt.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Clone">
          <source>Creates a copy of the current <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Erstellt eine Kopie des aktuellen <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>-Objekts.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Clone">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that is a copy of the current <ph id="ph2">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Ein neues <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>, das eine Kopie des aktuellen <ph id="ph2">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>-Objekts darstellt.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>The return value is a copy of this instance of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> and its current state.</source>
          <target state="translated">Der Rückgabewert ist eine Kopie dieser Instanz von <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> und ihres aktuellen Zustands.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>This is useful for saving your state while iterating through a <ph id="ph1">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">Dies ist hilfreich für das Speichern von Ihren Zustands beim Durchlaufen einer <ph id="ph1">&lt;xref:System.String&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>For example, suppose your application uses an original instance of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> to iterate through each character in a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Nehmen wir beispielsweise an die Anwendung verwendet eine Originalinstanz von <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> zum Durchlaufen der einzelnen Zeichen in einem <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>When some unique character is encountered, your application pauses processing and invokes the <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> method.</source>
          <target state="translated">Wenn einige eindeutige Zeichen erkannt wird, wird Ihre Anwendung hält Verarbeitung und ruft die <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>In effect, this saves the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object's index in the <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Aktiviert ist, auf diese Weise sparen die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Index des Objekts, in der <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>Your application uses the clone to navigate to another part of the <ph id="ph1">`String`</ph> to perform some auxiliary processing.</source>
          <target state="translated">Ihre Anwendung verwendet den Klon zum Navigieren zu einem anderen Teil der <ph id="ph1">`String`</ph> einige zusätzliche Verarbeitung ausführen.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>The side-effect of this navigation is the clone loses track of the position where processing stopped.</source>
          <target state="translated">Dieser Navigation Nebeneffekt ist, dass der Klon Nachverfolgen der Position verliert, in denen die Verarbeitung beendet.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>However, when the auxiliary processing is complete, your application discards the clone and uses the original <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instance to resume working on the <ph id="ph2">&lt;xref:System.String&gt;</ph> where the original processing stopped.</source>
          <target state="translated">Wenn Sie jedoch die zusätzliche Verarbeitung abgeschlossen ist, Ihre Anwendung verwirft den Klon und verwendet die ursprüngliche <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Instanz zum Fortsetzen der Arbeit an der <ph id="ph2">&lt;xref:System.String&gt;</ph> , in denen die Verarbeitung beendet.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>This method is implemented to support the <ph id="ph1">&lt;xref:System.ICloneable&gt;</ph> interface.</source>
          <target state="translated">Diese Methode implementiert wird, zur Unterstützung der <ph id="ph1">&lt;xref:System.ICloneable&gt;</ph> Schnittstelle.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.Current">
          <source>Gets the currently referenced character in the string enumerated by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Ruft das Zeichen in der von diesem <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>-Objekt durchlaufenen Zeichenfolge ab, auf das zurzeit verwiesen wird.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The Unicode character currently referenced by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Das Unicode-Zeichen, auf das zurzeit durch dieses <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>-Objekt verwiesen wird.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property returns the character that is currently referenced by the index.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasse verwaltet einen internen Index der aufgelisteten Zeichenfolge und die <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> Eigenschaft gibt das Zeichen, das derzeit durch den Index verwiesen wird.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>This property should be invoked only when the index is valid; otherwise, an exception is thrown.</source>
          <target state="translated">Diese Eigenschaft sollte aufgerufen werden, nur, wenn der Index ungültig ist; Andernfalls wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is always invalid for an empty string ("").</source>
          <target state="translated">Der Index ist immer für eine leere Zeichenfolge ("").</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is also invalid after the <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated">Der Index ist auch nach ungültigen der <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> oder <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>After either of these methods is called, invoke the <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method to adjust the index to the first character in the enumerated string.</source>
          <target state="translated">Rufen Sie nach dem dieser beiden Methoden aufgerufen wird, die <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> Methode, um den Index auf das erste Zeichen in der aufgelisteten Zeichenfolge einzustellen.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is valid whenever the <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Der Index ist gültig, wenn die <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> -Methode zurückkehrt <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> does not move the index, and consecutive calls to <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> return the same character until <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> der Index und aufeinander folgende Aufrufe von nicht verschoben <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> desselben Zeichens bis zurückgeben <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph>, oder <ph id="ph5">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasse, um die einzelnen Zeichen in einer Zeichenfolge aufzulisten.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Instanziiert eine <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Objekt durch Aufrufen der <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> -Methode, von einem Zeichen zum nächsten wechselt durch Aufrufen der <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> -Methode, und zeigt das aktuelle Zeichen durch das Abrufen des Werts der <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">Beachten Sie jedoch, die der gleiche Vorgang intuitiver ausgeführt werden kann, können Sie mithilfe von <ph id="ph1">`foreach`</ph> (in c#) oder <ph id="ph2">`For Each`</ph> (in Visual Basic), wie im folgenden Beispiel dargestellt.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.Current">
          <source>The index is invalid; that is, it is before the first or after the last character of the enumerated string.</source>
          <target state="translated">Der Index ist ungültig; d. h. er befindet sich vor den ersten oder hinter dem letzten Zeichen der aufgelisteten Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> class.</source>
          <target state="translated">Gibt alle von der aktuellen Instanz der <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>-Klasse verwendeten Ressourcen frei.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Rufen Sie <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> auf, wenn Sie <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> nicht mehr benötigen.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> in an unusable state.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>-Methode bewirkt, dass <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> nicht mehr verwendet werden kann.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> was occupying.</source>
          <target state="translated">Nach dem Aufruf <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>, müssen Sie alle Verweise auf Freigeben der <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> belegt wurde.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <bpt id="p1">[</bpt>Bereinigen von nicht verwalteten Ressourcen<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> und <bpt id="p2">[</bpt>Implementieren einer Dispose-Methode<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">Rufen Sie immer <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> auf, bevor Sie den letzten Verweis auf das <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> freigeben.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>-Methode des <ph id="ph2">`Finalize`</ph>-Objekts aufruft.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.MoveNext">
          <source>Increments the internal index of the current <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object to the next character of the enumerated string.</source>
          <target state="translated">Inkrementiert den internen Index des aktuellen <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>-Objekts zum nächsten Zeichen der aufgelisteten Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the index is successfully incremented and within the enumerated string; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn der Index erhöht werden konnte und sich innerhalb der aufgelisteten Zeichenfolge befindet, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method increments the index by one.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasse verwaltet einen internen Index der aufgelisteten Zeichenfolge und die <ph id="ph2">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> Methode den Index um eins erhöht.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Call <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> to increment the current character position to the first character in the enumerated string.</source>
          <target state="translated">Rufen Sie <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> nach dem Aufruf <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> oder <ph id="ph3">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> erhöht die aktuelle Zeichenposition auf das erste Zeichen in der aufgelisteten Zeichenfolge.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Check that the return value is <ph id="ph1">`true`</ph> to determine that the current character position is valid.</source>
          <target state="translated">Überprüfen Sie, dass der Rückgabewert <ph id="ph1">`true`</ph> ermitteln, ob die aktuelle Zeichenposition gültig ist.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>If the index is already beyond the last character of the enumerated string, the index is not changed and <ph id="ph1">`false`</ph> is returned.</source>
          <target state="translated">Wenn der Index bereits hinter dem letzten Zeichen der aufgelisteten Zeichenfolge ist, wird der Index wird nicht geändert und <ph id="ph1">`false`</ph> wird zurückgegeben.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Notice that if the enumerated string is empty (""), the state of the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> is always invalid.</source>
          <target state="translated">Beachten Sie, dass, wenn die aufgelistete Zeichenfolge leer ist (""), wird der Status der <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> ist immer ungültig.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>This is because the internal index for the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> is initially before the first character of the enumerated string and is therefore invalid.</source>
          <target state="translated">Grund hierfür ist der interne Index für die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> beträgt anfänglich vor dem ersten Zeichen der aufgelisteten Zeichenfolge und daher ungültig.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> logisch wird den Index nach dem letzten (nicht vorhandenen) Zeichen der aufgelisteten Zeichenfolge die ist ungültig.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">Im folgenden Beispiel wird die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasse, um die einzelnen Zeichen in einer Zeichenfolge aufzulisten.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">Instanziiert eine <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Objekt durch Aufrufen der <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> -Methode, von einem Zeichen zum nächsten wechselt durch Aufrufen der <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> -Methode, und zeigt das aktuelle Zeichen durch das Abrufen des Werts der <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">Beachten Sie jedoch, die der gleiche Vorgang intuitiver ausgeführt werden kann, können Sie mithilfe von <ph id="ph1">`foreach`</ph> (in c#) oder <ph id="ph2">`For Each`</ph> (in Visual Basic), wie im folgenden Beispiel dargestellt.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Reset">
          <source>Initializes the index to a position logically before the first character of the enumerated string.</source>
          <target state="translated">Initialisiert den Index auf eine Position, die sich logisch vor dem ersten Zeichen der aufgelisteten Zeichenfolge befindet.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Reset">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method sets the index to the invalid state.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> Klasse verwaltet einen internen Index der aufgelisteten Zeichenfolge und die <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> Methode legt den Index auf einen ungültigen Zustand fest.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Gets the currently referenced character in the string enumerated by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Ruft das Zeichen in der von diesem <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>-Objekt durchlaufenen Zeichenfolge ab, auf das zurzeit verwiesen wird.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>.</source>
          <target state="translated">Eine Beschreibung dieses Elements finden Sie unter <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>The boxed Unicode character currently referenced by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">Das geschachtelte Unicode-Zeichen, auf das zurzeit durch dieses <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>-Objekt verwiesen wird.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">Er kann nur verwendet werden, wenn die <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>-Instanz in eine <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph>-Schnittstelle umgewandelt wird.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Enumeration has not started.</source>
          <target state="translated">Der Auflistungsvorgang wurde nicht gestartet.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Enumeration has ended.</source>
          <target state="translated">Enumeration wurde beendet.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99bb022affed551d601d1d09475d11521f717cf7" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52614151" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="222f6-101">Unterstützt das Durchlaufen eines <see cref="T:System.String" />-Objekts und Lesen seiner einzelnen Zeichen.</span>
      <span class="sxs-lookup">
        <span data-stu-id="222f6-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span>
      </span>
      <span data-ttu-id="222f6-102">Diese Klasse kann nicht vererbt werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="222f6-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="222f6-103">Ein <xref:System.CharEnumerator> bietet schreibgeschützten Zugriff auf die Zeichen auf das verwiesen wird <xref:System.String> Objekt.</span><span class="sxs-lookup"><span data-stu-id="222f6-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="222f6-104">Z. B. die `foreach` -Anweisung der Microsoft Visual Basic und C#-Programmiersprachen verwenden, die die Elemente einer Auflistung durchläuft, ruft eine <xref:System.CharEnumerator> aus einem <xref:System.String> Objekt, um die Zeichen, die durchlaufen -Objekt.</span><span class="sxs-lookup"><span data-stu-id="222f6-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="222f6-105">Die `CharEnumerator` -Klasse listet die einzelne 16-Bit- <xref:System.Char> Instanzen.</span><span class="sxs-lookup"><span data-stu-id="222f6-105">The `CharEnumerator` class enumerates individual 16-bit <xref:System.Char> instances.</span></span> <span data-ttu-id="222f6-106">Es berücksichtigt keine Graphemes (d. h. ein Zeichen, gefolgt von einem oder mehreren Combiding Zeichen) oder Ersatzpaare (d. h. Zeichen außerhalb der grundlegenden vielsprachigen Ebene von Unicode-) als einzelnes Zeichen.</span><span class="sxs-lookup"><span data-stu-id="222f6-106">It does not consider graphemes (that is, a character followed by one or more combiding characters) or surrogate pairs (that is, characters outside the Unicode Basic Multilingual Plane) as single characters.</span></span> <span data-ttu-id="222f6-107">Verwenden Sie für ein Enumerator, der diese Arten von Zeichen als einzelne Einheit behandelt, die <xref:System.Globalization.StringInfo> Klasse.</span><span class="sxs-lookup"><span data-stu-id="222f6-107">For an enumerator that handles these types of characters as a single unit, use the <xref:System.Globalization.StringInfo> class.</span></span>

 <span data-ttu-id="222f6-108">Es gibt keinen öffentlicher Konstruktor für <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="222f6-108">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="222f6-109">Rufen Sie stattdessen eine <xref:System.String> des Objekts <xref:System.String.GetEnumerator%2A> Methode zum Abrufen einer <xref:System.CharEnumerator> , die mit Verweis auf die Zeichenfolge initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="222f6-109">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="222f6-110">Ein <xref:System.CharEnumerator> verwaltet einen internen Index auf die Zeichen in der Zeichenfolge die <xref:System.CharEnumerator> verweisen.</span><span class="sxs-lookup"><span data-stu-id="222f6-110">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="222f6-111">Der Status des Indexes ist ungültig, wenn sie eine Zeichenposition logisch vor dem ersten Zeichen oder nach dem letzten Zeichen in der Zeichenfolge verweist und gültig, wenn es sich um ein Zeichen in der Zeichenfolge verweist.</span><span class="sxs-lookup"><span data-stu-id="222f6-111">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="222f6-112">Der Index wird an eine Position logisch vor dem ersten Zeichen initialisiert und an eine Position hinter dem letzten Zeichen festgelegt ist, wenn die Iteration abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="222f6-112">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="222f6-113">Eine Ausnahme wird ausgelöst, wenn Sie versuchen, ein Zeichen, das Zugriff auf, während der Indexwert ungültig ist.</span><span class="sxs-lookup"><span data-stu-id="222f6-113">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="222f6-114">Die <xref:System.CharEnumerator.MoveNext%2A> -Methode erhöht den Index durch einen, damit die ersten und nachfolgenden Zeichen wiederum zugegriffen werden.</span><span class="sxs-lookup"><span data-stu-id="222f6-114">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="222f6-115">Die <xref:System.CharEnumerator.Reset%2A> Methode legt den Index an eine Position logisch vor dem ersten Zeichen fest.</span><span class="sxs-lookup"><span data-stu-id="222f6-115">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="222f6-116">Die <xref:System.CharEnumerator.Current%2A> Eigenschaft ruft das Zeichen, die derzeit auf die verwiesen wird anhand des Indexes ab.</span><span class="sxs-lookup"><span data-stu-id="222f6-116">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="222f6-117">Die <xref:System.CharEnumerator.Clone%2A> Methode erstellt eine Kopie der <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="222f6-117">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="222f6-118">Mehrere unabhängige Instanzen von <xref:System.CharEnumerator> über eine oder mehrere Threads können, haben Zugriff auf eine einzelne Instanz <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="222f6-118">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="222f6-119">Diese Klasse wird implementiert, um die Unterstützung der <xref:System.Collections.IEnumerator> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="222f6-119">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="222f6-120">Weitere Informationen zur Verwendung eines Enumerators finden Sie unter den <xref:System.Collections.IEnumerator> Thema.</span><span class="sxs-lookup"><span data-stu-id="222f6-120">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="222f6-121">Im folgenden Beispiel wird die <xref:System.CharEnumerator> Klasse, um die einzelnen Zeichen in einer Zeichenfolge aufgelistet werden.</span><span class="sxs-lookup"><span data-stu-id="222f6-121">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="222f6-122">Es instanziiert ein <xref:System.CharEnumerator> -Objekt durch Aufrufen der <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> -Methode von einem Zeichen zum nächsten wechselt durch Aufrufen der <xref:System.CharEnumerator.MoveNext%2A> -Methode, und zeigt das aktuelle Zeichen durch Abrufen des Werts von der <xref:System.CharEnumerator.Current%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="222f6-122">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="222f6-123">Beachten Sie jedoch, dass es sich bei der gleiche Vorgang mithilfe intuitiver ausgeführt werden kann `foreach` (in c#) oder `For Each` (in Visual Basic), wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="222f6-123">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="222f6-124">Erstellt eine Kopie des aktuellen <see cref="T:System.CharEnumerator" />-Objekts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-124">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="222f6-125">Ein neues <see cref="T:System.Object" />, das eine Kopie des aktuellen <see cref="T:System.CharEnumerator" />-Objekts darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-125">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="222f6-126">Der Rückgabewert ist eine Kopie dieser Instanz von <xref:System.CharEnumerator> und seines aktuellen Zustands.</span><span class="sxs-lookup"><span data-stu-id="222f6-126">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="222f6-127">Dies ist nützlich für das Speichern Ihren Zustands beim Durchlaufen einer <xref:System.String> Objekt.</span><span class="sxs-lookup"><span data-stu-id="222f6-127">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="222f6-128">Nehmen wir beispielsweise an Ihre Anwendung verwendet ein ursprünglicher Instanz von <xref:System.CharEnumerator> durchlaufen Jedes Zeichen in einem <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="222f6-128">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="222f6-129">Wenn einige eindeutige Zeichen gefunden wird, wird die Anwendung hält die Verarbeitung und ruft die <xref:System.CharEnumerator.Clone%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="222f6-129">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="222f6-130">Aktiviert ist, Dies spart dem <xref:System.CharEnumerator> Index des Objekts, in der <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="222f6-130">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="222f6-131">Ihre Anwendung verwendet den Klon, navigieren Sie zu einem anderen Teil der `String` können Sie einige zusätzliche Verarbeitungsschritte.</span><span class="sxs-lookup"><span data-stu-id="222f6-131">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="222f6-132">Der Nebeneffekt dieser Navigation ist, dass der Klon nachverfolgen, die von der Position verliert, in dem die Verarbeitung beendet.</span><span class="sxs-lookup"><span data-stu-id="222f6-132">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="222f6-133">Wenn Sie jedoch die zusätzliche Verarbeitung abgeschlossen ist, Ihre Anwendung verwirft den Klon und verwendet die ursprüngliche <xref:System.CharEnumerator> Instanz zum Fortsetzen der Arbeit an der <xref:System.String> , in dem die ursprüngliche Verarbeitung beendet.</span><span class="sxs-lookup"><span data-stu-id="222f6-133">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="222f6-134">Diese Methode wird implementiert, zur Unterstützung der <xref:System.ICloneable> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="222f6-134">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="222f6-135">Ruft das Zeichen in der von diesem <see cref="T:System.CharEnumerator" />-Objekt durchlaufenen Zeichenfolge ab, auf das zurzeit verwiesen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-135">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="222f6-136">Das Unicode-Zeichen, auf das zurzeit durch dieses <see cref="T:System.CharEnumerator" />-Objekt verwiesen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-136">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="222f6-137">Die <xref:System.CharEnumerator> Klasse verwaltet einen internen Index der aufgelisteten Zeichenfolge ein, und die <xref:System.CharEnumerator.Current%2A> Eigenschaft gibt das Zeichen zurück, die zurzeit durch den Index verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="222f6-137">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="222f6-138">Diese Eigenschaft sollte aufgerufen werden, nur, wenn der Index gültig ist; Andernfalls wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="222f6-138">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="222f6-139">Der Index ist immer ungültig für eine leere Zeichenfolge ("").</span><span class="sxs-lookup"><span data-stu-id="222f6-139">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="222f6-140">Der Index ist ebenfalls ungültig. nach der <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> oder <xref:System.CharEnumerator.Reset%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="222f6-140">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="222f6-141">Rufen Sie nach einer dieser Methoden aufgerufen wird, die <xref:System.CharEnumerator.MoveNext%2A> Methode, um den Index auf das erste Zeichen der aufgelisteten Zeichenfolge einzustellen.</span><span class="sxs-lookup"><span data-stu-id="222f6-141">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="222f6-142">Der Index ist gültig, wenn die <xref:System.CharEnumerator.MoveNext%2A> Methodenrückgabe `true`.</span><span class="sxs-lookup"><span data-stu-id="222f6-142">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="222f6-143"><xref:System.CharEnumerator.Current%2A> werden nicht verschoben werden, den Index und aufeinander folgende Aufrufe von <xref:System.CharEnumerator.Current%2A> zurückgeben desselben Zeichens bis <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, oder <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="222f6-143"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="222f6-144">Im folgenden Beispiel wird die <xref:System.CharEnumerator> Klasse, um die einzelnen Zeichen in einer Zeichenfolge aufgelistet werden.</span><span class="sxs-lookup"><span data-stu-id="222f6-144">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="222f6-145">Es instanziiert ein <xref:System.CharEnumerator> -Objekt durch Aufrufen der <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> -Methode von einem Zeichen zum nächsten wechselt durch Aufrufen der <xref:System.CharEnumerator.MoveNext%2A> -Methode, und zeigt das aktuelle Zeichen durch Abrufen des Werts von der <xref:System.CharEnumerator.Current%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="222f6-145">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="222f6-146">Beachten Sie jedoch, dass es sich bei der gleiche Vorgang mithilfe intuitiver ausgeführt werden kann `foreach` (in c#) oder `For Each` (in Visual Basic), wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="222f6-146">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="222f6-147">Der Index ist ungültig; d. h. er befindet sich vor den ersten oder hinter dem letzten Zeichen der aufgelisteten Zeichenfolge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-147">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="222f6-148">Gibt alle von der aktuellen Instanz der <see cref="T:System.CharEnumerator" />-Klasse verwendeten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-148">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="222f6-149">Rufen Sie <xref:System.CharEnumerator.Dispose%2A> auf, wenn Sie <xref:System.CharEnumerator> nicht mehr benötigen.</span><span class="sxs-lookup"><span data-stu-id="222f6-149">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="222f6-150">Die <xref:System.CharEnumerator.Dispose%2A>-Methode bewirkt, dass <xref:System.CharEnumerator> nicht mehr verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="222f6-150">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="222f6-151">Nach dem Aufruf <xref:System.CharEnumerator.Dispose%2A>, Sie müssen alle Verweise auf Freigeben der <xref:System.CharEnumerator> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.CharEnumerator> belegt wurde.</span><span class="sxs-lookup"><span data-stu-id="222f6-151">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="222f6-152">Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="222f6-152">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="222f6-153">Rufen Sie immer <xref:System.CharEnumerator.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.CharEnumerator> freigeben.</span><span class="sxs-lookup"><span data-stu-id="222f6-153">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="222f6-154">Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.CharEnumerator>-Methode des `Finalize`-Objekts aufruft.</span><span class="sxs-lookup"><span data-stu-id="222f6-154">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="222f6-155">Inkrementiert den internen Index des aktuellen <see cref="T:System.CharEnumerator" />-Objekts zum nächsten Zeichen der aufgelisteten Zeichenfolge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-155">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="222f6-156">
            <see langword="true" />, wenn der Index erhöht werden konnte und sich innerhalb der aufgelisteten Zeichenfolge befindet, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-156">
              <see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="222f6-157">Die <xref:System.CharEnumerator> Klasse verwaltet einen internen Index der aufgelisteten Zeichenfolge ein, und die <xref:System.CharEnumerator.MoveNext%2A> -Methode erhöht den Index um eins.</span><span class="sxs-lookup"><span data-stu-id="222f6-157">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="222f6-158">Rufen Sie <xref:System.CharEnumerator.MoveNext%2A> nach dem Aufruf <xref:System.String.GetEnumerator%2A> oder <xref:System.CharEnumerator.Reset%2A> erhöht die aktuellen Zeichenposition auf das erste Zeichen der aufgelisteten Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="222f6-158">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="222f6-159">Überprüfen Sie, ob der Rückgabewert `true` ermitteln, ob die aktuelle Zeichenposition gültig ist.</span><span class="sxs-lookup"><span data-stu-id="222f6-159">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="222f6-160">Wenn der Index bereits hinter dem letzten Zeichen der aufgelisteten Zeichenfolge ist, wird der Index wird nicht geändert und `false` zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="222f6-160">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="222f6-161">Beachten Sie, dass, wenn die aufgelistete Zeichenfolge leer ist (""), wird der Status der <xref:System.CharEnumerator> ist immer ungültig.</span><span class="sxs-lookup"><span data-stu-id="222f6-161">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="222f6-162">Grund hierfür ist, den internen Index für die <xref:System.CharEnumerator> zunächst vor dem ersten Zeichen der aufgelisteten Zeichenfolge ist und daher ungültig.</span><span class="sxs-lookup"><span data-stu-id="222f6-162">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="222f6-163"><xref:System.CharEnumerator.MoveNext%2A> logisch legt den Index fest, nach dem letzten (nicht vorhandenen) Zeichen der aufgelisteten Zeichenfolge ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="222f6-163"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="222f6-164">Im folgenden Beispiel wird die <xref:System.CharEnumerator> Klasse, um die einzelnen Zeichen in einer Zeichenfolge aufgelistet werden.</span><span class="sxs-lookup"><span data-stu-id="222f6-164">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="222f6-165">Es instanziiert ein <xref:System.CharEnumerator> -Objekt durch Aufrufen der <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> -Methode von einem Zeichen zum nächsten wechselt durch Aufrufen der <xref:System.CharEnumerator.MoveNext%2A> -Methode, und zeigt das aktuelle Zeichen durch Abrufen des Werts von der <xref:System.CharEnumerator.Current%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="222f6-165">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="222f6-166">Beachten Sie jedoch, dass es sich bei der gleiche Vorgang mithilfe intuitiver ausgeführt werden kann `foreach` (in c#) oder `For Each` (in Visual Basic), wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="222f6-166">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="222f6-167">Initialisiert den Index auf eine Position, die sich logisch vor dem ersten Zeichen der aufgelisteten Zeichenfolge befindet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-167">Initializes the index to a position logically before the first character of the enumerated string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="222f6-168">Die <xref:System.CharEnumerator> Klasse verwaltet einen internen Index der aufgelisteten Zeichenfolge ein, und die <xref:System.CharEnumerator.Reset%2A> Methode legt den Index auf einen ungültigen Zustand fest.</span><span class="sxs-lookup"><span data-stu-id="222f6-168">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="222f6-169">Ruft das Zeichen in der von diesem <see cref="T:System.CharEnumerator" />-Objekt durchlaufenen Zeichenfolge ab, auf das zurzeit verwiesen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-169">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
          <span data-ttu-id="222f6-170">Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-170">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="222f6-171">Das geschachtelte Unicode-Zeichen, auf das zurzeit durch dieses <see cref="T:System.CharEnumerator" />-Objekt verwiesen wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-171">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="222f6-172">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="222f6-172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="222f6-173">Er kann nur verwendet werden, wenn die <xref:System.CharEnumerator>-Instanz in eine <xref:System.Collections.IEnumerator>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="222f6-173">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="222f6-174">Der Auflistungsvorgang wurde nicht gestartet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-174">Enumeration has not started.</span>
          </span>
          <span data-ttu-id="222f6-175">- oder - </span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-175">-or-</span>
          </span>
          <span data-ttu-id="222f6-176">Enumeration wurde beendet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-176">Enumeration has ended.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="222f6-177">Gibt alle von der <see cref="T:System.CharEnumerator" />-Klasse verwendeten Ressourcen frei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="222f6-177">Releases all resources used by the <see cref="T:System.CharEnumerator" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="222f6-178">Wenn Sie fertig sind, rufen Sie IDisposable.Dispose mithilfe der <xref:System.CharEnumerator> Klasse.</span><span class="sxs-lookup"><span data-stu-id="222f6-178">Call IDisposable.Dispose when you are finished using the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="222f6-179">Die-Methode bewirkt, dass die <xref:System.CharEnumerator> Klasse in einem nicht verwendbaren Zustand.</span><span class="sxs-lookup"><span data-stu-id="222f6-179">The method leaves the <xref:System.CharEnumerator> class in an unusable state.</span></span> <span data-ttu-id="222f6-180">Wenn es aufgerufen wurde, müssen Sie alle Verweise zum Freigeben der <xref:System.CharEnumerator> Klasse, damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.CharEnumerator> Klasse belegt wurde.</span><span class="sxs-lookup"><span data-stu-id="222f6-180">After calling it, you must release all references to the <xref:System.CharEnumerator> class so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> class was occupying.</span></span>

<span data-ttu-id="222f6-181">Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="222f6-181">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE]
> <span data-ttu-id="222f6-182">Rufen Sie IDisposable.Dispose immer, bevor Sie den letzten Verweis auf Freigeben der <xref:System.CharEnumerator> Klasse.</span><span class="sxs-lookup"><span data-stu-id="222f6-182">Always call IDisposable.Dispose before you release your last reference to the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="222f6-183">Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.CharEnumerator>-Methode des <xref:System.Object.Finalize>-Objekts aufruft.</span><span class="sxs-lookup"><span data-stu-id="222f6-183">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's <xref:System.Object.Finalize> method.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
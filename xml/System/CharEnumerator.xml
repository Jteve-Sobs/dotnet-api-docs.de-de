<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21a38481f417b0f1cea220a682ae2c92c6bd4a4d" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83477373" /></Metadata><TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IEnumerator&#xA;    interface IDisposable&#xA;    interface ICloneable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.IEnumerator" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.IEnumerator, class System.ICloneable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::IEnumerator" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable&#xA;    interface IEnumerator" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IEnumerator&#xA;    interface IDisposable" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Unterstützt das Durchlaufen eines <see cref="T:System.String" />-Objekts und Lesen seiner einzelnen Zeichen. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.CharEnumerator> bietet schreibgeschützten Zugriff auf die Zeichen in einem <xref:System.String> Objekt, auf das verwiesen wird. Beispielsweise ruft die `foreach`-Anweisung von Microsoft Visual Basic und C# Programmiersprachen, die die Elemente einer Auflistung durchläuft, eine <xref:System.CharEnumerator> von einem <xref:System.String> Objekt ab, um die Zeichen in diesem Objekt zu durchlaufen.  

> [!IMPORTANT]
> Die `CharEnumerator`-Klasse listet einzelne 16-Bit-<xref:System.Char> Instanzen auf. Graphemes (d. h. ein Zeichen, gefolgt von einem oder mehreren einfügende Zeichen) oder Ersatz Zeichenpaare (d. h. Zeichen außerhalb der Unicode-Basis mehrsprachigen Ebene) als einzelne Zeichen werden nicht berücksichtigt. Verwenden Sie für einen Enumerator, der diese Zeichen Typen als einzelne Einheit behandelt, die <xref:System.Globalization.StringInfo>-Klasse.

 Es ist kein öffentlicher Konstruktor für <xref:System.CharEnumerator>vorhanden. Rufen Sie stattdessen die <xref:System.String.GetEnumerator%2A>-Methode eines <xref:System.String> Objekts auf, um eine <xref:System.CharEnumerator> abzurufen, die für den Verweis auf die Zeichenfolge initialisiert wird.  
  
 Ein <xref:System.CharEnumerator> verwaltet einen internen Index für die Zeichen in der Zeichenfolge, auf die die <xref:System.CharEnumerator> verweist. Der Status des Indexes ist ungültig, wenn er auf eine Zeichenposition logisch vor dem ersten oder nach dem letzten Zeichen in der Zeichenfolge verweist und gültig ist, wenn er auf ein Zeichen innerhalb der Zeichenfolge verweist. Der Index wird bis zu einer Position vor dem ersten Zeichen initialisiert, und wird auf eine Position hinter dem letzten Zeichen festgelegt, wenn die iterierung vollständig ist. Eine Ausnahme wird ausgelöst, wenn Sie versuchen, auf ein Zeichen zuzugreifen, während der Index ungültig ist.  
  
 Die <xref:System.CharEnumerator.MoveNext%2A>-Methode erhöht den Index um eins, sodass auf das erste und nachfolgende Zeichen wiederum zugegriffen wird. Die <xref:System.CharEnumerator.Reset%2A>-Methode legt den Index auf eine Position vor dem ersten Zeichen fest. Die <xref:System.CharEnumerator.Current%2A>-Eigenschaft ruft das Zeichen ab, auf das derzeit durch den Index verwiesen wird. Die <xref:System.CharEnumerator.Clone%2A>-Methode erstellt eine Kopie der <xref:System.CharEnumerator>.  
  
> [!NOTE]
>  Mehrere unabhängige Instanzen von <xref:System.CharEnumerator> über einen oder mehrere Threads verfügen über Zugriff auf eine einzelne Instanz von <xref:System.String>. Diese Klasse wird implementiert, um die <xref:System.Collections.IEnumerator>-Schnittstelle zu unterstützen. Weitere Informationen zur Verwendung eines Enumerators finden Sie im <xref:System.Collections.IEnumerator> Thema.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.CharEnumerator>-Klasse verwendet, um die einzelnen Zeichen in einer Zeichenfolge aufzulisten. Sie instanziiert ein <xref:System.CharEnumerator> Objekt durch Aufrufen der <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>-Methode, wechselt von einem Zeichen zum nächsten, indem die <xref:System.CharEnumerator.MoveNext%2A>-Methode aufgerufen wird, und zeigt das aktuelle Zeichen an, indem der Wert der <xref:System.CharEnumerator.Current%2A>-Eigenschaft abgerufen wird.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Beachten Sie jedoch, dass derselbe Vorgang mit `foreach` (in C#) oder `For Each` (in Visual Basic) etwas intuitiver ausgeführt werden kann, wie im folgenden Beispiel gezeigt.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie des aktuellen <see cref="T:System.CharEnumerator" />-Objekts.</summary>
        <returns>Ein neues <see cref="T:System.Object" />, das eine Kopie des aktuellen <see cref="T:System.CharEnumerator" />-Objekts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert ist eine Kopie dieser Instanz von <xref:System.CharEnumerator> und Ihrem aktuellen Zustand. Dies ist nützlich, um den Zustand beim Durchlaufen eines <xref:System.String> Objekts zu speichern.  
  
 Nehmen Sie beispielsweise an, dass Ihre Anwendung eine ursprüngliche Instanz von <xref:System.CharEnumerator> verwendet, um die einzelnen Zeichen in einer <xref:System.String>zu durchlaufen. Wenn einige eindeutige Zeichen gefunden werden, hält Ihre Anwendung die Verarbeitung an und ruft die <xref:System.CharEnumerator.Clone%2A>-Methode auf. Dadurch wird der Index des <xref:System.CharEnumerator> Objekts in der <xref:System.String>gespeichert.  
  
 Die Anwendung verwendet den Klon, um zu einem anderen Teil des `String` zu navigieren und einige zusätzliche Verarbeitungsschritte auszuführen. Der Nebeneffekt dieser Navigation besteht darin, dass der Klon die Position verliert, an der die Verarbeitung beendet wurde. Wenn die Zusatz Verarbeitung jedoch fertiggestellt ist, verwirft Ihre Anwendung den Klon und verwendet die ursprüngliche <xref:System.CharEnumerator> Instanz, um die Arbeit an dem <xref:System.String> fortzusetzen, an dem die ursprüngliche Verarbeitung beendet wurde.  
  
> [!NOTE]
>  Diese Methode wird implementiert, um die <xref:System.ICloneable>-Schnittstelle zu unterstützen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeichen in der von diesem <see cref="T:System.CharEnumerator" />-Objekt durchlaufenen Zeichenfolge ab, auf das zurzeit verwiesen wird.</summary>
        <value>Das Unicode-Zeichen, auf das zurzeit durch dieses <see cref="T:System.CharEnumerator" />-Objekt verwiesen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.CharEnumerator>-Klasse verwaltet einen internen Index für die enumerationszeichenfolge, und die <xref:System.CharEnumerator.Current%2A>-Eigenschaft gibt das Zeichen zurück, auf das zurzeit durch den Index verwiesen wird. Diese Eigenschaft sollte nur aufgerufen werden, wenn der Index gültig ist. Andernfalls wird eine Ausnahme ausgelöst.  
  
 Der Index ist für eine leere Zeichenfolge ("") immer ungültig. Der Index ist auch ungültig, nachdem die <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>-oder <xref:System.CharEnumerator.Reset%2A>-Methode aufgerufen wurde. Nachdem eine dieser Methoden aufgerufen wurde, rufen Sie die <xref:System.CharEnumerator.MoveNext%2A>-Methode auf, um den Index auf das erste Zeichen in der aufgelisteten Zeichenfolge zu ändern. Der Index ist gültig, wenn die <xref:System.CharEnumerator.MoveNext%2A>-Methode `true`zurückgibt.  
  
 <xref:System.CharEnumerator.Current%2A> verschiebt den Index nicht, und aufeinanderfolgende Aufrufe an <xref:System.CharEnumerator.Current%2A> geben das gleiche Zeichen zurück, bis <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>oder <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> aufgerufen wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.CharEnumerator>-Klasse verwendet, um die einzelnen Zeichen in einer Zeichenfolge aufzulisten. Sie instanziiert ein <xref:System.CharEnumerator> Objekt durch Aufrufen der <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>-Methode, wechselt von einem Zeichen zum nächsten, indem die <xref:System.CharEnumerator.MoveNext%2A>-Methode aufgerufen wird, und zeigt das aktuelle Zeichen an, indem der Wert der <xref:System.CharEnumerator.Current%2A>-Eigenschaft abgerufen wird.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Beachten Sie jedoch, dass derselbe Vorgang mit `foreach` (in C#) oder `For Each` (in Visual Basic) etwas intuitiver ausgeführt werden kann, wie im folgenden Beispiel gezeigt.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Index ist ungültig; d. h. er befindet sich vor den ersten oder hinter dem letzten Zeichen der aufgelisteten Zeichenfolge.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.CharEnumerator" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.CharEnumerator.Dispose%2A> auf, wenn Sie <xref:System.CharEnumerator> nicht mehr benötigen. Die <xref:System.CharEnumerator.Dispose%2A>-Methode bewirkt, dass <xref:System.CharEnumerator> nicht mehr verwendet werden kann. Nachdem Sie <xref:System.CharEnumerator.Dispose%2A>aufgerufen haben, müssen Sie alle Verweise auf die <xref:System.CharEnumerator> freigeben, damit der Garbage Collector den Speicher freigeben kann, den der <xref:System.CharEnumerator> belegt hat.  
  
 Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.CharEnumerator.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.CharEnumerator> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.CharEnumerator>-Methode des `Finalize`-Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inkrementiert den internen Index des aktuellen <see cref="T:System.CharEnumerator" />-Objekts zum nächsten Zeichen der aufgelisteten Zeichenfolge.</summary>
        <returns><see langword="true" />, wenn der Index erhöht werden konnte und sich innerhalb der aufgelisteten Zeichenfolge befindet, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.CharEnumerator>-Klasse verwaltet einen internen Index für die enumerationszeichenfolge, und die <xref:System.CharEnumerator.MoveNext%2A>-Methode erhöht den Index um 1. Rufen Sie <xref:System.CharEnumerator.MoveNext%2A> auf, nachdem Sie <xref:System.String.GetEnumerator%2A> oder <xref:System.CharEnumerator.Reset%2A> aufgerufen haben, um die aktuelle Zeichenposition auf das erste Zeichen in der Aufzählungs Zeichenfolge zu erhöhen. Überprüfen Sie, ob der Rückgabewert `true` ist, um zu bestimmen, ob die aktuelle Zeichenposition gültig ist.  
  
 Wenn der Index bereits hinter dem letzten Zeichen der aufgelisteten Zeichenfolge liegt, wird der Index nicht geändert, und `false` wird zurückgegeben.  
  
 Beachten Sie, dass der Status der <xref:System.CharEnumerator> immer ungültig ist, wenn die enumerationszeichenfolge leer ("") ist. Dies liegt daran, dass der interne Index für den <xref:System.CharEnumerator> anfänglich vor dem ersten Zeichen der aufgelisteten Zeichenfolge liegt und daher ungültig ist. <xref:System.CharEnumerator.MoveNext%2A> logisch den Index nach dem letzten (nicht vorhandenen) Zeichen der aufgelisteten Zeichenfolge festlegt, das ebenfalls ungültig ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.CharEnumerator>-Klasse verwendet, um die einzelnen Zeichen in einer Zeichenfolge aufzulisten. Sie instanziiert ein <xref:System.CharEnumerator> Objekt durch Aufrufen der <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>-Methode, wechselt von einem Zeichen zum nächsten, indem die <xref:System.CharEnumerator.MoveNext%2A>-Methode aufgerufen wird, und zeigt das aktuelle Zeichen an, indem der Wert der <xref:System.CharEnumerator.Current%2A>-Eigenschaft abgerufen wird.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Beachten Sie jedoch, dass derselbe Vorgang mit `foreach` (in C#) oder `For Each` (in Visual Basic) etwas intuitiver ausgeführt werden kann, wie im folgenden Beispiel gezeigt.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert den Index auf eine Position, die sich logisch vor dem ersten Zeichen der aufgelisteten Zeichenfolge befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.CharEnumerator>-Klasse verwaltet einen internen Index für die enumerationszeichenfolge, und die <xref:System.CharEnumerator.Reset%2A>-Methode legt den Index auf den ungültigen Zustand fest.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IEnumerator.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Zeichen in der von diesem <see cref="T:System.CharEnumerator" />-Objekt durchlaufenen Zeichenfolge ab, auf das zurzeit verwiesen wird. Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
        <value>Das geschachtelte Unicode-Zeichen, auf das zurzeit durch dieses <see cref="T:System.CharEnumerator" />-Objekt verwiesen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Member ist eine explizite Schnittstellen-Memberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.CharEnumerator>-Instanz in eine <xref:System.Collections.IEnumerator>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Auflistungsvorgang wurde nicht gestartet.  
  
 Oder  
  
 Enumeration wurde beendet.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="charEnumerator.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von der <see cref="T:System.CharEnumerator" />-Klasse verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Wenn Sie die <xref:System.CharEnumerator>-Klasse nicht mehr benötigen, nennen Sie iverwerf. verwerfen. Die-Methode verlässt die <xref:System.CharEnumerator>-Klasse in einem nicht verwendbaren Zustand. Nachdem Sie ihn aufgerufen haben, müssen Sie alle Verweise auf die <xref:System.CharEnumerator>-Klasse freigeben, damit der Garbage Collector den Speicher freigeben kann, den die <xref:System.CharEnumerator> Klasse belegt hat.

Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md)verwerfen-Methode.

> [!NOTE]
> Nennen Sie immer iverwerf. verwerfen, bevor Sie den letzten Verweis auf die <xref:System.CharEnumerator> Klasse freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.CharEnumerator>-Methode des <xref:System.Object.Finalize>-Objekts aufruft.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5d8fe7d4a73ee7c4e119ce51d0d38b262de5a544" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58745365" /></Metadata><TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type IndexOutOfRangeException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Ausnahme, die bei einem Versuch ausgelöst wird, auf ein Element eines Arrays oder einer Sammlung mit einem Index zuzugreifen, der sich außerhalb der Begrenzungen des Arrays oder der Sammlung befindet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.IndexOutOfRangeException> Ausnahme wird ausgelöst, wenn ein ungültiger Index verwendet wird, Zugriff auf einen Member eines Arrays oder einer Sammlung oder zum Lesen oder schreiben, die von einem bestimmten Standort in einem Puffer. Diese Ausnahme erbt von der <xref:System.Exception> Klasse fügt aber keine eindeutigen Elemente hinzu.  
  
 In der Regel eine <xref:System.IndexOutOfRangeException> wird als Ergebnis der Entwicklerfehler ausgelöst. Statt die Ausnahme verarbeitet, sollten Sie die Ursache des Fehlers und den Code zu korrigieren. Die häufigsten Ursachen des Fehlers sind:  
  
-   Kleiner als die Anzahl von Elementen oder Elemente, wie im folgenden Beispiel veranschaulicht, vergessen, dass die obere Grenze einer Auflistung oder ein nullbasiertes Array ist.  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     Um den Fehler zu beheben, können Sie Code wie den folgenden verwenden.  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     Alternativ können Sie alle Elemente im Array wird nach ihrem Index durchlaufen, können Sie die `foreach` Anweisung (in C#) oder die `For Each` -Anweisung (in Visual Basic).  
  
-   Es wird versucht, ein Arrayelement in ein anderes Array zuweisen, wurde nicht wurde ordnungsgemäß dimensioniert und weniger Elemente als das ursprüngliche Array aufweist. Im folgenden Beispiel wird versucht, weisen Sie das letzte Element in der `value1` Array mit dem gleichen Element in der `value2` Array. Allerdings die `value2` Array wurde nicht ordnungsgemäß dimensioniert um sechs anstelle von sieben Elemente. Daher löst aus, die Zuweisung einer <xref:System.IndexOutOfRangeException> Ausnahme.  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   Verwenden eines Werts, die durch eine Suchmethode so durchlaufen Sie einen Teil eines Arrays oder einer Auflistung, die ab einer bestimmten Indexposition zurückgegeben wurden. Wenn Sie vergessen haben, um zu überprüfen, ob der Vorgang für die Suche eine Übereinstimmung gefunden wird, löst die Laufzeit eine <xref:System.IndexOutOfRangeException> Ausnahme, wie im folgenden Beispiel gezeigt.  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     In diesem Fall die <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> Methode gibt-1 zurück, die einem ungültigen Indexwert angegeben wird, ist, wenn ein Fehler auftritt, eine Übereinstimmung zu finden. Um diesen Fehler zu beheben, überprüfen Sie die Search-Methode zurückgegebene Wert vor dem Durchlaufen der Arrays, wie im folgenden Beispiel gezeigt.  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   Möchten verwenden oder Listen Sie die ein Resultset, eine Auflistung oder ein Array, das von einer Abfrage zurückgegeben wird, ohne dies zu testen, ob das zurückgegebene Objekt gültige Daten verfügt.  
  
-   Verwenden einen berechneten Wert zum Definieren der startIndex, der endIndex oder die Anzahl der Elemente, die durchlaufen werden soll. Wenn das Ergebnis der Berechnung unerwartet auftritt, führen eine <xref:System.IndexOutOfRangeException> Ausnahme. Überprüfen Sie Ihre Programmlogik bei der Berechnung des Indexwerts und überprüfen den Wert, bevor Sie durchläuft das Array oder einer Auflistung. Die folgenden Bedingungen müssen erfüllt sein; andernfalls ein <xref:System.IndexOutOfRangeException> Ausnahme ausgelöst:  
  
    -   Der Startindex muss größer als oder gleich <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> für die Dimension des Arrays, das Sie den Vorgang wiederholen möchten, oder größer als oder gleich 0 für eine Sammlung.  
  
    -   Der endIndex nicht überschreiten. <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> für die Dimension des Arrays, das Sie den Vorgang wiederholen, oder kann nicht größer als oder gleich sein möchten die `Count` Eigenschaft einer Auflistung.  
  
    -   Die folgende Gleichung muss "true" für die Dimension des Arrays sein, die durchlaufen werden sollen:  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate - 1 <= upper_bound  
        ```  
  
         Für eine Sammlung muss die folgende Gleichung gelten:  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  Der Startindex des ein Array- oder Auflistungselement kann nie eine negative Zahl sein.  
  
-   Vorausgesetzt, dass ein Array nullbasiert sein muss. Arrays, die nicht nullbasiert sind erstellt werden, indem die <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> Methode und kann von COM-Interop, zurückgegeben werden, obwohl sie nicht CLS-kompatibel sind. Das folgende Beispiel veranschaulicht die <xref:System.IndexOutOfRangeException> , die ausgelöst wird, wenn Sie versuchen, durchlaufen Sie eine nicht-NULL-basierten Array erstellt, indem die <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> Methode.  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     Um den Fehler zu beheben wie im folgenden Beispiel wird der Fall ist, können Sie den Aufrufen der <xref:System.Array.GetLowerBound%2A> Methode anstelle von Annahmen über den Startindex eines Arrays.  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     Beachten Sie, dass beim Aufrufen der <xref:System.Array.GetLowerBound%2A> -Methode zum Abrufen der Startindex für ein Array ist, rufen Sie auch die <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType> -Methode zum Abrufen der endIndex.  
  
-   Verwirrend, einen Index und den Wert an diesem Index in ein numerisches Array oder eine Auflistung. Dieses Problem tritt in der Regel bei Verwendung der `foreach` Anweisung (in C#) oder die `For Each` -Anweisung (in Visual Basic). Das Problem wird anhand des folgenden Beispiels veranschaulicht.  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     Die Iteration-Konstrukt gibt jeden Wert in ein Array oder einer Auflistung nicht seinen Index zurück. Um die Ausnahme zu vermeiden, verwenden Sie diesen Code ein.  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   Einen Ungültiger Spaltenname zum Bereitstellen der <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Verstoß gegen die Threadsicherheit. Vorgänge wie das Lesen aus der gleichen <xref:System.IO.StreamReader> -Objekt, auf die gleiche schreiben <xref:System.IO.StreamWriter> Objekt von mehreren Threads, oder das Auflisten der Objekte in eine <xref:System.Collections.Hashtable> kann aus verschiedenen Threads Auslösen einer <xref:System.IndexOutOfRangeException> , wenn der Zugriff auf das Objekt im ist kein threadsichere Weise. Diese Ausnahme ist in der Regel vorübergehende, da er von einer Race-Bedingung abhängt.  
  
 Hart kodierte Indexwerte verwenden, um ein Array zu bearbeiten, ist wahrscheinlich eine Ausnahme ausgelöst, wenn der Indexwert falsche oder ungültige ist oder wenn die Größe des Arrays Manipulation wird. Um zu verhindern, dass einen Vorgang vom Auslösen einer <xref:System.IndexOutOfRangeException> Ausnahme können Sie Folgendes tun:  
  
-   Durchlaufen Sie die Elemente des Arrays mit der [Foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) Anweisung (in C#) oder die [für jede... Nächste](https://msdn.microsoft.com/library/5ebk1751.aspx) erstellen (in Visual Basic) anstelle von Elementen nach Index durchlaufen.  
  
-   Durchlaufen Sie die Elemente nach Index, ab dem Index zurückgegeben werden, indem die <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> -Methode und den Endpunkt mit dem Index zurückgegeben werden, indem die <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> Methode.  
  
-   Wenn Sie Elemente in einem Array in einen anderen zuweisen, sicherstellen, dass es sich bei Zielarrays mindestens so viele Elemente durch einen Vergleich als das Quellarray hat ihre <xref:System.Array.Length%2A?displayProperty=nameWithType> Eigenschaften.  
  
 Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.IndexOutOfRangeException>, finden Sie unter den <xref:System.IndexOutOfRangeException> Konstruktoren.  
  
 Die folgenden Zwischensprache (IL)-Anweisungen auslösen <xref:System.IndexOutOfRangeException>:  
  
-   Ldelem. \<Typ >  
  
-   ldelema  
  
-   Stelem. \<Typ >  
  
 <xref:System.IndexOutOfRangeException> verwendet das HRESULT COR_E_INDEXOUTOFRANGE mit dem Wert 0 x 80131508.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen in .NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IndexOutOfRangeException" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IndexOutOfRangeException" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A> -Eigenschaft der neuen Instanz auf eine vom System bereitgestellten Meldung, die den Fehler beschreibt, wie z. B. "ein Arrayindex außerhalb des gültigen Bereichs ist." Diese Meldung berücksichtigt die aktuelle Systemkultur.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.IndexOutOfRangeException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die lokalisierte Zeichenfolge mit der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IndexOutOfRangeException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A?displayProperty=nameWithType> Eigenschaft der neuen Ausnahme mit der `message` Parameter. Der Inhalt der `message` soll in verständlicher Sprache gehalten sein. Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.IndexOutOfRangeException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string * Exception -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter kein NULL-Verweis ist (<see langword="Nothing" /> in Visual Basic), wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IndexOutOfRangeException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ausnahme, die als direktes Ergebnis einer vorhergehenden Ausnahme ausgelöst wird, muss in der <xref:System.Exception.InnerException%2A>-Eigenschaft über einen Verweis auf die vorhergehende Ausnahme verfügen. Die `InnerException`-Eigenschaft gibt denselben Wert zurück, der an den Konstruktor übergeben wurde, bzw. einen NULL-Verweis (`Nothing` in Visual Basic), wenn die `InnerException`-Eigenschaft nicht den Wert für die innere Ausnahme für den Konstruktor bereitstellt.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.IndexOutOfRangeException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Der Verweis auf die interne Ausnahme.|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e315de6e35568d212d8e084a6e58d809d1519f74" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420213" /></Metadata><TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type IndexOutOfRangeException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Ausnahme, die bei einem Versuch ausgelöst wird, auf ein Element eines Arrays oder einer Sammlung mit einem Index zuzugreifen, der sich außerhalb der Begrenzungen des Arrays oder der Sammlung befindet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.IndexOutOfRangeException> -Ausnahme wird ausgelöst, wenn ein ungültiger Index verwendet wird, um auf einen Member eines Arrays oder einer Auflistung zuzugreifen, oder um eine bestimmte Position in einem Puffer zu lesen oder zu schreiben. Diese Ausnahme erbt von der <xref:System.Exception> -Klasse, fügt jedoch keine eindeutigen Member hinzu.  
  
 In der Regel <xref:System.IndexOutOfRangeException> wird eine Ausnahme aufgrund eines Entwickler Fehlers ausgelöst. Anstatt die Ausnahme zu behandeln, sollten Sie die Ursache des Fehlers diagnostizieren und den Code korrigieren. Die häufigsten Fehler Gründe sind:  
  
-   Das vergessen, dass die obere Grenze einer Auflistung oder eines NULL basierten Arrays kleiner ist als die Anzahl der Elemente oder Elemente, wie im folgenden Beispiel veranschaulicht.  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     Um den Fehler zu beheben, können Sie Code wie den folgenden verwenden.  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     Anstatt alle Elemente im Array nach dem Index zu durchlaufen, können Sie alternativ die `foreach` -Anweisung (in C#) oder die `For Each` -Anweisung (in Visual Basic) verwenden.  
  
-   Es wird versucht, ein Array Element einem anderen Array zuzuweisen, das nicht angemessen dimensioniert wurde und weniger Elemente aufweist als das ursprüngliche Array. Im folgenden Beispiel wird versucht, das letzte Element im `value1` -Array dem gleichen Element `value2` im-Array zuzuweisen. Das `value2` Array wurde jedoch fälschlicherweise so dimensioniert, dass es sechs statt sieben Elemente aufweist. Folglich löst die Zuweisung eine <xref:System.IndexOutOfRangeException> Ausnahme aus.  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   Verwenden eines Werts, der von einer Suchmethode zurückgegeben wird, um einen Teil eines Arrays oder einer Auflistung beginnend an einer bestimmten Indexposition zu durchlaufen. Wenn Sie vergessen, zu überprüfen, ob der Suchvorgang eine Entsprechung gefunden hat <xref:System.IndexOutOfRangeException> , löst die Laufzeit eine Ausnahme aus, wie im folgenden Beispiel gezeigt.  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     In diesem Fall gibt die <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> Methode-1 zurück, bei der es sich um einen ungültigen Indexwert handelt, wenn keine Entsprechung gefunden wird. Um diesen Fehler zu beheben, überprüfen Sie den Rückgabewert der Suchmethode, bevor Sie das Array durchlaufen, wie in diesem Beispiel gezeigt.  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   Versuch, ein Resultset, eine Auflistung oder ein Array zu verwenden oder aufzulisten, das von einer Abfrage zurückgegeben wird, ohne zu testen, ob das zurückgegebene Objekt über gültige Daten verfügt.  
  
-   Verwenden eines berechneten Werts, um den Start Index, den Endindex oder die Anzahl der zu durch iternenden Elemente zu definieren. Wenn das Ergebnis der Berechnung unerwartet ist, kann dies zu einer <xref:System.IndexOutOfRangeException> Ausnahme führen. Überprüfen Sie die Logik des Programms, um den Indexwert zu berechnen und den Wert vor dem Durchlaufen des Arrays oder der Auflistung zu validieren. Die folgenden Bedingungen müssen alle zutreffen: Andernfalls wird eine <xref:System.IndexOutOfRangeException> Ausnahme ausgelöst:  
  
    -   Der Start Index muss größer oder gleich <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> für die Dimension des Arrays sein, das Sie durchlaufen möchten, oder größer oder gleich 0 (null) für eine Auflistung.  
  
    -   Der endIndex darf für <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> die Dimension des Arrays, das Sie durchlaufen möchten, nicht überschreiten oder nicht größer oder gleich der `Count` -Eigenschaft einer Auflistung sein.  
  
    -   Die folgende Gleichung muss für die Dimension des Arrays, das Sie durchlaufen möchten, den Wert true haben:  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate - 1 <= upper_bound  
        ```  
  
         Für eine Auflistung muss die folgende Gleichung den Wert "true" aufweisen:  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  Der Start Index eines Arrays oder einer Auflistung kann nie eine negative Zahl sein.  
  
-   Angenommen, ein Array muss NULL basiert sein. Arrays, die nicht NULL-basiert sind, können mit der <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> -Methode erstellt werden und können von COM-Interop zurückgegeben werden, obwohl Sie nicht CLS-kompatibel sind. Das folgende Beispiel veranschaulicht das <xref:System.IndexOutOfRangeException> , das ausgelöst wird, wenn Sie versuchen, ein nicht NULL basiertes Array zu durchlaufen, das <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> von der-Methode erstellt wurde.  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     Um den Fehler zu beheben, wie im folgenden Beispiel gezeigt, können Sie die <xref:System.Array.GetLowerBound%2A> -Methode statt Annahmen zum Start Index eines Arrays verwenden.  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     Beachten Sie, dass beim Abrufen <xref:System.Array.GetLowerBound%2A> der-Methode zum Abrufen des Start Index eines Arrays auch die <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType> -Methode aufgerufen wird, um den Endindex abzurufen.  
  
-   Verwechseln eines Indexes und des Werts an diesem Index in einem numerischen Array oder einer Auflistung. Dieses Problem tritt normalerweise auf, `foreach` wenn die- C#Anweisung (in `For Each` ) oder die-Anweisung (in Visual Basic) verwendet wird. Das Problem wird anhand des folgenden Beispiels veranschaulicht.  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     Das Iterations Konstrukt gibt jeden Wert in einem Array oder einer Auflistung zurück, nicht seinen Index. Um die Ausnahme auszuschließen, verwenden Sie diesen Code.  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   Der <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> Eigenschaft wird ein Ungültiger Spaltenname bereitgestellt.  
  
-   Verstoß gegen Thread Sicherheit. Vorgänge wie z. b. das <xref:System.IO.StreamReader> Lesen aus demselben Objekt, das <xref:System.IO.StreamWriter> schreiben in dasselbe Objekt aus mehreren Threads oder das Auflisten der Objekte in <xref:System.Collections.Hashtable> einem aus verschiedenen Threads können eine <xref:System.IndexOutOfRangeException> auslösen, wenn auf das Objekt nicht in einem Thread sichere Art und Weise. Diese Ausnahme ist in der Regel zeitweilig, da Sie auf einer Racebedingung basiert.  
  
 Die Verwendung von hart codierten Indexwerten zum Bearbeiten eines Arrays löst wahrscheinlich eine Ausnahme aus, wenn der Indexwert falsch oder ungültig ist, oder wenn die Größe des zu bearbeienden Arrays unerwartet ist. Um zu verhindern, dass von einem <xref:System.IndexOutOfRangeException> Vorgang eine Ausnahme ausgelöst wird, können Sie folgende Aktionen ausführen:  
  
-   Iterieren Sie die Elemente des Arrays mithilfe der [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) -Anweisung ( C#in) oder der [for each-Anweisung... Nächstes](https://msdn.microsoft.com/library/5ebk1751.aspx) Konstrukt (in Visual Basic) anstatt Elemente nach Index zu durchlaufen.  
  
-   Iterieren Sie die Elemente nach Index, beginnend mit dem Index, <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> der von der-Methode zurückgegeben wird, <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> und mit dem von der-Methode zurückgegebenen Index.  
  
-   Wenn Sie Elemente in einem Array einem anderen Array zuweisen, stellen Sie sicher, dass das Ziel Array über mindestens so viele Elemente wie das Quell Array verfügt <xref:System.Array.Length%2A?displayProperty=nameWithType> , indem Sie die zugehörigen Eigenschaften vergleichen.  
  
 Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.IndexOutOfRangeException>, finden Sie unter den <xref:System.IndexOutOfRangeException> Konstruktoren.  
  
 Die folgenden Anweisungen <xref:System.IndexOutOfRangeException>der zwischen Sprache (IL) lösen Folgendes aus:  
  
-   ldelta em. \<> eingeben  
  
-   ldelta-  
  
-   stelem.\<type>  
  
 <xref:System.IndexOutOfRangeException>verwendet das HRESULT-COR_E_INDEXOUTOFRANGE, das den Wert 0x80131508 aufweist.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen in .NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IndexOutOfRangeException" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IndexOutOfRangeException" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A> -Eigenschaft der neuen Instanz mit einer vom System bereitgestellten Meldung, die den Fehler beschreibt, z. b. "ein Array Index liegt außerhalb des gültigen Bereichs." Diese Meldung berücksichtigt die aktuelle Systemkultur.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.IndexOutOfRangeException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die lokalisierte Zeichenfolge mit der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IndexOutOfRangeException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A?displayProperty=nameWithType> -Eigenschaft der neuen Ausnahme mit dem `message` -Parameter. Der Inhalt der `message` soll in verständlicher Sprache gehalten sein. Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.IndexOutOfRangeException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string * Exception -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter kein NULL-Verweis ist (<see langword="Nothing" /> in Visual Basic), wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.IndexOutOfRangeException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ausnahme, die als direktes Ergebnis einer vorhergehenden Ausnahme ausgelöst wird, muss in der <xref:System.Exception.InnerException%2A>-Eigenschaft über einen Verweis auf die vorhergehende Ausnahme verfügen. Die `InnerException`-Eigenschaft gibt denselben Wert zurück, der an den Konstruktor übergeben wurde, bzw. einen NULL-Verweis (`Nothing` in Visual Basic), wenn die `InnerException`-Eigenschaft nicht den Wert für die innere Ausnahme für den Konstruktor bereitstellt.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.IndexOutOfRangeException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Der Verweis auf die interne Ausnahme.|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cbb8d4f80848b7b2934373ec3645327ff604deca" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52383431" /></Metadata><TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Ausnahme, die ausgelöst wird, wenn für die weitere Ausführung eines Programms nicht genügend Arbeitsspeicher zur Verfügung steht.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.OutOfMemoryException> Ausnahme hat zwei wesentliche Gründe:  
  
-   Sie versuchen, erweitern eine <xref:System.Text.StringBuilder> Objekt mehr als die Länge von definiert die <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   Die common Language Runtime kann nicht genügend zusammenhängenden Arbeitsspeicher, um erfolgreich einen Vorgang ausführen zuordnen. Diese Ausnahme kann durch jede Eigenschaft Zuweisung oder ein Methodenaufruf ausgelöst werden, die eine speicherbelegung erfordert. Weitere Informationen zu die Ursache für die <xref:System.OutOfMemoryException> Ausnahme finden Sie unter ["nicht genügend Arbeitsspeicher" verweist nicht auf den physischen Speicher](https://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx).  
  
     Diese Art von <xref:System.OutOfMemoryException> Ausnahme darstellt, einen schwerwiegenden Fehler. Wenn Sie entscheiden, die die Ausnahme zu behandeln, sollte Sie enthalten eine `catch` Block, der aufgerufen der <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> Methode, um Ihre app zu beenden, und fügen Sie einen Eintrag in das Systemereignisprotokoll an, wie im folgende Beispiel.  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 Einige der die Bedingungen, unter dem die Ausnahme wird ausgelöst, und die Aktionen, die Sie ergreifen können, um es zu beseitigen, umfassen Folgendes:  
  
 Sie sind Aufrufen der <xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType> Methode.  
 Sie versuchen, erhöhen Sie die Länge des eine <xref:System.Text.StringBuilder> Objekt mehr als die Größe, die gemäß der <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> Eigenschaft. Das folgende Beispiel veranschaulicht die <xref:System.OutOfMemoryException> Ausnahme durch einen Aufruf der <xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> Methode, wenn im Beispiel wird versucht, eine Zeichenfolge einzufügen, die des Objekts verursachen würde <xref:System.Text.StringBuilder.Length%2A> -Eigenschaft überschreitet die maximale Kapazität.  
  
 [!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
 [!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
 Sie können zum Beheben dieses Fehlers die folgenden Möglichkeiten:  
  
-   Ersetzen Sie den Aufruf von der <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Konstruktor mit einem Aufruf einer anderen <xref:System.Text.StringBuilder> Überladung des Konstruktors. Die maximale Kapazität Ihrer <xref:System.Text.StringBuilder> Objektsatz wird auf den Standardwert, d.h. <xref:System.Int32.MaxValue?displayProperty=nameWithType>.  
  
-   Rufen Sie die <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Konstruktor mit einer `maxCapacity` Wert, der groß genug für alle Erweiterungen, die <xref:System.Text.StringBuilder> Objekt.  
  
 Ihre app als 32-Bit-Prozess ausgeführt wird.  
 32-Bit-Prozesse können bis zu 2 GB virtuellen Benutzermodus-Speicher auf 32-Bit-Systeme und 4 GB Arbeitsspeicher der virtuellen Benutzer-Modus auf 64-Bit-Systemen zuordnen. Dies kann erschweren es für die common Language Runtime genügend zusammenhängenden Arbeitsspeicher zugewiesen werden, wenn eine große Belegung benötigt wird. Im Gegensatz dazu können 64-Bit-Prozesse bis zu 8 TB an virtuellem Arbeitsspeicher zuordnen. Um diese Ausnahme zu beheben, kompilieren Sie Ihre app, um eine 64-Bit-Zielplattform neu. Weitere Informationen dazu, für bestimmte Plattformen in Visual Studio, finden Sie unter [Vorgehensweise: Konfigurieren von Projekten für Zielplattformen](https://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76).  
  
 Ihre app wird nicht verwaltete Ressourcen Verlust.  
 Obwohl der Garbage Collector den verwalteten Typen belegten Arbeitsspeicher freizugeben kann, wird sie nicht verwaltet Speichermenge, die für die nicht verwaltete Ressourcen wie z. B. Betriebssystem behandelt (einschließlich Handles für Dateien, Speicherabbilddateien, Pipes, Registrierungsschlüssel und Wait-Handles) und Speicherblöcke wie z. B. zugeordnet werden direkt von Windows-API-Aufrufe oder durch Aufrufe von speicherbelegungsfunktionen `malloc`. Typen, die nicht verwaltete Ressourcen zu nutzen, implementieren die <xref:System.IDisposable> Schnittstelle.  
  
 Wenn Sie einen Typ, die nicht verwaltete Ressourcen verwendet verwenden, sollten Sie Sie aufrufen, werden die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Methode, wenn Sie ihn nicht mehr benötigen. (Einige Typen auch implementieren eine `Close` -Methode, die in der Funktion, die identisch ist eine `Dispose` Methode.) Weitere Informationen finden Sie unter den [mithilfe von Objekten, implementieren "IDisposable"](~/docs/standard/garbage-collection/using-objects.md) Thema.  
  
 Wenn Sie einen Typ, der nicht verwaltete Ressourcen verwendet erstellt haben, stellen Sie sicher, dass die Implementieren des Dispose-Musters und, bei Bedarf einen Finalizer angegeben Schritte aus. Weitere Informationen finden Sie unter den [Dispose-Muster](~/docs/standard/design-guidelines/dispose-pattern.md), [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md), und <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Themen.  
  
 Sie versuchen, ein großes Array in einem 64-Bit-Prozess zu erstellen.  
 Standardmäßig lässt die common Language Runtime nicht einzelne Objekte zu, deren Größe über 2 GB überschreitet. Um diese Standardeinstellung zu überschreiben, können Sie die Konfigurationseinstellung für die Datei um Arrays zu aktivieren, deren Gesamtgröße 2 GB überschreitet.  
  
 Sie arbeiten mit sehr großen Mengen von Daten (z. B. Arrays, Auflistungen oder Datenbank-Datasets) im Arbeitsspeicher.  
 Wenn Datenstrukturen oder Datasets, die im Arbeitsspeicher befinden sich so groß werden, dass die common Language Runtime nicht genügend zusammenhängenden Arbeitsspeicher für sie ist ein <xref:System.OutOfMemoryException> Ausnahme führt.  
  
 Um zu verhindern, dass die <xref:System.OutOfMemoryException> Ausnahmen, müssen Sie Ihre Anwendung ändern, sodass weniger Daten im Speicher gehalten werden, oder die Daten in Segmenten, die eine geringere speicherbelegung erfordern aufgeteilt werden. Zum Beispiel:  
  
-   Wenn Sie alle Daten aus einer Datenbank abrufen und Filtern sie dann in Ihrer app, um Roundtrips zum Server zu minimieren, sollten Sie Ihre Abfragen, um nur die Teilmenge der Daten zurückzugeben, die deine app braucht dringend ändern. Bei der Arbeit mit großen Tabellen mehrere Abfragen sind fast immer mehr effizient als das Abrufen aller Daten in einer einzelnen Tabelle aus, und bearbeiten es dann.  
  
-   Wenn Sie Abfragen, die Benutzer dynamisch zu erstellen ausführen, sollten Sie sicherstellen, dass die Anzahl der von der Abfrage zurückgegebenen Datensätze beschränkt ist.  
  
-   Wenn Sie mit großen Arrays oder andere Auflistung Objekte, deren Größe führt zu einer <xref:System.OutOfMemoryException> Ausnahme, sollten Sie die Anwendung, die Daten in Teilmengen zu arbeiten, anstatt alle gleichzeitig zu arbeiten ändern.  
  
 Im folgenden Beispiel wird ein Array, das besteht aus 200 Millionen Gleitkommazahlen-Punktwerte und ihrem Mittelwert berechnet. Die Ausgabe im Beispiel wird veranschaulicht, wie, da im Beispiel werden das gesamte Array im Arbeitsspeicher gespeichert, bevor der Mittelwert berechnet eine <xref:System.OutOfMemoryException> wird ausgelöst.  
  
 [!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
 [!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
 Im folgende Beispiel entfernt der <xref:System.OutOfMemoryException> Ausnahme durch die Verarbeitung der eingehenden Daten ohne das gesamte Dataset im Arbeitsspeicher Serialisieren der Daten in eine Datei, falls erforderlich, um weitere Verarbeitung zu ermöglichen (diese Zeilen auskommentiert werden im Beispiel speichern Da in diesem Fall sie erzeugen eine Datei, deren Größe größer als 1 GB ist), und den Mittelwert der berechneten und die Anzahl von Fällen an die aufrufende Routine zurückgegeben.  
  
 [!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
 [!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
 Sie werden wiederholt große Zeichenfolgen verketten.  
 Da Zeichenfolgen unveränderlich sind, wird jede zeichenkettenverkettungsvorgang eine neue Zeichenfolge erstellt. Für kurze Zeichenfolgen oder für eine kleine Anzahl von Verkettungsvorgänge, ist unerheblich. Für große Zeichenfolgen oder eine sehr große Anzahl von Verkettungsvorgänge, zeichenfolgenverkettung kann jedoch zu führen eine große Anzahl von speicherbelegungen und Fragmentierung des Arbeitsspeichers, die Leistung negativ beeinflussen und möglicherweise <xref:System.OutOfMemoryException> Ausnahmen.  
  
 Bei langen Zeichenfolgen verketten oder eine große Anzahl von Verkettungsvorgänge ausführen, sollten Verwendung der <xref:System.Text.StringBuilder> -Klasse anstelle der <xref:System.String> Klasse. Wenn Sie fertig sind, bearbeiten die Zeichenfolge, konvertieren Sie die <xref:System.Text.StringBuilder> Instanz in eine Zeichenfolge durch Aufrufen der <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Heften Sie eine große Anzahl von Objekten im Arbeitsspeicher.  
 Befestigen eine große Anzahl von Objekten im Speicher für lange Zeiträume kann für den Garbage Collector zusammenhängende Speicherblöcke zuweisen erschweren. Wenn Sie eine große Anzahl von Objekten im Arbeitsspeicher, z. B. mit angeheftet haben die `fixed` -Anweisung in c# oder durch Aufrufen der <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> Methode mit einem Handle <xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>, Sie können folgendermaßen an Adresse der <xref:System.OutOfMemoryException> Ausnahme.  
  
-   Bewerten Sie, ob jedes Objekt tatsächlich fixiert werden muss,  
  
-   Stellen Sie sicher, dass jedes Objekt so bald wie möglich gelöst ist.  
  
-   Stellen Sie sicher, dass jeder Aufruf der <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> Methode, um die Pin-Speicher hat einen zugehörigen Aufruf an die <xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType> Methode, um Speicher zu lösen.  
  
 Die folgenden Microsoft intermediate (MSIL)-Anweisungen Auslösen einer <xref:System.OutOfMemoryException> Ausnahme:  
  
-   [Feld](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
  
-   [newarr](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  
  
-   [newobj](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  
  
 <xref:System.OutOfMemoryException> verwendet das HRESULT `COR_E_OUTOFMEMORY`, die über den Wert 0x8007000E verfügt.  
  
 Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.OutOfMemoryException>, finden Sie unter den <xref:System.OutOfMemoryException.%23ctor%2A> Konstruktoren.  
  
> [!NOTE]
>  Der Wert des geerbten <xref:System.Exception.Data%2A> Eigenschaft ist immer `null`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A> -Eigenschaft der neuen Instanz auf eine vom System bereitgestellten Meldung, die den Fehler beschreibt, wie z. B. "Es war nicht genügend Arbeitsspeicher, um die Ausführung des Programms fortzusetzen." Diese Meldung berücksichtigt die aktuelle Systemkultur.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.OutOfMemoryException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Die lokalisierte Zeichenfolge mit der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Inhalt des `message`-Parameters sollte für Personen verständlich sein. Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.OutOfMemoryException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
        <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse mit serialisierten Daten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird während der Deserialisierung aufgerufen, um das über einen Stream übertragene Ausnahmeobjekt wiederherzustellen. Weitere Informationen finden Sie unter [XML- und SOAP-Serialisierung](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML- und SOAP-Serialisierung</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string * Exception -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter kein NULL-Verweis ist (<see langword="Nothing" /> in Visual Basic), wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ausnahme, die als direktes Ergebnis einer vorhergehenden Ausnahme ausgelöst wird, kann in der <xref:System.Exception.InnerException%2A>-Eigenschaft über einen Verweis auf die vorhergehende Ausnahme verfügen. Die <xref:System.Exception.InnerException%2A>-Eigenschaft gibt denselben Wert zurück, der an den Konstruktor übergeben wurde, bzw. einen NULL-Verweis (`Nothing` in Visual Basic), wenn die <xref:System.Exception.InnerException%2A>-Eigenschaft nicht den Wert für die innere Ausnahme für den Konstruktor bereitstellt.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.OutOfMemoryException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Der Verweis auf die interne Ausnahme.|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
      </Docs>
    </Member>
  </Members>
</Type>
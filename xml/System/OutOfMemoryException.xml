<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7ae34ab496defe3edc8e0da156b719fd92a6f4eb" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172439" /></Metadata><TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Ausnahme, die ausgelöst wird, wenn für die weitere Ausführung eines Programms nicht genügend Arbeitsspeicher zur Verfügung steht.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.OutOfMemoryException> verwendet die HRESULT-`COR_E_OUTOFMEMORY`mit dem Wert 0x8007000E.  
  
Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.OutOfMemoryException>, finden Sie unter den <xref:System.OutOfMemoryException.%23ctor%2A> Konstruktoren.  
  
> [!NOTE]
>  Der Wert der geerbten <xref:System.Exception.Data%2A> Eigenschaft ist immer `null`.  
  
Eine <xref:System.OutOfMemoryException> Ausnahme hat zwei Hauptgründe:  
  
-   Sie versuchen, ein <xref:System.Text.StringBuilder> Objekt über die Länge hinaus zu erweitern, die von seiner <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>-Eigenschaft definiert wird.  
  
-   Der Common Language Runtime kann nicht ausreichend zusammenhängenden Speicher zuweisen, um einen Vorgang erfolgreich auszuführen. Diese Ausnahme kann durch einen beliebigen Eigenschafts Zuweisungs-oder Methodenaufrufe ausgelöst werden, der eine Speicher Belegung erfordert. Weitere Informationen zur Ursache der <xref:System.OutOfMemoryException> Ausnahme finden Sie im Blogbeitrag ["nicht genügend Arbeitsspeicher" bezieht sich nicht auf den physischen Speicher](https://blogs.msdn.microsoft.com/ericlippert/2009/06/08/out-of-memory-does-not-refer-to-physical-memory/).  
  
     Diese Art <xref:System.OutOfMemoryException> Ausnahme stellt einen schwerwiegenden Fehler dar. Wenn Sie die Ausnahme behandeln möchten, sollten Sie einen `catch`-Block einschließen, der die <xref:System.Environment.FailFast%2A?displayProperty=nameWithType>-Methode aufruft, um die APP zu beenden und dem System Ereignisprotokoll einen Eintrag hinzuzufügen, wie im folgenden Beispiel gezeigt.  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 Einige der Bedingungen, unter denen die Ausnahme ausgelöst wird, und die folgenden Aktionen können Sie durchführen:  
  
**Sie rufen die <xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType>-Methode auf.**  

Sie versuchen, die Länge eines <xref:System.Text.StringBuilder> Objekts zu vergrößern, das über die in der <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>-Eigenschaft angegebene Größe hinausgeht. Das folgende Beispiel veranschaulicht die <xref:System.OutOfMemoryException> Ausnahme, die durch einen aufzurufenden <xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> Methode ausgelöst wird, wenn das Beispiel versucht, eine Zeichenfolge einzufügen, die dazu führt, dass die <xref:System.Text.StringBuilder.Length%2A>-Eigenschaft des Objekts die maximale Kapazität überschreitet.  
  
[!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
[!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
Sie können einen der folgenden Schritte ausführen, um den Fehler zu beheben:  
  
-   Ersetzen Sie den-Befehl für den <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>-Konstruktor durch einen anderen <xref:System.Text.StringBuilder> Konstruktorüberladung aufrufen. Die maximale Kapazität des <xref:System.Text.StringBuilder> Objekts wird auf den Standardwert festgelegt, der <xref:System.Int32.MaxValue?displayProperty=nameWithType>ist.  

-   Nennen Sie den <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>-Konstruktor mit einem `maxCapacity` Wert, der groß genug ist, um alle Erweiterungen zum <xref:System.Text.StringBuilder> Objekt zu unterstützen.  
  
**Ihre APP wird als 32-Bit-Prozess ausgeführt.**

32-Bit-Prozesse können auf 32-Bit-Systemen maximal 2 GB an virtuellem benutzermodusspeicher und 4 GB virtuellem Benutzermodus-Arbeitsspeicher auf 64-Bit-Systemen zuordnen. Dadurch kann es schwieriger werden, dass der Common Language Runtime ausreichend zusammenhängenden Speicher zuweist, wenn eine große Zuweisung benötigt wird. Im Gegensatz dazu können 64-Bit-Prozesse bis zu 8 TB virtuellen Arbeitsspeicher zuordnen. Um diese Ausnahme zu beheben, kompilieren Sie Ihre APP neu, sodass Sie eine 64-Bit-Plattform als Ziel hat. Informationen zum Ausrichten bestimmter Plattformen in Visual Studio finden Sie unter Gewusst [wie: Konfigurieren von Projekten für Zielplattformen](https://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76).  
  
**Ihre APP gibt nicht verwaltete Ressourcen frei.** 

Obwohl die Garbage Collector Arbeitsspeicher freigeben kann, der verwalteten Typen zugeordnet ist, verwaltet Sie keinen Arbeitsspeicher, der nicht verwalteten Ressourcen zugeordnet ist, wie z. b. Betriebssystem Handles (einschließlich Handles zu Dateien, Speicher Abbild Dateien, Pipes, Registrierungs Schlüsseln und Wait-Handles) und Speicherblöcke, die direkt durch Windows-API-Aufrufe oder durch Aufrufe von Speicher Belegungs Funktionen wie `malloc`zugeordnet werden Typen, die nicht verwaltete Ressourcen verbrauchen, implementieren die <xref:System.IDisposable>-Schnittstelle.  

Wenn Sie einen Typ verwenden, der nicht verwaltete Ressourcen verwendet, sollten Sie die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>-Methode aufrufen, wenn Sie Sie nicht mehr benötigen. (Einige Typen implementieren auch eine `Close` Methode, die in der Funktion mit einer `Dispose` Methode identisch ist.) Weitere Informationen finden [Sie unter Verwenden von Objekten, die iverwerfbare Themen implementieren](~/docs/standard/garbage-collection/using-objects.md) .  

Wenn Sie einen Typ erstellt haben, der nicht verwaltete Ressourcen verwendet, stellen Sie sicher, dass Sie das Lösch Muster implementiert und ggf. einen Finalizer bereitgestellt haben. Weitere Informationen finden Sie unter [Implementieren einer](~/docs/standard/garbage-collection/implementing-dispose.md) verwerfen-Methode und <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.  
  
**Sie versuchen, ein großes Array in einem 64-Bit-Prozess zu erstellen.**

Standardmäßig lässt die Common Language Runtime in .NET Framework keine einzelnen Objekte zu, deren Größe 2 GB überschreitet. Um diese Standardeinstellung zu überschreiben, können Sie die Einstellung [\<gcallowverylargeobjects >](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md) Konfigurationsdatei verwenden, um Arrays zu aktivieren, deren Gesamtgröße 2 GB überschreitet. Unter .net Core ist die Unterstützung für Arrays von mehr als 2 GB standardmäßig aktiviert. 
  
**Sie arbeiten mit sehr großen Datensätzen (z. b. Arrays, Auflistungen oder Daten Bank Datasets) im Arbeitsspeicher.**

Wenn Datenstrukturen oder Datasets im Arbeitsspeicher so groß werden, dass die Common Language Runtime nicht ausreichend zusammenhängenden Speicher für Sie zuordnen kann, werden <xref:System.OutOfMemoryException> Ausnahme Ergebnisse ausgegeben.  

Um die <xref:System.OutOfMemoryException> Ausnahmen zu verhindern, müssen Sie die Anwendung so ändern, dass weniger Daten im Arbeitsspeicher ansässig sind oder die Daten in Segmente aufgeteilt werden, die kleinere Speicher Belegungen erfordern. Beispiel:  

-   Wenn Sie alle Daten aus einer Datenbank abrufen und Sie dann in der APP filtern, um die Fahrten zum Server zu minimieren, sollten Sie die Abfragen so ändern, dass nur die Teilmenge der Daten zurückgegeben wird, die Ihre APP benötigt. Beim Arbeiten mit großen Tabellen sind mehrere Abfragen fast immer effizienter als das Abrufen aller Daten in einer einzelnen Tabelle und deren anschließende Bearbeitung.  

-   Wenn Sie Abfragen ausführen, die von Benutzern dynamisch erstellt werden, sollten Sie sicherstellen, dass die Anzahl der von der Abfrage zurückgegebenen Datensätze begrenzt ist.  

-   Wenn Sie große Arrays oder andere Auflistungs Objekte verwenden, deren Größe zu einer <xref:System.OutOfMemoryException> Ausnahme führt, sollten Sie Ihre Anwendung so ändern, dass Sie die Daten in Teilmengen bearbeitet, anstatt Sie gleichzeitig zu bearbeiten.  
  
Im folgenden Beispiel wird ein-Array abgerufen, das aus 200 Millionen Gleit Komma Werten besteht und dann den Mittelwert berechnet. Die Ausgabe des Beispiels zeigt, dass ein <xref:System.OutOfMemoryException> ausgelöst wird, da im Beispiel das gesamte Array im Arbeitsspeicher gespeichert wird, bevor der Mittelwert berechnet wird.  

[!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
[!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
Im folgenden Beispiel wird die <xref:System.OutOfMemoryException> Ausnahme beseitigt, indem die eingehenden Daten verarbeitet werden, ohne dass das gesamte Dataset im Arbeitsspeicher gespeichert wird, und die Daten in eine Datei serialisiert werden, wenn dies erforderlich ist, um eine weitere Verarbeitung zu ermöglichen (diese Zeilen werden im Beispiel auskommentiert, da in diesem Fall eine Datei mit einer Größe von mehr als 1 GB erzeugt wird)  

[!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
[!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
**Sie werden wiederholt große Zeichen folgen verketten.** 

Da Zeichen folgen unveränderlich sind, wird durch jeden Vorgang zum Verketten von Zeichen folgen eine neue Zeichenfolge erstellt. Die Auswirkung für kleine Zeichen folgen oder für eine kleine Anzahl von Verkettungs Vorgängen ist unerheblich. Bei großen Zeichen folgen oder einer sehr großen Anzahl von Verkettungs Vorgängen kann die Verkettung von Zeichen folgen jedoch zu einer großen Anzahl von Speicher Belegungen und Arbeitsspeicher Fragmentierung, zu schlechter Leistung und möglicherweise <xref:System.OutOfMemoryException> Ausnahmen führen.  

Wenn Sie große Zeichen folgen verketten oder eine große Anzahl von Verkettungs Vorgängen durchführen, sollten Sie die <xref:System.Text.StringBuilder>-Klasse anstelle der <xref:System.String>-Klasse verwenden. Wenn Sie die Bearbeitung der Zeichenfolge abgeschlossen haben, konvertieren Sie die <xref:System.Text.StringBuilder> Instanz in eine Zeichenfolge, indem Sie die <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>-Methode aufrufen.  
  
**Sie Heften eine große Anzahl von Objekten im Arbeitsspeicher an.**  
 
Das anhetzen einer großen Anzahl von Objekten im Arbeitsspeicher für längere Zeiträume kann es für die Garbage Collector schwierig machen, zusammenhängende Speicherblöcke zuzuordnen. Wenn Sie eine große Anzahl von Objekten im Arbeitsspeicher angeheftet haben, z. b. mit der C# `fixed`-Anweisung in oder durch Aufrufen der <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType>-Methode mit dem Handle-Typ <xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>, können Sie Folgendes tun, um die <xref:System.OutOfMemoryException> Ausnahme zu beheben.  
  
-   Evaluieren Sie, ob jedes Objekt tatsächlich fixiert werden muss,  

-   Stellen Sie sicher, dass jedes Objekt so schnell wie möglich gelöst wird.  

-   Stellen Sie sicher, dass für jeden Aufrufe der <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> Methode zum Anheften von Speicher ein entsprechender aufrufsbefehl an die <xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType>-Methode zum lösen dieses Speichers vorhanden ist.  

Die folgenden MSIL-Anweisungen (Microsoft Intermediate) lösen eine <xref:System.OutOfMemoryException> Ausnahme aus:  
  
-   [Chens](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
-   [netzerr](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  

-   [newobj](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  


 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A>-Eigenschaft der neuen Instanz mit einer vom System bereitgestellten Meldung, die den Fehler beschreibt, z. b. "es war nicht genügend Arbeitsspeicher vorhanden, um die Ausführung des Programms fortzusetzen." Diese Meldung berücksichtigt die aktuelle Systemkultur.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.OutOfMemoryException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der lokalisierten Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, die den Fehler beschreibt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Inhalt des `message`-Parameters sollte für Personen verständlich sein. Der Aufrufer dieses Konstruktors ist erforderlich, um sicherzustellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.OutOfMemoryException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info">Das Objekt, das die serialisierten Objektdaten enthält.</param>
        <param name="context">Die Kontextinformationen zur Quelle oder zum Ziel.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse mit serialisierten Daten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird während der Deserialisierung aufgerufen, um das über einen Datenstrom übertragene Ausnahmeobjekt wieder zusammenzusetzen. Weitere Informationen finden Sie unter [XML- und SOAP-Serialisierung](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML- und SOAP-Serialisierung</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string * Exception -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter kein NULL-Verweis ist (<see langword="Nothing" /> in Visual Basic), wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.OutOfMemoryException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ausnahme, die als direktes Ergebnis einer vorhergehenden Ausnahme ausgelöst wird, kann in der <xref:System.Exception.InnerException%2A>-Eigenschaft über einen Verweis auf die vorhergehende Ausnahme verfügen. Die <xref:System.Exception.InnerException%2A>-Eigenschaft gibt denselben Wert zurück, der an den Konstruktor übergeben wurde, bzw. einen NULL-Verweis (`Nothing` in Visual Basic), wenn die <xref:System.Exception.InnerException%2A>-Eigenschaft nicht den Wert für die innere Ausnahme für den Konstruktor bereitstellt.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.OutOfMemoryException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Der Verweis auf die interne Ausnahme.|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
      </Docs>
    </Member>
  </Members>
</Type>

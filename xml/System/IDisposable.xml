<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ee9987222f28a3d2503b139f93b9f3068e0c994" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430248" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7a075-101">Stellt einen Mechanismus für die Freigabe nicht verwalteter Ressourcen bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7a075-101">Provides a mechanism for releasing unmanaged resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a075-102">Der primäre Verwendungszweck dieser Schnittstelle werden nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="7a075-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="7a075-103">Automatisch freigegeben der Garbage Collector den Speicher zu einem verwalteten Objekt zugeordnet werden, wenn dieses Objekt nicht mehr verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="7a075-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="7a075-104">Allerdings ist es nicht möglich vorherzusagen, wann die Garbagecollection ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="7a075-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="7a075-105">Darüber hinaus wird der Garbage Collector hat keine Kenntnis von nicht verwalteten Ressourcen wie Fensterhandles oder offenen Dateien und Streams.</span><span class="sxs-lookup"><span data-stu-id="7a075-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="7a075-106">Verwenden der <xref:System.IDisposable.Dispose%2A> -Methode dieser Schnittstelle explizit Freigeben von nicht verwalteten Ressourcen in Verbindung mit dem Garbage Collector.</span><span class="sxs-lookup"><span data-stu-id="7a075-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="7a075-107">Der Consumer eines Objekts kann diese Methode aufrufen, wenn das Objekt nicht mehr benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="7a075-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7a075-108">Es ist eine wichtige Änderung zum Hinzufügen der <xref:System.IDisposable> Schnittstelle zu einer vorhandenen Klasse.</span><span class="sxs-lookup"><span data-stu-id="7a075-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="7a075-109">Da Sie bereits vorhandene Consumer Ihres Typs nicht aufrufen können <xref:System.IDisposable.Dispose%2A>, können Sie nicht sicher, dass die nicht verwaltete Ressourcen frei, die für Ihren Typ freigegeben werden, sein.</span><span class="sxs-lookup"><span data-stu-id="7a075-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="7a075-110">Da die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung vom Consumer eines Typs aufgerufen wird, wenn die Ressourcen, die im Besitz von einer Instanz nicht mehr benötigt werden, sollten Sie entweder das verwaltete Objekt im umschließen einer <xref:System.Runtime.InteropServices.SafeHandle> (empfohlen), oder Sie sollten überschreiben<xref:System.Object.Finalize%2A?displayProperty=nameWithType>auf nicht verwaltete Ressourcen freizugeben, wenn der Consumer aufrufen vergisst <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a075-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7a075-111">In .NET Framework, die C++-Compiler unterstützt deterministische Verwerfen von Ressourcen und lässt keine direkte Implementierung der der <xref:System.IDisposable.Dispose%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7a075-112">Ausführliche Informationen dazu, wie diese Schnittstelle und die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode verwendet werden, finden Sie unter der [Garbage Collection](~/docs/standard/garbage-collection/index.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md) Themen.</span><span class="sxs-lookup"><span data-stu-id="7a075-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="7a075-113">Mithilfe eines Objekts, die IDisposable implementiert</span><span class="sxs-lookup"><span data-stu-id="7a075-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="7a075-114">Wenn Ihre app einfach ein Objekt verwendet, die implementiert die <xref:System.IDisposable> -Schnittstelle, sollten Sie des Objekts aufrufen <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung, wenn Sie mit der sie fertig sind.</span><span class="sxs-lookup"><span data-stu-id="7a075-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="7a075-115">Abhängig von der Programmiersprache möglich Sie dies auf zwei Arten:</span><span class="sxs-lookup"><span data-stu-id="7a075-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="7a075-116">Erstellen Sie mithilfe einer anderen Sprache wie z. B. die `using` -Anweisung in c# und Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7a075-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="7a075-117">Durch den Aufruf von umschließen die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung in einer `try` / `finally` Block.</span><span class="sxs-lookup"><span data-stu-id="7a075-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a075-118">Dokumentation für Typen implementiert, <xref:System.IDisposable> Beachten Sie den Umstand und enthalten eine Erinnerung rufen die <xref:System.IDisposable.Dispose%2A> Implementierung.</span><span class="sxs-lookup"><span data-stu-id="7a075-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="7a075-119">Die Anweisung (c# und Visual Basic verwenden</span><span class="sxs-lookup"><span data-stu-id="7a075-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="7a075-120">Wenn Ihre Sprache ein Konstrukt, z. B. unterstützt die [mit](~/docs/csharp/language-reference/keywords/using.md) -Anweisung in c# und die [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) -Anweisung in Visual Basic können Sie sie explizit aufrufen <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> selbst.</span><span class="sxs-lookup"><span data-stu-id="7a075-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="7a075-121">Im folgenden Beispiel wird dieser Ansatz bei der Definition einer `WordCount` -Klasse, die Informationen zu einer Datei und die Anzahl der Wörter darin beibehalten.</span><span class="sxs-lookup"><span data-stu-id="7a075-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="7a075-122">Die `using` -Anweisung ist tatsächlich ein syntaktisches Hilfsmittel.</span><span class="sxs-lookup"><span data-stu-id="7a075-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="7a075-123">Zum Zeitpunkt der Kompilierung des Sprachcompilers implementiert die intermediate Language (IL) für eine `try` / `finally` Block.</span><span class="sxs-lookup"><span data-stu-id="7a075-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="7a075-124">Weitere Informationen zu den `using` -Anweisung finden Sie unter der [Using-Anweisung](~/docs/visual-basic/language-reference/statements/using-statement.md) oder [mit Anweisung](~/docs/csharp/language-reference/keywords/using-statement.md) Themen.</span><span class="sxs-lookup"><span data-stu-id="7a075-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="7a075-125">Der Try/Finally-block</span><span class="sxs-lookup"><span data-stu-id="7a075-125">The Try/Finally block</span></span>  
 <span data-ttu-id="7a075-126">Wenn Ihre Programmiersprache ein Konstrukt, z. B. nicht unterstützt die `using` -Anweisung in c# oder Visual Basic, oder falls gewünscht, nicht, ihn zu verwenden, rufen Sie die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung von der `finally` -Block ein `try` / `finally` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="7a075-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="7a075-127">Im folgende Beispiel ersetzt die `using` -block in dem vorhergehenden Beispiel mit einer `try` / `finally` Block.</span><span class="sxs-lookup"><span data-stu-id="7a075-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="7a075-128">Weitere Informationen zu den `try` / `finally` Muster, finden Sie unter [versuchen... Catch... Finally-Anweisung](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [Try-finally-](~/docs/csharp/language-reference/keywords/try-finally.md), oder [Try-finally-Anweisung](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="7a075-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="7a075-129">Implementieren von IDisposable</span><span class="sxs-lookup"><span data-stu-id="7a075-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="7a075-130">Implementieren Sie <xref:System.IDisposable> nur, wenn der Typ nicht verwaltete Ressourcen direkt verwendet.</span><span class="sxs-lookup"><span data-stu-id="7a075-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="7a075-131">Der Consumer Ihres Typs aufrufen Ihrer <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> -Implementierung, die Ressourcen freizugeben, wenn die Instanz nicht mehr benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="7a075-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="7a075-132">Um Fälle zu behandeln, in dem sie nicht aufrufen <xref:System.IDisposable.Dispose%2A>, Sie sollten entweder eine Klasse abgeleitete <xref:System.Runtime.InteropServices.SafeHandle> Umschließen von nicht verwalteten Ressourcen, oder Sie sollten überschreiben die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode für einen Referenztyp darstellt.</span><span class="sxs-lookup"><span data-stu-id="7a075-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="7a075-133">In beiden Fällen verwenden Sie die <xref:System.IDisposable.Dispose%2A> Methode zum Ausführen der Bereinigung erforderlich ist, nach der Verwendung von nicht verwalteten Ressourcen, z. B. Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</span><span class="sxs-lookup"><span data-stu-id="7a075-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7a075-134">Wenn Sie eine Basisklasse definieren, die verwendet nicht verwalteter Ressourcen und, hat oder verfügt wahrscheinlich über Unterklassen, die freigegeben werden sollen, implementieren Sie die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Methode, und geben Sie eine zweite Überladung der `Dispose`, wie im nächsten Abschnitt Abschnitt.</span><span class="sxs-lookup"><span data-stu-id="7a075-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="7a075-135">IDisposable und der Vererbungshierarchie</span><span class="sxs-lookup"><span data-stu-id="7a075-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="7a075-136">Eine Basisklasse mit Unterklassen, die gelöscht werden sollen, muss implementieren <xref:System.IDisposable> wie folgt.</span><span class="sxs-lookup"><span data-stu-id="7a075-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="7a075-137">Sie sollten dieses Muster verwenden, sobald Sie implementieren <xref:System.IDisposable> alle Typen, die nicht `sealed` (`NotInheritable` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7a075-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="7a075-138">Es sollte eine öffentliche, nicht virtuelle bieten <xref:System.IDisposable.Dispose> -Methode und eine geschützte virtuelle `Dispose(Boolean disposing)` Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="7a075-139">Die <xref:System.IDisposable.Dispose> -Methodenaufruf müssen `Dispose(true)` und Finalisierung aus Leistungsgründen sollten unterdrücken.</span><span class="sxs-lookup"><span data-stu-id="7a075-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="7a075-140">Der Basistyp sollte keine Finalizer enthalten.</span><span class="sxs-lookup"><span data-stu-id="7a075-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="7a075-141">Das folgende Codefragment gibt das Dispose-Muster für Basisklassen wieder.</span><span class="sxs-lookup"><span data-stu-id="7a075-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="7a075-142">Es wird davon ausgegangen, dass der Typ nicht überschreibt die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="7a075-143">Wenn Sie außer Kraft setzen die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> -Methode die Klasse sollte das folgende Muster implementieren.</span><span class="sxs-lookup"><span data-stu-id="7a075-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="7a075-144">Unterklassen sollten das verwerfbare Muster wie folgt implementieren:</span><span class="sxs-lookup"><span data-stu-id="7a075-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="7a075-145">Sie müssen `Dispose(Boolean)` überschreiben und die Basisklassen-`Dispose(Boolean)`-Implementierung aufrufen.</span><span class="sxs-lookup"><span data-stu-id="7a075-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="7a075-146">Sie können bei Bedarf einen Finalizer bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="7a075-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="7a075-147">Der Finalizer muss `Dispose(false)` aufrufen.</span><span class="sxs-lookup"><span data-stu-id="7a075-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="7a075-148">Beachten Sie, dass abgeleitete Klassen nicht selbst implementieren die <xref:System.IDisposable> Schnittstelle und beinhalten keine parameterlose <xref:System.IDisposable.Dispose%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="7a075-149">Nur die Basisklasse überschreiben `Dispose(Boolean)` Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="7a075-150">Das folgende Codefragment gibt das Dispose-Muster für abgeleitete Klassen.</span><span class="sxs-lookup"><span data-stu-id="7a075-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="7a075-151">Es wird davon ausgegangen, dass der Typ nicht überschreibt die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="7a075-152">Im folgenden Beispiel wird veranschaulicht, wie eine Ressourcenklasse zu erstellen, implementiert die <xref:System.IDisposable> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="7a075-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7a075-153">Führt anwendungsspezifische Aufgaben durch, die mit der Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a075-153">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a075-154">Verwenden Sie diese Methode, geschlossen oder freigegeben nicht verwaltete Ressourcen wie Dateien, Streams und Handles frei, die für eine Instanz der Klasse, die diese Schnittstelle implementiert.</span><span class="sxs-lookup"><span data-stu-id="7a075-154">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="7a075-155">Diese Methode wird gemäß der Konvention für alle Aufgaben im Zusammenhang mit der Freigabe von einem Objekt reservierten Ressourcen verwendet oder der Vorbereitung der Wiederverwendung eines Objekts.</span><span class="sxs-lookup"><span data-stu-id="7a075-155">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="7a075-156">Bei Verwendung eine Klasse, die implementiert die <xref:System.IDisposable> -Schnittstelle, rufen Sie die <xref:System.IDisposable.Dispose%2A> Implementierung Sie abschließend mit der-Klasse.</span><span class="sxs-lookup"><span data-stu-id="7a075-156">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="7a075-157">Weitere Informationen finden Sie im Abschnitt "Using ein Objekt, das IDisposable implementiert" in der <xref:System.IDisposable> Thema.</span><span class="sxs-lookup"><span data-stu-id="7a075-157">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="7a075-158">Wenn Sie diese Methode implementieren, stellen Sie sicher, dass alle Ressourcen freigegeben werden reservierten, indem Sie den Aufruf durch die Kapselungshierarchie weitergeben.</span><span class="sxs-lookup"><span data-stu-id="7a075-158">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="7a075-159">Z. B. wenn Objekt A ein Objekt B reserviert und Objekt B Objekt C zuordnet, dann ein des <xref:System.IDisposable.Dispose%2A> Implementierung aufrufen muss <xref:System.IDisposable.Dispose%2A> auf B, muss die wiederum rufen <xref:System.IDisposable.Dispose%2A> in C.</span><span class="sxs-lookup"><span data-stu-id="7a075-159">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7a075-160">Der C++-Compiler unterstützt deterministische Verwerfen von Ressourcen und verhindert die direkte Implementierung der der <xref:System.IDisposable.Dispose%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-160">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7a075-161">Ein Objekt muss auch aufrufen, die <xref:System.IDisposable.Dispose%2A> Methode ihrer Basisklasse, wenn die Basisklasse implementiert <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="7a075-161">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="7a075-162">Weitere Informationen zur Implementierung <xref:System.IDisposable> auf eine Basisklasse und seiner Unterklassen finden Sie im Abschnitt "IDisposable und der Vererbungshierarchie" in der <xref:System.IDisposable> Thema.</span><span class="sxs-lookup"><span data-stu-id="7a075-162">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="7a075-163">Wenn ein Objekt <xref:System.IDisposable.Dispose%2A> -Methode mehr als einmal aufgerufen wird, das Objekt muss alle Aufrufe nach der ersten ignorieren.</span><span class="sxs-lookup"><span data-stu-id="7a075-163">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="7a075-164">Das Objekt muss keine Ausnahme ausgelöst, wenn seine <xref:System.IDisposable.Dispose%2A> -Methode mehrere Male aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="7a075-164">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="7a075-165">Instanzmethoden außer <xref:System.IDisposable.Dispose%2A> festgehaltenen ein <xref:System.ObjectDisposedException> Wenn bereits Ressourcen freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="7a075-165">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="7a075-166">Benutzer erwarten einen Ressourcentyp aus, um eine bestimmte Vereinbarung zu verwenden, um einen zugeordneten Zustand im Vergleich zu einem freigegebenen Zustand zu bezeichnen.</span><span class="sxs-lookup"><span data-stu-id="7a075-166">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="7a075-167">Ein Beispiel hierfür ist die Stream-Klassen, die bisher als geöffnet betrachtet oder geschlossen werden.</span><span class="sxs-lookup"><span data-stu-id="7a075-167">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="7a075-168">Die Implementierung einer Klasse mit einer derartigen kann sich entscheiden, wie z. B. eine öffentliche Methode mit einem benutzerdefinierten Namen implementieren `Close`, die Aufrufe der <xref:System.IDisposable.Dispose%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-168">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="7a075-169">Da die <xref:System.IDisposable.Dispose%2A> -Methode muss explizit aufgerufen werden, besteht immer die Gefahr, die nicht verwalteten Ressourcen nicht freigegeben werden, da der Consumer eines Objekts aufrufen, um kann seine <xref:System.IDisposable.Dispose%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-169">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="7a075-170">Es gibt zwei Möglichkeiten, um dieses Problem zu vermeiden:</span><span class="sxs-lookup"><span data-stu-id="7a075-170">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="7a075-171">Umschließen Sie die verwaltete Ressource in einem Objekt abgeleitet <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7a075-171">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7a075-172">Ihre <xref:System.IDisposable.Dispose%2A> Implementierung dann ruft der <xref:System.IDisposable.Dispose%2A> Methode der <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> Instanzen.</span><span class="sxs-lookup"><span data-stu-id="7a075-172">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="7a075-173">Weitere Informationen finden Sie im Abschnitt "Die SafeHandle-Alternative" die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Thema.</span><span class="sxs-lookup"><span data-stu-id="7a075-173">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="7a075-174">Implementieren Sie einen Finalizer, um Ressourcen freizugeben. wenn <xref:System.IDisposable.Dispose%2A> wird nicht aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="7a075-174">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="7a075-175">Standardmäßig ruft der Garbage Collector den Finalizer eines Objekts automatisch vor der Rückgabe des Speichers.</span><span class="sxs-lookup"><span data-stu-id="7a075-175">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="7a075-176">Jedoch, wenn die <xref:System.IDisposable.Dispose%2A> Methode wurde aufgerufen, es ist in der Regel nicht erforderlich, für den Garbage Collector Finalizer des freigegebenen Objekts aufrufen.</span><span class="sxs-lookup"><span data-stu-id="7a075-176">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="7a075-177">Um zu verhindern, dass automatische Finalisierung <xref:System.IDisposable.Dispose%2A> Implementierungen können Aufrufen der <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-177">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7a075-178">Ein Objekt, das nicht verwaltete Ressourcen, wie zugreift bei Verwendung einer <xref:System.IO.StreamWriter>, empfiehlt sich zum Erstellen der Instanz mit ist eine `using` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="7a075-178">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="7a075-179">Die `using` Anweisung schließt den Stream und ruft automatisch <xref:System.IDisposable.Dispose%2A> für das Objekt nach Abschluss der Code, der verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="7a075-179">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="7a075-180">Ein Beispiel finden Sie unter der <xref:System.IO.StreamWriter> Klasse.</span><span class="sxs-lookup"><span data-stu-id="7a075-180">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a075-181">Das folgende Beispiel zeigt, wie Sie implementieren können, die <xref:System.IDisposable.Dispose%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="7a075-181">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDisposable.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50f129b9e6cc6b4ce4a818f23df9a72208cdccc21.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f129b9e6cc6b4ce4a818f23df9a72208cdccc21</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IDisposable">
          <source>Provides a mechanism for releasing unmanaged resources.</source>
          <target state="translated">Stellt einen Mechanismus für die Freigabe nicht verwalteter Ressourcen bereit.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The primary use of this interface is to release unmanaged resources.</source>
          <target state="translated">Der primäre Verwendungszweck dieser Schnittstelle werden nicht verwaltete Ressourcen freizugeben.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</source>
          <target state="translated">Automatisch freigegeben der Garbage Collector den Speicher zu einem verwalteten Objekt zugeordnet werden, wenn dieses Objekt nicht mehr verwendet wird.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>However, it is not possible to predict when garbage collection will occur.</source>
          <target state="translated">Allerdings ist es nicht möglich vorherzusagen, wann die Garbagecollection ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</source>
          <target state="translated">Darüber hinaus wird der Garbage Collector hat keine Kenntnis von nicht verwalteten Ressourcen wie Fensterhandles oder offenen Dateien und Streams.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</source>
          <target state="translated">Verwenden der <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> -Methode dieser Schnittstelle explizit Freigeben von nicht verwalteten Ressourcen in Verbindung mit dem Garbage Collector.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The consumer of an object can call this method when the object is no longer needed.</source>
          <target state="translated">Der Consumer eines Objekts kann diese Methode aufrufen, wenn das Objekt nicht mehr benötigt wird.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It is a breaking change to add the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface to an existing class.</source>
          <target state="translated">Es ist eine wichtige Änderung zum Hinzufügen der <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Schnittstelle zu einer vorhandenen Klasse.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Because pre-existing consumers of your type cannot call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, you cannot be certain that unmanaged resources held by your type will be released.</source>
          <target state="translated">Da Sie bereits vorhandene Consumer Ihres Typs nicht aufrufen können <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, können Sie nicht sicher, dass die nicht verwaltete Ressourcen frei, die für Ihren Typ freigegeben werden, sein.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Because the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> (the recommended alternative), or you should override <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> to free unmanaged resources in the event that the consumer forgets to call <ph id="ph4">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>.</source>
          <target state="translated">Da die <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> Implementierung vom Consumer eines Typs aufgerufen wird, wenn die Ressourcen, die im Besitz von einer Instanz nicht mehr benötigt werden, sollten Sie entweder das verwaltete Objekt im umschließen einer <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> (empfohlen), oder Sie sollten überschreiben<ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>auf nicht verwaltete Ressourcen freizugeben, wenn der Consumer aufrufen vergisst <ph id="ph4">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">In .NET Framework, die C++-Compiler unterstützt deterministische Verwerfen von Ressourcen und lässt keine direkte Implementierung der der <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For a detailed discussion about how this interface and the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method are used, see the <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept> topics.</source>
          <target state="translated">Ausführliche Informationen dazu, wie diese Schnittstelle und die <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> Methode verwendet werden, finden Sie unter der <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept> und <bpt id="p2">[</bpt>Implementieren einer Dispose-Methode<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept> Themen.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Using an object that implements IDisposable</source>
          <target state="translated">Mithilfe eines Objekts, die IDisposable implementiert</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your app simply uses an object that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, you should call the object's <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation when you are finished using it.</source>
          <target state="translated">Wenn Ihre app einfach ein Objekt verwendet, die implementiert die <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> -Schnittstelle, sollten Sie des Objekts aufrufen <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> Implementierung, wenn Sie mit der sie fertig sind.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Depending on your programming language, you can do this in one of two ways:</source>
          <target state="translated">Abhängig von der Programmiersprache möglich Sie dies auf zwei Arten:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>By using a language construct such as the <ph id="ph1">`using`</ph> statement in C# and Visual Basic.</source>
          <target state="translated">Erstellen Sie mithilfe einer anderen Sprache wie z. B. die <ph id="ph1">`using`</ph> -Anweisung in c# und Visual Basic.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>By wrapping the call to the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`finally`</ph> block.</source>
          <target state="translated">Durch den Aufruf von umschließen die <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> Implementierung in einer <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Documentation for types that implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> note that fact and include a reminder to call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation.</source>
          <target state="translated">Dokumentation für Typen implementiert, <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Beachten Sie den Umstand und enthalten eine Erinnerung rufen die <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Implementierung.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The C# and Visual Basic Using statement</source>
          <target state="translated">Die Anweisung (c# und Visual Basic verwenden</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your language supports a construct such as the <bpt id="p1">[</bpt>using<ept id="p1">](~/docs/csharp/language-reference/keywords/using.md)</ept> statement in C# and the <bpt id="p2">[</bpt>Using<ept id="p2">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> statement in Visual Basic, you can use it instead of explicitly calling <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> yourself.</source>
          <target state="translated">Wenn Ihre Sprache ein Konstrukt, z. B. unterstützt die <bpt id="p1">[</bpt>mit<ept id="p1">](~/docs/csharp/language-reference/keywords/using.md)</ept> -Anweisung in c# und die <bpt id="p2">[</bpt>Using<ept id="p2">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> -Anweisung in Visual Basic können Sie sie explizit aufrufen <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> selbst.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example uses this approach in defining a <ph id="ph1">`WordCount`</ph> class that preserves information about a file and the number of words in it.</source>
          <target state="translated">Im folgenden Beispiel wird dieser Ansatz bei der Definition einer <ph id="ph1">`WordCount`</ph> -Klasse, die Informationen zu einer Datei und die Anzahl der Wörter darin beibehalten.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The <ph id="ph1">`using`</ph> statement is actually a syntactic convenience.</source>
          <target state="translated">Die <ph id="ph1">`using`</ph> -Anweisung ist tatsächlich ein syntaktisches Hilfsmittel.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>At compile time, the language compiler implements the intermediate language (IL) for a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> block.</source>
          <target state="translated">Zum Zeitpunkt der Kompilierung des Sprachcompilers implementiert die intermediate Language (IL) für eine <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For more information about the <ph id="ph1">`using`</ph> statement, see the <bpt id="p1">[</bpt>Using Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> or <bpt id="p2">[</bpt>using Statement<ept id="p2">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept> topics.</source>
          <target state="translated">Weitere Informationen zu den <ph id="ph1">`using`</ph> -Anweisung finden Sie unter der <bpt id="p1">[</bpt>Using-Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/using-statement.md)</ept> oder <bpt id="p2">[</bpt>mit Anweisung<ept id="p2">](~/docs/csharp/language-reference/keywords/using-statement.md)</ept> Themen.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The Try/Finally block</source>
          <target state="translated">Der Try/Finally-block</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If your programming language does not support a construct like the <ph id="ph1">`using`</ph> statement in C# or Visual Basic, or if you prefer not to use it, you can call the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation from the <ph id="ph3">`finally`</ph> block of a <ph id="ph4">`try`</ph><ph id="ph5">/</ph><ph id="ph6">`finally`</ph> statement.</source>
          <target state="translated">Wenn Ihre Programmiersprache ein Konstrukt, z. B. nicht unterstützt die <ph id="ph1">`using`</ph> -Anweisung in c# oder Visual Basic, oder falls gewünscht, nicht, ihn zu verwenden, rufen Sie die <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> Implementierung von der <ph id="ph3">`finally`</ph> -Block ein <ph id="ph4">`try`</ph> <ph id="ph5">/</ph> <ph id="ph6">`finally`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example replaces the <ph id="ph1">`using`</ph> block in the previous example with a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`finally`</ph> block.</source>
          <target state="translated">Im folgende Beispiel ersetzt die <ph id="ph1">`using`</ph> -block in dem vorhergehenden Beispiel mit einer <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`finally`</ph> Block.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>For more information about the <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> pattern, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>, <bpt id="p2">[</bpt>try-finally<ept id="p2">](~/docs/csharp/language-reference/keywords/try-finally.md)</ept>, or <bpt id="p3">[</bpt>try-finally Statement<ept id="p3">](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)</ept>.</source>
          <target state="translated">Weitere Informationen zu den <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph> Muster, finden Sie unter <bpt id="p1">[</bpt>versuchen... Catch... Finally-Anweisung<ept id="p1">](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>, <bpt id="p2">[</bpt>Try-finally-<ept id="p2">](~/docs/csharp/language-reference/keywords/try-finally.md)</ept>, oder <bpt id="p3">[</bpt>Try-finally-Anweisung<ept id="p3">](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Implementing IDisposable</source>
          <target state="translated">Implementieren von IDisposable</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>You should implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> only if your type uses unmanaged resources directly.</source>
          <target state="translated">Implementieren Sie <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> nur, wenn der Typ nicht verwaltete Ressourcen direkt verwendet.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The consumers of your type can call your <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation to free resources when the instance is no longer needed.</source>
          <target state="translated">Der Consumer Ihres Typs aufrufen Ihrer <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> -Implementierung, die Ressourcen freizugeben, wenn die Instanz nicht mehr benötigt wird.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>To handle cases in which they fail to call <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, you should either use a class derived from <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> to wrap the unmanaged resources, or you should override the <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method for a reference type.</source>
          <target state="translated">Um Fälle zu behandeln, in dem sie nicht aufrufen <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>, Sie sollten entweder eine Klasse abgeleitete <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> Umschließen von nicht verwalteten Ressourcen, oder Sie sollten überschreiben die <ph id="ph3">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> Methode für einen Referenztyp darstellt.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>In either case, you use the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</source>
          <target state="translated">In beiden Fällen verwenden Sie die <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode zum Ausführen der Bereinigung erforderlich ist, nach der Verwendung von nicht verwalteten Ressourcen, z. B. Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> method and provide a second overload of <ph id="ph2">`Dispose`</ph>, as discussed in the next section.</source>
          <target state="translated">Wenn Sie eine Basisklasse definieren, die verwendet nicht verwalteter Ressourcen und, hat oder verfügt wahrscheinlich über Unterklassen, die freigegeben werden sollen, implementieren Sie die <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> Methode, und geben Sie eine zweite Überladung der <ph id="ph2">`Dispose`</ph>, wie im nächsten Abschnitt Abschnitt.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>IDisposable and the inheritance hierarchy</source>
          <target state="translated">IDisposable und der Vererbungshierarchie</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>A base class with subclasses that should be disposable must implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> as follows.</source>
          <target state="translated">Eine Basisklasse mit Unterklassen, die gelöscht werden sollen, muss implementieren <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> wie folgt.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>You should use this pattern whenever you implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> on any type that isn't <ph id="ph2">`sealed`</ph> (<ph id="ph3">`NotInheritable`</ph> in Visual Basic).</source>
          <target state="translated">Sie sollten dieses Muster verwenden, sobald Sie implementieren <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> alle Typen, die nicht <ph id="ph2">`sealed`</ph> (<ph id="ph3">`NotInheritable`</ph> in Visual Basic).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It should provide one public, non-virtual <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> method and a protected virtual <ph id="ph2">`Dispose(Boolean disposing)`</ph> method.</source>
          <target state="translated">Es sollte eine öffentliche, nicht virtuelle bieten <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> -Methode und eine geschützte virtuelle <ph id="ph2">`Dispose(Boolean disposing)`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> method must call <ph id="ph2">`Dispose(true)`</ph> and should suppress finalization for performance.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.IDisposable.Dispose&gt;</ph> -Methodenaufruf müssen <ph id="ph2">`Dispose(true)`</ph> und Finalisierung aus Leistungsgründen sollten unterdrücken.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The base type should not include any finalizers.</source>
          <target state="translated">Der Basistyp sollte keine Finalizer enthalten.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following code fragment reflects the dispose pattern for base classes.</source>
          <target state="translated">Das folgende Codefragment gibt das Dispose-Muster für Basisklassen wieder.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It assumes that your type does not override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Es wird davon ausgegangen, dass der Typ nicht überschreibt die <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>If you do override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method, your class should implement the following pattern.</source>
          <target state="translated">Wenn Sie außer Kraft setzen die <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> -Methode die Klasse sollte das folgende Muster implementieren.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Subclasses should implement the disposable pattern as follows:</source>
          <target state="translated">Unterklassen sollten das verwerfbare Muster wie folgt implementieren:</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They must override <ph id="ph1">`Dispose(Boolean)`</ph> and call the base class <ph id="ph2">`Dispose(Boolean)`</ph> implementation.</source>
          <target state="translated">Sie müssen <ph id="ph1">`Dispose(Boolean)`</ph> überschreiben und die Basisklassen-<ph id="ph2">`Dispose(Boolean)`</ph>-Implementierung aufrufen.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They can provide a finalizer if needed.</source>
          <target state="translated">Sie können bei Bedarf einen Finalizer bereitstellen.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The finalizer must call <ph id="ph1">`Dispose(false)`</ph>.</source>
          <target state="translated">Der Finalizer muss <ph id="ph1">`Dispose(false)`</ph> aufrufen.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>Note that derived classes do not themselves implement the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface and do not include a parameterless <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Beachten Sie, dass abgeleitete Klassen nicht selbst implementieren die <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Schnittstelle und beinhalten keine parameterlose <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>They only override the base class <ph id="ph1">`Dispose(Boolean)`</ph> method.</source>
          <target state="translated">Nur die Basisklasse überschreiben <ph id="ph1">`Dispose(Boolean)`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following code fragment reflects the dispose pattern for derived classes.</source>
          <target state="translated">Das folgende Codefragment gibt das Dispose-Muster für abgeleitete Klassen.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>It assumes that your type does not override the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Es wird davon ausgegangen, dass der Typ nicht überschreibt die <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IDisposable">
          <source>The following example demonstrates how to create a resource class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie eine Ressourcenklasse zu erstellen, implementiert die <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Schnittstelle.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IDisposable.Dispose">
          <source>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</source>
          <target state="translated">Führt anwendungsspezifische Aufgaben durch, die mit der Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</source>
          <target state="translated">Verwenden Sie diese Methode, geschlossen oder freigegeben nicht verwaltete Ressourcen wie Dateien, Streams und Handles frei, die für eine Instanz der Klasse, die diese Schnittstelle implementiert.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</source>
          <target state="translated">Diese Methode wird gemäß der Konvention für alle Aufgaben im Zusammenhang mit der Freigabe von einem Objekt reservierten Ressourcen verwendet oder der Vorbereitung der Wiederverwendung eines Objekts.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>If you are using a class that implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface, you should call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation when you are finished using the class.</source>
          <target state="translated">Bei Verwendung eine Klasse, die implementiert die <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> -Schnittstelle, rufen Sie die <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Implementierung Sie abschließend mit der-Klasse.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information, see the "Using an object that implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> topic.</source>
          <target state="translated">Weitere Informationen finden Sie im Abschnitt "Using ein Objekt, das IDisposable implementiert" in der <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> Thema.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</source>
          <target state="translated">Wenn Sie diese Methode implementieren, stellen Sie sicher, dass alle Ressourcen freigegeben werden reservierten, indem Sie den Aufruf durch die Kapselungshierarchie weitergeben.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For example, if an object A allocates an object B, and object B allocates an object C, then A's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation must call <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on B, which must in turn call <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on C.</source>
          <target state="translated">Z. B. wenn Objekt A ein Objekt B reserviert und Objekt B Objekt C zuordnet, dann ein des <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Implementierung aufrufen muss <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> auf B, muss die wiederum rufen <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> in C.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Der C++-Compiler unterstützt deterministische Verwerfen von Ressourcen und verhindert die direkte Implementierung der der <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>An object must also call the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of its base class if the base class implements <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>.</source>
          <target state="translated">Ein Objekt muss auch aufrufen, die <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode ihrer Basisklasse, wenn die Basisklasse implementiert <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information about implementing <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> topic.</source>
          <target state="translated">Weitere Informationen zur Implementierung <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> auf eine Basisklasse und seiner Unterklassen finden Sie im Abschnitt "IDisposable und der Vererbungshierarchie" in der <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> Thema.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>If an object's <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is called more than once, the object must ignore all calls after the first one.</source>
          <target state="translated">Wenn ein Objekt <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> -Methode mehr als einmal aufgerufen wird, das Objekt muss alle Aufrufe nach der ersten ignorieren.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The object must not throw an exception if its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method is called multiple times.</source>
          <target state="translated">Das Objekt muss keine Ausnahme ausgelöst, wenn seine <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> -Methode mehrere Male aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Instance methods other than <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> can throw an <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> when resources are already disposed.</source>
          <target state="translated">Instanzmethoden außer <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> festgehaltenen ein <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> Wenn bereits Ressourcen freigegeben werden.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</source>
          <target state="translated">Benutzer erwarten einen Ressourcentyp aus, um eine bestimmte Vereinbarung zu verwenden, um einen zugeordneten Zustand im Vergleich zu einem freigegebenen Zustand zu bezeichnen.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>An example of this is stream classes, which are traditionally thought of as open or closed.</source>
          <target state="translated">Ein Beispiel hierfür ist die Stream-Klassen, die bisher als geöffnet betrachtet oder geschlossen werden.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as <ph id="ph1">`Close`</ph>, that calls the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Die Implementierung einer Klasse mit einer derartigen kann sich entscheiden, wie z. B. eine öffentliche Methode mit einem benutzerdefinierten Namen implementieren <ph id="ph1">`Close`</ph>, die Aufrufe der <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Because the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Da die <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> -Methode muss explizit aufgerufen werden, besteht immer die Gefahr, die nicht verwalteten Ressourcen nicht freigegeben werden, da der Consumer eines Objekts aufrufen, um kann seine <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>There are two ways to avoid this:</source>
          <target state="translated">Es gibt zwei Möglichkeiten, um dieses Problem zu vermeiden:</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Wrap the managed resource in an object derived from <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Umschließen Sie die verwaltete Ressource in einem Objekt abgeleitet <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Your <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementation then calls the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph> instances.</source>
          <target state="translated">Ihre <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Implementierung dann ruft der <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode der <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType&gt;</ph> Instanzen.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For more information, see "The SafeHandle alternative" section in the <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> topic.</source>
          <target state="translated">Weitere Informationen finden Sie im Abschnitt "Die SafeHandle-Alternative" die <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> Thema.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>Implement a finalizer to free resources when <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> is not called.</source>
          <target state="translated">Implementieren Sie einen Finalizer, um Ressourcen freizugeben. wenn <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> wird nicht aufgerufen.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</source>
          <target state="translated">Standardmäßig ruft der Garbage Collector den Finalizer eines Objekts automatisch vor der Rückgabe des Speichers.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>However, if the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</source>
          <target state="translated">Jedoch, wenn die <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode wurde aufgerufen, es ist in der Regel nicht erforderlich, für den Garbage Collector Finalizer des freigegebenen Objekts aufrufen.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>To prevent automatic finalization, <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> implementations can call the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Um zu verhindern, dass automatische Finalisierung <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Implementierungen können Aufrufen der <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>When you use an object that accesses unmanaged resources, such as a <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, a good practice is to create the instance with a <ph id="ph2">`using`</ph> statement.</source>
          <target state="translated">Ein Objekt, das nicht verwaltete Ressourcen, wie zugreift bei Verwendung einer <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>, empfiehlt sich zum Erstellen der Instanz mit ist eine <ph id="ph2">`using`</ph> Anweisung.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The <ph id="ph1">`using`</ph> statement automatically closes the stream and calls <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on the object when the code that is using it has completed.</source>
          <target state="translated">Die <ph id="ph1">`using`</ph> Anweisung schließt den Stream und ruft automatisch <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> für das Objekt nach Abschluss der Code, der verwendet wird.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> class.</source>
          <target state="translated">Ein Beispiel finden Sie unter der <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IDisposable.Dispose">
          <source>The following example shows how you can implement the <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">Das folgende Beispiel zeigt, wie Sie implementieren können, die <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> Methode.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
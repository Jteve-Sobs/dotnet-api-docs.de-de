<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="20ef4ce10ae7d883f64127d17e5c321125ea4a32" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51896546" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Mechanismus für die Freigabe nicht verwalteter Ressourcen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der primäre Verwendungszweck dieser Schnittstelle werden nicht verwaltete Ressourcen freizugeben. Die Speichermenge für ein verwaltetes Objekt, wenn das Objekt nicht mehr verwendet wird wird von der Garbage Collector automatisch freigegeben. Allerdings ist es nicht möglich, um vorherzusagen, wann die automatische speicherbereinigung ausgeführt wird. Darüber hinaus der Garbage Collector hat keine Kenntnis von nicht verwalteten Ressourcen wie z. B. Fensterhandles, oder Öffnen von Dateien und Streams.  
  
 Verwenden der <xref:System.IDisposable.Dispose%2A> -Methode dieser Schnittstelle explizit nicht verwaltete Ressourcen in Verbindung mit dem Garbage Collector freigegeben. Der Consumer eines Objekts kann diese Methode aufrufen, wenn das Objekt nicht mehr benötigt wird.  
  
> [!WARNING]
>  Es ist eine wichtige Änderung zum Hinzufügen der <xref:System.IDisposable> Schnittstelle zu einer vorhandenen Klasse. Da Sie bereits vorhandene Consumer Ihres Typs nicht aufrufen können <xref:System.IDisposable.Dispose%2A>, Sie nicht sicher, dass nicht verwaltete Ressourcen frei, die den Typ freigegeben werden.  
  
 Da die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung wird vom Consumer eines Typs aufgerufen, wenn die Ressourcen, die im Besitz von einer Instanz nicht mehr benötigt werden, Sie sollten entweder das verwaltete Objekt in ein <xref:System.Runtime.InteropServices.SafeHandle> (empfohlen), oder Sie sollten überschreiben<xref:System.Object.Finalize%2A?displayProperty=nameWithType>auf nicht verwaltete Ressourcen freizugeben, wenn der Consumer vergisst, aufzurufen <xref:System.IDisposable.Dispose%2A>.  
  
> [!IMPORTANT]
>  In .NET Framework, der C++-Compiler unterstützt die deterministische Verwerfen von Ressourcen, und lässt sich nicht auf die direkte Implementierung der der <xref:System.IDisposable.Dispose%2A> Methode.  
  
 Ausführliche Informationen dazu, wie diese Schnittstelle und die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode verwendet werden, finden Sie unter den [Garbage Collection](~/docs/standard/garbage-collection/index.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md) Themen.  
  
## <a name="using-an-object-that-implements-idisposable"></a>Mithilfe eines Objekts, die IDisposable implementiert  
 Wenn Ihre app einfach auf ein Objekt verwendet, die implementiert die <xref:System.IDisposable> -Schnittstelle, rufen Sie die Objekteigenschaften <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung, wenn Sie mit der sie fertig sind. Abhängig von der Programmiersprache können Sie dies in zwei Arten ausführen:  
  
-   Erstellen Sie mithilfe einer Sprache wie z. B. die `using` -Anweisung in c# und Visual Basic.  
  
-   Durch Umschließen des Aufrufs von der <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> -Implementierung in einer `try` / `finally` Block.  
  
> [!NOTE]
>  Dokumentation für Typen implementiert <xref:System.IDisposable> Beachten Sie den Umstand und enthalten eine Erinnerung zum Aufrufen der <xref:System.IDisposable.Dispose%2A> Implementierung.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>Die Anweisung von c# und Visual Basic verwenden  
 Wenn Ihre Sprache ein Konstrukt, z. B. unterstützt die [mit](~/docs/csharp/language-reference/keywords/using.md) -Anweisung in c# und die [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) -Anweisung in Visual Basic, können Sie sie explizit aufrufen <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> selbst. Im folgenden Beispiel wird dieser Ansatz bei der Definition einer `WordCount` -Klasse, die Informationen zu einer Datei und die Anzahl der Wörter in den es beibehält.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 Die `using` -Anweisung ist tatsächlich ein syntaktisches Hilfsmittel. Zum Zeitpunkt der Kompilierung des Sprachcompilers implementiert die intermediate Language (IL) für eine `try` / `finally` Block.  
  
 Weitere Informationen zu den `using` -Anweisung finden Sie unter den [Using-Anweisung](~/docs/visual-basic/language-reference/statements/using-statement.md) oder [using-Anweisung](~/docs/csharp/language-reference/keywords/using-statement.md) Themen.  
  
### <a name="the-tryfinally-block"></a>Der Try/Finally-block  
 Wenn Ihre Programmiersprache ein Konstrukt, z. B. nicht unterstützt wird die `using` -Anweisung in c# oder Visual Basic, oder wenn Sie nicht verwenden möchten, rufen Sie die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung von der `finally` -Block eine `try` / `finally` Anweisung. Im folgenden Beispiel ersetzt die `using` blockieren, die im vorherigen Beispiel mit einem `try` / `finally` Block.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 Weitere Informationen zu den `try` / `finally` Muster, finden Sie unter [testen... Catch... Finally-Anweisung](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [Try-finally-](~/docs/csharp/language-reference/keywords/try-finally.md), oder [Try-finally-Anweisung](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).  
  
## <a name="implementing-idisposable"></a>Implementieren von IDisposable  
 Implementieren Sie <xref:System.IDisposable> nur dann, wenn der Typ nicht verwaltete Ressourcen direkt verwendet. Der Consumer Ihres Typs können aufrufen Ihrer <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung, die Ressourcen freizugeben, wenn die Instanz nicht mehr benötigt wird. Um Fälle zu behandeln, in dem sie nicht aufrufen <xref:System.IDisposable.Dispose%2A>, sollten Sie entweder eine Klasse abgeleitete <xref:System.Runtime.InteropServices.SafeHandle> , die nicht verwalteten Ressourcen, oder Sie umschließen überschreiben, sollte die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> -Methode für einen Verweistyp handelt. In beiden Fällen verwenden Sie die <xref:System.IDisposable.Dispose%2A> Methode, um zu den Cleanup erforderlich ist, nach der Verwendung von nicht verwalteten Ressourcen, z. B. Freigabe, Freigabe oder das Zurücksetzen von nicht verwalteten Ressourcen.  
  
> [!IMPORTANT]
>  Eine Basisklasse zu definieren, die nicht verwaltete Ressourcen verwendet und, die entweder hat, oder ist wahrscheinlich, Unterklassen, die entfernt werden sollen, sollten Sie implementieren die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Methode, und geben Sie eine zweite Überladung von `Dispose`, wie dies in den nächsten Abschnitt.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>"IDisposable" und der Vererbungshierarchie  
 Eine Basisklasse mit verwerfbaren Unterklassen sollten muss implementieren <xref:System.IDisposable> wie folgt. Sie sollten dieses Muster verwenden, wann immer Sie implementieren <xref:System.IDisposable> , die nicht in einem beliebigen `sealed` (`NotInheritable` in Visual Basic).  
  
-   Es sollte eine öffentliche, nicht virtuelle bereitstellen <xref:System.IDisposable.Dispose> -Methode sowie eine geschützte virtuelle `Dispose(Boolean disposing)` Methode.  
  
-   Die <xref:System.IDisposable.Dispose> Methodenaufruf muss `Dispose(true)` und -Einrichtung für die Leistung sollte unterdrückt werden.  
  
-   Der Basistyp sollte keine Finalizer enthalten.  
  
 Das folgende Codefragment gibt des löschmusters für Basisklassen. Es wird davon ausgegangen, dass der Typ nicht überschreibt die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 Wenn Sie außer Kraft setzen der <xref:System.Object.Finalize%2A?displayProperty=nameWithType> -Methode sollte das folgende Muster in der Klasse implementiert.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 Unterklassen sollten das verwerfbare Muster wie folgt implementieren:  
  
-   Sie müssen `Dispose(Boolean)` überschreiben und die Basisklassen-`Dispose(Boolean)`-Implementierung aufrufen.  
  
-   Sie können bei Bedarf einen Finalizer bereitstellen. Der Finalizer muss `Dispose(false)` aufrufen.  
  
 Beachten Sie, dass abgeleitete Klassen nicht selbst implementieren die <xref:System.IDisposable> -Schnittstelle und enthalten keine parameterlose <xref:System.IDisposable.Dispose%2A> Methode. Sie wird nur der Basisklasse überschreiben `Dispose(Boolean)` Methode.  
  
 Das folgende Codefragment gibt das Dispose-Muster für abgeleitete Klassen. Es wird davon ausgegangen, dass der Typ nicht überschreibt die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie eine Ressourcenklasse zu erstellen, implementiert die <xref:System.IDisposable> Schnittstelle.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Implementieren einer Dispose-Methode</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt anwendungsspezifische Aufgaben durch, die mit der Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, geschlossen oder freigegeben nicht verwaltete Ressourcen wie z. B. Dateien, Streams und Handles frei, die eine Instanz der Klasse, die diese Schnittstelle implementiert. Diese Methode wird gemäß der Konvention für alle Aufgaben im Zusammenhang mit der Freigabe ein Objekt reservierten Ressourcen verwendet oder der Vorbereitung der Wiederverwendung eines Objekts.  
  
> [!WARNING]
>  Wenn Sie eine Klasse verwenden, die implementiert die <xref:System.IDisposable> -Schnittstelle, rufen Sie die <xref:System.IDisposable.Dispose%2A> Implementierung Sie abschließend mithilfe der Klasse. Weitere Informationen finden Sie im Abschnitt "Verwenden ein Objekt, das IDisposable implementiert" in der <xref:System.IDisposable> Thema.  
  
 Wenn Sie diese Methode implementieren, stellen Sie sicher, dass alle Ressourcen freigegeben werden reservierten, indem der Aufruf durch die Kapselungshierarchie. Angenommen, ein Objekt weist ein Objekt B, und Objekt B eines Objekts C, klicken Sie dann ein <xref:System.IDisposable.Dispose%2A> Implementierung muss Aufrufen <xref:System.IDisposable.Dispose%2A> auf B die aufrufen muss <xref:System.IDisposable.Dispose%2A> in C.  
  
> [!IMPORTANT]
>  Der C++-Compiler unterstützt die deterministische Verwerfen von Ressourcen und lässt sich nicht auf die direkte Implementierung der der <xref:System.IDisposable.Dispose%2A> Methode.  
  
 Ein Objekt muss auch aufrufen, die <xref:System.IDisposable.Dispose%2A> Methode ihrer Basisklasse, wenn die Basisklasse implementiert <xref:System.IDisposable>. Weitere Informationen zum Implementieren von <xref:System.IDisposable> auf eine Basisklasse und ihrer Unterklassen, finden Sie im Abschnitt "" IDisposable "und der Vererbungshierarchie" in der <xref:System.IDisposable> Thema.  
  
 Wenn ein Objekt des <xref:System.IDisposable.Dispose%2A> Methode mehr als einmal aufgerufen wird, wird das Objekt muss alle Aufrufe nach der ersten ignoriert. Das Objekt muss keine Ausnahme ausgelöst, wenn die <xref:System.IDisposable.Dispose%2A> Methode mehrmals aufgerufen wird. Instanzmethoden außer <xref:System.IDisposable.Dispose%2A> Auslösen einer <xref:System.ObjectDisposedException> Wenn Ressourcen bereits freigegeben.  
  
 Benutzer erwarten einen Ressourcentyp aus, um eine bestimmte Vereinbarung zu verwenden, um eine zugeordnete Zustand im Vergleich zu einem freigegebenen Zustand zu bezeichnen. Ein Beispiel hierfür ist die Stream-Klassen, die normalerweise als geöffnet oder geschlossen. Die Implementierung von einer Klasse mit einer derartigen kann auch eine öffentliche Methode mit einem benutzerdefinierten Namen, z. B. implementiert `Close`, die Aufrufe der <xref:System.IDisposable.Dispose%2A> Methode.  
  
 Da die <xref:System.IDisposable.Dispose%2A> -Methode muss explizit aufgerufen werden, besteht immer die Gefahr, die nicht verwalteten Ressourcen nicht freigegeben werden, da der Consumer eines Objekts aufrufen, um kann die <xref:System.IDisposable.Dispose%2A> Methode. Es gibt zwei Möglichkeiten, dies zu vermeiden:  
  
-   Umschließen Sie die verwaltete Ressource in einem Objekt abgeleitet <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Ihre <xref:System.IDisposable.Dispose%2A> Implementierung ruft die <xref:System.IDisposable.Dispose%2A> Methode der <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> Instanzen. Weitere Informationen finden Sie im Abschnitt "Die SafeHandle-Alternative" die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Thema.  
  
-   Implementieren Sie einen Finalizer, um Ressourcen freizugeben, wenn <xref:System.IDisposable.Dispose%2A> wird nicht aufgerufen. Standardmäßig ruft der Garbage Collector den Finalizer des Objekts automatisch vor der Rückgabe des Speichers. Aber wenn die <xref:System.IDisposable.Dispose%2A> Methode wurde aufgerufen wird, ist es in der Regel nicht erforderlich, für den Garbage Collector freigegeben den Finalizer des Objekts aufrufen. Um zu verhindern, dass automatische Beendigung, <xref:System.IDisposable.Dispose%2A> Implementierungen können aufrufen, die <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> Methode.  
  
 Ein Objekt, das nicht verwaltete Ressourcen, z. B. zugreift bei Verwendung einer <xref:System.IO.StreamWriter>, eine bewährte Methode wird zum Erstellen der Instanz mit einem `using` Anweisung. Die `using` Anweisung schließt automatisch den Stream und ruft <xref:System.IDisposable.Dispose%2A> für das Objekt nach Abschluss der Code, der es verwendet wird. Ein Beispiel finden Sie unter den <xref:System.IO.StreamWriter> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie implementieren die <xref:System.IDisposable.Dispose%2A> Methode.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Implementieren einer Dispose-Methode</related>
      </Docs>
    </Member>
  </Members>
</Type>
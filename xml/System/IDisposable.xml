<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="65b4026703ae13810dcedc947c7f5655986c8169" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75041451" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ac965-101">Stellt einen Mechanismus für die Freigabe nicht verwalteter Ressourcen bereit.</span><span class="sxs-lookup"><span data-stu-id="ac965-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ac965-102">Die primäre Verwendung dieser Schnittstelle besteht darin, nicht verwaltete Ressourcen freizugeben.</span><span class="sxs-lookup"><span data-stu-id="ac965-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="ac965-103">Der Garbage Collector gibt den Arbeitsspeicher, der einem verwalteten Objekt zugeordnet ist, automatisch frei, wenn dieses Objekt nicht mehr verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ac965-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="ac965-104">Es ist jedoch nicht möglich, vorherzusagen, wann Garbage Collection auftreten werden.</span><span class="sxs-lookup"><span data-stu-id="ac965-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="ac965-105">Außerdem hat der Garbage Collector keine Kenntnis von nicht verwalteten Ressourcen wie z. b. Fenster Handles oder geöffneten Dateien und Streams.</span><span class="sxs-lookup"><span data-stu-id="ac965-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="ac965-106">Verwenden Sie die <xref:System.IDisposable.Dispose%2A>-Methode dieser Schnittstelle, um nicht verwaltete Ressourcen explizit in Verbindung mit dem Garbage Collector freizugeben.</span><span class="sxs-lookup"><span data-stu-id="ac965-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="ac965-107">Der Consumer eines Objekts kann diese Methode aufzurufen, wenn das Objekt nicht mehr benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="ac965-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="ac965-108">Es ist eine Breaking Change, die <xref:System.IDisposable>-Schnittstelle zu einer vorhandenen Klasse hinzuzufügen.</span><span class="sxs-lookup"><span data-stu-id="ac965-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="ac965-109">Da bereits vorhandene Consumer ihres Typs <xref:System.IDisposable.Dispose%2A>nicht abrufen können, können Sie nicht sicher sein, dass nicht verwaltete Ressourcen, die von Ihrem Typ aufbewahrt werden, freigegeben werden.</span><span class="sxs-lookup"><span data-stu-id="ac965-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="ac965-110">Da die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>-Implementierung vom Consumer eines Typs aufgerufen wird, wenn die Ressourcen, die sich im Besitz einer Instanz befinden, nicht mehr benötigt werden, sollten Sie entweder das verwaltete Objekt in einem <xref:System.Runtime.InteropServices.SafeHandle> einschließen (die empfohlene Alternative), oder Sie sollten <xref:System.Object.Finalize%2A?displayProperty=nameWithType> überschreiben, um nicht verwaltete Ressourcen freizugeben, falls der Consumer vergisst, <xref:System.IDisposable.Dispose%2A>aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="ac965-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ac965-111">Im .NET Framework unterstützt der C++ Compiler die deterministische Freigabe von Ressourcen und lässt keine direkte Implementierung der <xref:System.IDisposable.Dispose%2A>-Methode zu.</span><span class="sxs-lookup"><span data-stu-id="ac965-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="ac965-112">Ausführliche Informationen zur Verwendung dieser Schnittstelle und der <xref:System.Object.Finalize%2A?displayProperty=nameWithType>-Methode finden Sie [in den Themen](~/docs/standard/garbage-collection/index.md) zur automatischen Speicher Bereinigung und zur [Implementierung einer](~/docs/standard/garbage-collection/implementing-dispose.md) verwerfen-Methode.</span><span class="sxs-lookup"><span data-stu-id="ac965-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="ac965-113">Verwenden eines Objekts, das iverwerfimplementiert</span><span class="sxs-lookup"><span data-stu-id="ac965-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="ac965-114">Wenn Ihre APP einfach ein Objekt verwendet, das die <xref:System.IDisposable>-Schnittstelle implementiert, sollten Sie die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>-Implementierung des Objekts abrufen, wenn Sie die Verwendung abgeschlossen haben.</span><span class="sxs-lookup"><span data-stu-id="ac965-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="ac965-115">Abhängig von ihrer Programmiersprache können Sie dies auf zwei Arten erreichen:</span><span class="sxs-lookup"><span data-stu-id="ac965-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="ac965-116">Mithilfe eines sprach Konstrukts, wie z. b. C# der `using`-Anweisung in und Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="ac965-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="ac965-117">Durch umwickeln des Aufrufes der <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung in einer `try`/`finally` Blocks.</span><span class="sxs-lookup"><span data-stu-id="ac965-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ac965-118">Dokumentation für Typen, die implementieren <xref:System.IDisposable> beachten Sie, dass diese Tatsache und eine Erinnerung enthalten, um die <xref:System.IDisposable.Dispose%2A> Implementierung aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="ac965-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="ac965-119">Die C# -und-Visual Basic using-Anweisung</span><span class="sxs-lookup"><span data-stu-id="ac965-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="ac965-120">Wenn Ihre Sprache ein Konstrukt wie die [using](~/docs/csharp/language-reference/keywords/using.md) -Anweisung in C# und die [using](~/docs/visual-basic/language-reference/statements/using-statement.md) -Anweisung in Visual Basic unterstützt, können Sie Sie verwenden, anstatt <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> selbst explizit aufrufen.</span><span class="sxs-lookup"><span data-stu-id="ac965-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="ac965-121">Im folgenden Beispiel wird dieser Ansatz verwendet, um eine `WordCount` Klasse zu definieren, die Informationen über eine Datei und die Anzahl der darin aufgeführten Wörter beibehält.</span><span class="sxs-lookup"><span data-stu-id="ac965-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="ac965-122">Die `using`-Anweisung ist eigentlich eine syntaktische Möglichkeit.</span><span class="sxs-lookup"><span data-stu-id="ac965-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="ac965-123">Zum Zeitpunkt der Kompilierung implementiert der sprach Compiler die Intermediate Language (IL) für eine `try`/`finally` Block.</span><span class="sxs-lookup"><span data-stu-id="ac965-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="ac965-124">Weitere Informationen zur `using`-Anweisung finden Sie in den Themen [using-Anweisung](~/docs/visual-basic/language-reference/statements/using-statement.md) oder using- [Anweisung](~/docs/csharp/language-reference/keywords/using-statement.md) .</span><span class="sxs-lookup"><span data-stu-id="ac965-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="ac965-125">Der try/endlich-Block</span><span class="sxs-lookup"><span data-stu-id="ac965-125">The Try/Finally block</span></span>  
 <span data-ttu-id="ac965-126">Wenn Ihre Programmiersprache ein Konstrukt wie die `using`-Anweisung in C# oder Visual Basic nicht unterstützt, oder wenn Sie diese nicht verwenden möchten, können Sie die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>-Implementierung aus dem `finally`-Block einer `try`/`finally`-Anweisung abrufen.</span><span class="sxs-lookup"><span data-stu-id="ac965-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="ac965-127">Im folgenden Beispiel wird der `using`-Block im vorherigen Beispiel durch einen `try`/`finally` Block ersetzt.</span><span class="sxs-lookup"><span data-stu-id="ac965-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="ac965-128">Weitere Informationen zum `try`/`finally` Muster finden [Sie unter try... Catch... Schließlich Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-endlich](~/docs/csharp/language-reference/keywords/try-finally.md)oder [try-endlich-Anweisung](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="ac965-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="ac965-129">Implementieren von IDisposable</span><span class="sxs-lookup"><span data-stu-id="ac965-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="ac965-130">Sie sollten <xref:System.IDisposable> nur implementieren, wenn der Typ nicht verwaltete Ressourcen direkt verwendet.</span><span class="sxs-lookup"><span data-stu-id="ac965-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="ac965-131">Die Consumer ihres Typs können Ihre <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>-Implementierung aufzurufen, um Ressourcen freizugeben, wenn die Instanz nicht mehr benötigt wird.</span><span class="sxs-lookup"><span data-stu-id="ac965-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="ac965-132">Um Fälle zu behandeln, in denen Sie <xref:System.IDisposable.Dispose%2A>nicht aufzurufen, sollten Sie entweder eine von <xref:System.Runtime.InteropServices.SafeHandle> abgeleitete Klasse verwenden, um die nicht verwalteten Ressourcen zu wrappen, oder Sie sollten die <xref:System.Object.Finalize%2A?displayProperty=nameWithType>-Methode für einen Verweistyp überschreiben.</span><span class="sxs-lookup"><span data-stu-id="ac965-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="ac965-133">In beiden Fällen verwenden Sie die <xref:System.IDisposable.Dispose%2A>-Methode, um die Bereinigung durchzuführen, die nach der Verwendung der nicht verwalteten Ressourcen erforderlich ist, z. b. das freigeben, freigeben oder Zurücksetzen der nicht verwalteten Ressourcen.</span><span class="sxs-lookup"><span data-stu-id="ac965-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ac965-134">Wenn Sie eine Basisklasse definieren, die nicht verwaltete Ressourcen verwendet und die über Unterklassen verfügen, die verworfen werden sollen, sollten Sie die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>-Methode implementieren und eine zweite Überladung von `Dispose`bereitstellen, wie im nächsten Abschnitt erläutert.</span><span class="sxs-lookup"><span data-stu-id="ac965-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="ac965-135">Iverwerfund die Vererbungs Hierarchie</span><span class="sxs-lookup"><span data-stu-id="ac965-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="ac965-136">Eine Basisklasse mit Unterklassen, die gelöscht werden sollten, muss wie folgt <xref:System.IDisposable> implementieren.</span><span class="sxs-lookup"><span data-stu-id="ac965-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="ac965-137">Sie sollten dieses Muster immer dann verwenden, wenn Sie <xref:System.IDisposable> für einen beliebigen Typ implementieren, der nicht `sealed` ist (`NotInheritable` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="ac965-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="ac965-138">Es sollte eine öffentliche, nicht virtuelle <xref:System.IDisposable.Dispose> Methode und eine geschützte virtuelle `Dispose(Boolean disposing)` Methode bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="ac965-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="ac965-139">Die <xref:System.IDisposable.Dispose>-Methode muss `Dispose(true)` aufzurufen und die Finalisierung der Leistung unterdrücken.</span><span class="sxs-lookup"><span data-stu-id="ac965-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="ac965-140">Der Basistyp sollte keine Finalizer enthalten.</span><span class="sxs-lookup"><span data-stu-id="ac965-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="ac965-141">Das folgende Code Fragment gibt das Lösch Muster für Basisklassen wieder.</span><span class="sxs-lookup"><span data-stu-id="ac965-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="ac965-142">Dabei wird davon ausgegangen, dass der Typ die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode nicht außer Kraft setzt.</span><span class="sxs-lookup"><span data-stu-id="ac965-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="ac965-143">Wenn Sie die <xref:System.Object.Finalize%2A?displayProperty=nameWithType>-Methode außer Kraft setzen, sollte die Klasse das folgende Muster implementieren.</span><span class="sxs-lookup"><span data-stu-id="ac965-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="ac965-144">Unterklassen sollten das verwerfbare Muster wie folgt implementieren:</span><span class="sxs-lookup"><span data-stu-id="ac965-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="ac965-145">Sie müssen `Dispose(Boolean)` überschreiben und die Basisklassen-`Dispose(Boolean)`-Implementierung aufrufen.</span><span class="sxs-lookup"><span data-stu-id="ac965-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="ac965-146">Sie können bei Bedarf einen Finalizer bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="ac965-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="ac965-147">Der Finalizer muss `Dispose(false)` aufrufen.</span><span class="sxs-lookup"><span data-stu-id="ac965-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="ac965-148">Beachten Sie, dass abgeleitete Klassen nicht selbst die <xref:System.IDisposable>-Schnittstelle implementieren und keine Parameter lose <xref:System.IDisposable.Dispose%2A> Methode enthalten.</span><span class="sxs-lookup"><span data-stu-id="ac965-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="ac965-149">Sie überschreiben nur die `Dispose(Boolean)` Methode der Basisklasse.</span><span class="sxs-lookup"><span data-stu-id="ac965-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="ac965-150">Das folgende Code Fragment reflektiert das Lösch Muster für abgeleitete Klassen.</span><span class="sxs-lookup"><span data-stu-id="ac965-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="ac965-151">Dabei wird davon ausgegangen, dass der Typ die <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Methode nicht außer Kraft setzt.</span><span class="sxs-lookup"><span data-stu-id="ac965-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="ac965-152">Im folgenden Beispiel wird veranschaulicht, wie eine Ressourcen Klasse erstellt wird, die die <xref:System.IDisposable>-Schnittstelle implementiert.</span><span class="sxs-lookup"><span data-stu-id="ac965-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="ac965-153">Implementieren einer Dispose-Methode</span><span class="sxs-lookup"><span data-stu-id="ac965-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ac965-154">Führt anwendungsspezifische Aufgaben durch, die mit der Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</span><span class="sxs-lookup"><span data-stu-id="ac965-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ac965-155">Verwenden Sie diese Methode, um nicht verwaltete Ressourcen, z. b. Dateien, Streams und Handles, die von einer Instanz der-Klasse, die diese Schnittstelle implementiert, zu schließen oder freizugeben.</span><span class="sxs-lookup"><span data-stu-id="ac965-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="ac965-156">Gemäß der Konvention wird diese Methode für alle Aufgaben verwendet, die mit der Freigabe von Ressourcen in einem Objekt oder dem Vorbereiten eines Objekts für die Wiederverwendung in Zusammenhang stehen.</span><span class="sxs-lookup"><span data-stu-id="ac965-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="ac965-157">Wenn Sie eine Klasse verwenden, die die <xref:System.IDisposable>-Schnittstelle implementiert, sollten Sie Ihre <xref:System.IDisposable.Dispose%2A>-Implementierung aufzurufen, wenn Sie die Verwendung der-Klasse abgeschlossen haben.</span><span class="sxs-lookup"><span data-stu-id="ac965-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="ac965-158">Weitere Informationen finden Sie im Abschnitt "Verwenden eines Objekts, das iverwerfimplementiert" im <xref:System.IDisposable> Thema.</span><span class="sxs-lookup"><span data-stu-id="ac965-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="ac965-159">Wenn Sie diese Methode implementieren, stellen Sie sicher, dass alle gehaltenen Ressourcen freigegeben werden, indem Sie den-Befehl über die Kapselungs Hierarchie</span><span class="sxs-lookup"><span data-stu-id="ac965-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="ac965-160">Wenn ein Objekt a z. b. ein Objekt b zuordnet und Objekt b ein Objekt C zuordnet, muss die <xref:System.IDisposable.Dispose%2A>-Implementierung von a <xref:System.IDisposable.Dispose%2A> auf B abrufen, das wiederum <xref:System.IDisposable.Dispose%2A> in C aufgerufen werden muss.</span><span class="sxs-lookup"><span data-stu-id="ac965-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ac965-161">Der C++ Compiler unterstützt die deterministische Freigabe von Ressourcen und lässt keine direkte Implementierung der <xref:System.IDisposable.Dispose%2A>-Methode zu.</span><span class="sxs-lookup"><span data-stu-id="ac965-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="ac965-162">Ein Objekt muss auch die <xref:System.IDisposable.Dispose%2A>-Methode seiner Basisklasse aufzurufen, wenn die Basisklasse <xref:System.IDisposable>implementiert.</span><span class="sxs-lookup"><span data-stu-id="ac965-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="ac965-163">Weitere Informationen zum Implementieren von <xref:System.IDisposable> für eine Basisklasse und deren Unterklassen finden Sie im Abschnitt "iverwerfand the Vererbungs Hierarchie" des Themas <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="ac965-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="ac965-164">Wenn die <xref:System.IDisposable.Dispose%2A>-Methode eines Objekts mehrmals aufgerufen wird, muss das Objekt alle Aufrufe nach dem ersten ignorieren.</span><span class="sxs-lookup"><span data-stu-id="ac965-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="ac965-165">Das-Objekt darf keine Ausnahme auslösen, wenn die <xref:System.IDisposable.Dispose%2A>-Methode mehrmals aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="ac965-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="ac965-166">Andere Instanzmethoden als <xref:System.IDisposable.Dispose%2A> können eine <xref:System.ObjectDisposedException> auslösen, wenn bereits Ressourcen verworfen wurden.</span><span class="sxs-lookup"><span data-stu-id="ac965-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="ac965-167">Benutzer erwarten möglicherweise, dass ein Ressourcentyp eine bestimmte Konvention verwendet, um einen zugewiesenen Zustand oder einen freigegebenen Zustand anzugeben.</span><span class="sxs-lookup"><span data-stu-id="ac965-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="ac965-168">Ein Beispiel hierfür sind Streamklassen, die üblicherweise als offen oder geschlossen angesehen werden.</span><span class="sxs-lookup"><span data-stu-id="ac965-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="ac965-169">Der Implementierer einer Klasse, die über eine solche Konvention verfügt, kann eine öffentliche Methode mit einem angepassten Namen implementieren, z. b. `Close`, der die <xref:System.IDisposable.Dispose%2A>-Methode aufruft.</span><span class="sxs-lookup"><span data-stu-id="ac965-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="ac965-170">Da die <xref:System.IDisposable.Dispose%2A>-Methode explizit aufgerufen werden muss, besteht immer die Gefahr, dass die nicht verwalteten Ressourcen nicht freigegeben werden, da der Consumer eines Objekts seine <xref:System.IDisposable.Dispose%2A>-Methode nicht aufrufen kann.</span><span class="sxs-lookup"><span data-stu-id="ac965-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="ac965-171">Es gibt zwei Möglichkeiten, dies zu vermeiden:</span><span class="sxs-lookup"><span data-stu-id="ac965-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="ac965-172">Wrappen Sie die verwaltete Ressource in einem Objekt, das von <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="ac965-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ac965-173">Die <xref:System.IDisposable.Dispose%2A>-Implementierung ruft dann die <xref:System.IDisposable.Dispose%2A>-Methode der <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>-Instanzen auf.</span><span class="sxs-lookup"><span data-stu-id="ac965-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="ac965-174">Weitere Informationen finden Sie im Abschnitt "SafeHandle Alternative" des <xref:System.Object.Finalize%2A?displayProperty=nameWithType> Themas.</span><span class="sxs-lookup"><span data-stu-id="ac965-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="ac965-175">Implementieren Sie einen Finalizer, um Ressourcen freizugeben, wenn <xref:System.IDisposable.Dispose%2A> nicht aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="ac965-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="ac965-176">Standardmäßig ruft der Garbage Collector automatisch den Finalizer eines Objekts auf, bevor der zugehörige Speicher freigegeben wird.</span><span class="sxs-lookup"><span data-stu-id="ac965-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="ac965-177">Wenn jedoch die <xref:System.IDisposable.Dispose%2A>-Methode aufgerufen wurde, ist es in der Regel nicht erforderlich, dass der Garbage Collector den Finalizer des verworfenen Objekts aufruft.</span><span class="sxs-lookup"><span data-stu-id="ac965-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="ac965-178">Um die automatische Finalisierung zu verhindern, können <xref:System.IDisposable.Dispose%2A> Implementierungen die <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>-Methode aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="ac965-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ac965-179">Wenn Sie ein Objekt verwenden, das auf nicht verwaltete Ressourcen zugreift, wie z. b. eine <xref:System.IO.StreamWriter>, empfiehlt es sich, die Instanz mit einer `using`-Anweisung zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="ac965-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="ac965-180">Die `using`-Anweisung schließt den Stream automatisch und ruft <xref:System.IDisposable.Dispose%2A> für das-Objekt auf, wenn der Code, der ihn verwendet, abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="ac965-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="ac965-181">Ein Beispiel finden Sie in der <xref:System.IO.StreamWriter>-Klasse.</span><span class="sxs-lookup"><span data-stu-id="ac965-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ac965-182">Im folgenden Beispiel wird gezeigt, wie Sie die <xref:System.IDisposable.Dispose%2A>-Methode implementieren können.</span><span class="sxs-lookup"><span data-stu-id="ac965-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="ac965-183">Implementieren einer Dispose-Methode</span><span class="sxs-lookup"><span data-stu-id="ac965-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ae5fac6e3c82cfaf02bcdc8876ab63369f0821b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58702475" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Der Typ des zu vergleichenden Objekts.</typeparam>
    <param name="obj">Das Objekt, das mit den Kriterien verglichen werden soll, die innerhalb der durch diesen Delegaten dargestellten Methode definiert sind.</param>
    <summary>Stellt die Methode dar, die einen Satz von Kriterien definiert und bestimmt, ob das angegebene Objekt jene Kriterien erfüllt.</summary>
    <returns><see langword="true" />, wenn <paramref name="obj" /> die innerhalb der durch diesen Delegaten dargestellten Methode definierten Kriterien erfüllt, andernfalls <see langword="false" />.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Delegat wird verwendet, von mehreren Methoden der der <xref:System.Array> und <xref:System.Collections.Generic.List%601> Klassen, die Suche nach Elementen in der Auflistung.  
  
 In der Regel die <xref:System.Predicate%601> Delegat durch einen Lambda-Ausdruck dargestellt wird. Da lokal gültigen Variablen für den Lambda-Ausdruck verfügbar sind, ist es einfach, eine Bedingung zu testen, die zum Zeitpunkt der Kompilierung nicht genau bekannt ist. Dies wird im folgenden Beispiel, das definiert, simuliert einen `HockeyTeam` Klasse enthält Informationen zu National Hockey League Team und das Jahr, in dem sie gegründet wurde. Im Beispiel definiert ein Array von ganzzahligen Werten, die Jahre darstellen, und nach dem Zufallsprinzip weist ein Element des Arrays, das `foundedBeforeYear`, dies ist eine Variable, die lokal auf des Beispiels bezieht `Main` Methode. Da lokal gültigen Variablen für einen Lambda-Ausdruck verfügbar sind, wird der Lambda-Ausdruck übergeben, auf die <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> besteht im Zurückgeben einer `HockeyTeam` Objekt für die einzelnen Teams gegründet wurde, am oder vor diesem Jahr.  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine <xref:System.Predicate%601> mit Delegieren der <xref:System.Array.Find%2A?displayProperty=nameWithType> Methode, um ein Array von Durchsuchen <xref:System.Drawing.Point> Strukturen. Im Beispiel wird explizit definiert eine <xref:System.Predicate%601> Delegat mit dem Namen `predicate` und weist es eine Methode namens `FindPoints` zurückgibt `true` Wenn das Produkt aus der <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> und <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> Felder ist größer als 100.000. Beachten Sie, dass es üblich, einen Lambda-Ausdruck verwenden, anstatt explizit einen Delegaten vom Typ definieren <xref:System.Predicate%601>, wie im zweite Beispiel veranschaulicht.  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 Im folgende Beispiel ist im vorherigen Beispiel identisch, außer dass er einen Lambda-Ausdruck verwendet, um darzustellen der <xref:System.Predicate%601> delegieren.  Jedes Element der `points` Array an den Lambda-Ausdruck übergeben wird, bis der Ausdruck ein Element gefunden wird, die die Suchkriterien entspricht. In diesem Fall gibt der Lambda-Ausdrucks `true` ist das Produkt aus den X- und Y-Feldern größer als 100.000.  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>
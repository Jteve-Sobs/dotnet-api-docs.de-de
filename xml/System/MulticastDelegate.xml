<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MulticastDelegate.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac568fe57d35963ff07229ce4e905392ba33a08e1b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68fe57d35963ff07229ce4e905392ba33a08e1b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.MulticastDelegate">
          <source>Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</source>
          <target state="translated">Stellt einen Multicastdelegaten dar, d. h. einen Delegaten, in dessen Aufrufliste sich mehrere Elemente befinden können.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> is a special class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> ist eine besondere Klasse.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Compilers and other tools can derive from this class, but you cannot derive from it explicitly.</source>
          <target state="translated">Compiler und andere Tools können von dieser Klasse abgeleitet werden, aber Sie können keine leiten sich von ihm explizit.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The same is true of the <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> class.</source>
          <target state="translated">Dasselbe gilt für die <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>In addition to the methods that delegate types inherit from <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>, the common language runtime provides two special methods: <ph id="ph2">`BeginInvoke`</ph> and <ph id="ph3">`EndInvoke`</ph>.</source>
          <target state="translated">Zusätzlich zu den Methoden, die Delegattypen Vererben <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>, die common Language Runtime stellt zwei spezielle Methoden bereit: <ph id="ph2">`BeginInvoke`</ph> und <ph id="ph3">`EndInvoke`</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>For more information about these methods, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Weitere Informationen zu diesen Methoden finden Sie unter <bpt id="p1">[</bpt>Aufrufen synchroner Methoden asynchron<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>A <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> has a linked list of delegates, called an invocation list, consisting of one or more elements.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> verfügt über eine verknüpfte Liste von Delegaten, bezeichnet eine Aufrufliste bestehend aus einem oder mehreren Elementen.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear.</source>
          <target state="translated">Wenn ein multicast-Delegat aufgerufen wird, sind die Delegaten in der Aufrufliste synchron in der Reihenfolge aufgerufen, in denen sie angezeigt werden.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>If an error occurs during execution of the list then an exception is thrown.</source>
          <target state="translated">Wenn während der Ausführung der Liste ein Fehler auftritt, wird eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The following example defines a class, <ph id="ph1">`StringContainer`</ph>, which includes a collection of strings.</source>
          <target state="translated">Das folgende Beispiel definiert eine Klasse <ph id="ph1">`StringContainer`</ph>, die eine Auflistung von Zeichenfolgen enthält.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>One of its members is the <ph id="ph1">`CheckAndDisplayDelegate`</ph> delegate, which is used to display strings stored in a <ph id="ph2">`StringContainer`</ph> object that satisfy particular criteria.</source>
          <target state="translated">Eine Membern ist die <ph id="ph1">`CheckAndDisplayDelegate`</ph> zu delegieren, dient zum Anzeigen von Zeichenfolgen, die in gespeicherten ein <ph id="ph2">`StringContainer`</ph> -Objekt, das bestimmte Kriterien erfüllen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The delegate takes a single string as a parameter and returns <ph id="ph1">`void`</ph> (or, in Visual Basic, it's a <ph id="ph2">`Sub`</ph> procedure).</source>
          <target state="translated">Der Delegat eine einzelne Zeichenfolge als Parameter akzeptiert und gibt <ph id="ph1">`void`</ph> (oder in Visual Basic ist ein <ph id="ph2">`Sub`</ph> Verfahren).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It also includes a method, <ph id="ph1">`DisplayAllQualified`</ph>, that has a single parameter, a <ph id="ph2">`CheckAndDisplayDelegate`</ph> delegate.</source>
          <target state="translated">Es enthält auch eine Methode <ph id="ph1">`DisplayAllQualified`</ph>, einen einzelnen Parameter, einen <ph id="ph2">`CheckAndDisplayDelegate`</ph> delegieren.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>This allows the method to be called and to display a set of strings that are filtered based on the methods that the delegate contains.</source>
          <target state="translated">Dadurch wird die Methode aufgerufen werden, und um eine Reihe von Zeichenfolgen anzuzeigen, die gefiltert werden basierend auf den Methoden, die der Delegaten enthält.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The example also defines a utility class, <ph id="ph1">`StringExtensions`</ph>, that has two methods:</source>
          <target state="translated">Im Beispiel definiert auch eine Hilfsprogrammklasse <ph id="ph1">`StringExtensions`</ph>, die verfügt über zwei Methoden:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">`ConStart`</ph>, which displays strings that begin with a consonant.</source>
          <target state="translated"><ph id="ph1">`ConStart`</ph>, die anzeigt, dass Zeichenfolgen, die mit einem Konsonanten beginnen.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">`VowelStart`</ph>, which displays strings that begin with a vowel.</source>
          <target state="translated"><ph id="ph1">`VowelStart`</ph>, die anzeigt, dass Zeichenfolgen, die mit einem Vokal beginnen.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Note that both methods include a single string parameter and return <ph id="ph1">`void`</ph>.</source>
          <target state="translated">Beachten Sie, dass beide Methoden einen einzelnen Zeichenfolgenparameter umfassen und Rückgabewerte <ph id="ph1">`void`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>In other words, both methods can be assigned to the  <ph id="ph1">`CheckAndDisplayDelegate`</ph> delegate.</source>
          <target state="translated">In anderen Worten: können beide Methoden zugewiesen werden, auf die <ph id="ph1">`CheckAndDisplayDelegate`</ph> delegieren.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The <ph id="ph1">`Test.Main`</ph> method is the application entry point.</source>
          <target state="translated">Die <ph id="ph1">`Test.Main`</ph> Methode ist der Einstiegspunkt der Anwendung.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It instantiates a <ph id="ph1">`StringContainer`</ph> object, populates it with strings, and creates two <ph id="ph2">`CheckAndDisplayDelegate`</ph> delegates, <ph id="ph3">`conStart`</ph> and <ph id="ph4">`vowelStart`</ph>, that invoke a single method.</source>
          <target state="translated">Instanziiert eine <ph id="ph1">`StringContainer`</ph> -Objekt, füllt es mit Zeichenfolgen und erstellt zwei <ph id="ph2">`CheckAndDisplayDelegate`</ph> Delegaten <ph id="ph3">`conStart`</ph> und <ph id="ph4">`vowelStart`</ph>, die eine einzelne Methode aufrufen.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph> method to create the <ph id="ph2">`multipleDelegates`</ph> delegate, which initially contains the <ph id="ph3">`ConStart`</ph> and  <ph id="ph4">`VowelStart`</ph> delegates.</source>
          <target state="translated">Er ruft dann die <ph id="ph1">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph> Methode zum Erstellen der <ph id="ph2">`multipleDelegates`</ph> zu delegieren, die anfänglich enthält die <ph id="ph3">`ConStart`</ph> und <ph id="ph4">`VowelStart`</ph> Delegaten.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Note that when the <ph id="ph1">`multipleDelegates`</ph> delegate is invoked, it displays all the strings in the collection in their original order.</source>
          <target state="translated">Beachten Sie, dass bei der <ph id="ph1">`multipleDelegates`</ph> Delegat aufgerufen wird, werden alle Zeichenfolgen in der Auflistung in der ursprünglichen Reihenfolge angezeigt.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>This is because each letter is passed separately to each delegate, and each letter meets the filtering criteria of only one of the two delegates.</source>
          <target state="translated">Dies liegt daran jedes Buchstabens separat auf jede Delegaten übergeben wird, und jedes Buchstabens die Filterkriterien nur eines der beiden Delegaten erfüllt.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Finally, after calls to <ph id="ph1">&lt;xref:System.Delegate.Remove%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`multipleDelegates`</ph> contains two <ph id="ph4">`conStart`</ph> delegates.</source>
          <target state="translated">Zum Schluss nach Aufrufen der <ph id="ph1">&lt;xref:System.Delegate.Remove%2A?displayProperty=nameWithType&gt;</ph> und <ph id="ph2">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`multipleDelegates`</ph> enthält zwei <ph id="ph4">`conStart`</ph> Delegaten.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>When it is invoked, each string in the <ph id="ph1">`StringContainer`</ph> object is displayed twice.</source>
          <target state="translated">Wenn sie aufgerufen wird, jede Zeichenfolge in der <ph id="ph1">`StringContainer`</ph> Objekt wird zweimal angezeigt.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.MulticastDelegate">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>The object on which <bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept> is defined.</source>
          <target state="translated">Ein Objekt, für das <bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept> definiert ist.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>The name of the method for which a delegate is created.</source>
          <target state="translated">Der Name der Methode, für die ein Delegat erstellt wird.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>This constructor cannot be used in application code.</source>
          <target state="translated">Dieser Konstruktor kann nicht im Anwendungscode verwendet werden.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>To create a delegate by specifying the name of an instance method, use an overload of the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method that specifies a method name and a target object.</source>
          <target state="translated">Um einen Delegaten erstellen, indem der Name der Instanzenmethode, verwenden Sie eine Überladung der <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> Methode, die einen Methodennamen und einem Zielobjekt angibt.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method overload creates a delegate for an instance method with a specified name.</source>
          <target state="translated">Z. B. die <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> methodenüberladung erstellt einen Delegaten für eine Instanzmethode mit dem angegebenen Namen.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>The type of object on which <bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept> is defined.</source>
          <target state="translated">Ein Objekttyp, für den <bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept> definiert ist.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>The name of the static method for which a delegate is created.</source>
          <target state="translated">Der Name der statischen Methode, für die ein Delegat erstellt wird.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>This constructor cannot be used in application code.</source>
          <target state="translated">Dieser Konstruktor kann nicht im Anwendungscode verwendet werden.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>To create a delegate by specifying the name of a static method, use an overload of the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method that specifies a method name but does not specify a target object.</source>
          <target state="translated">Um einen Delegaten zu erstellen, indem der Name einer statischen Methode verwendet eine Überladung der <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> -Methode, die einen Methodennamen angibt, jedoch kein Zielobjekt angegeben.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method overload creates a static delegate for a method with a specified name.</source>
          <target state="translated">Z. B. die <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> methodenüberladung erstellt einen statischen Delegaten für eine Methode mit dem angegebenen Namen.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>The delegate to combine with this delegate.</source>
          <target state="translated">Der Delegat, der mit diesem Delegaten kombiniert werden soll.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Combines this <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> with the specified <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph> to form a new delegate.</source>
          <target state="translated">Kombiniert diesen <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> mit dem angegebenen <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph> zu einem neuen Delegaten.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>A delegate that is the new root of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> invocation list.</source>
          <target state="translated">Ein Delegat, der den neuen Stamm der <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>-Aufrufliste bildet.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source><ph id="ph1">&lt;paramref name="follow" /&gt;</ph> does not have the same type as this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="follow" /&gt;</ph> hat nicht den gleichen Typ wie diese Instanz.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Das Objekt, das mit dieser Instanz verglichen werden soll.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Determines whether this multicast delegate and the specified object are equal.</source>
          <target state="translated">Bestimmt, ob dieser Multicastdelegat und das angegebene Objekt übereinstimmen.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> and this instance have the same invocation lists; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> und diese Instanz dieselbe Aufrufliste aufweisen, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">Zwei Delegaten sind gleich, wenn sie nicht sind <ph id="ph1">`null`</ph> und sind genau den gleichen Typ, ihren Aufruflisten enthalten die gleiche Anzahl von Elementen und jedes Element in der Aufrufliste des ersten Delegaten gleich dem entsprechenden Element im Aufruf Liste mit den zweiten Delegaten.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">Zwei Elemente der Aufrufliste sind gleich, wenn sie die gleiche Instanzmethode auf der gleichen Zielinstanz aufrufen oder wenn sie die gleiche statische Methode aufrufen.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Gibt den Hashcode für diese Instanz zurück.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetHashCode">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Returns the invocation list of this multicast delegate, in invocation order.</source>
          <target state="translated">Gibt die Aufrufliste dieses Multicastdelegaten in der Reihenfolge der Aufrufe zurück.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>An array of delegates whose invocation lists collectively match the invocation list of this instance.</source>
          <target state="translated">Ein Array von Delegaten, deren Aufruflisten zusammen der Aufrufliste dieser Instanz entsprechen.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>The array contains a set of delegates, each with an invocation list of one entry.</source>
          <target state="translated">Das Array enthält einen Satz von Delegaten, jeweils mit einer Aufrufliste eines Eintrags.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Invoking these delegates sequentially, in the order they appear in the array, produces the same results as invoking the current instance.</source>
          <target state="translated">Diese Delegaten sequenziell in der Reihenfolge in das Array aufrufen, erzeugt die gleichen Ergebnisse wie der Aufruf der aktuellen Instanz.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>Returns a static method represented by the current <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>.</source>
          <target state="translated">Gibt eine durch den aktuellen <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> dargestellte statische Methode zurück.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>A static method represented by the current <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>.</source>
          <target state="translated">Eine durch den aktuellen <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> dargestellte statische Methode.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>If the <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> represents multiple methods, only one method is returned.</source>
          <target state="translated">Wenn die <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> mehrere Methoden darstellt, die nur eine Methode zurückgegeben wird.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize this instance.</source>
          <target state="translated">Ein Objekt, das alle für das Serialisieren bzw. Deserialisieren dieser Instanz erforderlichen Daten enthält.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) The location where serialized data is stored and retrieved.</source>
          <target state="translated">(Reserviert) Der Ort, an dem serialisierte Daten gespeichert und von dem sie abgerufen werden.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with all the data needed to serialize this instance.</source>
          <target state="translated">Füllt ein <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph>-Objekt mit allen für das Serialisieren dieser Instanz erforderlichen Daten aus.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method stores all the information in <ph id="ph1">`info`</ph> necessary to serialize this instance.</source>
          <target state="translated">Diese Methode speichert die Informationen in <ph id="ph1">`info`</ph> zum Serialisieren dieser Instanz erforderlich.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved and is not currently used in the execution of this method.</source>
          <target state="translated">Die <ph id="ph1">`context`</ph> Parameter ist reserviert und wird derzeit bei der Ausführung dieser Methode nicht verwendet.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A serialization error occurred.</source>
          <target state="translated">Ein Serialisierungsfehler ist aufgetreten.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The left operand.</source>
          <target state="translated">Der linke Operand.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The right operand.</source>
          <target state="translated">Der rechte Operand.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> objects are equal.</source>
          <target state="translated">Bestimmt, ob zwei <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>-Objekte gleich sind.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> and <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> have the same invocation lists; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> und <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> dieselbe Aufrufliste aufweisen, andernfalls <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">Zwei Delegaten sind gleich, wenn sie nicht sind <ph id="ph1">`null`</ph> und sind genau den gleichen Typ, ihren Aufruflisten enthalten die gleiche Anzahl von Elementen und jedes Element in der Aufrufliste des ersten Delegaten gleich dem entsprechenden Element im Aufruf Liste mit den zweiten Delegaten.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">Zwei Elemente der Aufrufliste sind gleich, wenn sie die gleiche Instanzmethode auf der gleichen Zielinstanz aufrufen oder wenn sie die gleiche statische Methode aufrufen.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">Die entsprechende Methode für diesen Operator ist. <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The left operand.</source>
          <target state="translated">Der linke Operand.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The right operand.</source>
          <target state="translated">Der rechte Operand.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Bestimmt, ob zwei <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>-Objekte ungleich sind.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> and <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> do not have the same invocation lists; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> und <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> nicht dieselbe Aufrufliste aufweisen, andernfalls <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">Zwei Delegaten sind gleich, wenn sie nicht sind <ph id="ph1">`null`</ph> und sind genau den gleichen Typ, ihren Aufruflisten enthalten die gleiche Anzahl von Elementen und jedes Element in der Aufrufliste des ersten Delegaten gleich dem entsprechenden Element im Aufruf Liste mit den zweiten Delegaten.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">Zwei Elemente der Aufrufliste sind gleich, wenn sie die gleiche Instanzmethode auf der gleichen Zielinstanz aufrufen oder wenn sie die gleiche statische Methode aufrufen.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">Die entsprechende Methode für diesen Operator ist. <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>The delegate to search for in the invocation list.</source>
          <target state="translated">Der Delegat, der in der Aufrufliste gesucht werden soll.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Removes an element from the invocation list of this <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> that is equal to the specified delegate.</source>
          <target state="translated">Entfernt ein Element aus der Aufrufliste dieses <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>, das gleich dem angegebenen Delegaten ist.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is found in the invocation list for this instance, then a new <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph> without <ph id="ph3">&lt;paramref name="value" /&gt;</ph> in its invocation list; otherwise, this instance with its original invocation list.</source>
          <target state="translated">Ein neuer <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph> ohne <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in seiner Aufrufliste, wenn <ph id="ph3">&lt;paramref name="value" /&gt;</ph> in der Aufrufliste dieser Instanz gefunden wurde, andernfalls diese Instanz mit der ursprünglichen Aufrufliste.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">Eine Instanz einer abstrakten Klasse kann nicht erstellt werden, oder dieser Member wurde durch einen Mechanismus mit später Bindung aufgerufen.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Beim Aufrufen spät gebundene durch Mechanismen wie z. B. <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">Zugeordnete Enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<Type Name="AppDomainManager" FullName="System.AppDomainManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e017df2c7aa38fb463cb675a70e3181f5284f6ac" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83929719" /></Metadata><TypeSignature Language="C#" Value="public class AppDomainManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AppDomainManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.AppDomainManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AppDomainManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppDomainManager : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type AppDomainManager = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine verwaltete Entsprechung eines nicht verwalteten Hosts dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Verwenden Sie <xref:System.AppDomainManager> nicht, um eine Anwendungsdomäne in ASP.net zu konfigurieren. In ASP.NET muss die Konfiguration vom Host verarbeitet werden.  
  
 Wenn Sie die <xref:System.AppDomainManager>-Klasse implementieren, kann eine Hostinganwendung an der Erstellung neuer Anwendungs Domänen teilnehmen. Um die Standard <xref:System.AppDomainManager>zu ersetzen, identifizieren Sie die Assembly und den Typ der Ersetzungs <xref:System.AppDomainManager> in den Umgebungsvariablen APPDOMAIN_MANAGER_ASM und APPDOMAIN_MANAGER_TYPE, oder verwenden Sie die\<Elemente [AppDomainManagerAssembly >](/dotnet/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element) und [\<AppDomainManagerType](/dotnet/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element) in der Konfigurationsdatei. Die Assembly muss voll vertrauenswürdig sein und im globalen Assemblycache oder im Verzeichnis der Start Anwendung enthalten sein. Der Typ-und der AssemblyName müssen in den Umgebungsvariablen voll qualifiziert sein. Beispiel:  
  
 `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  
  
 `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  
  
> [!IMPORTANT]
>  Wenn die Assembly, die die Unterklasse von enthält <xref:System.AppDomainManager> von Assemblys abhängig ist, die mit dem APTCA-Attribut (Conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute>) gekennzeichnet sind, müssen Sie diese Assemblys in der Liste einschließen, die Sie an die <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A>-Eigenschaft der <xref:System.AppDomainSetup> übergeben, die Sie zum Erstellen von Anwendungs Domänen verwenden. Andernfalls werden die Assemblys, die mit dem bedingten APTCA-Attribut markiert sind, deaktiviert.  
  
 Der <xref:System.AppDomainManager> ist die verwaltete Entsprechung des nicht verwalteten Hosts. Ein <xref:System.AppDomainManager>-Objekt ist an der Erstellung neuer Anwendungs Domänen in einem Prozess beteiligt und kann die neue <xref:System.AppDomain> vor dem Ausführen von anderem verwaltetem Code anpassen. Der <xref:System.AppDomainManager> kann auch Host-Manager bereitstellen, die an anderen Aspekten der Common Language Runtime Ausführung beteiligt sind. Beispielsweise kann ein <xref:System.AppDomainManager> ein <xref:System.Security.HostSecurityManager> Objekt identifizieren, das an den Sicherheitsentscheidungen der Anwendungsdomäne beteiligt ist.  
  
> [!NOTE]
>  Nur Assemblys, die `FullTrust`gewährt wurden, z. b. Assemblys im globalen Assemblycache oder als `fullTrustAssemblies` in der <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>-Methode identifiziert, können im <xref:System.AppDomainManager.%23ctor%2A>-Konstruktor und in der <xref:System.AppDomainManager.InitializeNewDomain%2A>-Methode  
  
> [!NOTE]
>  Diese Klasse enthält einen Link Aufruf und einen Vererbungs Bedarf auf Klassenebene. Eine <xref:System.Security.SecurityException> wird ausgelöst, wenn der unmittelbare Aufrufer oder die abgeleitete Klasse nicht über eine Infrastruktur Berechtigung verfügt. Ausführliche Informationen zu Sicherheitsanforderungen finden Sie unter [Link](/dotnet/framework/misc/link-demands) Aufrufe und [Vererbungs Anforderungen](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine sehr einfache Implementierung von <xref:System.AppDomainManager>.  
  
 [!code-csharp[System.AppDomainManager#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#1)]
 [!code-vb[System.AppDomainManager#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#1)]  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die ordnungsgemäßen Berechtigungen. Siehe den Abschnitt „Anforderungen“.</exception>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppDomainManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomainManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.AppDomainManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Nur Assemblys, die `FullTrust`gewährt wurden, z. b. Assemblys im globalen Assemblycache oder als `fullTrustAssemblies` in der <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>-Methode identifiziert, können im <xref:System.AppDomainManager.%23ctor%2A>-Konstruktor und in der <xref:System.AppDomainManager.InitializeNewDomain%2A>-Methode  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationActivator">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Hosting.ApplicationActivator ApplicationActivator" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.ApplicationActivator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ApplicationActivator As ApplicationActivator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::Hosting::ApplicationActivator ^ ApplicationActivator { System::Runtime::Hosting::ApplicationActivator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationActivator : System.Runtime.Hosting.ApplicationActivator" Usage="System.AppDomainManager.ApplicationActivator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Hosting.ApplicationActivator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Anwendungsaktivierer ab, der die Aktivierung von Add-Ins und manifestbasierten Anwendungen für die Domäne handhabt.</summary>
        <value>Der Anwendungsaktivator.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt eine einzelne festgelegte Instanz der <xref:System.Runtime.Hosting.ApplicationActivator>-Klasse in jeder <xref:System.AppDomain>, an die alle Add-in-und Manifestressourcen-Aktivierungs Aufrufe weitergeleitet werden. Der <xref:System.AppDomainManager> für die aktuelle <xref:System.AppDomain> kann eine eigene benutzerdefinierte <xref:System.Runtime.Hosting.ApplicationActivator>bereitstellen, oder es wird eine Instanz der Standard <xref:System.Runtime.Hosting.ApplicationActivator> erstellt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSecuritySettings">
      <MemberSignature Language="C#" Value="public virtual bool CheckSecuritySettings (System.Security.SecurityState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckSecuritySettings(class System.Security.SecurityState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckSecuritySettings (state As SecurityState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckSecuritySettings(System::Security::SecurityState ^ state);" />
      <MemberSignature Language="F#" Value="abstract member CheckSecuritySettings : System.Security.SecurityState -&gt; bool&#xA;override this.CheckSecuritySettings : System.Security.SecurityState -&gt; bool" Usage="appDomainManager.CheckSecuritySettings state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Security.SecurityState" />
      </Parameters>
      <Docs>
        <param name="state">Eine Unterklasse von <see cref="T:System.Security.SecurityState" />, die den Vorgang identifiziert, dessen Sicherheitsstatus angefordert wird.</param>
        <summary>Gibt an, ob der angegebene Vorgang in der Anwendungsdomäne zulässig ist.</summary>
        <returns><see langword="true" />, wenn der Host das Ausführen des von <paramref name="state" /> angegebenen Vorgangs in der Anwendungsdomäne zulässt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standard Implementierung dieser Methode gibt `false`zurück.  
  
 Diese Methode wird aufgerufen, wenn die <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=nameWithType>-Methode aufgerufen wurde, um das Kontingent isolierter Speicher zu erhöhen. Eine Anwendung, die die Common Language Runtime (CLR) hostet, kann die <xref:System.AppDomainManager.CheckSecuritySettings%2A>-Methode außer Kraft setzen, um Richtlinien Entscheidungen auf Grundlage eines <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> Objekts (das <xref:System.Security.SecurityState>) führt, und dann die Erhöhung zuzulassen oder zu verhindern. Beispielsweise kann ein Host den Endbenutzer auffordern, die Anforderung zum Erhöhen des Kontingents zu genehmigen oder zu verweigern. Die Implementierung von <xref:System.AppDomainManager.CheckSecuritySettings%2A> des Hosts sollte die Möglichkeit von Denial-of-Service-Angriffen berücksichtigen. Beispielsweise sollte der Benutzer nur dann aufgefordert werden, wenn die-Methode von einem vom Benutzer initiierten Ereignis aufgerufen wird, z. b. durch Klicken auf eine Schaltfläche.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDomain (friendlyName As String, securityInfo As Evidence, appDomainInfo As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="abstract member CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain&#xA;override this.CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain" Usage="appDomainManager.CreateDomain (friendlyName, securityInfo, appDomainInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName">Der angezeigte Name der Domäne.</param>
        <param name="securityInfo">Ein Objekt, das den durch die Sicherheitsrichtlinien zugeordneten Beweis zum Festlegen eines Berechtigungssatzes auf oberster Stapelebene enthält.</param>
        <param name="appDomainInfo">Ein Objekt, das Initialisierungsinformationen für die Anwendungsdomäne enthält.</param>
        <summary>Gibt eine neue oder vorhandene Anwendungsdomäne zurück.</summary>
        <returns>Eine neue oder vorhandene Anwendungsdomäne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeige Name, der vom `friendlyName`-Parameter angegeben wird, kann auf Benutzeroberflächen angezeigt werden, um die Domäne zu identifizieren. Weitere Informationen finden Sie unter den Ausführungen zur Eigenschaft <xref:System.AppDomain.FriendlyName%2A>.  
  
 Die Standard <xref:System.AppDomainManager.CreateDomain%2A>-Methode ruft die geschützte <xref:System.AppDomainManager.CreateDomainHelper%2A>-Methode auf, um die <xref:System.AppDomain>zu erstellen. Außer Kraft setzungen dieser Methode müssen die <xref:System.AppDomainManager.CreateDomainHelper%2A>-Methode nicht aufzurufen, können aber eine vorhandene Domäne zurückgeben.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie von der <see cref="T:System.AppDomainManager" />-Klasse erben und die <see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />-Methode überschreiben, können Sie benutzerdefinierte Initialisierungs Aktivitäten für die Anwendungsdomäne ausführen, bevor Sie die <see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />-Methode aufrufen, oder die-Hilfsmethode überhaupt nicht aufrufen.  Beispielsweise können Sie den als <paramref name="securityInfo" />über gebenden Beweis ändern, die Felder des zugeordneten <see cref="T:System.AppDomainSetup" />aktualisieren oder eine beendenden Domäne wieder verwenden.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateDomainHelper">
      <MemberSignature Language="C#" Value="protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.AppDomain CreateDomainHelper(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateDomainHelper (friendlyName As String, securityInfo As Evidence, appDomainInfo As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static AppDomain ^ CreateDomainHelper(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="static member CreateDomainHelper : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain" Usage="System.AppDomainManager.CreateDomainHelper (friendlyName, securityInfo, appDomainInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName">Der angezeigte Name der Domäne.</param>
        <param name="securityInfo">Ein Objekt, das den durch die Sicherheitsrichtlinien zugeordneten Beweis zum Festlegen eines Berechtigungssatzes auf oberster Stapelebene enthält.</param>
        <param name="appDomainInfo">Ein Objekt, das Initialisierungsinformationen für die Anwendungsdomäne enthält.</param>
        <summary>Stellt eine Hilfsmethode zum Erstellen einer Anwendungsdomäne bereit.</summary>
        <returns>Eine neu erstellte Anwendungsdomäne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese geschützte Hilfsmethode behandelt die Erstellung einer neuen Anwendungsdomäne.  
  
 Dieser Anzeige Name, der durch den `friendlyName`-Parameter angegeben wird, kann auf Benutzeroberflächen angezeigt werden, um die Domäne zu identifizieren. Weitere Informationen finden Sie unter den Ausführungen zur Eigenschaft <xref:System.AppDomain.FriendlyName%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="friendlyName" /> ist <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="EntryAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly EntryAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly EntryAssembly" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.EntryAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntryAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ EntryAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryAssembly : System.Reflection.Assembly" Usage="System.AppDomainManager.EntryAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Eintragsassembly für eine Anwendung ab.</summary>
        <value>Die Eintragsassembly für die Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn es sich bei der Anwendung um eine Manifest-aktivierte Anwendung handelt, wird die Eintragsassembly aus dem Anwendungs Manifest bestimmt. Wenn die Anwendung nicht für das Manifest aktiviert ist, ist die Eintragsassembly die ausführbare Prozess Datei in der Standard Anwendungsdomäne. In anderen Anwendungs Domänen ist die Eintrags Assembly die erste ausführbare Datei, die von der <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType>-Methode ausgeführt wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostExecutionContextManager">
      <MemberSignature Language="C#" Value="public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.HostExecutionContextManager HostExecutionContextManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostExecutionContextManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostExecutionContextManager As HostExecutionContextManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Threading::HostExecutionContextManager ^ HostExecutionContextManager { System::Threading::HostExecutionContextManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostExecutionContextManager : System.Threading.HostExecutionContextManager" Usage="System.AppDomainManager.HostExecutionContextManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.HostExecutionContextManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Hostausführungskontext-Manager ab, der den Fluss vom Ausführungskontext verwaltet.</summary>
        <value>Der Hostausführungskontext-Manager.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht es einem Host, eine <xref:System.Threading.HostExecutionContextManager> bereitzustellen, die an den Fluss des Ausführungs Kontexts über asynchrone Aufrufe teilnehmen kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostSecurityManager">
      <MemberSignature Language="C#" Value="public virtual System.Security.HostSecurityManager HostSecurityManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.HostSecurityManager HostSecurityManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.HostSecurityManager" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostSecurityManager As HostSecurityManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::HostSecurityManager ^ HostSecurityManager { System::Security::HostSecurityManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HostSecurityManager : System.Security.HostSecurityManager" Usage="System.AppDomainManager.HostSecurityManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.HostSecurityManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Hostsicherheits-Manager ab, der an Sicherheitsentscheidungen für die Anwendungsdomäne teilnimmt.</summary>
        <value>Der Hostsicherheits-Manager.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ermöglicht einem Host, eine <xref:System.Security.HostSecurityManager> bereitzustellen, die an den Sicherheitsentscheidungen für die Anwendungsdomäne beteiligt ist.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine außer Kraft setzung der <xref:System.AppDomainManager.HostSecurityManager%2A>-Eigenschaft für einen benutzerdefinierten Anwendungs Domänen-Manager. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.AppDomainManager>-Klasse bereitgestellt wird.  
  
 [!code-csharp[System.AppDomainManager#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#3)]
 [!code-vb[System.AppDomainManager#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializationFlags">
      <MemberSignature Language="C#" Value="public AppDomainManagerInitializationOptions InitializationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AppDomainManagerInitializationOptions InitializationFlags" />
      <MemberSignature Language="DocId" Value="P:System.AppDomainManager.InitializationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property InitializationFlags As AppDomainManagerInitializationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainManagerInitializationOptions InitializationFlags { AppDomainManagerInitializationOptions get(); void set(AppDomainManagerInitializationOptions value); };" />
      <MemberSignature Language="F#" Value="member this.InitializationFlags : AppDomainManagerInitializationOptions with get, set" Usage="System.AppDomainManager.InitializationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainManagerInitializationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Initialisierungsflags für benutzerdefinierte Anwendungsdomänen-Manager ab.</summary>
        <value>Eine bitweise Kombination der Enumerationswerte, die die auszuführende Initialisierungsaktion beschreiben. Der Standardwert lautet <see cref="F:System.AppDomainManagerInitializationOptions.None" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeNewDomain">
      <MemberSignature Language="C#" Value="public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeNewDomain(class System.AppDomainSetup appDomainInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub InitializeNewDomain (appDomainInfo As AppDomainSetup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void InitializeNewDomain(AppDomainSetup ^ appDomainInfo);" />
      <MemberSignature Language="F#" Value="abstract member InitializeNewDomain : AppDomainSetup -&gt; unit&#xA;override this.InitializeNewDomain : AppDomainSetup -&gt; unit" Usage="appDomainManager.InitializeNewDomain appDomainInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appDomainInfo" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="appDomainInfo">Ein Objekt, das Initialisierungsinformationen für die Anwendungsdomäne enthält.</param>
        <summary>Initialisiert die neue Anwendungsdomäne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Verwenden Sie diese Methode nicht, um eine Anwendungsdomäne in ASP.net zu initialisieren. In ASP.NET muss die Konfiguration vom Host verarbeitet werden. Wenn Sie diese Methode zum Initialisieren der Anwendungsdomäne verwenden, löst der Host <xref:System.InvalidOperationException> aus, wenn er versucht, die Anwendungsdomäne zu initialisieren. Die Ausnahme Meldung gibt an, dass bereits eine Initialisierung aufgetreten ist.  
  
 Diese Methode wird unmittelbar nach dem-Konstruktor aufgerufen. Der Standard <xref:System.AppDomainManager.InitializeNewDomain%2A>-Implementierung führt keine Aktion aus.  Eine benutzerdefinierte Implementierung kann interne Klassen und Delegaten einrichten, eine Schnittstelle mit der nicht verwalteten Host Schnittstelle einrichten oder Ereignishandler für die neue <xref:System.AppDomain>einrichten.  
  
 Außerdem könnte eine benutzerdefinierte Implementierung für Add-in-Aktivierungen die aktuelle <xref:System.AppDomain> als Ziel Anwendungsdomäne identifizieren.  
  
 Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]können Sie diese Methode verwenden, um die Standard Anwendungsdomäne beim Anwendungsstart zu übernehmen oder um die Sandbox einer neuen Anwendungsdomäne zu ändern. Passen Sie dazu die Eigenschaften <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> und <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> für das <xref:System.Security.Policy.ApplicationTrust>-Objekt an, das der Eigenschaft <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=nameWithType> von `appDomainInfo`zugewiesen ist, bevor Sie die Anwendungsdomäne initialisieren.  
  
> [!NOTE]
>  Nur Assemblys, die `FullTrust`gewährt wurden, z. b. Assemblys im globalen Assemblycache oder als `fullTrustAssemblies` in der <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>-Methode identifiziert, können im <xref:System.AppDomainManager.%23ctor%2A>-Konstruktor und in der <xref:System.AppDomainManager.InitializeNewDomain%2A>-Methode  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine außer Kraft setzung der <xref:System.AppDomainManager.InitializeNewDomain%2A>-Methode für einen benutzerdefinierten Anwendungs Domänen-Manager. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.AppDomainManager>-Klasse bereitgestellt wird.  
  
 [!code-csharp[System.AppDomainManager#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#2)]
 [!code-vb[System.AppDomainManager#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

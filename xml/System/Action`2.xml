<Type Name="Action&lt;T1,T2&gt;" FullName="System.Action&lt;T1,T2&gt;">
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`2&lt;- T1, - T2&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2)(arg1 As T1, arg2 As T2)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="f5d9d-101">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="f5d9d-102">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="f5d9d-103">Der erste Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-103">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="f5d9d-104">Der zweite Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-104">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="f5d9d-105">Kapselt eine Methode, die über zwei Parameter verfügt und keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-105">Encapsulates a method that has two parameters and does not return a value.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5d9d-106">Sie können die <xref:System.Action%602> Delegat, der eine Methode als Parameter übergeben, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-106">You can use the <xref:System.Action%602> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="f5d9d-107">Die gekapselte Methode muss der Methodensignatur entsprechen, die von diesem Delegaten definiert ist.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-107">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="f5d9d-108">Dies bedeutet, dass die gekapselte Methode müssen zwei Parameter, die beide an ihn als Wert übergeben werden, müssen sie keinen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-108">This means that the encapsulated method must have two parameters that are both passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="f5d9d-109">(In c# muss die Methode zurückgeben `void`.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-109">(In C#, the method must return `void`.</span></span> <span data-ttu-id="f5d9d-110">In Visual Basic müssen Sie durch definiert die `Sub`...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="f5d9d-110">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="f5d9d-111">erstellen.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-111">construct.</span></span> <span data-ttu-id="f5d9d-112">Sie können auch eine Methode, die einen Wert zurückgibt, der ignoriert wird, sein.) In der Regel wird eine solche Methode zum Ausführen eines Vorgangs verwendet.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-112">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5d9d-113">Um eine Methode zu verweisen, die über zwei Parameter verfügt und einen Wert zurückgibt, verwenden Sie die generische <xref:System.Func%603> stattdessen delegieren.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-113">To reference a method that has two parameters and returns a value, use the generic <xref:System.Func%603> delegate instead.</span></span>  
  
 <span data-ttu-id="f5d9d-114">Bei Verwendung der <xref:System.Action%602> Delegaten, Sie müssen nicht explizit einen Delegaten definieren, die eine Methode mit zwei Parametern kapselt.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-114">When you use the <xref:System.Action%602> delegate, you do not have to explicitly define a delegate that encapsulates a method with two parameters.</span></span> <span data-ttu-id="f5d9d-115">Der folgende Code deklariert z. B. explizit einen Delegaten, mit dem Namen `ConcatStrings`.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-115">For example, the following code explicitly declares a delegate named `ConcatStrings`.</span></span> <span data-ttu-id="f5d9d-116">Anschließend werden die Delegatinstanz einen Verweis auf eine der beiden Methoden zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-116">It then assigns a reference to either of two methods to its delegate instance.</span></span> <span data-ttu-id="f5d9d-117">Eine Methode werden zwei Zeichenfolgen in die Konsole geschrieben; die zweite zwei Zeichenfolgen in eine Datei geschrieben.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-117">One method writes two strings to the console; the second writes two strings to a file.</span></span>  
  
 [!code-csharp[System.Action~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Delegate.cs#1)]
 [!code-vb[System.Action~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="f5d9d-118">Im folgende Beispiel wird dieser Code vereinfacht, durch die Instanziierung der <xref:System.Action%602> Delegaten explizit einen neuen Delegaten definieren und eine benannte Methode zuweisen.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-118">The following example simplifies this code by instantiating the <xref:System.Action%602> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Action~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Action2.cs#2)]
 [!code-vb[System.Action~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/action2.vb#2)]  
  
 <span data-ttu-id="f5d9d-119">Sie können auch die <xref:System.Action%602> delegieren mit anonymen Methoden in C# geschrieben, wie im folgenden Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-119">You can also use the <xref:System.Action%602> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="f5d9d-120">(Eine Einführung für anonyme Methoden finden Sie unter [anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="f5d9d-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Anon.cs#3)]  
  
 <span data-ttu-id="f5d9d-121">Sie können auch einen Lambda-Ausdruck zum Zuweisen einer <xref:System.Action%602> delegieren Instanz, wie im folgenden Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="f5d9d-121">You can also assign a lambda expression to an <xref:System.Action%602> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="f5d9d-122">(Eine Einführung in Lambda-Ausdrücke finden Sie unter [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="f5d9d-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Lambda.cs#4)]
 [!code-vb[System.Action~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`3" />
  </Docs>
</Type>
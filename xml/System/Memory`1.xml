<Type Name="Memory&lt;T&gt;" FullName="System.Memory&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d857d55efddfd97d8424e1d476e60eabc084c4e0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69419926" /></Metadata><TypeSignature Language="C#" Value="public struct Memory&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Memory`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Memory`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Memory(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Memory" />
  <TypeSignature Language="F#" Value="type Memory&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="b06b0-101">Der Typ der Elemente in der <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-101">The type of items in the <see cref="T:System.Memory`1" />.</span></span></typeparam>
    <summary><span data-ttu-id="b06b0-102">Stellt einen zusammenhängende Bereich des Speichers dar.</span><span class="sxs-lookup"><span data-stu-id="b06b0-102">Represents a contiguous region of memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="b06b0-103">Wie <xref:System.Span%601>stellteinenzusammen hängendenBereichdesSpeichersdar.`Memory<T>`</span><span class="sxs-lookup"><span data-stu-id="b06b0-103">Like <xref:System.Span%601>, `Memory<T>` represents a contiguous region of memory.</span></span> <span data-ttu-id="b06b0-104">Anders <xref:System.Span%601>als `Memory<T>` ist jedoch keine Ref- [Struktur](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types).</span><span class="sxs-lookup"><span data-stu-id="b06b0-104">Unlike <xref:System.Span%601>, however, `Memory<T>` is not a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types).</span></span> <span data-ttu-id="b06b0-105">Dies bedeutet, `Memory<T>` dass auf dem verwalteten Heap platziert werden kann, <xref:System.Span%601> während dies nicht möglich ist.</span><span class="sxs-lookup"><span data-stu-id="b06b0-105">This means that `Memory<T>` can be placed on the managed heap, whereas <xref:System.Span%601> cannot.</span></span> <span data-ttu-id="b06b0-106">Folglich hat die `Memory<T>` Struktur nicht die gleichen Einschränkungen wie eine <xref:System.Span%601> -Instanz.</span><span class="sxs-lookup"><span data-stu-id="b06b0-106">As a result, the `Memory<T>` structure does not have the same restrictions as a <xref:System.Span%601> instance.</span></span> <span data-ttu-id="b06b0-107">Insbesondere:</span><span class="sxs-lookup"><span data-stu-id="b06b0-107">In particular:</span></span>

- <span data-ttu-id="b06b0-108">Sie kann als ein Feld in einer Klasse verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b06b0-108">It can be used as a field in a class.</span></span>

- <span data-ttu-id="b06b0-109">Sie kann über-und `await` - `yield` Grenzen hinweg verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="b06b0-109">It can be used across `await` and `yield` boundaries.</span></span>

<span data-ttu-id="b06b0-110">Zusätzlich zu `Memory<T>`können Sie verwenden <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> , um unveränderlichen oder schreibgeschützten Speicher darzustellen.</span><span class="sxs-lookup"><span data-stu-id="b06b0-110">In addition to `Memory<T>`, you can use <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> to represent immutable or read-only memory.</span></span>

    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="b06b0-111">Das Array, aus dem das <see cref="T:System.Memory`1" />-Objekt erstellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="b06b0-111">The array from which to create the <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="b06b0-112">Erstellt ein neues <see cref="T:System.Memory`1" />-Objekt über das gesamte angegebene Array.</span><span class="sxs-lookup"><span data-stu-id="b06b0-112">Creates a new <see cref="T:System.Memory`1" /> object over the entirety of a specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b06b0-113">`array` <xref:System.Memory%601> Wenn den Wert `default<T>` hat, gibt dieser Konstruktor ein-Objekt mit einem-Wert zurück. `null`</span><span class="sxs-lookup"><span data-stu-id="b06b0-113">If `array` is `null`, this constructor returns a <xref:System.Memory%601> object with a `default<T>` value.</span></span>

      ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="b06b0-114"><paramref name="T" /> ist ein Verweistyp, und <paramref name="array" /> ist kein Array des Typs <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-114"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span>
        
<span data-ttu-id="b06b0-115">- oder -</span><span class="sxs-lookup"><span data-stu-id="b06b0-115">-or-</span></span>

<span data-ttu-id="b06b0-116">Das Array ist <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">kovariant.</see></span><span class="sxs-lookup"><span data-stu-id="b06b0-116">The array is <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">covariant.</see></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="b06b0-117">Das Quellarray.</span><span class="sxs-lookup"><span data-stu-id="b06b0-117">The source array.</span></span></param>
        <param name="start"><span data-ttu-id="b06b0-118">Der Index des ersten Elements, das im neuen <see cref="T:System.Memory`1" />-Element enthalten sein soll.</span><span class="sxs-lookup"><span data-stu-id="b06b0-118">The index of the first element to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <param name="length"><span data-ttu-id="b06b0-119">Die Anzahl von Elementen, die in das neue <see cref="T:System.Memory`1" />-Element eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="b06b0-119">The number of elements to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <summary><span data-ttu-id="b06b0-120">Erstellt ein neues <see cref="T:System.Memory`1" />-Objekt, das eine angegebene Anzahl von Elementen aus einem Array enthält. Dabei wird an einem angegebenen Index begonnen.</span><span class="sxs-lookup"><span data-stu-id="b06b0-120">Creates a new <see cref="T:System.Memory`1" /> object that includes a specified number of elements of an array beginning at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b06b0-121">`array` <xref:System.Memory%601> Wenn den Wert `default<T>` hat, gibt dieser Konstruktor ein-Objekt mit einem-Wert zurück. `null`</span><span class="sxs-lookup"><span data-stu-id="b06b0-121">If `array` is `null`, this constructor returns a  <xref:System.Memory%601> object with a `default<T>` value.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b06b0-122"><paramref name="array" /> ist gleich <see langword="null" />, aber <paramref name="start" /> oder <paramref name="length" /> ist nicht 0 (null).</span><span class="sxs-lookup"><span data-stu-id="b06b0-122"><paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span></span>


<span data-ttu-id="b06b0-123">- oder -</span><span class="sxs-lookup"><span data-stu-id="b06b0-123">-or-</span></span>

<span data-ttu-id="b06b0-124"><paramref name="start" /> liegt außerhalb der Grenzen des Arrays.</span><span class="sxs-lookup"><span data-stu-id="b06b0-124"><paramref name="start" /> is outside the bounds of the array.</span></span>

<span data-ttu-id="b06b0-125">- oder -</span><span class="sxs-lookup"><span data-stu-id="b06b0-125">-or-</span></span>

<span data-ttu-id="b06b0-126"><paramref name="start" /> und <paramref name="length" /> überschreiten die Anzahl von Elementen im Array.</span><span class="sxs-lookup"><span data-stu-id="b06b0-126"><paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="b06b0-127"><paramref name="T" /> ist ein Verweistyp, und <paramref name="array" /> ist kein Array des Typs <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-127"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.CopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Memory&lt;'T&gt; -&gt; unit" Usage="memory.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="b06b0-128">Das <see cref="T:System.Memory`1" />-Zielobjekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-128">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="b06b0-129">Kopiert die Inhalte eines <see cref="T:System.Memory`1" />-Objekts in ein <see cref="T:System.Memory`1" />-Zielobjekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-129">Copies the contents of a <see cref="T:System.Memory`1" /> object into a destination <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b06b0-130">Diese Methode kopiert den gesamten Inhalt der aktuellen <xref:System.Memory%601> Instanz in, auch wenn sich `destination` der Inhalt der aktuellen Instanz und `destination` überlappt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-130">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b06b0-131">Die Länge von <paramref name="destination" /> ist kürzer als die Länge der aktuellen Instanz.</span><span class="sxs-lookup"><span data-stu-id="b06b0-131">The length of <paramref name="destination" /> is less than the length of the current instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Memory`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Memory&lt;T&gt; Empty { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b06b0-132">Gibt ein leeres <see cref="T:System.Memory`1" />-Objekt zurück.</span><span class="sxs-lookup"><span data-stu-id="b06b0-132">Returns an empty <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <value><span data-ttu-id="b06b0-133">Ein leeres-Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-133">An empty object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Memory&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Memory&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="override this.Equals : Memory&lt;'T&gt; -&gt; bool" Usage="memory.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="b06b0-134">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="b06b0-134">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="b06b0-135">Bestimmt, ob das angegebene <see cref="T:System.Memory`1" />-Objekt mit dem aktuellen Objekt identisch ist.</span><span class="sxs-lookup"><span data-stu-id="b06b0-135">Determines whether the specified <see cref="T:System.Memory`1" /> object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="b06b0-136"><see langword="true" />, wenn die angegebene Instanz und <paramref name="other" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-136"><see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b06b0-137">Die beiden Objekte sind gleich, wenn:</span><span class="sxs-lookup"><span data-stu-id="b06b0-137">The two objects are equal if:</span></span>

   - <span data-ttu-id="b06b0-138">`other`ist ein <xref:System.Memory%601> - <xref:System.ReadOnlyMemory%601> oder-Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-138">`other` is a <xref:System.Memory%601> or <xref:System.ReadOnlyMemory%601> object.</span></span>
   
   - <span data-ttu-id="b06b0-139">Beide Objekte zeigen auf dasselbe Array und haben die gleiche Länge.</span><span class="sxs-lookup"><span data-stu-id="b06b0-139">Both objects point to the same array and have the same length.</span></span>

<span data-ttu-id="b06b0-140">Die `Equals(Memory<T>)` -Methode führt einen Test auf Verweis Gleichheit aus; Sie vergleicht nicht die Elemente <xref:System.Memory%601> von auf Gleichheit.</span><span class="sxs-lookup"><span data-stu-id="b06b0-140">The `Equals(Memory<T>)` method performs a test for reference equality; it does not compare the elements of <xref:System.Memory%601> for equality.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="memory.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b06b0-141">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="b06b0-141">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="b06b0-142">Bestimmt, ob das angegebene Objekt mit dem aktuellen Objekt identisch ist.</span><span class="sxs-lookup"><span data-stu-id="b06b0-142">Determines whether the specified object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="b06b0-143"><see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-143"><see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b06b0-144">Zwei <xref:System.Memory%601> Objekte sind gleich, wenn beide Objekte auf dasselbe Array verweisen und die gleiche Länge aufweisen.</span><span class="sxs-lookup"><span data-stu-id="b06b0-144">Two <xref:System.Memory%601> objects are equal if both objects point to the same array and have the same length.</span></span> <span data-ttu-id="b06b0-145">Beachten Sie, dass der Test für Gleichheit nicht überprüft, ob der Inhalt gleich ist.</span><span class="sxs-lookup"><span data-stu-id="b06b0-145">Note that the test for equality does not check whether the contents are equal.</span></span>
   
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="memory.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b06b0-146">Gibt den Hashcode für diese Instanz zurück.</span><span class="sxs-lookup"><span data-stu-id="b06b0-146">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="b06b0-147">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</span><span class="sxs-lookup"><span data-stu-id="b06b0-147">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Memory&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b06b0-148">Gibt an, ob die aktuelle Instanz leer ist.</span><span class="sxs-lookup"><span data-stu-id="b06b0-148">Indicates whether the current instance is empty.</span></span></summary>
        <value><span data-ttu-id="b06b0-149"><see langword="true" />, wenn die aktuelle Instanz leer ist. <see langword="false" />andernfalls.</span><span class="sxs-lookup"><span data-stu-id="b06b0-149"><see langword="true" /> if the current instance is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks><span data-ttu-id="b06b0-150">Ein <see cref="T:System.Memory`1" /> -Objekt ist leer, wenn seine Länge 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="b06b0-150">A <see cref="T:System.Memory`1" /> object is empty if its length is 0.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; this[Range range] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Item(valuetype System.Range)" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Item(System.Range)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(range As Range) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Memory&lt;T&gt; default[Range] { Memory&lt;T&gt; get(Range range); };" />
      <MemberSignature Language="F#" Value="member this.Item(Range) : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Range" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Memory&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b06b0-151">Ruft die Anzahl der Elemente in der aktuellen Instanz ab.</span><span class="sxs-lookup"><span data-stu-id="b06b0-151">Gets the number of items in the current instance.</span></span></summary>
        <value><span data-ttu-id="b06b0-152">Die Anzahl der Elemente in der aktuellen Instanz.</span><span class="sxs-lookup"><span data-stu-id="b06b0-152">The number of items in the current instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment"><span data-ttu-id="b06b0-153">Das zu konvertierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-153">The object to convert.</span></span></param>
        <summary><span data-ttu-id="b06b0-154">Definiert eine implizite Konvertierung eines <see cref="T:System.ArraySegment`1" />-Objekts in ein <see cref="T:System.Memory`1" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-154">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> object to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="b06b0-155">Das konvertierte <see cref="T:System.ArraySegment`1" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-155">The converted <see cref="T:System.ArraySegment`1" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlyMemory&lt;T&gt; (Memory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlyMemory`1&lt;!T&gt; op_Implicit(valuetype System.Memory`1&lt;!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (memory As Memory(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlyMemory&lt;T&gt;(Memory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Memory&lt;'T&gt; -&gt; ReadOnlyMemory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="b06b0-156">Das zu konvertierende Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-156">The object to convert.</span></span></param>
        <summary><span data-ttu-id="b06b0-157">Definiert eine implizite Konvertierung eines <see cref="T:System.Memory`1" />-Objekts in ein <see cref="T:System.ReadOnlyMemory`1" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-157">Defines an implicit conversion of a <see cref="T:System.Memory`1" /> object to a <see cref="T:System.ReadOnlyMemory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="b06b0-158">Das konvertierte Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-158">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(`0[])~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="b06b0-159">Das zu konvertierende Array.</span><span class="sxs-lookup"><span data-stu-id="b06b0-159">The array to convert.</span></span></param>
        <summary><span data-ttu-id="b06b0-160">Definiert eine implizite Konvertierung eines Arrays in ein <see cref="T:System.Memory`1" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-160">Defines an implicit conversion of an array to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="b06b0-161">Das konvertierte Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-161">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public System.Buffers.MemoryHandle Pin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.MemoryHandle Pin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Pin" />
      <MemberSignature Language="VB.NET" Value="Public Function Pin () As MemoryHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Buffers::MemoryHandle Pin();" />
      <MemberSignature Language="F#" Value="member this.Pin : unit -&gt; System.Buffers.MemoryHandle" Usage="memory.Pin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b06b0-162">Erstellt ein Handle für das <see cref="T:System.Memory`1" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-162">Creates a handle for the <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="b06b0-163">Ein Handle für das <see cref="T:System.Memory`1" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-163">A handle for the <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

## <a name="see-also"></a><span data-ttu-id="b06b0-164">Siehe auch</span><span class="sxs-lookup"><span data-stu-id="b06b0-164">See also</span></span>

<span data-ttu-id="b06b0-165">Der Garbage Collector verschiebt den Speicher nicht, bis das zurück <xref:System.Buffers.MemoryHandle> gegebene Objekt verworfen wird.</span><span class="sxs-lookup"><span data-stu-id="b06b0-165">The garbage collector will not move the memory until the returned <xref:System.Buffers.MemoryHandle> object is disposed.</span></span> <span data-ttu-id="b06b0-166">Auf diese Weise können Sie die Adresse des Speichers abrufen und verwenden.</span><span class="sxs-lookup"><span data-stu-id="b06b0-166">This enables you to retrieve and use the memory's address.</span></span>

<xref:System.Type.IsPrimitive> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b06b0-167">Eine Instanz mit nicht primitiven (nicht blitfähigen) Mitgliedern kann nicht fixiert werden.</span><span class="sxs-lookup"><span data-stu-id="b06b0-167">An instance with non-primitive (non-blittable) members cannot be pinned.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Index)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndex As Index) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(Index startIndex);" />
      <MemberSignature Language="F#" Value="member this.Slice : Index -&gt; Memory&lt;'T&gt;" Usage="memory.Slice startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Index" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="startIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="b06b0-168">Der Index, an dem der Slice beginnen soll.</span><span class="sxs-lookup"><span data-stu-id="b06b0-168">The index at which to begin the slice.</span></span></param>
        <summary><span data-ttu-id="b06b0-169">Bildet einen Slice aus dem aktuellen Speicher, das an einem angegebenen Index beginnt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-169">Forms a slice out of the current memory that begins at a specified index.</span></span></summary>
        <returns><span data-ttu-id="b06b0-170">Ein Objekt, das alle Elemente der aktuellen Instanz von <paramref name="start" /> bis zum Ende der Instanz enthält.</span><span class="sxs-lookup"><span data-stu-id="b06b0-170">An object that contains all elements of the current instance from <paramref name="start" /> to the end of the instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b06b0-171"><paramref name="start" /> ist kleiner als 0 (null) oder größer als <see cref="P:System.Memory`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-171"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(Range range);" />
      <MemberSignature Language="F#" Value="member this.Slice : Range -&gt; Memory&lt;'T&gt;" Usage="memory.Slice range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Range" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="b06b0-172">Der Index, an dem der Slice beginnen soll.</span><span class="sxs-lookup"><span data-stu-id="b06b0-172">The index at which to begin the slice.</span></span></param>
        <param name="length"><span data-ttu-id="b06b0-173">Die Anzahl von Elementen, die in den Slice eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="b06b0-173">The number of elements to include in the slice.</span></span></param>
        <summary><span data-ttu-id="b06b0-174">Bildet einen Slice aus dem aktuellen Speicher. Dabei wird an einem angegebenen Index für eine angegebene Länge begonnen.</span><span class="sxs-lookup"><span data-stu-id="b06b0-174">Forms a slice out of the current memory starting at a specified index for a specified length.</span></span></summary>
        <returns><span data-ttu-id="b06b0-175">Ein Objekt, das <paramref name="length" />-Elemente aus der aktuellen Instanz enthält, die bei <paramref name="start" /> beginnen.</span><span class="sxs-lookup"><span data-stu-id="b06b0-175">An object that contains <paramref name="length" /> elements from the current instance starting at <paramref name="start" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b06b0-176"><paramref name="start" /> ist kleiner als 0 (null) oder größer als <see cref="P:System.Memory`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-176"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Memory`1.Length" />.</span></span>

<span data-ttu-id="b06b0-177">- oder -</span><span class="sxs-lookup"><span data-stu-id="b06b0-177">-or-</span></span>

<span data-ttu-id="b06b0-178"><paramref name="length" /> ist größer als <see cref="P:System.Memory`1.Length" /> - <paramref name="start" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-178"><paramref name="length" /> is greater than <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Span`1&lt;!T&gt; Span" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Span" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Span As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Span&lt;T&gt; Span { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Span : Span&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b06b0-179">Gibt eine Span-Element der aktuellen Instanz zurück.</span><span class="sxs-lookup"><span data-stu-id="b06b0-179">Returns a span from the current instance.</span></span></summary>
        <value><span data-ttu-id="b06b0-180">Eine Spanne, die aus dem <see cref="T:System.Memory`1" /> aktuellen-Objekt erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="b06b0-180">A span created from the current <see cref="T:System.Memory`1" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="memory.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b06b0-181">Kopiert die Inhalte aus dem Speicher in ein neues Array.</span><span class="sxs-lookup"><span data-stu-id="b06b0-181">Copies the contents from the memory into a new array.</span></span></summary>
        <returns><span data-ttu-id="b06b0-182">Ein Array das die Elemente des aktuellen Speichers enthält.</span><span class="sxs-lookup"><span data-stu-id="b06b0-182">An array containing the elements in the current memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b06b0-183">Da ein Aufrufe der `ToArray` -Methode eine Heap Zuordnung ausführt, sollte Sie im allgemeinen vermieden werden.</span><span class="sxs-lookup"><span data-stu-id="b06b0-183">Because a call to the `ToArray` method performs a heap allocation, it should generally be avoided.</span></span> <span data-ttu-id="b06b0-184">Es ist jedoch manchmal notwendig, die Funktionalität zu nutzen, die nur für Arrays verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="b06b0-184">However, it is sometimes necessary to take advantage of functionality that is only available for arrays.</span></span>

<span data-ttu-id="b06b0-185">Jeder Rückruf der `ToArray` -Methode gibt ein neues Array zurück.</span><span class="sxs-lookup"><span data-stu-id="b06b0-185">Each call to the `ToArray` method returns a new array.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="memory.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b06b0-186">Gibt die Zeichenfolgendarstellung dieses <see cref="T:System.Memory`1" />-Objekts zurück.</span><span class="sxs-lookup"><span data-stu-id="b06b0-186">Returns the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="b06b0-187">die Zeichenfolgendarstellung dieses <see cref="T:System.Memory`1" />-Objekts.</span><span class="sxs-lookup"><span data-stu-id="b06b0-187">the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b06b0-188">Bei einem `Memory<Char>`gibt die `ToString` Methode eine <xref:System.String> zurück, die die Zeichen enthält, auf die <xref:System.Memory%601>von verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="b06b0-188">For a `Memory<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the <xref:System.Memory%601>.</span></span> <span data-ttu-id="b06b0-189">Andernfalls wird ein <xref:System.String> -Wert mit dem Namen des Typs und der Anzahl der in <xref:System.Memory%601> enthaltenen Elemente zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="b06b0-189">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the <xref:System.Memory%601> contains.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.TryCopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Memory&lt;'T&gt; -&gt; bool" Usage="memory.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="b06b0-190">Das <see cref="T:System.Memory`1" />-Zielobjekt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-190">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="b06b0-191">Kopiert die Inhalte des Speichers in eine Ziel-<see cref="T:System.Memory`1" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="b06b0-191">Copies the contents of the memory into a destination <see cref="T:System.Memory`1" /> instance.</span></span></summary>
        <returns><span data-ttu-id="b06b0-192"><see langword="true" />, wenn der Kopiervorgang erfolgreich war; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b06b0-192"><see langword="true" /> if the copy operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="b06b0-193">Diese Methode kopiert den gesamten Inhalt der aktuellen <xref:System.Memory%601> Instanz in, auch wenn sich `destination` der Inhalt der aktuellen Instanz und `destination` überlappt.</span><span class="sxs-lookup"><span data-stu-id="b06b0-193">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

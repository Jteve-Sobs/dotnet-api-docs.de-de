<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eac7efc9b74e4b2e6ff96479a1c5a294be852c3c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30731114" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine beliebige Zeitzone der Erde dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Zeitzone ist eine geografische Region, in der die gleiche Zeit verwendet wird.  
  
 Die <xref:System.TimeZoneInfo> Klasse bietet erhebliche Verbesserungen gegenüber den <xref:System.TimeZone> Klasse, die nur eingeschränkten Funktionalität bereitstellt.  
  
 Die <xref:System.TimeZone> Klasse erkennt nur die lokale Zeitzone und Uhrzeiten zwischen Coordinated Universal Time (UTC) und lokale Zeit konvertieren können. Ein <xref:System.TimeZoneInfo> Objekt kann eine beliebige Zeitzone und Methoden für das Darstellen der <xref:System.TimeZoneInfo> Klasse kann verwendet werden, um die Zeit in einer Zeitzone in die entsprechende Zeit in einer beliebigen anderen Zeitzone zu konvertieren. Die Mitglieder der <xref:System.TimeZoneInfo> Klasse unterstützt die folgenden Vorgänge:  
  
-   Abrufen einer Zeitzone, die durch das Betriebssystem bereits definiert ist.  
  
-   Auflisten von Zeitzonen, die auf einem System verfügbar sind.  
  
-   Konvertieren von Uhrzeiten zwischen verschiedenen Zeitzonen.  
  
-   Erstellen einer neuen Zeitzone, die vom Betriebssystem noch nicht definiert ist.  
  
-   Serialisieren eine Zeitzone für den späteren Abruf.  
  
> [!NOTE]
>  Eine Instanz von der <xref:System.TimeZoneInfo> -Klasse unveränderlich ist. Sobald ein Objekt instanziiert wurde, können seine Werte geändert werden.  
  
 Sie können nicht instanziiert ein <xref:System.TimeZoneInfo> -Objekt unter Verwendung der `new` Schlüsselwort. Stattdessen müssen Sie eine Aufrufen der statischen Elemente der <xref:System.TimeZoneInfo> Klasse, die in der folgenden Tabelle gezeigt.  
  
|Name des statischen Members|Beschreibung |  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>-Methode|Erstellt eine benutzerdefinierte Zeitzone aus der Anwendung bereitgestellten Daten.|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>-Methode|Instanziiert eine Zeitzone, die in der systemregistrierung auf Grundlage der Zone definiert.|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A>-Methode|Deserialisiert einen Zeichenfolgenwert ein, um eine zuvor serialisierte Neuerstellen <xref:System.TimeZoneInfo> Objekt.|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>-Methode|Gibt ein aufzählbares Element <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> der <xref:System.TimeZoneInfo> Objekte, die alle Zeitzonen darstellt, die auf dem lokalen System verfügbar sind.|  
|<xref:System.TimeZoneInfo.Local%2A>-Eigenschaft|Instanziiert eine <xref:System.TimeZoneInfo> -Objekt, das die lokale Zeitzone darstellt.|  
|<xref:System.TimeZoneInfo.Utc%2A>-Eigenschaft|Instanziiert eine <xref:System.TimeZoneInfo> Objekt, das die UTC-Zone darstellt.|  
  
 Sie können die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode, um eine Zeitzone erstellen, die nicht in der Registrierung des lokalen Systems definiert ist. Anschließend können Sie die <xref:System.TimeZoneInfo.ToSerializedString%2A> Eigenschaft, um die Zeitzone Objektinformationen als eine Zeichenfolge zu speichern, die sich in irgendeiner Form gespeichert werden können, die an die Anwendung zugegriffen werden kann. Können Sie die <xref:System.TimeZoneInfo.FromSerializedString%2A> Methode zum Konvertieren einer serialisierten Zeichenfolge zurück in ein <xref:System.TimeZoneInfo> Objekt.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeitunterschied zwischen der Standardzeit der aktuellen Zeitzone und der Coordinated Universal Time (UTC) ab.</summary>
        <value>Ein Objekt, das den Zeitunterschied zwischen der Standardzeit der aktuellen Zeitzone und der Coordinated Universal Time (UTC) angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeitspanne, die zurückgegeben werden, indem Sie die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft kann von 14 Stunden (bei einer Zeitzone 14 Stunden vor Coordinated Universal Time (UTC)) und-14 Stunden (für eine Zeitzone, die 14 Stunden nach UTC) reichen. Zeitzonen vor UTC haben einen positiven Offset; Zeitzonen hinter UTC haben einen negativen Offset.  
  
 Die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Wert wird als eine ganze Zahl von Minuten dargestellt. Eine Anzahl von Minuten darf nicht enthalten.  
  
> [!NOTE]
>  Da <xref:System.TimeZoneInfo.BaseUtcOffset%2A> ist eine Eigenschaft der <xref:System.TimeZoneInfo> Objekt statt über das <xref:System.TimeZoneInfo.AdjustmentRule> -Objekt, das <xref:System.TimeZoneInfo> Klasse gilt einen einzelnen Offset von UTC für alle der Anpassungsregeln einer Zeitzone. Um eine Zeitzone wiederzugeben, sein Offset von UTC geändert wurde, müssen Sie erstellen eine neue Zeitzone mit dem <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode.  
  
 Die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft unterscheidet sich von der <xref:System.TimeZoneInfo.GetUtcOffset%2A> Methode auf folgende Weise:  
  
-   Die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft gibt die Differenz zwischen UTC und die Zeitzone; die <xref:System.TimeZoneInfo.GetUtcOffset%2A> Methode gibt die Differenz zwischen UTC und die Zeitzone zu einem bestimmten Zeitpunkt in Zeit zurück.  
  
-   Die <xref:System.TimeZoneInfo.GetUtcOffset%2A> -Methode stellt die Anwendung von Anpassungsregeln auf die Zeitzone; die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft nicht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft, um den Unterschied zwischen der lokalen Uhrzeit und der Coordinated Universal Time (UTC) anzuzeigen.  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht zwischengespeicherte Zeitzonendaten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwischengespeicherte Zeitzonendaten enthält Daten auf der lokalen Zeitzone, die Zone (Coordinated Universal Time, UTC) und Zeitzonen, die abgerufen werden, indem Sie Methoden wie z. B. <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> und <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>.  
  
 Rufen Sie möglicherweise die <xref:System.TimeZoneInfo.ClearCachedData%2A> Methode, um den Arbeitsspeicher zu reduzieren gewidmet Cache der Anwendung, der Informationen zur Zeitzone oder die Tatsache widerzuspiegeln, die Zeitzone des lokalen Systems geändert hat.  
  
 Das Speichern von Verweisen auf die lokale und UTC-Zeitzone wird nicht empfohlen. Nach dem Aufruf der <xref:System.TimeZoneInfo.ClearCachedData%2A> -Methode, diese Objektvariablen nicht definiert <xref:System.TimeZoneInfo> Objekte, die Verweise auf nicht mehr sind <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Beispielsweise in den folgenden Code, der zweite Aufruf von der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> -Methode löst eine <xref:System.ArgumentException> da die `local` Variable ist nicht mehr als gleich betrachtet <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <c>dateTime</c> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> Methode gilt Anpassungsregeln faktisch in die `destinationTimeZone` Zeitzone.  
  
 Diese Überladung der der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> Methode bestimmt die Quellzeitzone aus dem Wert der `dateTime` des Parameters <xref:System.DateTime.Kind%2A> Eigenschaft, wie in der folgenden Tabelle gezeigt.  
  
|Kind-Eigenschaft-Wert|Quellzeitzone|Verhalten der Methode|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konvertiert die Ortszeit in die Zeit in `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konvertiert Coordinated Universal Time (UTC) in die Zeit in `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Davon ausgegangen, dass <xref:System.TimeZoneInfo.Local%2A>.|Konvertiert die Ortszeit in die Zeit in `destinationTimeZone`.|  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, wie in der folgenden Tabelle gezeigt.  
  
|Bedingung|Kind-Eigenschaft-Wert zurückgegeben|  
|---------------|----------------------------------|  
|`destinationTimeZone` ist <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` ist <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Alle anderen Datums-und Uhrzeitwerte und Ziel-Zeitzonen.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert, der die `dateTime` -Parameter eine mehrdeutige Ortszeit ist, wird er als Standardzeit interpretiert. Wenn die `dateTime` Parameter ist eine ungültige Ortszeit, löst diese Methode eine <xref:System.ArgumentException>.  
  
 Wenn die Konvertierung von `dateTime` führt zu einem Datum und Uhrzeit-Wert, der älter ist als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>zugeordnet.  
  
 Sie können auch die zu oder von UTC konvertieren, durch Aufrufen der <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> und <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> Methoden.  
  
   
  
## Examples  
 Das folgende Beispiel konvertiert ein Array von Datums-und Uhrzeitwerte UTC-Zeiten in der Eastern Time Zone für die USA und Kanada. Es zeigt, dass der Quellzeitzone hängt die <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> -Eigenschaft der Quelle <xref:System.DateTime> Wert. Es veranschaulicht auch, dass die <xref:System.TimeZoneInfo.ConvertTime%2A> Methode nimmt zeitzonenanpassungen berücksichtigt, da die Anpassung der Zeitzone in der Quell- und Zielservern Zeitzonen um 2:00 Uhr auftritt auf 7 November 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Wert des <paramref name="dateTime" />-Parameters, der eine ungültige Zeit darstellt.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert des <paramref name="destinationTimeZone" />-Parameters ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, bei der Konvertierung zu interpretieren, erkennt diese Methode nur die aktuelle Anpassungsregel <paramref name="dateTime" /> als lokale Zeit behandelt wird oder wenn <paramref name="destinationTimeZone" /> ist <see cref="P:System.TimeZoneInfo.Local" />. Daher kann die Methode nicht korrekt konvertiert werden Zeiten für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <c>dateTime</c> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> Methode gilt Anpassungsregeln faktisch in die `destinationTimeZone` Zeitzone.  
  
 Diese Überladung unterscheidet sich von der anderen Überladungen der <xref:System.TimeZoneInfo.ConvertTime%2A> Methode durch das akzeptieren einen <xref:System.DateTimeOffset> Wert als ersten Parameter. Hierdurch wird das Datum und die Uhrzeit als Offset von Coordinated Universal Time (UTC) statt als Datum und Uhrzeit in einer bestimmten Zeitzone. Daher die `dateTimeOffset` Parameter nicht darstellen kann entweder eine mehrdeutige Zeit oder eine ungültige Zeit.  
  
 Beim Konvertieren der `dateTimeOffset` Wert in die Zeit in der Zielzeitzone, die diese Methode berücksichtigt alle Anpassungsregeln.  
  
 Wenn die Konvertierung von `dateTimeOffset` führt zu einem Datum und Uhrzeit-Wert, der älter ist als <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>zugeordnet.  
  
   
  
## Examples  
 Das folgende Beispiel konvertiert ein Array von <xref:System.DateTimeOffset> Werte UTC-Zeiten in der Eastern Time Zone für die USA und Kanada. Es wird veranschaulicht, dass die <xref:System.TimeZoneInfo.ConvertTime%2A> Methode nimmt zeitzonenanpassungen berücksichtigt, da die Anpassung der Zeitzone in der Quell- und Zielservern Zeitzonen um 2:00 Uhr auftritt auf 7 November 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert des <paramref name="destinationTimeZone" />-Parameters ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die diese Methode nur die aktuelle Anpassungsregel für die zeitzonenkonvertierung gilt, wenn <paramref name="dateTimeOffset" /> als lokale Zeit behandelt wird oder wenn <paramref name="destinationTimeZone" /> ist <see cref="P:System.TimeZoneInfo.Local" />. Daher kann die Methode nicht korrekt konvertiert werden Zeiten für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZone">Die Zeitzone von <c>dateTime</c>.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <c>dateTime</c> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit aus einer Zeitzone in ein andere.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone, die dem <paramref name="dateTime" />-Parameter in der Quellzeitzone entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung der <xref:System.TimeZoneInfo.ConvertTime%2A> Methode gilt Anpassungsregeln faktisch in die `destinationTimeZone` Zeitzone.  
  
 Der Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft von der `dateTime` Parameter entsprechen muss die `sourceTimeZone` Parameter, wie die folgende Tabelle zeigt.  
  
|DateTime.Kind-Wert|sourceTimeZone value|Verhalten der Methode|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist gleich <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Konvertiert `dateTime` auf die Zeit der Zielzeitzone.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist nicht gleich <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist gleich <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Konvertiert `dateTime` auf die Zeit der Zielzeitzone.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist nicht gleich <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Alle.|Konvertiert `dateTime` auf die Zeit der Zielzeitzone.|  
  
 Sie können auch die zu oder von der koordinierten Weltzeit (UTC) konvertieren, durch Aufrufen der <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> und <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> Methoden.  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, wie in der folgenden Tabelle gezeigt.  
  
|Bedingung|Kind-Eigenschaft-Wert zurückgegeben|  
|---------------|----------------------------------|  
|Das `destinationTimeZone`-Argument lautet <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Das `destinationTimeZone`-Argument lautet <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Alle anderen Datums- und Time-Werten, Zeitzonen für die Quelle und Zielzeitzonen.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert, der die `dateTime` -Parameter eine mehrdeutige Zeit in der Quellzeitzone ist, wird er als Standardzeit interpretiert. Wenn die `dateTime` Parameter ist eine ungültige Zeit in der Quellzeitzone, löst diese Methode eine <xref:System.ArgumentException>.  
  
 Wenn die Konvertierung von `dateTime` führt zu einem Datum und Uhrzeit-Wert, der älter ist als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>zugeordnet.  
  
 Die <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> -Methode löst eine <xref:System.ArgumentException> Ausnahme wenn der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Eigenschaft von der `dateTime` Argument ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> aber die `sourceTimeZone` Argument ist kein <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Um zu bestimmen, ob der Quellzeitzone der lokalen Zeitzone oder die Coordinated Universal Time Zone ist, überprüft die Methode auf Verweisgleichheit statt Wertgleichheit mit der <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> Methode. Beachten Sie, dass <xref:System.TimeZoneInfo> Objekte, die die lokale Zeitzone darstellen und abgerufen, die durch Aufrufen, der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode keine Verweisgleichheit mit <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Darüber hinaus <xref:System.TimeZoneInfo> Objekte, die die lokale oder Coordinated Universal Time Zone darstellen und, werden abgerufen, indem Sie die zurückgegebene Auflistung durchlaufen, die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Methode keine Verweisgleichheit mit <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Als Alternative können Sie erreichen die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> -Methode zum Konvertieren von Hawaii Normalzeit in die Ortszeit.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters ist <see cref="F:System.DateTimeKind.Local" />, aber der <paramref name="sourceTimeZone" />-Parameter entspricht nicht <see cref="F:System.DateTimeKind.Local" />.  
  
 - oder -   
  
 Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters ist <see cref="F:System.DateTimeKind.Utc" />, aber der <paramref name="sourceTimeZone" />-Parameter entspricht nicht <see cref="P:System.TimeZoneInfo.Utc" />.  
  
 - oder -   
  
 Der <paramref name="dateTime" />-Parameter gibt eine ungültige Zeit an (d. h. er stellt eine Zeit dar, die aufgrund der Anpassungsregeln einer Zeitzone nicht vorhanden ist).</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="sourceTimeZone" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="destinationTimeZone" />-Parameter ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, bei der Konvertierung zu interpretieren, gilt diese Methode nur die aktuelle Anpassungsregel <paramref name="dateTime" /> wird als lokale Zeit, behandelt, wenn <paramref name="sourceTimeZone" /> ist <see cref="P:System.TimeZoneInfo.Local" />, oder wenn <paramref name="destinationTimeZone" /> ist <see cref="P:System.TimeZoneInfo.Local" />. Daher kann die Methode nicht korrekt konvertiert werden Zeiten für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert eine Zeit auf Grundlage eines Zeitzonenbezeichners in die Zeit in einer anderen Zeitzone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage des Bezeichners der Zeitzone in die Zeit in einer anderen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung der <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> Methode gilt Anpassungsregeln faktisch in die `destinationTimeZoneId` Zeitzone.  
  
 Diese Überladung ist größtenteils identisch mit dem Aufruf der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> -Methode, mit dem Unterschied, dass Sie die Zielzeitzone durch seinen Bezeichner und nicht durch einen Objektverweis angeben können. Diese Methode ist besonders hilfreich, wenn eine Zeitzone konvertieren, ohne Zeitzone-Objekt, das es entspricht, abrufen müssen und Sie müssen nicht wissen, ob die konvertierte Zeit Standard- oder Sommerzeit ist.  
  
 Die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> Methode bestimmt die Quellzeitzone aus dem Wert der `dateTime` des Parameters <xref:System.DateTime.Kind%2A> Eigenschaft, wie in der folgenden Tabelle gezeigt.  
  
|Kind-Eigenschaft-Wert|Quellzeitzone|Verhalten der Methode|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konvertiert die Ortszeit in die Zeit in `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konvertiert Coordinated Universal Time (UTC) in die Zeit in `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Davon ausgegangen, dass <xref:System.TimeZoneInfo.Local%2A>.|Konvertiert die Ortszeit in die Zeit in `destinationTimeZone`.|  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, wie in der folgenden Tabelle gezeigt.  
  
|Bedingung|Kind-Eigenschaft-Wert zurückgegeben|  
|---------------|----------------------------------|  
|`destinationTimeZone` ist `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Jeder andere `destinationTimeZone` Wert.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert, der die `dateTime` -Parameter eine mehrdeutige Ortszeit ist, wird er als Standardzeit interpretiert. Wenn die `dateTime` Parameter ist eine ungültige Ortszeit, löst diese Methode eine <xref:System.ArgumentException>.  
  
 Wenn die Konvertierung von `dateTime` führt zu einem Datum und Uhrzeit-Wert, der älter ist als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>zugeordnet.  
  
 Diese Methode ruft die Zeitzone, deren Bezeichner, indem angegeben wird, die `destinationTimeZoneId` Parameter aus der Registrierung. Es kann nicht abgerufen werden eine Zeitzone-Objekt, das erstellt wird, mithilfe der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode. Die `destinationTimeZoneId` Parameter muss entspricht exakt der Zeitzone Registrierungsschlüssel lang, aber nicht in der Groß-/Kleinschreibung für eine erfolgreiche Übereinstimmung vorliegt; d. h. beim Vergleich von `destinationTimeZoneId` Bezeichner mit Zeitzone wird Groß-/Kleinschreibung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage des Bezeichners der Zeitzone in die Zeit in einer anderen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung der <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> Methode gilt Anpassungsregeln faktisch in die `destinationTimeZoneId` Zeitzone.  
  
 Diese Überladung entspricht dem Aufrufen der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> -Methode, mit dem Unterschied, dass Sie die Zielzeitzone durch seinen Bezeichner und nicht durch einen Objektverweis angeben können. Diese Methode ist besonders hilfreich, wenn eine Zeitzone konvertieren, ohne Zeitzone-Objekt, das es entspricht, abrufen müssen und Sie müssen nicht wissen, ob die konvertierte Zeit Standard- oder Sommerzeit ist.  
  
 Da die `dateTimeOffset` Parameter stellt ein Datum und Zeit zusammen mit diesem Zeitpunkt den offset von Coordinated Universal Time (UTC), kann er keine mehrdeutige Zeitangabe oder eine ungültige Zeit darstellen.  
  
 Diese Methode ruft die Zeitzone, deren Bezeichner, indem angegeben wird, die `destinationTimeZoneId` Parameter aus der Registrierung. Es kann nicht abgerufen werden eine Zeitzone-Objekt, das erstellt wird, mithilfe der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode. Die `destinationTimeZoneId` Parameter muss entspricht exakt der Zeitzone Registrierungsschlüssel lang, aber nicht in der Groß-/Kleinschreibung für eine erfolgreiche Übereinstimmung vorliegt; d. h. beim Vergleich von `destinationTimeZoneId` Bezeichner mit Zeitzone wird Groß-/Kleinschreibung.  
  
 Beim Konvertieren der `dateTimeOffset` Wert in die Zeit in der Zielzeitzone, die Methode berücksichtigt alle Anpassungsregeln.  
  
 Wenn die Konvertierung von `dateTimeOffset` führt zu einem Datum und Uhrzeit-Wert, der älter ist als <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>zugeordnet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZoneId">Der Bezeichner der Quellzeitzone.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage von Zeitzonenbezeichnern von einer Zeitzone in eine andere.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone, die dem <paramref name="dateTime" />-Parameter in der Quellzeitzone entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung der <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> Methode gilt Anpassungsregeln faktisch in die `destinationTimeZoneId` Zeitzone.  
  
 Zwar ähnlich wie die <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> -Methode, die Sie verwenden können <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> an Quell- und Zielschemas Zeitzonen, die mit ihren Bezeichnern anstelle von ihren <xref:System.TimeZoneInfo> Objekte. Diese Methode ist besonders hilfreich, wenn eine Zeitzone konvertieren, ohne Zeitzone-Objekt, das es entspricht, abrufen müssen und Sie müssen nicht wissen, ob die konvertierte Zeit Standard- oder Sommerzeit ist.  
  
 Diese Methode ruft die Zeitzonen, deren Bezeichner sind, die `sourceTimeZoneId` und `destinationTimeZoneId` Parameter aus der Registrierung. Es kann nicht abgerufen werden Zeitzonenobjekte, die erstellt werden, mithilfe der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode.  
  
 Der Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft von der `dateTime` Parameter entsprechen muss die `sourceTimeZoneId` Parameter, wie die folgende Tabelle zeigt.  
  
|DateTime.Kind-Wert|sourceTimeZone value|Verhalten der Methode|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist gleich `TimeZoneInfo.Utc.Id`.|Konvertiert `dateTime` auf die Zeit der Zielzeitzone.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist nicht gleich `TimeZoneInfo.Utc.Id`.|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist gleich `TimeZoneInfo.Local.Id`.|Konvertiert `dateTime` auf die Zeit der Zielzeitzone.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist nicht gleich `TimeZoneInfo.Local.Id`.|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Alle.|Konvertiert `dateTime` auf die Zeit der Zielzeitzone.|  
  
 Daran, dass sie Aufrufe benötigt die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode, die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> Methode führt eine Suche Groß-/Kleinschreibung, um die Zeitzonen zu suchen, die entsprechen `sourceTimeZoneId` und `destinationTimeZoneId`.  
  
 Wenn der Wert, der die `dateTime` -Parameter eine mehrdeutige Zeit in der Quellzeitzone ist, wird er als Standardzeit interpretiert. Wenn die `dateTime` Parameter ist eine ungültige Zeit in der Quellzeitzone, löst diese Methode eine <xref:System.ArgumentException>.  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, um <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , wenn die Zielzeitzone Coordinated Universal Time (UTC) ist, in diesem Fall festgelegt ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> Methode, um die Zeit, die entspricht von der lokalen Systemzeit in acht Städten weltweit anzuzeigen.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters entspricht nicht der Quellzeitzone.  
  
 - oder -   
  
 <paramref name="dateTime" /> ist eine ungültige Zeit in der Quellzeitzone.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZoneId" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die Zeitzonenbezeichner wurden gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer hat nicht die Berechtigungen, die dazu erforderlich sind, aus den Registrierungsschlüsseln zu lesen, die Zeitzonendaten enthalten.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="sourceTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.  
  
 - oder -   
  
 Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Die Coordinated Universal Time (UTC).</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <c>dateTime</c> konvertiert werden soll.</param>
        <summary>Konvertiert eine Coordinated Universal Time (UTC) in die Zeit in einer angegebenen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone. Die <see cref="P:System.DateTime.Kind" />-Eigenschaft ist <see cref="F:System.DateTimeKind.Utc" />, wenn <paramref name="destinationTimeZone" /> den Wert <see cref="P:System.TimeZoneInfo.Utc" /> hat, andernfalls hat die <see cref="P:System.DateTime.Kind" />-Eigenschaft den Wert <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung der <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> Methode gilt Anpassungsregeln faktisch in die `destinationTimeZone` Zeitzone.  
  
 Das genaue Verhalten dieser Methode hängt vom Wert von der <xref:System.DateTime.Kind%2A> Eigenschaft von der `dateTime` Parameter, wie die folgende Tabelle zeigt.  
  
|DateTime.Kind-Eigenschaft|Umwandeln|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert von Coordinated Universal Time (UTC).|  
  
 Wenn die Konvertierung von `dateTime` führt zu einem Datum und Uhrzeit-Wert, der älter ist als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>zugeordnet.  
  
   
  
## Examples  
 Das folgende Beispiel konvertiert Coordinated Universal Time (UTC) in Central Zeit.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft von <paramref name="dateTime" /> ist <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die diese Methode nur die aktuelle Anpassungsregel für die zeitzonenkonvertierung gilt, wenn <paramref name="destinationTimeZone" /> ist <see cref="P:System.TimeZoneInfo.Local" />. Daher kann die Methode nicht korrekt konvertiert werden Zeiten für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert ein Datum und eine Uhrzeit in Coordinated Universal Time (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <summary>Konvertiert das angegebene Datum und die Uhrzeit in Coordinated Universal Time (UTC).</summary>
        <returns>Die Coordinated Universal Time (UTC), die dem <paramref name="dateTime" />-Parameter entspricht. Die <see cref="T:System.DateTime" />-Eigenschaft des <see cref="P:System.DateTime.Kind" />-Werts ist immer auf <see cref="F:System.DateTimeKind.Utc" /> festgelegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der tatsächlich ausgeführte Konvertierung hängt vom Wert von der <xref:System.DateTime.Kind%2A> Eigenschaft von der `dateTime` Parameter, wie die folgende Tabelle zeigt.  
  
|DateTime.Kind-Eigenschaft|Umwandeln|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Konvertiert von der Ortszeit, koordinierter Weltzeit (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Geht davon aus `dateTime` Ortszeit ist und von der Ortszeit in UTC konvertiert.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Gibt `dateTime` unverändert.|  
  
 Wenn `dateTime` entspricht in eine mehrdeutige Ortszeit diese Methode wird davon ausgegangen, dass es sich um standardmäßige Ortszeit ist. Wenn `dateTime` entspricht einer ungültigen Ortszeit, löst die Methode eine <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Wenn der aktuelle Computer den lokalen enthält Zeitzone mehrere Anpassungsregeln dieser Überladung von der <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> Methodenrückgabewert Ergebnisse, die von abweichen der <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> und <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> Methoden. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> Wendet die aktuelle Anpassungsregel auf immer zeitzonenkonvertierung, fest, ob `dateTime` innerhalb seines Datumsbereichs liegt. Und bei der Ausführung an [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> gilt auch die aktuellen Anpassungsregel Zeitzone-Konvertierung, und zwar unabhängig davon, ob `dateTime` innerhalb seines Datumsbereichs liegt.  
  
 Wenn die UTC-Entsprechung des `dateTime` liegt vor <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder höher, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue> oder <xref:System.DateTime.MaxValue>zugeordnet.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Konvertierung von Zeitwerte, deren <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, und <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>zugeordnet. Darüber hinaus veranschaulicht er die Konvertierung von mehrdeutigen und ungültigen Zeiten.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> gibt <see langword="true" /> zurück.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die diese Methode gilt nur die aktuelle Anpassungsregel für die Konvertierung der Zeitzone. Daher kann die Methode nicht korrekt konvertiert werden Zeiten für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZone">Die Zeitzone von <c>dateTime</c>.</param>
        <summary>Konvertiert die Zeit in einer angegebenen Zeitzone in Coordinated Universal Time (UTC).</summary>
        <returns>Die Coordinated Universal Time (UTC), die dem <paramref name="dateTime" />-Parameter entspricht. Die <see cref="T:System.DateTime" />-Eigenschaft des <see cref="P:System.DateTime.Kind" />-Objekts ist immer auf <see cref="F:System.DateTimeKind.Utc" /> festgelegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.DateTime.Kind%2A> Eigenschaft von der `dateTime` entspricht <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> und die `sourceTimeZone` entspricht <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, gibt diese Methode `dateTime` ohne eine Konvertierung durchzuführen.  
  
 Wenn `dateTime` entspricht auf eine mehrdeutige Zeit, diese Methode setzt voraus, dass es sich um die Standardzeit der Quellzeitzone handelt. Wenn `dateTime` entspricht eine ungültige Zeit, diese Methode löst eine <xref:System.ArgumentException>.  
  
 Wenn der koordinierten Weltzeit (Coordinated Universal Time, UTC)-Äquivalent `dateTime` liegt vor <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder höher, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue> oder <xref:System.DateTime.MaxValue>bzw.  
  
   
  
## Examples  
 Im folgende Beispiel ruft das aktuelle Datum aus dem lokalen System ab und konvertiert es in Coordinated Universal Time (UTC) konvertiert, Tokyo Normalzeit und schließlich aus Tokio Normalzeit wieder in UTC konvertiert. Beachten Sie, dass die beiden UTC-Zeiten identisch sind.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" />
          <see langword=".Kind" /> ist <see cref="F:System.DateTimeKind.Utc" /> und <paramref name="sourceTimeZone" /> entspricht nicht <see cref="P:System.TimeZoneInfo.Utc" />.  
  
 - oder -   
  
 <paramref name="dateTime" /><see langword=".Kind" /> ist <see cref="F:System.DateTimeKind.Local" /> und <paramref name="sourceTimeZone" /> entspricht nicht <see cref="P:System.TimeZoneInfo.Local" />.  
  
 - oder -   
  
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> gibt <see langword="true" /> zurück.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> ist <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, die Methode nur die aktuelle Anpassungsregel für die zeitzonenkonvertierung gilt, wenn <paramref name="sourceTimeZone" /> ist <see cref="P:System.TimeZoneInfo.Local" />. Daher kann die Methode nicht korrekt konvertiert werden Zeiten für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Definiert eine Zeitzone, die auf dem lokalen Computer nicht gefunden wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen und einem Anzeigenamen für die Standardzeit.</summary>
        <returns>Die neue Zeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> Methode eignet sich zum Erstellen einer Zeitzone, die keine Anpassungen (d. h. eine Zeitzone, die Sommerzeit nicht unterstützt) aufweist. Um eine Zeitzone definieren, für die Sommerzeit Anpassungen enthält, verwenden Sie entweder die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die bereitgestellt werden, die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode und die Eigenschaften der <xref:System.TimeZoneInfo> -Objekt, das vom Aufruf Methode zurückgegeben werden.  
  
|CreateCustomTimeZone-parameter|TimeZoneInfo-Eigenschaft|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 In der Regel sind Name der Standardzeit der Zeitzone und ihres Bezeichners identisch. Die Länge des Bezeichners der Zeitzone darf jedoch 32 Zeichen nicht überschreiten. Die Zeichenfolge übergeben, um die `displayName` Parameter folgt einem Standardformat. Der erste Teil des Anzeigenamens ist die Zeitzone Basis Offset von Coordinated Universal Time, der durch das Akronym GMT (Greenwich Mean Time), eingeschlossen in Klammern angegeben wird. Danach folgt eine Zeichenfolge, die die Zeitzone selbst, oder eine oder mehrere Städte, Regionen oder Länder in der Zeitzone oder beides identifiziert. Zum Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Im folgende Beispiel wird eine benutzerdefinierte Zeitzone für die Regionen Mawson und Holme Bay der Antarktis erstellt. Es zeigt dann das Ergebnis der Konvertierung von der Ortszeit in die Zeit in der neuen Zeitzone.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
 - oder -   
  
 Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <param name="daylightDisplayName">Der Name der Sommerzeit der neuen Zeitzone.</param>
        <param name="adjustmentRules">Ein Array, das den UTC-Basisoffset für einen bestimmten Zeitraum erhöht.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen, einem Namen für die Standardzeit, einen Namen für die Sommerzeit und Regeln für die Sommerzeit.</summary>
        <returns>Ein <see cref="T:System.TimeZoneInfo" />-Objekt, das die neue Zeitzone darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode eignet sich zum Erstellen einer Zeitzone, die Sommerzeit unterstützt. Um eine Zeitzone definieren, die Sommerzeit nicht unterstützt, verwenden Sie entweder die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die bereitgestellt werden, die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode und die Mitglieder der <xref:System.TimeZoneInfo> -Objekt, das vom Aufruf Methode zurückgegeben werden.  
  
|CreateCustomTimeZone-parameter|TimeZoneInfo-Element|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Ein Array von <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> zurückgegebenen Objekte die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode.|  
  
 In der Regel sind Name der Standardzeit der Zeitzone und ihres Bezeichners identisch. Die Länge des Bezeichners der Zeitzone darf jedoch 32 Zeichen nicht überschreiten. Die Zeichenfolge übergeben, um die `displayName` Parameter folgt einem Standardformat. Der erste Teil des Anzeigenamens ist die Zeitzone Basis Offset von Coordinated Universal Time, der durch das Akronym GMT (Greenwich Mean Time), eingeschlossen in Klammern angegeben wird. Danach folgt eine Zeichenfolge, die die Zeitzone selbst, oder eine oder mehrere Städte, Regionen oder Länder in der Zeitzone oder beides identifiziert. Zum Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Die `baseUtcOffset` Parameter definiert die benutzerdefinierten Zeitzone Offset von Coordinated Universal Time (UTC) für alle Regeln zur Anpassung der Zeitzone. Das heißt, die <xref:System.TimeZoneInfo> Objektmodell wird davon ausgegangen, dass die Zeitzone Offset von UTC die Lebensdauer der Zeitzone konstant ist und vorhanden ist unabhängig von bestimmten Anpassungsregeln. Um eine Zeitzone widerspiegeln, die der Offset von UTC geändert wurde, müssen Sie ein neues Objekt für die Zeitzone erstellen.  
  
 Anpassungsregeln einer Zeitzone werden wie folgt definiert:  
  
1.  Aufrufen von entweder der <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> oder <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> Methode, um das Start- und Enddatum Übergangszeit für jede Anpassungsregel definieren.  
  
2.  Aufrufen der <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> Methode für jede Anpassungsregel.  
  
3.  Zum Zuweisen der Anpassungsregeln in ein Array, übergeben Sie als die `adjustmentRules` Parameter.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine benutzerdefinierte Zeitzone für die Station Palmer und Anvers Island in Antarktis erstellt. Klicken Sie dann die Ortszeit in die Zeit in der neuen Zeitzone konvertiert, und das Ergebnis wird angezeigt.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
 - oder -   
  
 Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln überlappen sich.  
  
 - oder -   
  
 Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln sind nicht in chronologischer Reihenfolge.  
  
 - oder -   
  
 Mindestens ein <paramref name="adjustmentRules" />-Element ist <see langword="null" />.  
  
 - oder -   
  
 Auf ein Datum können mehrere Anpassungsregeln angewendet werden.  
  
 - oder -   
  
 Die Summe aus dem <paramref name="baseUtcOffset" />-Parameter und dem <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />-Wert von einem oder mehreren Objekten im <paramref name="adjustmentRules" />-Array liegt über 14 Stunden oder unter -14 Stunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein <see cref="T:System.TimeSpan" />-Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <param name="daylightDisplayName">Der Name der Sommerzeit der neuen Zeitzone.</param>
        <param name="adjustmentRules">Ein Array von <see cref="T:System.TimeZoneInfo.AdjustmentRule" />-Objekten, die den UTC-Basisoffset für einen bestimmten Zeitraum erhöhen.</param>
        <param name="disableDaylightSavingTime">
          <see langword="true" />, um alle Sommerzeitinformationen in <c>adjustmentRules</c> mit dem neuen Objekt zu verwerfen, andernfalls <see langword="false" />.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen, einem Namen für die Standardzeit, einen Namen für die Sommerzeit, Regeln für die Sommerzeit und einem Wert, der angibt, ob das zurückgegebene Objekt Sommerzeitinformationen darstellt.</summary>
        <returns>Die neue Zeitzone. Wenn der <paramref name="disableDaylightSavingTime" />-Parameter <see langword="true" /> ist, verfügt das zurückgegebene Objekt nicht über Sommerzeitdaten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können diese Überladung der die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode, um eine benutzerdefinierte Zeitzone erstellen, deren Unterstützung für die Sommerzeit Bedingungen zur Laufzeit ermittelt werden kann.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die bereitgestellt werden, die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode und die Mitglieder der <xref:System.TimeZoneInfo> -Objekt, das vom Aufruf Methode zurückgegeben werden.  
  
|CreateCustomTimeZone-parameter|TimeZoneInfo-Eigenschaft|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> if `disableDaylightSavingTime` is `false`; <xref:System.String.Empty?displayProperty=nameWithType> if `disableDaylightSavingTime` is `true`.|  
|`adjustmentRules`|Ein Array von <xref:System.TimeZoneInfo.AdjustmentRule> zurückgegebenen Objekte die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode Wenn `disableDaylightSavingTime` ist `false`; ein leeres Array zurückgegeben, durch die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode Wenn `disableDaylightSavingTime` ist `true`.|  
|`disableDaylightSavingTime`|Nicht <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 In der Regel sind Name der Standardzeit der Zeitzone und ihres Bezeichners identisch. Die Länge des Bezeichners der Zeitzone darf jedoch 32 Zeichen nicht überschreiten. Die Zeichenfolge übergeben, um die `displayName` Parameter folgt einem Standardformat. Der erste Teil des Anzeigenamens ist die Zeitzone Basis Offset von Coordinated Universal Time, der durch das Akronym GMT (Greenwich Mean Time), eingeschlossen in Klammern angegeben wird. Danach folgt eine Zeichenfolge, die die Zeitzone selbst, oder eine oder mehrere Städte, Regionen oder Länder in der Zeitzone oder beides identifiziert. Zum Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Anpassungsregeln einer Zeitzone werden wie folgt definiert:  
  
1.  Aufrufen von entweder der <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> oder <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> Methode, um das Start- und Enddatum der von Übergangsregeln für jede Anpassungsregel definieren.  
  
2.  Aufrufen der <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> Methode für jede Anpassungsregel.  
  
3.  Zum Zuweisen der Anpassungsregeln in ein Array, übergeben Sie als die `adjustmentRules` Parameter.  
  
 Wenn `disableDaylightSavingTime` Parameter ist `false`, der Vorgang für diese Methode ist identisch mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> überladen. Wenn `disableDaylightSavingTime` ist `true`, das zurückgegebene Objekt enthält keine Anpassungsregeln und einen <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft, deren Wert eine leere Zeichenfolge.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine benutzerdefinierte Zeitzone für die Station Palmer und Anvers Island in Antarktis erstellt. Wird die `disableDaylightSavingTime` Parameter im Aufruf der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> aufzurufende Methode `true`. Es zeigt dann der neuen Zeitzone Sommerzeit Namen, sofern eins vorhanden ist und die Anzahl der Anpassungsregeln, um sicherzustellen, dass die neue Zeitzone keine Sommerzeit-Informationen enthält.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
 - oder -   
  
 Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln überlappen sich.  
  
 - oder -   
  
 Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln sind nicht in chronologischer Reihenfolge.  
  
 - oder -   
  
 Mindestens ein <paramref name="adjustmentRules" />-Element ist <see langword="null" />.  
  
 - oder -   
  
 Auf ein Datum können mehrere Anpassungsregeln angewendet werden.  
  
 - oder -   
  
 Die Summe aus dem <paramref name="baseUtcOffset" />-Parameter und dem <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />-Wert von einem oder mehreren Objekten im <paramref name="adjustmentRules" />-Array liegt über 14 Stunden oder unter -14 Stunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Anzeigenamen für die Sommerzeit der aktuellen Zeitzone ab.</summary>
        <value>Der Anzeigename für die Sommerzeit der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeigename wird basierend auf den mit dem Windows-Betriebssystem installierte Kultur lokalisiert.  
  
 Ein <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft, deren Wert nicht <xref:System.String.Empty?displayProperty=nameWithType> oder `null` nicht unbedingt, dass die Zeitzone Sommerzeit unterstützt. Um zu bestimmen, ob die Zeitzone Sommerzeit unterstützt, überprüfen Sie den Wert von dessen <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft.  
  
 In den meisten Fällen die <xref:System.TimeZoneInfo.DaylightName%2A> -Eigenschaft in der Registrierung definierten Zeitzonen ist <xref:System.String.Empty?displayProperty=nameWithType> oder `null`. Allerdings die <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft benutzerdefinierter Zeitzonen kann festgelegt werden, um <xref:System.String.Empty?displayProperty=nameWithType>. Dies tritt auf, wenn benutzerdefinierter Zeitzonen von erstellt werden die <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> überladen und die `disableDaylightSavingTime` Parameter ist `true`. Daher Ihren Code sollte nie voraussetzen, die den Wert der <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft ist nicht `null` oder leer sein.  
  
 Die <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft ist identisch mit der <xref:System.TimeZone.DaylightName%2A> Eigenschaft von der <xref:System.TimeZone> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine Methode namens `DisplayDateWithTimeZoneName` , verwendet die <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode, um zu ermitteln, ob Normalzeit Name oder der Sommerzeit einer Zeitzone angezeigt.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den allgemeinen Anzeigenamen ab, der die Zeitzone darstellt.</summary>
        <value>Der allgemeine Anzeigename der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeigename wird basierend auf den mit dem Windows-Betriebssystem installierte Kultur lokalisiert.  
  
 Zeitzone Anzeigenamen für Windows-Systemzeitzonen folgen einem Standardformat. Der erste Teil des Anzeigenamens ist die Zeitzone Basis Offset von Coordinated Universal Time, der durch das Akronym GMT (Greenwich Mean Time), eingeschlossen in Klammern angegeben wird. Für Coordinated Universal Time ist das Akronym GMT ohne Offset in Klammern eingeschlossen.  Danach folgt eine Zeichenfolge, die die Zeitzone oder eine oder mehrere Städte, Regionen oder Länder in der Zeitzone identifiziert. Zum Beispiel:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Das folgende Beispiel ruft eine <xref:System.TimeZoneInfo> Objekt, das die lokale Zeitzone darstellt, und gibt seine Anzeigenamen, der Name der Standardzeit und der Sommerzeit. Die Ausgabe wird für ein System in den USA angezeigt. „Pacific Standard Time“ (USA) ausgeführt wird.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob zwei <see cref="T:System.TimeZoneInfo" />-Objekte gleich sind.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Ein zweites Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt und ein anderes Objekt gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="obj" /> ein <see cref="T:System.TimeZoneInfo" />-Objekt und gleich der aktuellen Instanz ist; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode konvertiert oder umgewandelt `obj` zu einem <xref:System.TimeZoneInfo> Objekt, und vergleicht ihn mit der aktuellen Instanz. Der Test auf Gleichheit basiert auf einem Vergleich von Werten. Die aktuelle <xref:System.TimeZoneInfo> Instanz und `obj` werden als gleich in den folgenden Situationen:  
  
-   Der Laufzeittyp des `obj` ist <xref:System.TimeZoneInfo>.  
  
-   Die beiden Objekte verfügen über denselben <xref:System.TimeZoneInfo.Id%2A> Eigenschaftswert.  
  
-   Die beiden Objekte aufweisen die gleichen Anpassungsregeln.  
  
 Wenn `obj` gleich `null` ist, gibt die Methode `false` zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.Equals%28System.Object%29> Methode, um zu bestimmen, ob die lokale Zeitzone Pacific Time oder Eastern Time handelt.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Ein zweites Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt und ein anderes <see cref="T:System.TimeZoneInfo" />-Objekt gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die beiden <see cref="T:System.TimeZoneInfo" />-Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gleichheit basiert auf einem Vergleich von Werten. Zwei <xref:System.TimeZoneInfo> Objekte werden als gleich in den folgenden Situationen:  
  
-   Der Wert des ihre <xref:System.TimeZoneInfo.Id%2A> Eigenschaft ist identisch.  
  
-   Sie können die gleichen Anpassungsregeln aufweisen.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Gibt den booleschen Wert, der sich aus der Auswertung des folgenden Ausdrucks ergibt:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Wenn die `other` Parameter ist eine nicht initialisierte <xref:System.TimeZoneInfo> -Objekt gibt diese Methode `false`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> Methode, um zu bestimmen, ob die lokale Zeitzone Pacific Time oder Eastern Time handelt.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner, der der <see cref="P:System.TimeZoneInfo.Id" />-Eigenschaft entspricht.</param>
        <summary>Ruft ein <see cref="T:System.TimeZoneInfo" />-Objekt auf Grundlage seines Bezeichners aus der Registrierung ab.</summary>
        <returns>Ein Objekt, dessen Bezeichner der Wert des <paramref name="id" />-Parameters ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `id` Parameter muss entspricht exakt der Zeitzone Registrierungsschlüssel lang, aber nicht in der Groß-/Kleinschreibung für eine erfolgreiche Übereinstimmung vorliegt; d. h. beim Vergleich von `id` Bezeichner mit Zeitzone wird Groß-/Kleinschreibung. Wenn Sie basierend auf teilübereinstimmungen Zeitzonenobjekte abrufen möchten, können Sie benutzerdefinierte Prozeduren, die mit der schreibgeschützten Auflistung von funktionieren schreiben <xref:System.TimeZoneInfo> zurückgegebenen Objekte die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Methode.  
  
 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> versucht, `id` den Unterschlüsselnamen der HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zonen Verzweigung der Registrierung unter Windows XP und Windows Vista. Diese Verzweigung enthält keine unbedingt eine umfassende Liste der Zeitzonenbezeichner. Wenn von einer Anwendung erforderlich sind, können Sie erstellen eine bestimmte Zeitzone entweder durch Aufrufen einer der Überladungen der der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode oder durch Aufrufen von <xref:System.TimeZoneInfo.FromSerializedString%2A> zum Deserialisieren einer <xref:System.TimeZoneInfo> Objekt, das die erforderlichen Zeitzone darstellt. Allerdings Zeitzonen erstellt, indem diese Methodenaufrufe sind nicht in der Registrierung enthalten und kann nicht abgerufen werden, mithilfe der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode. Diese benutzerdefinierte Zeitzonen nur durch den Objektverweis zurückgegebenes zugegriffen werden kann die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> oder <xref:System.TimeZoneInfo.FromSerializedString%2A> -Methodenaufruf.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode, um die Tokyo Standard Time Zone abzurufen. Dies <xref:System.TimeZoneInfo> Objekt wird dann verwendet, die lokale Zeit auf die Zeit in Tokio konvertiert und bestimmen, ob es Tokio Normalzeit oder Sommerzeit Tokio ist.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Das System verfügt nicht über genügend Speicher zum Speichern von Informationen über die Zeitzone.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der von <paramref name="id" /> angegebene Zeitzonenbezeichner wurde nicht gefunden. Dies bedeutet, dass der Registrierungsschlüssel, dessen Name <paramref name="id" /> entspricht, nicht vorhanden ist oder dass der Schlüssel vorhanden ist, jedoch keine Zeitzonendaten enthält.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die Zeichenfolgendarstellung des serialisierten <see cref="T:System.TimeZoneInfo" />-Objekts.</param>
        <summary>Deserialisiert eine Zeichenfolge, um ein ursprüngliches <see cref="T:System.TimeZoneInfo" />-Objekt erneut zu erstellen.</summary>
        <returns>Das ursprüngliche serialisierte Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist eine Alternative zum Bereitstellen des Codes erforderlich, um eine Zeitzone erstellen, die nicht in der Registrierung gefunden wird. Sie können eine benutzerdefinierte Zeitzone und entweder definieren verwenden die <xref:System.TimeZoneInfo.ToSerializedString%2A> Methode in eine eigenständige ausführbare Datei oder Verwenden einer Anwendung Setupprogramm um die Zeitzone als Zeichenfolge zu speichern. Die Anwendung kann dann diese Zeichenfolge von ihrem Speicherort abrufen und mit Instanziieren der <xref:System.TimeZoneInfo.FromSerializedString%2A> Methode.  
  
   
  
## Examples  
 Im folgende Beispiel versucht der Antarktis/Südpol abzurufenden Zeitzone des lokalen Systems. Falls dies fehlschlägt, versucht der Code zum Abrufen von Informationen über die Zeitzone aus einer Textdatei im Anwendungsverzeichnis. Wenn dieser Versuch fehlschlägt, wird der Code erstellt die Zeitzone und Informationen über die Zeitzone in die Textdatei schreibt.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="source" />-Parameter ist <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="source" />-Parameter ist eine NULL-Zeichenfolge.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Der Quellparameter kann nicht zurück in ein <see cref="T:System.TimeZoneInfo" />-Objekt deserialisiert werden.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft ein Array von <see cref="T:System.TimeZoneInfo.AdjustmentRule" />-Objekten ab, die auf das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt angewendet werden.</summary>
        <returns>Ein Array von Objekten für diese Zeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode ruft ein Array von <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> Objekte. Jedes Objekt im Array definiert das Gültigkeitsdatum für Start- und Enddatum der Anpassung der Zeitzone als auch das Delta (die genaue Größe, die Anpassung die Zeit verursacht ändern). Außerdem zwei Eigenschaften zurück <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> Objekten, die definieren, tritt jedes jährlichen Übergang zur und von der Normalzeit.  
  
 Wenn eine Zeitzone mehrere Anpassungsregeln verfügt, sie sind im Allgemeinen sortiert aus frühesten (bei Index 0) auf neueste (am Index <xref:System.Array.Length%2A> – 1).  
  
 Wenn eine Zeitzone ohne Anpassungsregeln verfügt die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode ein leeres Array zurück (ein Array, dessen <xref:System.Array.Length%2A> 0 (null)).  
  
 Änderungen an der Elemente des Arrays zurückgegebenes der <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> reflektierte Methode sind nicht in der Anpassungsregeln, die zu einer bestimmten Zeitzone gehören. Zum Ändern einer Zeitzone Anpassungsregeln (z. B. die Verlaufsdaten Übergang in und aus der Sommerzeit wiedergeben) müssen Sie erstellen eine neue Zeitzone mit dem entsprechenden Anpassungsregeln, anstatt die vorhandene zu ändern.  
  
   
  
## Examples  
 Im folgende Beispiel ruft alle Zeitzonen, der auf dem lokalen System und zeigt alle Informationen über ihre Regeln zur Anpassung an die Konsole definiert sind.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Der Systemarbeitsspeicher reicht nicht aus, um eine Kopie der Anpassungsregeln im Arbeitsspeicher zu erstellen.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datum und eine Uhrzeit.</param>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
        <returns>Ein Array von Objekten, das mögliche UTC-Offsets (Coordinated Universal Time) darstellt, denen ein bestimmter Datums- und Uhrzeitwert zugeordnet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das genaue Verhalten dieser Methode abhängig von der Beziehung zwischen der <xref:System.DateTime.Kind%2A> Eigenschaft und die <xref:System.TimeZoneInfo> -Objekts entsprechend der folgenden Tabelle dargestellt.  
  
|TimeZoneInfo-Objekttyp|Kind-Eigenschaft-Wert|Verhalten|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Mehrdeutige Zeit gibt offsets für `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` auf die lokale Zeit und mehrdeutige Zeitoffsets für diese Zeit zurück.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Beliebiger Wert.|Löst ein <xref:System.ArgumentException>.|  
|Eine beliebige andere Zeitzone.|<xref:System.DateTimeKind.Local> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` auf die angegebene Zeitzone und bestimmt dann, ob diese Zeit mehrdeutig ist.|  
|Eine beliebige andere Zeitzone.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, ob `dateTime` in die angegebene Zeitzone mehrdeutig ist.|  
  
 Die Reihenfolge der <xref:System.TimeSpan> Objekte in der von dieser Methode zurückgegebene Array ist nicht definiert. Allerdings können Sie bestimmen, welches Element einen Offset von der Normalzeit der Zeitzone darstellt, durch Vergleichen ihres Werts mit der Zeitzone <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft. Um eine Zeitzone Normalzeit mehrdeutige Zeitangabe zuzuordnen, finden Sie unter [wie: Auflösen mehrdeutiger Zeiten](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine Methode namens `ShowPossibleUtcTimes` , verwendet die <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> Methode, um eine mehrdeutige Zeit bis seine möglichen zuordnen entsprechende Coordinated Universal Time (UTC) ein.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Die Methode kann dann mit den folgenden Code aufgerufen werden:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> ist keine mehrdeutige Zeit.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, wendet diese Methode nur die aktuelle Anpassungsregel beim bestimmen, ob <paramref name="dateTime" /> ist mehrdeutig, wenn die aktuelle Instanz ist <see cref="P:System.TimeZoneInfo.Local" />. Daher kann die Methode nicht genau melden kann, mehrdeutige Zeitoffsets für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datum und eine Uhrzeit.</param>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
        <returns>Ein Array von Objekten, das mögliche UTC-Offsets (Coordinated Universal Time) darstellt, denen ein bestimmter Datums- und Uhrzeitwert zugeordnet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das genaue Verhalten dieser Methode abhängig von der Beziehung zwischen der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft von der `dateTimeOffset` Parameter und die <xref:System.TimeZoneInfo> Objekt. Wenn der Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft entspricht der aktuellen Zeitzone mögliche Offsets von Coordinated Universal Time (UTC) für, dass Datum und Uhrzeit, gibt die Methode die möglichen Offsets zurück. Andernfalls konvertiert `dateTimeOffset` die Zeit in der aktuellen Zeitzone und gibt dann die möglichen versetzt dieses Datum und Uhrzeit.  
  
 Die Reihenfolge der <xref:System.TimeSpan> Objekte in der von dieser Methode zurückgegebene Array ist nicht definiert. Allerdings können Sie bestimmen, welches Element einen Offset von der Normalzeit der Zeitzone darstellt, durch Vergleichen ihres Werts mit der Zeitzone <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft. Um eine Zeitzone Normalzeit mehrdeutige Zeitangabe zuzuordnen, finden Sie unter [wie: Auflösen mehrdeutiger Zeiten](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTimeOffset" /> ist keine mehrdeutige Zeit.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, wendet diese Methode nur die aktuelle Anpassungsregel beim bestimmen, ob <paramref name="dateTimeOffset" /> ist mehrdeutig, wenn die aktuelle Instanz ist <see cref="P:System.TimeZoneInfo.Local" />. Daher kann die Methode nicht genau melden kann, mehrdeutige Zeitoffsets für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird als Hashfunktion für Hashalgorithmen und Datenstrukturen wie Hashtabellen verwendet.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die als Hash für dieses <see cref="T:System.TimeZoneInfo" />-Objekt verwendet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Einzelheiten zu den <xref:System.TimeZoneInfo.GetHashCode%2A> -Methode finden Sie unter <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine sortierte Auflistung aller Zeitzonen zurück, zu denen im lokalen System Informationen verfügbar sind.</summary>
        <returns>Eine schreibgeschützte Auflistung von <see cref="T:System.TimeZoneInfo" />-Objekten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Methode ruft alle verfügbaren Zeitzoneninformationen aus dem Unterschlüssel des Registrierungsschlüssels HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zonen ab. Wenn es nicht erfolgreich abgerufen und analysiert die Werte für bestimmte Zeichenfolgeneigenschaften einzelner <xref:System.TimeZoneInfo> Objekte aufweist, diese Methode wird deren Wert auf eine leere Zeichenfolge ("").  
  
> [!IMPORTANT]
>  Die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> -Methode gibt eine Auflistung von <xref:System.TimeZoneInfo> Objekte nur für in der Registrierung definierten Zeitzonen. Es umfasst nicht die Zeitzonen erstellt, die Überladungen von der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode. Dies sind nur über den Objektverweis, der die Zeitzone Erstellungsmethode zurückgegebenes zugegriffen werden kann.  
  
 Von dieser Methode zurückgegebene Auflistung wird von UTC-zeitverschiebung und für Zeitzonen, die die gleiche UTC-zeitverschiebung haben sortiert, durch den Anzeigenamen, die mit der aktuellen Kultur. Weitere Informationen zu den Anzeigenamen, finden Sie unter <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 Die <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> von dieser Methode zurückgegebene Objekt unterstützt die <xref:System.Collections.Generic.IEnumerable%601> -Schnittstelle, was bedeutet, dass es durchlaufen werden kann, mithilfe der `foreach` (in c#) oder `For Each…Next` (in Visual Basic) Anweisungen. Jede Iteration der Schleife stellt das nächste <xref:System.TimeZoneInfo> Objekt in der Auflistung.  
  
 Die Auflistung der <xref:System.TimeZoneInfo> Objekte dar, auf dem lokalen Computer definierten Zeitzonen; es stellt keine unbedingt vollständige Informationen für alle Zeitzonen alle Zeiträumen bereit. Wenn Ihre Anwendung Zeitzonen nicht gefunden wird, auf dem lokalen Computer erforderlich ist, können Sie benutzerdefinierten Zeitzonen, die mit den Überladungen der erstellen die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen Zeitzonen ohne Anpassungsregeln](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) und [Vorgehensweise: Erstellen von Zeitzonen mit Anpassungsregeln](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Sie können auch bestimmen, ob eine bestimmte Zeitzone auf dem lokalen Computer, durch Aufrufen definiert ist der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode und angeben den Bezeichner der Zeitzone, die als Parameter abgerufen werden sollen.  
  
   
  
## Examples  
 Im folgenden Beispiel ruft eine Auflistung von Zeitzonenobjekte, die darstellen, die auf einem Computer definierten Zeitzonen und Informationen zu diesen in eine Textdatei schreibt.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Arbeitsspeicher vorhanden, um alle Zeitzoneninformationen zu speichern.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die Berechtigung zum Lesen aus den Registrierungsschlüsseln, die Zeitzoneninformationen enthalten.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Zeit, für die der Offset bestimmt werden soll.</param>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
        <returns>Ein Objekt, das den Zeitunterschied zwischen den beiden Zeitzonen angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeitspanne enthält alle Unterschiede aufgrund der Anpassungsregeln entsprechend der aktuellen Zeitzone. Sie unterscheidet sich von der <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft, die die Differenz zwischen Coordinated Universal Time (UTC) und der Standardzeit der Zeitzone zurückgibt und daher keine Anpassungsregeln berücksichtigt.  
  
 Wenn die `dateTime` des Parameters <xref:System.DateTime.Kind%2A> Eigenschaft entspricht nicht der Zeitzone-Objekt, das diese Methode führt die erforderliche Konvertierung, bevor ein Ergebnis zurückgegeben. Dies kann beispielsweise auftreten, wenn die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> Zeitzone das Objekt jedoch nicht die lokale Zeitzone. Wenn `dateTime` ist mehrdeutig, oder wenn die konvertierte Zeit mehrdeutig ist, interpretiert diese Methode die mehrdeutige Zeit als die Standardzeit. Wenn `dateTime` ungültig ist, gibt diese Methode eine <xref:System.TimeSpan> -Objekt, das die Differenz zwischen UTC und Normalzeit der Zeitzone angibt.  
  
 Die <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> Methode ist vergleichbar mit der <xref:System.TimeZone.GetUtcOffset%2A> Methode der <xref:System.TimeZone> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> Methode mit verschiedenen Zeitzonen und Datumswerte, denen verschiedene sind <xref:System.DateTime.Kind%2A> Eigenschaftswerte.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, beim Berechnen des Offsets von UTC, wenn die aktuelle Instanz ist, gilt diese Methode nur die aktuelle Anpassungsregel <see cref="P:System.TimeZoneInfo.Local" />. Daher die Methode möglicherweise nicht genau berechnet die Differenz zwischen der Ortszeit und UTC auf <paramref name="dateTime" />. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Zeit, für die der Offset bestimmt werden soll.</param>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
        <returns>Ein Objekt, das den Zeitunterschied zwischen Coordinated Universal Time (UTC) und der aktuellen Zeitzone angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeitspanne enthält alle Unterschiede aufgrund der Anpassungsregeln entsprechend der aktuellen Zeitzone. Sie unterscheidet sich von der <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft, die die Differenz zwischen Coordinated Universal Time (UTC) und der Standardzeit der Zeitzone zurückgibt und daher keine Anpassungsregeln berücksichtigt.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, beim Berechnen des Offsets von UTC, wenn die aktuelle Instanz ist, gilt diese Methode nur die aktuelle Anpassungsregel <see cref="P:System.TimeZoneInfo.Local" />. Daher die Methode möglicherweise nicht genau berechnet die Differenz zwischen der Ortszeit und UTC auf <paramref name="dateTimeOffset" />. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Ein zweites Objekt, das mit dem aktuellen <see cref="T:System.TimeZoneInfo" />-Objekt verglichen werden soll.</param>
        <summary>Gibt an, ob das aktuelle Objekt und ein weiteres <see cref="T:System.TimeZoneInfo" />-Objekt die gleichen Anpassungsregeln aufweisen.</summary>
        <returns>
          <see langword="true" />, wenn die zwei Zeitzonen identische Anpassungsregeln und einen identischen Basisoffset aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wie die <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> -Methode, die <xref:System.TimeZoneInfo.HasSameRules%2A> Methode gibt an, ob die zwei Zeitzonen den gleichen Basisoffset aufweisen (gemäß der <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft) und die gleichen Anpassungsregeln. Im Gegensatz zu den <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> -Methode, <xref:System.TimeZoneInfo.HasSameRules%2A> Zeitzonenbezeichner nicht verglichen (gemäß der <xref:System.TimeZoneInfo.Id%2A> Eigenschaft).  
  
   
  
## Examples  
 Eine Anzahl von in der Registrierung definierten Zeitzonen wird normalerweise den gleichen Offset von Coordinated Universal Time (UTC) und die gleichen Anpassungsregeln aufweisen. Das folgende Beispiel zeigt eine Liste dieser Zeitzonen in die Konsole.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="other" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeitzonenbezeichner ab.</summary>
        <value>Der Zeitzonenbezeichner.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zeitzonenbezeichner ist ein Schlüssel-Zeichenfolge, die eine bestimmte Zeitzone eindeutig identifiziert. In Windows XP und Windows Vista entspricht er den Unterschlüsseln des HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zone Branch der Registrierung. Sie können als Parameter übergeben werden die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode, um eine bestimmte Zeitzone aus der Registrierung abzurufen.  
  
> [!IMPORTANT]
>  Obwohl ein Schlüsselname in der Windows-Registrierung maximal 255 Zeichen sein kann, wird empfohlen, dass ein Bezeichner, den Sie eine benutzerdefinierte Zeitzone zuweisen maximal 32 Zeichen sein. Je länger der Bezeichner, desto größer ist die Wahrscheinlichkeit, die eine falsche Schlüsselnamen werden bereitgestellt, wenn sie abrufen.  
  
 Der Wert von der <xref:System.TimeZoneInfo.Id%2A> Eigenschaft ist in der Regel jedoch nicht immer identisch mit der <xref:System.TimeZoneInfo.StandardName%2A> Eigenschaft. Der Bezeichner der Coordinated Universal Time Zone ist (UTC).  
  
   
  
## Examples  
 Das folgende Beispiel listet den Bezeichner für jede auf dem lokalen Computer definierten Zeitzonen.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="dateTime" />-Parameter mehrdeutig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine mehrdeutige Zeit fällt in einen Bereich von Zeiten für die aktuelle Zeitzone. Dies bedeutet, dass es kann eine Normalzeit oder eine Uhrzeit, die durch die Anwendung einer Anpassungsregel entsteht. Führen in der Regel mehrdeutige Zeiten auf, wenn die Uhr zurückkehren zu Normalzeit zur Sommerzeit festgelegt ist. Finden Sie im Beispielabschnitt veranschaulicht.  
  
 Coordinated Universal Time (UTC) weist keine mehrdeutigen Zeiten; keiner der beiden Zonen Zeit, die Sommerzeit nicht unterstützen. Aus diesem Grund diese Zeitzonen aufweisen, ohne Anpassungsregeln und Aufrufe an die <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> immer-Methodenrückgabe `false`.  
  
 Für Zeitzonen, die Sommerzeit berücksichtigt, hängt das genaue Verhalten dieser Methode die Beziehung zwischen der <xref:System.DateTime.Kind%2A> Eigenschaft und die <xref:System.TimeZoneInfo> -Objekts entsprechend der folgenden Tabelle dargestellt.  
  
|TimeZoneInfo-Objekttyp|Kind-Eigenschaft-Wert|Verhalten|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, ob die `dateTime` -Parameter mehrdeutig ist.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` in der lokalen Zeit und ermittelt dann, ob diese Zeit mehrdeutig ist.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Gibt `false`zurück.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Wenn `dateTime` mehrdeutig ist, wird angenommen, es wird eine Standardzeit in UTC konvertiert und gibt `false`.|  
|Eine beliebige andere Zeitzone.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` in die Zeit in die angegebene Zeitzone und bestimmt dann, ob diese Zeit mehrdeutig ist.|  
|Eine beliebige andere Zeitzone.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, ob `dateTime` ist mehrdeutig.|  
  
   
  
## Examples  
 In der Zeitzone Pacific Time endet Sommerzeit um 2:00 Uhr am 4. November 2007. Im folgende Beispiel wird die Zeit in Intervallen von einer Minute von 00:59 Uhr übergeben. auf dem 4. November 2007 um 2:01:00 Uhr. am 4. November 2007 um die <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> Methode eine <xref:System.TimeZoneInfo> Objekt, das die pazifische Zeitzone darstellt. Die Konsolenausgabe gibt an, dass alle Zeitangaben von 1:00 Uhr auf dem 4. November 2007 bis 1:59 Uhr am 4. November 2007 unterscheiden sich nicht eindeutig.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Werts ist <see cref="F:System.DateTimeKind.Local" /> und <paramref name="dateTime" /> ist eine ungültige Zeit.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, gilt diese Methode nur die aktuelle Anpassungsregel an, wenn die aktuelle Instanz ist <see cref="P:System.TimeZoneInfo.Local" />. Folglich meldet die Methode möglicherweise nicht genau, ob <paramref name="dateTime" /> ist eine mehrdeutige Zeit für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datum und eine Uhrzeit.</param>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="dateTimeOffset" />-Parameter in der aktuellen Zeitzone mehrdeutig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine mehrdeutige Zeit fällt in einen Bereich von Zeiten für die aktuelle Zeitzone. Dies bedeutet, er ist ein Normalzeit oder eine Uhrzeit, die durch die Anwendung einer Anpassungsregel entsteht. Führen in der Regel mehrdeutige Zeiten auf, wenn die Uhr zurückkehren zu Normalzeit zur Sommerzeit festgelegt ist. Coordinated Universal Time (UTC) weist keine mehrdeutigen Zeiten; keiner der beiden Zonen Zeit, die Sommerzeit nicht unterstützen.  
  
 Das genaue Verhalten der Methode hängt von der Beziehung zwischen der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft von der `dateTimeOffset` Parameter und der aktuellen Zeitzone. Wenn der Wert von der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft ist ein offset von UTC der aktuellen Zeitzone möglich, die Methode bestimmt, ob das Datum und Uhrzeit ist mehrdeutig. Andernfalls konvertiert `dateTimeOffset` in die Zeit in der aktuellen Zeitzone und bestimmt dann, ob das Datum und Uhrzeit ist mehrdeutig.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, gilt diese Methode nur die aktuelle Anpassungsregel an, wenn die aktuelle Instanz ist <see cref="P:System.TimeZoneInfo.Local" />. Folglich meldet die Methode möglicherweise nicht genau, ob <paramref name="dateTimeOffset" /> ist eine mehrdeutige Zeit für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="dateTime" />-Parameter eine Sommerzeit darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert der <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> hat Auswirkungen auf die Beziehung zwischen der Zeitzone, dargestellt durch die <xref:System.TimeZoneInfo> Objekt und die <xref:System.DateTime.Kind%2A> Eigenschaft von der `dateTime` Parameter, wie die folgende Tabelle zeigt.  
  
|TimeZoneInfo-Objekt|DateTime.Kind-Eigenschaft|Ergebnis|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Bestimmt, ob `dateTime` Sommerzeit.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Konvertiert `dateTime` von Coordinated Universal Time (UTC) in die Ortszeit und bestimmt, ob es sich um Sommerzeit handelt.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Setzt voraus, dass `dateTime` lokale Uhrzeit darstellt, und bestimmt, ob es sich um Sommerzeit handelt.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`oder `DateTimeKind.Utc`|Gibt `false` (UTC unterstützt keine Sommerzeit).|  
|Alle anderen <xref:System.TimeZoneInfo> Objekt.|`DateTimeKind.Local`|Konvertiert die Ortszeit in die entsprechende Zeit von der <xref:System.TimeZoneInfo> Objekt, und klicken Sie dann bestimmt, ob die zweite Datei Sommerzeit ist.|  
|Alle anderen <xref:System.TimeZoneInfo> Objekt.|`DateTimeKind.Utc`|Konvertiert von UTC in die entsprechende Zeit von der <xref:System.TimeZoneInfo> Objekt, und klicken Sie dann bestimmt, ob die zweite Datei Sommerzeit ist.|  
|Alle anderen <xref:System.TimeZoneInfo> Objekt.|`DateTimeKind.Unspecified`|Bestimmt, ob `dateTime` Sommerzeit.|  
  
 Wenn die Zeitzone über dargestellt die <xref:System.TimeZoneInfo> Objekt werden keine Sommerzeit unterstützt, die-Methode gibt immer `false`. Eine Anzahl von Zeitzonen, einschließlich <xref:System.TimeZoneInfo.Utc%2A>, wird die Sommerzeit nicht beachtet.  Um zu bestimmen, ob eine Zeitzone Sommerzeit unterstützt, Abrufen des Werts eines seiner <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft.  
  
 Wenn die `dateTime` Parameter gibt eine mehrdeutige Zeit in der Zeitzone des aktuellen Objekts, das <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Methode interpretiert `dateTime` als Standardzeit und gibt `false` wenn seine <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn die <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, diese Methode wählen Sie die richtige mehrdeutige Zeit und gibt an, ob es sich um eine Sommerzeit ist.  
  
 Da die <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> Methodenrückgabewert können `false` für Datum und Uhrzeit, die mehrdeutig ist (d. h. ein Datum und Uhrzeit, die eine Normalzeit oder Sommerzeit in einer bestimmten Zeitzone darstellen kann), die <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> Methode kann zusammen mit der <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode, um zu bestimmen, ob eine Sommerzeit liegen kann. Da eine mehrdeutige Zeit eine möglich ist, ist eine Sommerzeit und einem Normalzeit der <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> Methode kann zuerst aufgerufen werden, um zu bestimmen, ob ein Datum und eine Uhrzeit ein Sommerzeit möglicherweise. Wenn die-Methode zurückgibt `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode kann aufgerufen werden, um zu bestimmen, ob die <xref:System.DateTime> Wert ist eine Sommerzeit. Das folgende Beispiel veranschaulicht dieses Verfahren.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Wenn die `dateTime` Parameter gibt an, eine ungültige Zeit, löst der Methodenaufruf eine <xref:System.ArgumentException> Wenn der Wert des der `dateTime` des Parameters <xref:System.DateTime.Kind%2A> Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist, andernfalls gibt die Methode zurück `false`.  
  
 Rufen Sie die <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Methode, um festzustellen, ob einer Zeitzone verwendet <xref:System.TimeZoneInfo.StandardName%2A> Wert oder den zugehörigen <xref:System.TimeZoneInfo.DaylightName%2A> Wert, der beim Anzeigen der Namen der Zeitzone. Finden Sie im Beispielabschnitt veranschaulicht.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine Methode namens `DisplayDateWithTimeZoneName` , verwendet die <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Methode, um zu ermitteln, ob Normalzeit Name oder der Sommerzeit einer Zeitzone angezeigt.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Werts ist <see cref="F:System.DateTimeKind.Local" /> und <paramref name="dateTime" /> ist eine ungültige Zeit.</exception>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, gilt diese Methode nur die aktuelle Anpassungsregel an, wenn die aktuelle Instanz ist <see cref="P:System.TimeZoneInfo.Local" />. Folglich meldet die Methode möglicherweise nicht genau, ob <paramref name="dateTime" /> ist eine Sommerzeit für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
        <returns>
          <see langword="true" />, wenn der <paramref name="dateTimeOffset" />-Parameter eine Sommerzeit darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert der <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> hat Auswirkungen auf die Beziehung zwischen der Zeitzone, dargestellt durch die <xref:System.TimeZoneInfo> Objekt und die <xref:System.DateTimeOffset.Offset%2A> Eigenschaft von der `dateTimeOffset` Parameter. Wenn `dateTimeOffset` entspricht keiner der aktuellen Zeitzone Offset von Coordinated Universal Time (UTC) konvertiert die Methode, die Zeit in die Zeit in der aktuellen Zeitzone. Anschließend wird bestimmt, ob das Datum und Uhrzeit Sommerzeit ist.  
  
 Wenn die Zeitzone über dargestellt die <xref:System.TimeZoneInfo> Objekt werden keine Sommerzeit unterstützt, die-Methode gibt immer `false`. Um zu bestimmen, ob eine Zeitzone Sommerzeit unterstützt, Abrufen des Werts eines seiner <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] Systeme, gilt diese Methode nur die aktuelle Anpassungsregel an, wenn die aktuelle Instanz ist <see cref="P:System.TimeZoneInfo.Local" />. Folglich meldet die Methode möglicherweise nicht genau, ob <paramref name="dateTimeOffset" /> ist eine Sommerzeit für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein bestimmtes Datum und eine Zeit ungültig sind.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="dateTime" /> ungültig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine ungültige Zeit fällt in einen Bereich von Zeiten für die aktuelle Zeitzone, die in Coordinated Universal Time (UTC) aufgrund der Anwendung einer Anpassungsregel zugeordnet werden kann. Unzulässigen Zeitpunkten in der Regel auftreten, wenn die Zeit voraus für die Sommerzeit bewegt wird. Finden Sie im Beispielabschnitt veranschaulicht.  
  
 Der Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft von der `dateTime` Parameter wirkt sich auf, ob `dateTime` stellt eine ungültige Zeit an, wie in der folgenden Tabelle gezeigt.  
  
|DateTime.Kind-Eigenschaft|TimeZoneInfo-Objekt (falls zutreffend)|Verhalten|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Bestimmt, ob die Zeit ungültig ist.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> oder eine nicht lokale Zeitzone.|Konvertiert `dateTime` auf den Zeitpunkt der <xref:System.TimeZoneInfo> -Objekt und gibt `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Nicht zutreffend.|Geht davon aus `dateTime` ist die Zeit von der <xref:System.TimeZoneInfo> Objekt, und bestimmt, ob es ungültig ist.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nicht zutreffend.|Gibt `false`zurück.|  
  
   
  
## Examples  
 In der Zeitzone Pacific Time beginnt Sommerzeit um 2:00 Uhr am 2. April 2006. Im folgende Code wird die Zeit in Intervallen von einer Minute von 1:59 Uhr am 2. April 2006 um 3:01:00 Uhr. am 2. April 2006 um die <xref:System.TimeZoneInfo.IsInvalidTime%2A> Methode eine <xref:System.TimeZoneInfo> Objekt, das die pazifische Zeitzone darstellt. Die Konsolenausgabe gibt an, dass alle Zeitangaben von 2:00 Uhr am 2. April 2006 um 2:59:00 Uhr. am 2. April 2006 sind ungültig.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Auf [!INCLUDE[winxp](~/includes/winxp-md.md)] -Systemen, wenn die aktuelle Instanz ist, gilt diese Methode nur die Anpassungsregel <see cref="P:System.TimeZoneInfo.Local" />. Folglich meldet die Methode möglicherweise nicht genau, ob <paramref name="dateTime" /> ist eine ungültige Zeit für Zeiträume, bevor die aktuelle Anpassungsregel wirksam wurde. Weitere Informationen finden Sie unter dem Abschnitt Hinweise für Aufrufer in der <see cref="P:System.TimeZoneInfo.Local" /> Eigenschaft.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.TimeZoneInfo" />-Objekt ab, das die lokale Zeitzone darstellt.</summary>
        <value>Ein Objekt, das die lokale Zeitzone darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die lokale Zeitzone ist die Zeitzone auf dem Computer, auf dem der Code ausgeführt wird.  
  
> [!IMPORTANT]
>  Sollten Sie stets über die lokale Zeitzone zugreifen der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> Eigenschaft anstatt der lokalen Zeit zone eine <xref:System.TimeZoneInfo> Object-Variablen. Dies verhindert, dass die <xref:System.TimeZoneInfo> Objektvariable aus wird durch einen Aufruf für ungültig erklärt die <xref:System.TimeZoneInfo.ClearCachedData%2A> Methode.  
  
 Die <xref:System.TimeZoneInfo> zurückgegebenes Objekt der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> Eigenschaft spiegelt wider, die Einstellung von der **Uhr Änderungen für die Sommerzeit** Kontrollkästchen oder die **automatisch Uhr für die Speicherung von Sommerzeit angepasst Zeit** Kontrollkästchen in der Systemsteuerung **Datum und Uhrzeit** für Windows XP und Windows Vista bzw. Wenn das Kontrollkästchen deaktiviert ist, enthält die zwischengespeicherte Kopie der lokalen Zeitzone keine Informationen für die Sommerzeit an. Dies bedeutet Folgendes:  
  
-   Die lokale Zeitzone <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode gibt ein Array, dessen Länge 0 (null ist) zurück.  
  
-   Die lokale Zeitzone <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> -Eigenschaft gibt `false`.  
  
-   Die lokale Zeitzone weist keine mehrdeutigen oder ungültigen Zeiten (alle Aufrufe an <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> oder <xref:System.TimeZoneInfo.IsInvalidTime%2A> zurückgeben `false`).  
  
-   Alle Aufrufe an <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> mit einzelner lokaler Zeiten "false" zurückgeben.  
  
 Dies ist "true", jedoch nicht, wenn ein Verweis auf die lokale Zeitzone abgerufen wird mithilfe der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode.  
  
 Die <xref:System.TimeZoneInfo.Local%2A> Eigenschaft entspricht der <xref:System.TimeZone.CurrentTimeZone%2A> Eigenschaft von der <xref:System.TimeZone> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel ruft eine <xref:System.TimeZoneInfo> Objekt, das die lokale Zeitzone darstellt, und gibt seine Anzeigenamen, der Name der Standardzeit und der Sommerzeit.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Beim Konvertieren von Datumsangaben und Uhrzeiten, [!INCLUDE[winxp](~/includes/winxp-md.md)] erkennt nur die aktuelle Anpassungsregel, die er ohne Ausnahmen gilt, einschließlich früherer Datumsangaben (d. h., Datumsangaben, die älter als das Anfangsdatum des aktuellen Anpassungsregel sind). Auf [!INCLUDE[winxp](~/includes/winxp-md.md)], um zu verhindern, dass lokale Datums- und Uhrzeitinformationen gebotenen der <see cref="P:System.TimeZoneInfo.Local" /> -Sitzungsobjekts gehen auseinander anhand der Datums- und Uhrzeitangabe Informationen, die in der Taskleiste angezeigt der <see cref="T:System.TimeZoneInfo" /> zurückgegebenes Objekt die <see cref="P:System.TimeZoneInfo.Local" /> -Eigenschaft gilt auch die aktuelle Anpassungsregel früherer Datumsangaben. Anwendungen auf [!INCLUDE[winxp](~/includes/winxp-md.md)] , erfordern in der Vergangenheit genau Lokales Datum und Uhrzeit-Berechnungen müssen dieses Verhalten mit umgehen der <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> Methode zum Abrufen einer <see cref="T:System.TimeZoneInfo" /> Objekt, das die lokale Zeitzone entspricht.  
  
 Das folgende Beispiel enthält ein Beispiel für eine [!INCLUDE[winxp](~/includes/winxp-md.md)] System in den USA Zeitzone Pacific verwendet wird. Da die ersten drei alle Methodenaufrufe verwenden der lokalen Zeitzone zurückgegebenes der <see cref="P:System.TimeZoneInfo.Local" /> -Eigenschaft, gelten die aktuelle Zeitzone Anpassungsregel (der Effekt in 2007 eingeflossen) in ein Datum im Jahr 2006. Die aktuelle Anpassungsregel sorgt für den Übergang zur Sommerzeit am zweiten Sonntag im März ausgeführt; die vorherige Regel, die faktisch in 2006 zur Verfügung gestellt, für den Übergang zur Sommerzeit an der ersten Sonntag im April ausgeführt wurde. Nur die vierte-Methodenaufruf verwendet die <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> Methode zum Abrufen der lokalen Zeitzone führt genau diese historische Datums- und Zeit-Konvertierung.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/cs/converttimetoutc.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/vb/converttimetoutc.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Anzeigenamen für die Standardzeit der Zeitzone ab.</summary>
        <value>Der Name der Standardzeit der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeigename wird basierend auf den mit dem Windows-Betriebssystem installierte Kultur lokalisiert.  
  
 Die <xref:System.TimeZoneInfo.StandardName%2A> Eigenschaft ist identisch mit der <xref:System.TimeZone.StandardName%2A> Eigenschaft von der <xref:System.TimeZone> Klasse.  
  
 Ist die Sprache des Betriebssystems Englisch, den Wert von der <xref:System.TimeZoneInfo.StandardName%2A> Eigenschaft ist in der Regel jedoch nicht immer identisch mit der <xref:System.TimeZoneInfo.Id%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine Methode namens `DisplayDateWithTimeZoneName` , verwendet die <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode, um zu ermitteln, ob Normalzeit Name oder der Sommerzeit einer Zeitzone angezeigt.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Zeitzone über Sommerzeitregeln verfügt.</summary>
        <value>
          <see langword="true" />, wenn die Zeitzone Sommerzeit unterstützt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft für die lokale Zeitzone zurückgegebenes der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> Eigenschaft spiegelt wider, die Einstellung der Systemsteuerung **Datum und Uhrzeit** Anwendung-Kontrollkästchen, das definiert, ob das System automatisch für die Sommerzeit angepasst. Wenn er deaktiviert ist oder wenn für eine Zeitzone kein Kontrollkästchen angezeigt wird, der Wert dieser Eigenschaft ist `false`.  
  
   
  
## Examples  
 Im folgenden Beispiel ruft eine Auflistung aller Zeitzonen, die in einem lokalen System verfügbar sind, und zeigt die Namen, die Sommerzeit nicht unterstützen.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Das Objekt, das den Rückruf initiiert hat. Die Funktionen für diesen Parameter sind derzeit nicht implementiert.</param>
        <summary>Wird ausgeführt, wenn die Deserialisierung eines Objekts abgeschlossen ist.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Das <see cref="T:System.TimeZoneInfo" />-Objekt enthält ungültige oder beschädigte Daten.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Das mit Daten aufzufüllende <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt.</param>
        <param name="context">Das Ziel dieser Serialisierung (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Füllt ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den für das Serialisieren des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts erforderlichen Daten.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="info" />-Parameter ist <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt in eine serialisierte Zeichenfolge.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen von Zeitzonen abhängig sind, die in der Regel nicht in der Registrierung des Windows-Systemen definiert werden können die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode, um die erforderlichen Zeitzonen als instanziieren <xref:System.TimeZoneInfo> Objekte. Die Anwendung kann dann rufen Sie die <xref:System.TimeZoneInfo.ToSerializedString%2A> Methode, um das Objekt für die Zeitzone in eine Zeichenfolge konvertiert.  
  
 Die <xref:System.TimeZoneInfo> Objekt auch an einem Ort, die Anwendung abrufen kann bei Bedarf, gespeichert werden sollen. Mögliche Speicherorte umfassen:  
  
-   Die Registrierung.  
  
-   Eine Ressourcendatei für die Anwendung.  
  
-   Eine externe Datei, z. B. eine Textdatei.  
  
   
  
## Examples  
 Im folgende Beispiel versucht der Antarktis/Südpol abzurufenden Zeitzone des lokalen Systems. Falls dies fehlschlägt, versucht der Code zum Abrufen von Informationen über die Zeitzone aus einer Textdatei im Anwendungsverzeichnis. Wenn dieser Versuch fehlschlägt, wird der Code erstellt die Zeitzone und Informationen zu der Textdatei schreibt.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Anzeigenamen des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts zurück.</summary>
        <returns>Der Wert der <see cref="P:System.TimeZoneInfo.DisplayName" />-Eigenschaft des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Zuweisen einer Sammlung, die enthält <xref:System.TimeZoneInfo> Objekte an ein Listenfeld-Steuerelement, z. B. die <xref:System.Windows.Forms.ListBox> -Steuerelement, ruft das Steuerelement automatisch die <xref:System.TimeZoneInfo.ToString%2A> Methode, um eine Zeichenfolge zu extrahieren, die jedes Objekt in der Liste dargestellt werden soll. Daher müssen Sie keine aussagekräftige Beschreibung für das Objekt als Zeichenfolge zu speichern, und der Benutzer muss sich nicht auf diese Zeichenfolge verwenden, um das Objekt aus der Auflistung zu extrahieren. Finden Sie unter [wie: Auflisten von Zeitzonen auf einem Computer vorhandenen](~/docs/standard/datetime/enumerate-time-zones.md) für weitere Details.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.TimeZoneInfo" />-Objekt ab, das die UTC-Zone (Coordinated Universal Time) darstellt.</summary>
        <value>Ein Objekt, das die UTC-Zone (Coordinated Universal Time) darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist ein integriertes Objekt; Informationen zu diesem <xref:System.TimeZoneInfo> Objekt wird nicht aus der Registrierung abgerufen.  
  
> [!IMPORTANT]
>  Sie sollten stets die Zone (Coordinated Universal Time, UTC) über zugreifen der <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> Eigenschaft anstatt die UTC-Zeitzone, eine <xref:System.TimeZoneInfo> Object-Variablen. Dies verhindert, dass die <xref:System.TimeZoneInfo> Objektvariable aus wird durch einen Aufruf für ungültig erklärt die <xref:System.TimeZoneInfo.ClearCachedData%2A> Methode.  
  
 Coordinated Universal Time wurde zuvor als Greenwich Mean Time (GMT) bezeichnet.  
  
   
  
## Examples  
 Das folgende Beispiel ruft eine <xref:System.TimeZoneInfo> Objekt, das Coordinated Universal Time (UTC) darstellt, und gibt seine Anzeigenamen, der Name der Standardzeit und der Sommerzeit.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
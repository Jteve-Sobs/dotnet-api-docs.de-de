<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4f9940a875fefa7068a2d353d18ded8b384cbc25" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70530991" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine beliebige Zeitzone der Erde dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Zeitzone ist eine geografische Region, in der die gleiche Zeit verwendet wird.  
  
 Die <xref:System.TimeZoneInfo> -Klasse bietet deutliche Verb esse <xref:System.TimeZone> rungen gegenüber der-Klasse, die nur eingeschränkte Funktionen bereitstellt.  
  
 Die <xref:System.TimeZone> -Klasse erkennt nur die lokale Zeitzone und kann Zeiten zwischen koordinierter Weltzeit (UTC) und Ortszeit konvertieren. Ein <xref:System.TimeZoneInfo> -Objekt kann eine beliebige Zeitzone darstellen, und Methoden <xref:System.TimeZoneInfo> der-Klasse können verwendet werden, um die Zeit in einer Zeitzone in die entsprechende Zeit in einer beliebigen anderen Zeitzone zu konvertieren. Die Member der <xref:System.TimeZoneInfo> -Klasse unterstützen die folgenden Vorgänge:  
  
-   Abrufen einer Zeitzone, die bereits vom Betriebssystem definiert wurde.  
  
-   Auflisten der Zeitzonen, die auf einem System verfügbar sind.  
  
-   Umrechnen von Uhrzeiten zwischen verschiedenen Zeitzonen.  
  
-   Erstellen einer neuen Zeitzone, die nicht bereits vom Betriebssystem definiert wurde.  
  
-   Serialisieren einer Zeitzone für den späteren Abruf.  
  
> [!NOTE]
>  Eine Instanz der <xref:System.TimeZoneInfo> -Klasse ist unveränderlich. Nachdem ein Objekt instanziiert wurde, können seine Werte nicht geändert werden.  
  
 Ein <xref:System.TimeZoneInfo> -Objekt kann nicht mit dem `new` -Schlüsselwort instanziiert werden. Stattdessen müssen Sie einen der statischen Member der <xref:System.TimeZoneInfo> -Klasse, die in der folgenden Tabelle gezeigt wird, abrufen.  
  
|Statischer Elementname|Beschreibung|  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>-Methode|Erstellt eine benutzerdefinierte Zeitzone aus von der Anwendung bereitgestellten Daten.|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>-Methode|Instanziiert eine Zeitzone auf Grundlage ihres Bezeichners.|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A>-Methode|Deserialisiert einen Zeichen folgen Wert, um ein zuvor serialisiertes <xref:System.TimeZoneInfo> Objekt erneut zu erstellen.|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>-Methode|Gibt ein Aufzähl bares <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Objekt <xref:System.TimeZoneInfo> von-Objekten zurück, das alle Zeitzonen darstellt, die auf dem lokalen System verfügbar sind.|  
|<xref:System.TimeZoneInfo.Local%2A> -Eigenschaft|Instanziiert ein <xref:System.TimeZoneInfo> -Objekt, das die lokale Zeitzone darstellt.|  
|<xref:System.TimeZoneInfo.Utc%2A> -Eigenschaft|Instanziiert ein <xref:System.TimeZoneInfo> -Objekt, das die UTC-Zone darstellt.|  
  
 Sie können die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> -Methode verwenden, um eine Zeitzone zu erstellen, die nicht in der lokalen Systemregistrierung auf Windows-Systemen oder in den Zeit Zonen Klassen in der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux oder macOS definiert ist. Anschließend können Sie die- <xref:System.TimeZoneInfo.ToSerializedString%2A> Eigenschaft verwenden, um die Informationen des Zeit Zonen Objekts als Zeichenfolge zu speichern, die in einer Form gespeichert werden kann, auf die die Anwendung zugreifen kann. Sie können die <xref:System.TimeZoneInfo.FromSerializedString%2A> -Methode verwenden, um eine serialisierte Zeichenfolge zurück <xref:System.TimeZoneInfo> in ein-Objekt zu konvertieren.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeitunterschied zwischen der Standardzeit der aktuellen Zeitzone und der Coordinated Universal Time (UTC) ab.</summary>
        <value>Ein Objekt, das den Zeitunterschied zwischen der Standardzeit der aktuellen Zeitzone und der Coordinated Universal Time (UTC) angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von der <xref:System.TimeZoneInfo.BaseUtcOffset%2A> -Eigenschaft zurückgegebene Zeitspanne kann zwischen 14 Stunden liegen (für eine Zeitzone, die 14 Stunden vor der koordinierten Weltzeit (UTC) liegt) bis 14 Stunden (für eine Zeitzone, die 14 Stunden hinter UTC liegt). Zeitzonen, die sich vor der UTC befinden, haben einen positiven Offset. Zeitzonen, die sich hinter der UTC befinden, weisen einen negativen Offset auf.  
  
 Der <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Wert wird als ganze Anzahl von Minuten dargestellt. Er darf keine Sekundenbruchteile enthalten.  
  
> [!NOTE]
>  Da <xref:System.TimeZoneInfo.BaseUtcOffset%2A> eine Eigenschaft <xref:System.TimeZoneInfo> des-Objekts und nicht das <xref:System.TimeZoneInfo.AdjustmentRule> -Objekt ist, <xref:System.TimeZoneInfo> wendet die-Klasse einen einzelnen Offset von UTC auf alle Anpassungen der Zeitzone an. Um eine Zeitzone widerzuspiegeln, die den Offset von UTC geändert hat, müssen Sie eine neue Zeitzone mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> -Methode erstellen.  
  
 Die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> -Eigenschaft unterscheidet <xref:System.TimeZoneInfo.GetUtcOffset%2A> sich wie folgt von der-Methode:  
  
-   Die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> -Eigenschaft gibt den Unterschied zwischen UTC und der Standardzeit der Zeitzone zurück <xref:System.TimeZoneInfo.GetUtcOffset%2A> . die-Methode gibt den Unterschied zwischen UTC und der Uhrzeit der Zeitzone zu einem bestimmten Zeitpunkt zurück.  
  
-   Die <xref:System.TimeZoneInfo.GetUtcOffset%2A> -Methode spiegelt die Anwendung von Anpassungsregeln für die Zeitzone wider. die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> -Eigenschaft ist nicht vorhanden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> -Eigenschaft verwendet, um den Unterschied zwischen der lokalen Uhrzeit und der koordinierten Weltzeit (UTC) anzuzeigen.  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht zwischengespeicherte Zeitzonendaten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwischengespeicherte Zeit Zonendaten umfassen Daten in der lokalen Zeitzone und in der koordinierten Weltzeit (UTC).  
  
 Sie können die `ClearCachedData` -Methode aufrufen, um den Arbeitsspeicher zu reduzieren, der dem Cache von Zeitzoneninformationen der Anwendung entspricht, oder um die Tatsache widerzuspiegeln, dass die Zeitzone des lokalen Systems geändert wurde.  
  
 Das Speichern von Verweisen auf lokale und UTC-Zeitzonen ist nicht empfehlenswert. Nach `ClearCachedData` dem Abrufen der-Methode sind diese Objektvariablen nicht definierte <xref:System.TimeZoneInfo> Objekte, die nicht mehr auf <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>verweisen. Im folgenden Code löst z <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> . b <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. der zweite-aufrufbefehl eine <xref:System.ArgumentException> aus, da `local` die-Variable nicht mehr als gleich betrachtet wird.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <paramref name="dateTime" /> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung wendet <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> die-Methode alle in der `destinationTimeZone` Zeitzone geltenden Anpassungsregeln an.  
  
 Diese über <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> Ladung der-Methode bestimmt die Quell Zeitzone aus dem Wert `dateTime` der-Eigenschaft des <xref:System.DateTime.Kind%2A> -Parameters, wie in der folgenden Tabelle gezeigt.  
  
|Kind-Eigenschafts Wert|Quell Zeitzone|Methoden Verhalten|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konvertiert die lokale Zeit in die Uhrzeit in `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konvertiert die koordinierte Weltzeit (UTC) in die Uhrzeit `destinationTimeZone`in.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Angenommen, <xref:System.TimeZoneInfo.Local%2A>ist.|Konvertiert die lokale Zeit in die Uhrzeit in `destinationTimeZone`.|  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurück <xref:System.DateTime> gegebenen Werts wird wie in der folgenden Tabelle dargestellt festgelegt.  
  
|Bedingung|Zurückgegebener Kind-Eigenschafts Wert|  
|---------------|----------------------------------|  
|`destinationTimeZone` ist <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` ist <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Alle anderen Datums-und Uhrzeitwerte und Ziel Zeitzonen.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert des `dateTime` -Parameters eine mehrdeutige Ortszeit ist, wird er als Standardzeit interpretiert. Wenn der `dateTime` -Parameter eine ungültige Ortszeit ist, löst diese Methode <xref:System.ArgumentException>eine aus.  
  
 Wenn die Konvertierung von `dateTime` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>bzw.  
  
 Sie können auch in oder aus UTC konvertieren, indem Sie <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> die <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> -Methode und die-Methode aufrufen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Array von Datums-und Uhrzeitwerten in Uhrzeiten in der Eastern Time Zone der USA und Kanada konvertiert. Es zeigt, dass die Quell Zeitzone von der <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Eigenschaft des Quell <xref:System.DateTime> Werts abhängig ist. Außerdem wird veranschaulicht, dass <xref:System.TimeZoneInfo.ConvertTime%2A> die-Methode Zeit Zonen Anpassungen berücksichtigt, da eine Zeit Zonen Anpassung in den Quell-und Ziel Zeitzonen um 2:00 Uhr stattfindet. am 7. November 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Wert des <paramref name="dateTime" />-Parameters, der eine ungültige Zeit darstellt.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert des <paramref name="destinationTimeZone" />-Parameters ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <paramref name="dateTime" /> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung wendet <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> die-Methode alle in der `destinationTimeZone` Zeitzone geltenden Anpassungsregeln an.  
  
 Diese Überladung unterscheidet sich von den anderen über <xref:System.TimeZoneInfo.ConvertTime%2A> Ladungen der-Methode <xref:System.DateTimeOffset> , indem ein Wert als erster Parameter angenommen wird. Dadurch wird das Datum und die Uhrzeit als Offset von der koordinierten Weltzeit (UTC) anstelle von Datum und Uhrzeit in einer bestimmten Zeitzone identifiziert. Folglich kann der `dateTimeOffset` -Parameter nicht entweder eine mehrdeutige Zeit oder eine ungültige Uhrzeit darstellen.  
  
 Bei der Umstellung `dateTimeOffset` des Werts in die Uhrzeit in der Ziel Zeitzone berücksichtigt diese Methode alle in der Ziel Zeitzone geltenden Anpassungsregeln.  
  
 Wenn die Konvertierung von `dateTimeOffset` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>bzw.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Array von <xref:System.DateTimeOffset> -Werten in Zeiten in der Eastern Time Zone der USA und Kanada konvertiert. Es veranschaulicht, dass <xref:System.TimeZoneInfo.ConvertTime%2A> die-Methode Zeit Zonen Anpassungen berücksichtigt, da eine Zeit Zonen Anpassung in den Quell-und Ziel Zeitzonen um 2:00 Uhr stattfindet. am 7. November 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert des <paramref name="destinationTimeZone" />-Parameters ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZone">Die Zeitzone von <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <paramref name="dateTime" /> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit aus einer Zeitzone in ein andere.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone, die dem <paramref name="dateTime" />-Parameter in der Quellzeitzone entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung wendet <xref:System.TimeZoneInfo.ConvertTime%2A> die-Methode alle in der `destinationTimeZone` Zeitzone geltenden Anpassungsregeln an.  
  
 Der Wert der <xref:System.DateTime.Kind%2A> -Eigenschaft `dateTime` des-Parameters muss dem `sourceTimeZone` -Parameter entsprechen, wie in der folgenden Tabelle gezeigt.  
  
|DateTime. Kind-Wert|sourceTimeZone-Wert|Methoden Verhalten|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>Gleichheits.|Konvertiert `dateTime` in die Zeit der Ziel Zeitzone.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Löst eine <xref:System.ArgumentException>aus.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>Gleichheits.|Konvertiert `dateTime` in die Zeit der Ziel Zeitzone.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Löst eine <xref:System.ArgumentException>aus.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Irgendeiner.|Konvertiert `dateTime` in die Zeit der Ziel Zeitzone.|  
  
 Sie können auch in oder aus der koordinierten Weltzeit (UTC) konvertieren, indem <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> Sie <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> die-Methode und die-Methode aufrufen.  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurück <xref:System.DateTime> gegebenen Werts wird wie in der folgenden Tabelle dargestellt festgelegt.  
  
|Bedingung|Zurückgegebener Kind-Eigenschafts Wert|  
|---------------|----------------------------------|  
|Das `destinationTimeZone`-Argument lautet <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Das `destinationTimeZone`-Argument lautet <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Alle anderen Datums-und Uhrzeitwerte, Quell Zeitzonen und Ziel Zeitzonen.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert des `dateTime` -Parameters eine mehrdeutige Zeit in der Quell Zeitzone ist, wird er als Standardzeit interpretiert. Wenn der `dateTime` -Parameter eine ungültige Zeit in der Quell Zeitzone ist, löst diese Methode <xref:System.ArgumentException>eine aus.  
  
 Wenn die Konvertierung von `dateTime` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>bzw.  
  
 Die <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> -Methode löst <xref:System.ArgumentException> eine Ausnahme aus <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> , `dateTime` wenn die-Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> des- `sourceTimeZone` Arguments ist, <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>aber das-Argument nicht ist. Um zu ermitteln, ob es sich bei der Quell Zeitzone um die lokale Zeitzone oder die universelle Zeitzone handelt, testet die Methode auf Verweis Gleichheit, anstatt auf Wert <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> Gleichheit mit der-Methode zu testen. Beachten Sie <xref:System.TimeZoneInfo> , dass-Objekte, die die lokale Zeitzone darstellen und durch Aufrufen der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode abgerufen werden, nicht über die <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>referenzielle Gleichheit mit verfügen. Außerdem verfügen <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>Objekte, die die lokale oder universelle Zeitzone darstellen und durch Iteration der von der-Methode zurückgegebenen Auflistung abgerufen werden, nicht über die referenzielle Gleichheit mit oder. <xref:System.TimeZoneInfo> Als Alternative können Sie die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> -Methode aufzurufen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der- <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> Methode zum Konvertieren von der Hawaiisch Standard Zeit in die lokale Zeit.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters ist <see cref="F:System.DateTimeKind.Local" />, aber der <paramref name="sourceTimeZone" />-Parameter entspricht nicht <see cref="F:System.DateTimeKind.Local" />.  
  
- oder - 
Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters ist <see cref="F:System.DateTimeKind.Utc" />, aber der <paramref name="sourceTimeZone" />-Parameter entspricht nicht <see cref="P:System.TimeZoneInfo.Utc" />.  
  
- oder - 
Der <paramref name="dateTime" />-Parameter gibt eine ungültige Zeit an (d. h. er stellt eine Zeit dar, die aufgrund der Anpassungsregeln einer Zeitzone nicht vorhanden ist).</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="sourceTimeZone" />-Parameter ist <see langword="null" />.  
  
- oder - 
Der <paramref name="destinationTimeZone" />-Parameter ist <see langword="null" />.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert eine Zeit auf Grundlage eines Zeitzonenbezeichners in die Zeit in einer anderen Zeitzone.</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage des Bezeichners der Zeitzone in die Zeit in einer anderen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung wendet <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> die-Methode alle in der `destinationTimeZoneId` Zeitzone geltenden Anpassungsregeln an.  
  
 Diese Überladung ist größtenteils identisch mit dem <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> Aufrufen der-Methode, mit der Ausnahme, dass Sie die Ziel Zeitzone anhand ihres Bezeichners anstelle eines Objekt Verweises angeben können. Diese Methode ist besonders nützlich, wenn Sie eine Uhrzeit konvertieren müssen, ohne das Zeit Zonen Objekt abzurufen, das Ihr entspricht, und Sie nicht wissen müssen, ob die konvertierte Zeit eine Standard-oder Sommerzeit ist.  
  
 Die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> -Methode bestimmt die Quell Zeitzone aus dem Wert `dateTime` der-Eigenschaft des <xref:System.DateTime.Kind%2A> -Parameters, wie in der folgenden Tabelle gezeigt.  
  
|Kind-Eigenschafts Wert|Quell Zeitzone|Methoden Verhalten|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konvertiert die lokale Zeit in die Uhrzeit in `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konvertiert die koordinierte Weltzeit (UTC) in die Uhrzeit `destinationTimeZone`in.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Angenommen, <xref:System.TimeZoneInfo.Local%2A>ist.|Konvertiert die lokale Zeit in die Uhrzeit in `destinationTimeZone`.|  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurück <xref:System.DateTime> gegebenen Werts wird wie in der folgenden Tabelle dargestellt festgelegt.  
  
|Bedingung|Zurückgegebener Kind-Eigenschafts Wert|  
|---------------|----------------------------------|  
|`destinationTimeZone` ist `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Ein beliebiger anderer `destinationTimeZone` Wert.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert des `dateTime` -Parameters eine mehrdeutige Ortszeit ist, wird er als Standardzeit interpretiert. Wenn der `dateTime` -Parameter eine ungültige Ortszeit ist, löst diese Methode <xref:System.ArgumentException>eine aus.  
  
 Wenn die Konvertierung von `dateTime` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>bzw.  
  
 Diese Methode ruft Informationen über die Zeitzone ab, deren Bezeichner durch den `destinationTimeZoneId` -Parameter aus der Registrierung auf Windows-Systemen und aus der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und macOS angegeben wird. Es kann kein Zeit Zonen Objekt abgerufen werden, das mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> -Methode erstellt wird. Der `destinationTimeZoneId` -Parameter muss genau mit dem-Bezeichner der Zeitzone übereinstimmen, jedoch nicht im Fall einer erfolgreichen Übereinstimmung, d. h. beim Vergleich von `destinationTimeZoneId` mit Zeit Zonen Bezeichnern wird die Groß-/Kleinschreibung nicht beachtet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage des Bezeichners der Zeitzone in die Zeit in einer anderen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung wendet <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> die-Methode alle in der `destinationTimeZoneId` Zeitzone geltenden Anpassungsregeln an.  
  
 Diese Überladung ist mit dem Aufrufen <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> der-Methode identisch, mit dem Unterschied, dass Sie die Ziel Zeitzone anhand ihres Bezeichners anstelle eines Objekt Verweises angeben kann. Diese Methode ist besonders nützlich, wenn Sie eine Uhrzeit konvertieren müssen, ohne das Zeit Zonen Objekt abzurufen, das Ihr entspricht, und Sie nicht wissen müssen, ob die konvertierte Zeit eine Standard-oder Sommerzeit ist.  
  
 Da der `dateTimeOffset` -Parameter ein Datum und eine Uhrzeit mit dem Offset dieser Uhrzeit von der koordinierten Weltzeit (UTC) darstellt, kann er weder eine mehrdeutige Zeit noch eine ungültige Zeit darstellen.  
  
 Diese Methode ruft die Zeitzone ab, deren Bezeichner durch den `destinationTimeZoneId` -Parameter aus der Registrierung auf Windows-Systemen und aus der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und macOS angegeben wird. Es kann kein Zeit Zonen Objekt abgerufen werden, das mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> -Methode erstellt wird. Der `destinationTimeZoneId` -Parameter muss genau mit dem-Bezeichner der Zeitzone übereinstimmen, jedoch nicht im Fall einer erfolgreichen Übereinstimmung, d. h. beim Vergleich von `destinationTimeZoneId` mit Zeit Zonen Bezeichnern wird die Groß-/Kleinschreibung nicht beachtet.  
  
 Bei der Umstellung `dateTimeOffset` des Werts in die Uhrzeit in der Ziel Zeitzone berücksichtigt die-Methode alle in der Ziel Zeitzone geltenden Anpassungsregeln.  
  
 Wenn die Konvertierung von `dateTimeOffset` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>bzw.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZoneId">Der Bezeichner der Quellzeitzone.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage von Zeitzonenbezeichnern von einer Zeitzone in eine andere.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone, die dem <paramref name="dateTime" />-Parameter in der Quellzeitzone entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung wendet <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> die-Methode alle in der `destinationTimeZoneId` Zeitzone geltenden Anpassungsregeln an.  
  
 Obwohl Sie mit der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> -Methode vergleichbar ist, können Sie verwenden <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> , um die Quell-und Ziel Zeitzonen mithilfe ihrer-IDs anstelle ihrer <xref:System.TimeZoneInfo> -Objekte anzugeben. Diese Methode ist besonders nützlich, wenn Sie eine Uhrzeit konvertieren müssen, ohne das Zeit Zonen Objekt abzurufen, das Ihr entspricht, und Sie nicht wissen müssen, ob die konvertierte Zeit eine Standard-oder Sommerzeit ist.  
  
 Diese Methode ruft die Zeitzonen ab, deren Bezeichner der `sourceTimeZoneId` -Parameter und der- `destinationTimeZoneId` Parameter aus der Registrierung auf Windows-Systemen und aus der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und macOS sind. Es können keine Zeit Zonen Objekte abgerufen werden, die mit <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> der-Methode erstellt werden.  
  
 Der Wert der <xref:System.DateTime.Kind%2A> -Eigenschaft `dateTime` des-Parameters muss dem `sourceTimeZoneId` -Parameter entsprechen, wie in der folgenden Tabelle gezeigt.  
  
|DateTime. Kind-Wert|sourceTimeZone-Wert|Methoden Verhalten|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist `TimeZoneInfo.Utc.Id`Gleichheits.|Konvertiert `dateTime` in die Zeit der Ziel Zeitzone.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Utc.Id`.|Löst eine <xref:System.ArgumentException>aus.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist `TimeZoneInfo.Local.Id`Gleichheits.|Konvertiert `dateTime` in die Zeit der Ziel Zeitzone.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Does not equal `TimeZoneInfo.Local.Id`.|Löst eine <xref:System.ArgumentException>aus.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Irgendeiner.|Konvertiert `dateTime` in die Zeit der Ziel Zeitzone.|  
  
 Da Sie sich auf <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Aufrufe der `sourceTimeZoneId` -Methode stützt, <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> führt die-Methode eine Suche ohne Berücksichtigung der Groß-und Kleinschreibung durch, `destinationTimeZoneId`um die Zeitzonen zu suchen, die und entsprechen.  
  
 Wenn der Wert des `dateTime` -Parameters eine mehrdeutige Zeit in der Quell Zeitzone ist, wird er als Standardzeit interpretiert. Wenn der `dateTime` -Parameter eine ungültige Zeit in der Quell Zeitzone ist, löst diese Methode <xref:System.ArgumentException>eine aus.  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurück <xref:System.DateTime> gegebenen Werts wird auf <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> festgelegt, es sei denn, die Ziel Zeitzone ist koordinierte Weltzeit (UTC). in diesem <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>Fall wird Sie auf festgelegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> -Methode verwendet, um die Zeit anzuzeigen, die der lokalen Systemzeit in acht Städten der Welt entspricht.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters entspricht nicht der Quellzeitzone.  
  
- oder - 
 <paramref name="dateTime" /> ist eine ungültige Zeit in der Quellzeitzone.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die Zeitzonenbezeichner wurden gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer hat nicht die Berechtigungen, die dazu erforderlich sind, aus den Registrierungsschlüsseln zu lesen, die Zeitzonendaten enthalten.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="sourceTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.  
  
- oder - 
Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Die Coordinated Universal Time (UTC).</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <paramref name="dateTime" /> konvertiert werden soll.</param>
        <summary>Konvertiert eine Coordinated Universal Time (UTC) in die Zeit in einer angegebenen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone. Die <see cref="P:System.DateTime.Kind" />-Eigenschaft ist <see cref="F:System.DateTimeKind.Utc" />, wenn <paramref name="destinationTimeZone" /> den Wert <see cref="P:System.TimeZoneInfo.Utc" /> hat, andernfalls hat die <see cref="P:System.DateTime.Kind" />-Eigenschaft den Wert <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung wendet <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> die-Methode alle in der `destinationTimeZone` Zeitzone geltenden Anpassungsregeln an.  
  
 Das genaue Verhalten dieser Methode hängt vom Wert der <xref:System.DateTime.Kind%2A> -Eigenschaft `dateTime` des-Parameters ab, wie in der folgenden Tabelle gezeigt.  
  
|DateTime. Kind-Eigenschaft|Umwandeln|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Löst eine <xref:System.ArgumentException>aus.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert die koordinierte Weltzeit (UTC).|  
  
 Wenn die Konvertierung von `dateTime` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>bzw.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die koordinierte Weltzeit (UTC) in die zentrale Zeit konvertiert.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft von <paramref name="dateTime" /> ist <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert ein Datum und eine Uhrzeit in Coordinated Universal Time (UTC).</summary>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <summary>Konvertiert das angegebene Datum und die Uhrzeit in Coordinated Universal Time (UTC).</summary>
        <returns>Die Coordinated Universal Time (UTC), die dem <paramref name="dateTime" />-Parameter entspricht. Die <see cref="T:System.DateTime" />-Eigenschaft des <see cref="P:System.DateTime.Kind" />-Werts ist immer auf <see cref="F:System.DateTimeKind.Utc" /> festgelegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die genaue Konvertierung hängt vom Wert der <xref:System.DateTime.Kind%2A> -Eigenschaft `dateTime` des-Parameters ab, wie in der folgenden Tabelle gezeigt.  
  
|DateTime. Kind-Eigenschaft|Umwandeln|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Konvertiert von der Ortszeit in die koordinierte Weltzeit (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Nimmt `dateTime` an, dass Ortszeit ist, und konvertiert von Ortszeit in UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Gibt `dateTime` unverändert zurück.|  
  
 Wenn `dateTime` einer mehrdeutigen Ortszeit entspricht, geht diese Methode davon aus, dass es sich um eine Standard Ortszeit handelt. Wenn `dateTime` einer ungültigen Ortszeit entspricht, löst die Methode eine <xref:System.ArgumentException>aus.  
  
> [!NOTE]
>  Wenn die lokale Zeitzone des aktuellen Computers mehrere Anpassungsregeln enthält, kann diese über <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> Ladung der-Methode Ergebnisse zurückgeben, die sich von der-Methode und der <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> - <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> Methode unterscheiden. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType>wendet die aktuelle Anpassungs Regel immer auf die Zeit Zonen Konvertierung an, unabhängig `dateTime` davon, ob Sie in Ihrem Datumsbereich liegt oder nicht. Und bei der Ausführung [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]von <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> wird von auch die aktuelle Anpassungs Regel auf die Zeit Zonen Konvertierung angewendet, `dateTime` unabhängig davon, ob der Datumsbereich liegt oder nicht.  
  
 Wenn die UTC-Entsprechung der `dateTime` liegt vor <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder höher, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue> oder <xref:System.DateTime.MaxValue>bzw.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Konvertierung der Werte, deren <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, und <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>bzw. Außerdem wird die Konvertierung mehrdeutiger und Ungültiger Zeiten veranschaulicht.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> gibt <see langword="true" /> zurück.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZone">Die Zeitzone von <paramref name="dateTime" />.</param>
        <summary>Konvertiert die Zeit in einer angegebenen Zeitzone in Coordinated Universal Time (UTC).</summary>
        <returns>Die Coordinated Universal Time (UTC), die dem <paramref name="dateTime" />-Parameter entspricht. Die <see cref="T:System.DateTime" />-Eigenschaft des <see cref="P:System.DateTime.Kind" />-Objekts ist immer auf <see cref="F:System.DateTimeKind.Utc" /> festgelegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.DateTime.Kind%2A> <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> -Eigenschaft `dateTime` des-Parameters <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>ist `sourceTimeZone` und der-Parameter ist, `dateTime` gibt diese Methode zurück, ohne dass eine Konvertierung durchgeführt wird.  
  
 Wenn `dateTime` einer mehrdeutigen Zeit entspricht, geht diese Methode davon aus, dass es sich um die Standardzeit der Quell Zeitzone handelt. Wenn `dateTime` einem ungültigen Zeitpunkt entspricht, löst diese Methode eine <xref:System.ArgumentException>aus.  
  
 Wenn der koordinierten Weltzeit (Coordinated Universal Time, UTC)-Äquivalent `dateTime` liegt vor <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder höher, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue> oder <xref:System.DateTime.MaxValue>bzw.  
  
   
  
## Examples  
 Im folgenden Beispiel wird das aktuelle Datum aus dem lokalen System abgerufen und in die koordinierte Weltzeit (UTC) konvertiert. Anschließend wird es in die Tokyo-Standardzeit konvertiert und schließlich von der Tokio-Standardzeit wieder in die UTC konvertiert. Beachten Sie, dass die zwei UTC-Zeiten identisch sind.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> ist <see cref="F:System.DateTimeKind.Utc" />, und <paramref name="sourceTimeZone" /> ist nicht gleich <see cref="P:System.TimeZoneInfo.Utc" />.  
  
- oder - 
 <paramref name="dateTime" />.<see langword="Kind" /> ist <see cref="F:System.DateTimeKind.Local" />, und <paramref name="sourceTimeZone" /> ist nicht gleich <see cref="P:System.TimeZoneInfo.Local" />.  
  
- oder - 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> gibt <see langword="true" /> zurück.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> ist <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/converting-between-time-zones.md">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Definiert eine Zeitzone, die auf dem lokalen Computer nicht gefunden wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen und einem Anzeigenamen für die Standardzeit.</summary>
        <returns>Die neue Zeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung der- Methode eignet sich zum Erstellen einer Zeitzone, die keine Anpassungen aufweist (d. h. eine Zeitzone, die Sommerzeit nicht unterstützt). <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> Verwenden Sie entweder die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode oder die-Methode, um eine Zeitzone zu definieren, die Anpassungen für die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Sommerzeit einschließt.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die für die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode bereitgestellt werden, <xref:System.TimeZoneInfo> und den Eigenschaften des-Objekts, die durch den-Methoden Aufrufwert zurückgegeben werden.  
  
|Parameter "kreatecustomtimezone"|Timezoneingefo (Eigenschaft)|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 In der Regel sind der Standardzeit Name der Zeitzone und der zugehörige Bezeichner identisch. Allerdings sollte die Länge des Bezeichners der Zeitzone nicht länger als 32 Zeichen sein. Die an den `displayName` -Parameter übergebenen Zeichenfolge folgt einem Recht standardmäßigen Format. Der erste Teil des anzeigen Amens ist der Basis Offset der Zeitzone von der koordinierten Weltzeit, der durch das Akronym GMT (für die Greenwich Mean Time) in Klammern eingeschlossen wird. Danach folgt eine Zeichenfolge, die die Zeitzone selbst, eine oder mehrere der Städte, Regionen oder Länder in der Zeitzone oder beides identifiziert. Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine benutzerdefinierte Zeitzone für die Mawson-und Holme-Bay-Regionen der Antarktis erstellt. Anschließend wird das Ergebnis der Umstellung der lokalen Zeit in die Zeit in der neuen Zeitzone angezeigt.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
- oder - 
Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md">Gewusst wie: Erstellen von Zeitzonen ohne Anpassungsregeln</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <param name="daylightDisplayName">Der Name der Sommerzeit der neuen Zeitzone.</param>
        <param name="adjustmentRules">Ein Array, das den UTC-Basisoffset für einen bestimmten Zeitraum erhöht.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen, einem Namen für die Standardzeit, einen Namen für die Sommerzeit und Regeln für die Sommerzeit.</summary>
        <returns>Ein <see cref="T:System.TimeZoneInfo" />-Objekt, das die neue Zeitzone darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese über <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Ladung der-Methode eignet sich zum Erstellen einer Zeitzone, die Sommerzeit unterstützt. Um eine Zeitzone zu definieren, die keine Sommerzeit unterstützt, verwenden Sie entweder <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> die- <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode oder die-Methode.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die für die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode bereitgestellt werden, <xref:System.TimeZoneInfo> und den Membern des-Objekts, die durch den-Methoden aufzurufen werden.  
  
|Parameter "kreatecustomtimezone"|Timezoneingefo-Member|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Ein Array von <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> Objekten, die von <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> der-Methode zurückgegeben werden.|  
  
 In der Regel sind der Standardzeit Name der Zeitzone und der zugehörige Bezeichner identisch. Allerdings sollte die Länge des Bezeichners der Zeitzone nicht länger als 32 Zeichen sein. Die an den `displayName` -Parameter übergebenen Zeichenfolge folgt einem Recht standardmäßigen Format. Der erste Teil des anzeigen Amens ist der Basis Offset der Zeitzone von der koordinierten Weltzeit, der durch das Akronym GMT (für die Greenwich Mean Time) in Klammern eingeschlossen wird. Danach folgt eine Zeichenfolge, die die Zeitzone selbst, eine oder mehrere der Städte, Regionen oder Länder in der Zeitzone oder beides identifiziert. Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Der `baseUtcOffset` -Parameter definiert den Offset der benutzerdefinierten Zeitzone von der koordinierten Weltzeit (UTC) für alle Anpassungsregeln der Zeitzone. Anders ausgedrückt geht das <xref:System.TimeZoneInfo> Objektmodell davon aus, dass der Offset der Zeitzone von UTC während der gesamten Lebensdauer der Zeitzone konstant ist, und ist unabhängig von bestimmten Anpassungsregeln vorhanden. Um eine Zeitzone widerzuspiegeln, die den Offset von UTC geändert hat, müssen Sie ein neues Zeit Zonen Objekt erstellen.  
  
 Die Anpassungsregeln einer Zeitzone werden wie folgt definiert:  
  
1.  Aufrufen der <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> -Methode oder <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> der-Methode, um die Anfangs-und Endzeit der Übergangszeit für jede Anpassungs Regel zu definieren.  
  
2.  Aufrufen der <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> -Methode für jede Anpassungs Regel.  
  
3.  Zuweisen der Anpassungsregeln zu einem Array, das als `adjustmentRules` -Parameter übergeben werden kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine benutzerdefinierte Zeitzone für die Palmer-Station und die Anvers Insel in der Antarktis erstellt. Anschließend wird die lokale Zeit in die Zeit in der neuen Zeitzone konvertiert, und das Ergebnis wird angezeigt.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
- oder - 
Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln überlappen sich.  
  
- oder - 
Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln sind nicht in chronologischer Reihenfolge.  
  
- oder - 
Mindestens ein <paramref name="adjustmentRules" />-Element ist <see langword="null" />.  
  
- oder - 
Auf ein Datum können mehrere Anpassungsregeln angewendet werden.  
  
- oder - 
Die Summe aus dem <paramref name="baseUtcOffset" />-Parameter und dem <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />-Wert von einem oder mehreren Objekten im <paramref name="adjustmentRules" />-Array liegt über 14 Stunden oder unter -14 Stunden.</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md">Gewusst wie: Erstellen von Zeitzonen mit Anpassungsregeln</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein <see cref="T:System.TimeSpan" />-Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <param name="daylightDisplayName">Der Name der Sommerzeit der neuen Zeitzone.</param>
        <param name="adjustmentRules">Ein Array von <see cref="T:System.TimeZoneInfo.AdjustmentRule" />-Objekten, die den UTC-Basisoffset für einen bestimmten Zeitraum erhöhen.</param>
        <param name="disableDaylightSavingTime"><see langword="true" />, um alle Sommerzeitinformationen in <paramref name="adjustmentRules" /> mit dem neuen Objekt zu verwerfen, andernfalls <see langword="false" />.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen, einem Namen für die Standardzeit, einen Namen für die Sommerzeit, Regeln für die Sommerzeit und einem Wert, der angibt, ob das zurückgegebene Objekt Sommerzeitinformationen darstellt.</summary>
        <returns>Die neue Zeitzone. Wenn der <paramref name="disableDaylightSavingTime" />-Parameter <see langword="true" /> ist, verfügt das zurückgegebene Objekt nicht über Sommerzeitdaten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Überladung der-Methode <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> können Sie eine benutzerdefinierte Zeitzone erstellen, deren Unterstützung für die Sommerzeit durch Bedingungen zur Laufzeit bestimmt werden kann.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die für die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode bereitgestellt werden, <xref:System.TimeZoneInfo> und den Membern des-Objekts, die durch den-Methoden aufzurufen werden.  
  
|Parameter "kreatecustomtimezone"|Timezoneingefo (Eigenschaft)|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>Wenn `disableDaylightSavingTime` ist `false`; <xref:System.String.Empty?displayProperty=nameWithType> Wenn `disableDaylightSavingTime`  ist . `true`|  
|`adjustmentRules`|Ein Array von <xref:System.TimeZoneInfo.AdjustmentRule> -Objekten, die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> von der `disableDaylightSavingTime` - `false`Methode zurückgegeben werden, wenn ist <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> `true`. ein `disableDaylightSavingTime` leeres Array, das von der Methode zurückgegeben wird|  
|`disableDaylightSavingTime`|Nicht <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 In der Regel sind der Standardzeit Name der Zeitzone und der zugehörige Bezeichner identisch. Allerdings sollte die Länge des Bezeichners der Zeitzone nicht länger als 32 Zeichen sein. Die an den `displayName` -Parameter übergebenen Zeichenfolge folgt einem Recht standardmäßigen Format. Der erste Teil des anzeigen Amens ist der Basis Offset der Zeitzone von der koordinierten Weltzeit, der durch das Akronym GMT (für die Greenwich Mean Time) in Klammern eingeschlossen wird. Danach folgt eine Zeichenfolge, die die Zeitzone selbst, eine oder mehrere der Städte, Regionen oder Länder in der Zeitzone oder beides identifiziert. Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Die Anpassungsregeln einer Zeitzone werden wie folgt definiert:  
  
1.  Aufrufen der <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> -Methode oder <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> der-Methode, um die Anfangs-und endübergangs Regeln für jede Anpassungs Regel zu definieren.  
  
2.  Aufrufen der <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> -Methode für jede Anpassungs Regel.  
  
3.  Zuweisen der Anpassungsregeln zu einem Array, das als `adjustmentRules` -Parameter übergeben werden kann.  
  
 Wenn `disableDaylightSavingTime` der- `false`Parameter ist, ist der Vorgang dieser Methode mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Überladung identisch. Wenn `disableDaylightSavingTime` <xref:System.TimeZoneInfo.DaylightName%2A> ist `true`, enthält das zurückgegebene-Objekt keine Anpassungsregeln und keine-Eigenschaft, deren Wert eine leere Zeichenfolge ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine benutzerdefinierte Zeitzone für die Palmer-Station und die Anvers Insel in der Antarktis erstellt. Der `disableDaylightSavingTime` -Parameter wird im Aufrufen der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode auf `true`festgelegt. Anschließend wird der Name der Sommerzeit der neuen Zeitzone angezeigt, sofern vorhanden, und die Anzahl der Anpassungsregeln, um zu bestätigen, dass die neue Zeitzone keine Sommerzeit Informationen enthält.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
- oder - 
Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln überlappen sich.  
  
- oder - 
Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln sind nicht in chronologischer Reihenfolge.  
  
- oder - 
Mindestens ein <paramref name="adjustmentRules" />-Element ist <see langword="null" />.  
  
- oder - 
Auf ein Datum können mehrere Anpassungsregeln angewendet werden.  
  
- oder - 
Die Summe aus dem <paramref name="baseUtcOffset" />-Parameter und dem <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />-Wert von einem oder mehreren Objekten im <paramref name="adjustmentRules" />-Array liegt über 14 Stunden oder unter -14 Stunden.</exception>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md">Gewusst wie: Erstellen von Zeitzonen ohne Anpassungsregeln</related>
        <related type="Article" href="~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md">Gewusst wie: Erstellen von Zeitzonen mit Anpassungsregeln</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Anzeigenamen für die Sommerzeit der aktuellen Zeitzone ab.</summary>
        <value>Der Anzeigename für die Sommerzeit der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeige Name wird basierend auf der mit dem Windows-Betriebssystem installierten Kultur lokalisiert.  
  
 Eine <xref:System.TimeZoneInfo.DaylightName%2A> -Eigenschaft, deren Wert <xref:System.String.Empty?displayProperty=nameWithType> nicht `null` ist oder nicht notwendigerweise angibt, dass die Zeitzone die Sommerzeit unterstützt. Überprüfen Sie den Wert der <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> -Eigenschaft, um zu bestimmen, ob die Zeitzone die Sommerzeit unterstützt.  
  
 In den meisten Fällen ist `DaylightName` die-Eigenschaft der vom System definierten Zeitzonen nicht <xref:System.String.Empty?displayProperty=nameWithType> oder `null`. Die <xref:System.TimeZoneInfo.DaylightName%2A> -Eigenschaft der benutzerdefinierten Zeitzonen kann jedoch auf <xref:System.String.Empty?displayProperty=nameWithType>festgelegt werden. Dies tritt auf, wenn benutzerdefinierte Zeitzonen durch die <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> -oder <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> die-über `disableDaylightSavingTime` Ladung erstellt `true`werden und der-Parameter ist. Daher sollte der Code niemals davon ausgehen, dass der Wert <xref:System.TimeZoneInfo.DaylightName%2A> der Eigenschaft nicht `null` oder leer ist.  
  
 Die <xref:System.TimeZoneInfo.DaylightName%2A> -Eigenschaft entspricht der <xref:System.TimeZone.DaylightName%2A> -Eigenschaft der <xref:System.TimeZone> -Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Methode mit `DisplayDateWithTimeZoneName` dem Namen definiert <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> , die die-Methode verwendet, um zu bestimmen, ob der Name der Standardzeit und der Sommerzeit einer Zeitzone angezeigt werden soll.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den allgemeinen Anzeigenamen ab, der die Zeitzone darstellt.</summary>
        <value>Der allgemeine Anzeigenamen der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeige Name wird basierend auf der mit dem Windows-Betriebssystem installierten Kultur lokalisiert.  
  
 Zeit Zonen-anzeigen Amen für Windows-System Zeitzonen folgen einem Recht standardmäßigen Format. Der erste Teil des anzeigen Amens ist der Basis Offset der Zeitzone von der koordinierten Weltzeit, der durch das Akronym GMT (für die Greenwich Mean Time) in Klammern eingeschlossen wird. Für die koordinierte Weltzeit wird das GMT-Akronym ohne Offset in Klammern eingeschlossen.  Danach folgt eine Zeichenfolge, die die Zeitzone oder eine oder mehrere der Städte, Regionen oder Länder in der Zeitzone angibt. Beispiel:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.TimeZoneInfo> -Objekt abgerufen, das die lokale Zeitzone darstellt und den anzeigen Amen, den Standardzeit Namen und den Namen der Sommerzeit ausgibt. Die Ausgabe wird für ein System in der US Pacific Standard Time-Zone angezeigt.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob zwei <see cref="T:System.TimeZoneInfo" />-Objekte gleich sind.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">Ein zweites Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt und ein anderes Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="obj" /> ein <see cref="T:System.TimeZoneInfo" />-Objekt und gleich der aktuellen Instanz ist; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode konvertiert oder `obj` wandelt sie in ein <xref:System.TimeZoneInfo> -Objekt um und vergleicht sie mit der aktuellen Instanz. Der Test für Gleichheit basiert auf einem Vergleich von Werten. Die aktuelle <xref:System.TimeZoneInfo> Instanz und `obj` werden unter den folgenden Bedingungen als gleich betrachtet:  
  
-   Der Lauf Zeittyp von `obj` ist <xref:System.TimeZoneInfo>.  
  
-   Die beiden-Objekte haben denselben <xref:System.TimeZoneInfo.Id%2A> -Eigenschafts Wert.  
  
-   Die beiden-Objekte verfügen über dieselben Anpassungsregeln.  
  
 Wenn `obj` gleich `null` ist, gibt die Methode `false` zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.Equals%28System.Object%29> -Methode verwendet, um zu bestimmen, ob die lokale Zeitzone Pacific Time oder Eastern Time ist.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">Ein zweites Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt und ein anderes <see cref="T:System.TimeZoneInfo" />-Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn die beiden <see cref="T:System.TimeZoneInfo" />-Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gleichheit basiert auf einem Vergleich von-Werten. Zwei <xref:System.TimeZoneInfo> Objekte werden unter den folgenden Bedingungen als gleich betrachtet:  
  
-   Der Wert Ihrer <xref:System.TimeZoneInfo.Id%2A> -Eigenschaft ist identisch.  
  
-   Sie verfügen über dieselben Anpassungsregeln.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType>Gibt den booleschen Wert zurück, der sich aus der Auswertung des folgenden Ausdrucks ergibt:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Wenn der `other` -Parameter ein nicht initialisiertes <xref:System.TimeZoneInfo> Objekt ist, gibt diese `false`Methode zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> -Methode verwendet, um zu bestimmen, ob die lokale Zeitzone Pacific Time oder Eastern Time ist.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner, der der <see cref="P:System.TimeZoneInfo.Id" />-Eigenschaft entspricht.</param>
        <summary>Instanziiert ein neues <see cref="T:System.TimeZoneInfo" />-Objekt basierend auf dessen Bezeichner.</summary>
        <returns>Ein Objekt, dessen Bezeichner der Wert des <paramref name="id" />-Parameters ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der `id` -Parameter muss genau mit dem-Bezeichner der Zeitzone übereinstimmen, jedoch nicht im Fall einer erfolgreichen Übereinstimmung, d. h. beim Vergleich von `id` mit Zeit Zonen Bezeichnern wird die Groß-/Kleinschreibung nicht beachtet. Wenn Sie Zeit Zonen Objekte basierend auf partiellen Übereinstimmungen abrufen möchten, können Sie benutzerdefinierte Prozeduren schreiben, die mit der Schreib <xref:System.TimeZoneInfo> geschützten Auflistung von- <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Objekten arbeiten, die von der-Methode zurückgegeben werden.  
  
 Auf Windows-Systemen `FindSystemTimeZoneById` versucht, eine `id` Übereinstimmung mit den Unterschlüssel Namen des Branchs HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones der Registrierung herzustellen. Unter Linux und macOS werden Zeitzoneninformationen verwendet, die in der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone)verfügbar sind. Wenn die Registrierung oder die Bibliothek nicht über die Informationen für die gewünschte Zeitzone verfügt, können Sie eine bestimmte Zeitzone erstellen, indem Sie entweder eine der über Ladungen der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> -Methode aufrufen oder aufrufen <xref:System.TimeZoneInfo.FromSerializedString%2A> , um ein <xref:System.TimeZoneInfo> -Objekt zu deserialisieren, das stellt die erforderliche Zeitzone dar. Zeitzonen, die von diesen Methoden aufrufen erstellt werden, sind jedoch keine System definierte Zeit und können nicht mithilfe der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode abgerufen werden. Der Zugriff auf diese benutzerdefinierten Zeitzonen ist nur über den Objekt Verweis möglich, <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> der <xref:System.TimeZoneInfo.FromSerializedString%2A> durch den-oder-Methodenaufruf zurückgegeben wird.  
  
Diese Methode gibt für jeden <xref:System.TimeZoneInfo> Methoden Aufrufvorgang eine neue Instanz zurück. zwischengespeicherte Objekte werden nicht zurückgegeben. Dies kann sich auf die Leistung von Anwendungen auswirken `FindSystemTimeZoneById` , die die Methode wiederholt mit demselben Bezeichner aufzurufen.   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode verwendet, um die Standard Zeitzone von Tokio abzurufen. Dieses <xref:System.TimeZoneInfo> Objekt wird dann verwendet, um die lokale Zeit in die Zeit in Tokio zu konvertieren und um zu bestimmen, ob es sich um die Tokyo-Standard Zeit oder die Sommerzeit in Tokio handelt.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Das System verfügt nicht über ausreichend Arbeitsspeicher, um Informationen zur Zeitzone zu speichern.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der von <paramref name="id" /> angegebene Zeitzonenbezeichner wurde nicht gefunden. Das bedeutet, dass kein Zeitzonenbezeichner vorhanden ist, dessen Name <paramref name="id" /> entspricht, oder dass der Bezeichner vorhanden ist, jedoch keine Zeitzonendaten enthält.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="~/docs/standard/datetime/instantiate-time-zone-info.md">Gewusst wie: Instanziieren eines TimeZoneInfo-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Die Zeichenfolgendarstellung des serialisierten <see cref="T:System.TimeZoneInfo" />-Objekts.</param>
        <summary>Deserialisiert eine Zeichenfolge, um ein ursprüngliches <see cref="T:System.TimeZoneInfo" />-Objekt erneut zu erstellen.</summary>
        <returns>Das ursprüngliche serialisierte Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt auch eine Alternative zum Bereitstellen des gesamten Codes, der zum Erstellen einer Zeitzone erforderlich ist, die in der Registrierung unter Windows oder in der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und macOS nicht gefunden wurde. Sie können eine benutzerdefinierte Zeitzone definieren und entweder die <xref:System.TimeZoneInfo.ToSerializedString%2A> -Methode in einer eigenständigen ausführbaren Datei verwenden oder das Setup Programm einer Anwendung verwenden, um die Zeitzone als Zeichenfolge zu speichern. Die Anwendung kann diese Zeichenfolge dann von ihrem Speicherort abrufen und mithilfe der <xref:System.TimeZoneInfo.FromSerializedString%2A> -Methode instanziieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird versucht, die Zeitzone "Antarktis/Süd-Pol" aus dem lokalen System abzurufen. Wenn er fehlschlägt, versucht der Code, Informationen über die Zeitzone aus einer Textdatei im Anwendungsverzeichnis abzurufen. Wenn dieser Versuch fehlschlägt, erstellt der Code die Zeitzone und schreibt Informationen über die Zeitzone in die Textdatei.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="source" />-Parameter ist <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="source" />-Parameter ist eine NULL-Zeichenfolge.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Der Quellparameter kann nicht zurück in ein <see cref="T:System.TimeZoneInfo" />-Objekt deserialisiert werden.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="~/docs/standard/datetime/restore-time-zones-from-an-embedded-resource.md">Gewusst wie: Wiederherstellen von Zeitzonen aus einer eingebetteten Ressource</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft ein Array von <see cref="T:System.TimeZoneInfo.AdjustmentRule" />-Objekten ab, die auf das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt angewendet werden.</summary>
        <returns>Ein Array von Objekten für diese Zeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> -Methode ruft ein Array von <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> -Objekten ab. Jedes-Objekt im-Array definiert das effektive Start-und Enddatum dieser Zeit Zonen Anpassung sowie deren Delta (der genaue Betrag, um den die Zeit die Änderung bewirkt). Außerdem geben zwei Eigenschaften Objekte zurück <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> , die definieren, wann die einzelnen jährlichen Übergänge zu und von Normalzeit stattfinden.  
  
 Wenn eine Zeitzone über mehrere Anpassungsregeln verfügt, werden Sie normalerweise von der frühesten (bei Index 0) bis zum aktuellen ( <xref:System.Array.Length%2A> bei Index-1) geordnet.  
  
 Wenn eine Zeitzone keine Anpassungsregeln besitzt, gibt die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode ein leeres Array zurück (ein Array, <xref:System.Array.Length%2A> dessen gleich NULL ist).  
  
 Alle Änderungen an den Elementen des Arrays, die von der <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> -Methode zurückgegeben werden, werden nicht in den Anpassungsregeln berücksichtigt, die zu einer bestimmten Zeitzone gehören. Wenn Sie die Anpassungsregeln einer Zeitzone ändern möchten (z. b. um Ihren Verlaufs Übergang zur und von der Sommerzeit widerzuspiegeln), müssen Sie eine neue Zeitzone mit den entsprechenden Anpassungsregeln erstellen, anstatt die vorhandene zu ändern.  
  
   
  
## Examples  
 Im folgenden Beispiel werden alle Zeitzonen abgerufen, die auf dem lokalen System definiert sind, und es werden vollständige Informationen zu ihren Anpassungsregeln in der-Konsole angezeigt.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Das System verfügt nicht über ausreichend Arbeitsspeicher, um im Arbeitsspeicher eine Kopie der Anpassungsregeln zu erstellen.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datum und eine Uhrzeit.</param>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
        <returns>Ein Array von Objekten, das mögliche UTC-Offsets (Coordinated Universal Time) darstellt, denen ein bestimmter Datums- und Uhrzeitwert zugeordnet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das genaue Verhalten dieser Methode hängt von der Beziehung zwischen der <xref:System.DateTime.Kind%2A> -Eigenschaft und dem <xref:System.TimeZoneInfo> -Objekt ab, wie in der folgenden Tabelle gezeigt.  
  
|TimeZoneInfo-Objekttyp|Kind-Eigenschafts Wert|Verhalten|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Gibt mehrdeutige Zeit Offsets `dateTime`für zurück.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` in die Ortszeit und gibt dann mehrdeutige Zeit Offsets für diese Zeit zurück.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Beliebiger Wert.|Löst eine <xref:System.ArgumentException>aus.|  
|Eine beliebige andere Zeitzone.|<xref:System.DateTimeKind.Local> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` in die angegebene Zeitzone und bestimmt dann, ob diese Zeit mehrdeutig ist.|  
|Eine beliebige andere Zeitzone.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, `dateTime` ob in der angegebenen Zeitzone mehrdeutig ist.|  
  
 Die Reihenfolge <xref:System.TimeSpan> der Objekte in dem von dieser Methode zurückgegebenen Array ist nicht definiert. Sie können jedoch ermitteln, welches Element einen Offset von der Standardzeit der Zeitzone darstellt, indem Sie den Wert mit der- <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft der Zeitzone vergleichen. Weitere Informationen zum Zuordnen einer mehrdeutigen Zeit zur Standardzeit einer Zeitzone finden Sie unter Gewusst [wie: Auflösen von mehrdeutigen Zeiten](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Methode mit `ShowPossibleUtcTimes` dem Namen definiert <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> , die die-Methode verwendet, um der möglichen entsprechenden UTC-Zeit (koordinierte Weltzeit) eine mehrdeutige Zeit zuzuordnen.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Die-Methode kann dann mithilfe von Code wie dem folgenden aufgerufen werden:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> ist keine mehrdeutige Zeit.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="~/docs/standard/datetime/resolve-ambiguous-times.md">Gewusst wie: Auflösen von mehrdeutigen Zeiten</related>
        <related type="Article" href="~/docs/standard/datetime/let-users-resolve-ambiguous-times.md">Gewusst wie: Auflösen mehrdeutiger Zeiten durch den Benutzer</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datum und eine Uhrzeit.</param>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
        <returns>Ein Array von Objekten, das mögliche UTC-Offsets (Coordinated Universal Time) darstellt, denen ein bestimmter Datums- und Uhrzeitwert zugeordnet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das genaue Verhalten dieser Methode hängt von der Beziehung zwischen der <xref:System.DateTimeOffset.Offset%2A> -Eigenschaft `dateTimeOffset` des-Parameters und <xref:System.TimeZoneInfo> dem-Objekt ab. Wenn der Wert der <xref:System.DateTimeOffset.Offset%2A> -Eigenschaft der möglichen Offsets der aktuellen Zeitzone von der koordinierten Weltzeit (UTC) für dieses Datum und die Uhrzeit entspricht, gibt die Methode die möglichen Offsets zurück. Andernfalls wird es in `dateTimeOffset` die Uhrzeit in der aktuellen Zeitzone konvertiert und dann die möglichen Offsets dieses Datums und der Uhrzeit zurückgegeben.  
  
 Die Reihenfolge <xref:System.TimeSpan> der Objekte in dem von dieser Methode zurückgegebenen Array ist nicht definiert. Sie können jedoch ermitteln, welches Element einen Offset von der Standardzeit der Zeitzone darstellt, indem Sie den Wert mit der- <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft der Zeitzone vergleichen. Weitere Informationen zum Zuordnen einer mehrdeutigen Zeit zur Standardzeit einer Zeitzone finden Sie unter Gewusst [wie: Auflösen von mehrdeutigen Zeiten](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> ist keine mehrdeutige Zeit.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="~/docs/standard/datetime/resolve-ambiguous-times.md">Gewusst wie: Auflösen von mehrdeutigen Zeiten</related>
        <related type="Article" href="~/docs/standard/datetime/let-users-resolve-ambiguous-times.md">Gewusst wie: Auflösen mehrdeutiger Zeiten durch den Benutzer</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird als Hashfunktion für Hashalgorithmen und Datenstrukturen wie Hashtabellen verwendet.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die als Hash für dieses <see cref="T:System.TimeZoneInfo" />-Objekt verwendet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Details <xref:System.TimeZoneInfo.GetHashCode%2A> zur-Methode finden <xref:System.Object.GetHashCode%2A>Sie unter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine sortierte Auflistung aller Zeitzonen zurück, zu denen im lokalen System Informationen verfügbar sind.</summary>
        <returns>Eine schreibgeschützte Auflistung von <see cref="T:System.TimeZoneInfo" />-Objekten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> -Methode ruft alle verfügbaren Zeitzoneninformationen aus den unter Schlüsseln des HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones Key der Registrierung auf Windows-Systemen und aus der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux ab. macOS. Wenn die Werte für bestimmte Zeichen folgen Eigenschaften einzelner <xref:System.TimeZoneInfo> Objekte nicht erfolgreich abgerufen und analysiert werden können, legt diese Methode ihren Wert auf eine leere Zeichenfolge ("") fest.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> -Methode gibt eine Auflistung <xref:System.TimeZoneInfo> von-Objekten nur für Zeitzonen zurück, die in der Windows-Registrierung oder der ICU-Bibliothek definiert sind. Es schließt keine Zeitzonen ein, die mit den über Ladungen der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> -Methode erstellt wurden. Auf diese kann nur über den Objekt Verweis zugegriffen werden, der von der Zeit Zonen Erstellungs Methode zurückgegeben wurde.  
  
 Die von dieser Methode zurückgegebene Auflistung wird anhand des UTC-Offsets und bei Zeitzonen, die denselben UTC-Offset aufweisen, nach dem anzeigen Amen unter Verwendung der aktuellen Kultur sortiert. Weitere Informationen zum Anzeigen Amen finden <xref:System.TimeZoneInfo.DisplayName%2A>Sie unter.  
  
 Das <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> von dieser Methode zurückgegebene-Objekt <xref:System.Collections.Generic.IEnumerable%601> unterstützt die-Schnittstelle. Dies bedeutet, dass Sie `foreach` mit den C#-Anweisungen `For Each…Next` (in) oder (in Visual Basic) durchlaufen werden kann. Jede Iterations Schleife stellt das nächste <xref:System.TimeZoneInfo> -Objekt in der Auflistung bereit.  
  
 Die Auflistung von <xref:System.TimeZoneInfo> -Objekten stellt Zeitzonen dar, die auf dem lokalen Computer definiert sind. Sie stellt nicht notwendigerweise vollständige Informationen zu allen Zeitzonen in allen Zeiträume bereit. Wenn für Ihre Anwendung Zeitzonen nicht auf dem lokalen Computer gefunden werden müssen, können Sie benutzerdefinierte Zeitzonen mithilfe der über Ladungen <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> der-Methode erstellen. Weitere Informationen finden Sie unter Vorgehens [Weise: Erstellen von Zeitzonen ohne Anpassungsregeln](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) und Gewusst [wie: Erstellen von Zeitzonen mit Anpassungsregeln](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Sie können auch bestimmen, ob eine einzelne Zeitzone auf dem lokalen Computer definiert ist, indem Sie <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> die-Methode aufrufen und den Bezeichner der Zeitzone bereitstellen, die Sie als Parameter abrufen möchten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Auflistung von Zeit Zonen Objekten, die die auf einem Computer definierten Zeitzonen darstellen, abgerufen und Informationen zu diesen in eine Textdatei geschrieben.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Es ist nicht ausreichend Arbeitsspeicher vorhanden, um alle Zeitzoneninformationen zu speichern.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die Berechtigung zum Lesen aus den Registrierungsschlüsseln, die Zeitzoneninformationen enthalten.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Zeit, für die der Offset bestimmt werden soll.</param>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
        <returns>Ein Objekt, das den Zeitunterschied zwischen den beiden Zeitzonen angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeitspanne umfasst alle Unterschiede aufgrund der Anwendung von Anpassungsregeln auf die aktuelle Zeitzone. Sie unterscheidet sich <xref:System.TimeZoneInfo.BaseUtcOffset%2A> von der-Eigenschaft, die den Unterschied zwischen koordinierter Weltzeit (UTC) und der Standardzeit der Zeitzone zurückgibt und daher keine Anpassungsregeln berücksichtigt.  
  
 Wenn die `dateTime` -Eigenschaft <xref:System.DateTime.Kind%2A> des-Parameters nicht dem Zeit Zonen Objekt entspricht, führt diese Methode die erforderliche Konvertierung aus, bevor ein Ergebnis zurückgegeben wird. Dies kann z. b. der Fall <xref:System.DateTime.Kind%2A> sein, <xref:System.DateTimeKind.Local?displayProperty=nameWithType> wenn die-Eigenschaft ist, aber das Zeit Zonen Objekt nicht die lokale Zeitzone ist. Wenn `dateTime` mehrdeutig ist oder die konvertierte Zeit mehrdeutig ist, interpretiert diese Methode die mehrdeutige Zeit als Standardzeit. Wenn `dateTime` ungültig ist, gibt diese Methode ein <xref:System.TimeSpan> -Objekt zurück, das den Unterschied zwischen UTC und der Standardzeit der Zeitzone widerspiegelt.  
  
 Die <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> -Methode ähnelt <xref:System.TimeZone.GetUtcOffset%2A> der-Methode der-Methode <xref:System.TimeZone> der-Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> der-Methode mit unterschiedlichen Zeitzonen und Datums Werten, die unterschiedliche <xref:System.DateTime.Kind%2A> Eigenschaftswerte aufweisen.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Zeit, für die der Offset bestimmt werden soll.</param>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
        <returns>Ein Objekt, das den Zeitunterschied zwischen Coordinated Universal Time (UTC) und der aktuellen Zeitzone angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeitspanne umfasst alle Unterschiede aufgrund der Anwendung von Anpassungsregeln auf die aktuelle Zeitzone. Sie unterscheidet sich <xref:System.TimeZoneInfo.BaseUtcOffset%2A> von der-Eigenschaft, die den Unterschied zwischen koordinierter Weltzeit (UTC) und der Standardzeit der Zeitzone zurückgibt und daher keine Anpassungsregeln berücksichtigt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="other">Ein zweites Objekt, das mit dem aktuellen <see cref="T:System.TimeZoneInfo" />-Objekt verglichen werden soll.</param>
        <summary>Gibt an, ob das aktuelle Objekt und ein weiteres <see cref="T:System.TimeZoneInfo" />-Objekt die gleichen Anpassungsregeln aufweisen.</summary>
        <returns><see langword="true" />, wenn die zwei Zeitzonen identische Anpassungsregeln und einen identischen Basisoffset aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wie die <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> -Methode gibt <xref:System.TimeZoneInfo.HasSameRules%2A> die-Methode an, ob zwei Zeitzonen denselben Basis Offset (wie durch die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> -Eigenschaft definiert) und die gleichen Anpassungsregeln aufweisen. Im Gegensatz <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> zur- <xref:System.TimeZoneInfo.HasSameRules%2A> Methode vergleicht keine Zeit Zonen Bezeichner (wie durch die <xref:System.TimeZoneInfo.Id%2A> -Eigenschaft definiert).  
  
   
  
## Examples  
 In der Regel haben einige in der Registrierung in Windows definierte Zeitzonen und die [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und macOS denselben Offset wie koordinierte Weltzeit (UTC) und dieselben Anpassungsregeln. Im folgenden Beispiel wird eine Liste dieser Zeitzonen in der Konsole angezeigt.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="other" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeitzonenbezeichner ab.</summary>
        <value>Der Zeitzonenbezeichner.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zeit Zonen Bezeichner ist eine Schlüssel Zeichenfolge, die eine bestimmte Zeitzone eindeutig identifiziert. Auf Windows-Systemen entspricht dies den unter Schlüsseln des Zweigs HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zone der Registrierung auf Windows-Systemen und der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und macOS. Sie kann als Parameter an die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode übergeben werden, um ein <xref:System.TimeZoneInfo> -Objekt zu instanziieren, das eine bestimmte Zeitzone darstellt.  
  
> [!IMPORTANT]
>  Obwohl ein Schlüssel Name in der Windows-Registrierung maximal 255 Zeichen umfassen kann, empfiehlt es sich, einen Bezeichner, den Sie einer benutzerdefinierten Zeitzone zuweisen, höchstens 32 Zeichen zu erhalten. Wenn der Bezeichner länger ist, umso größer ist die Wahrscheinlichkeit, dass beim Abrufen ein falscher Schlüssel Name angegeben wird.  
  
 Der Wert <xref:System.TimeZoneInfo.Id%2A> der-Eigenschaft ist in der Regel, aber nicht immer, identisch mit <xref:System.TimeZoneInfo.StandardName%2A> der-Eigenschaft. Der Bezeichner der koordinierten universellen Zeitzone ist UTC.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Bezeichner der einzelnen Zeitzonen aufgelistet, die auf dem lokalen Computer definiert sind.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
        <returns><see langword="true" />, wenn der <paramref name="dateTime" />-Parameter mehrdeutig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine mehrdeutige Zeit liegt innerhalb eines Bereichs von Zeiten für die aktuelle Zeitzone. Dies bedeutet, dass es sich entweder um eine Standardzeit oder eine Zeit handelt, die sich aus der Anwendung einer Anpassungs Regel ergibt. In der Regel ist das Ergebnis mehrdeutiger Zeiten, wenn die Uhr so eingestellt ist, dass Sie von der Sommerzeit zur Standardzeit zurückkehrt Eine Abbildung finden Sie im Beispiel Abschnitt.  
  
 Koordinierte Weltzeit (UTC) hat keine mehrdeutigen Zeiten; keines der Zeitzonen unterstützt die Sommerzeit. Daher haben diese Zeitzonen keine Anpassungsregeln, und Aufrufe der <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> -Methode geben immer zurück. `false`  
  
 Bei Zeitzonen, die die Sommerzeit beobachten, hängt das genaue Verhalten dieser Methode von der Beziehung zwischen der <xref:System.DateTime.Kind%2A> -Eigenschaft und dem <xref:System.TimeZoneInfo> -Objekt ab, wie in der folgenden Tabelle gezeigt.  
  
|TimeZoneInfo-Objekttyp|Kind-Eigenschafts Wert|Verhalten|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, ob `dateTime` der-Parameter mehrdeutig ist.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` in die Ortszeit und bestimmt dann, ob diese Zeit mehrdeutig ist.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Gibt `false` zurück.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Wenn `dateTime` mehrdeutig ist, geht davon aus, dass es sich um eine Standardzeit handelt, `false`konvertiert sie in UTC und gibt zurück.|  
|Eine beliebige andere Zeitzone.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` in die Uhrzeit in der angegebenen Zeitzone und bestimmt dann, ob diese Zeit mehrdeutig ist.|  
|Eine beliebige andere Zeitzone.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, `dateTime` ob mehrdeutig ist.|  
  
   
  
## Examples  
 In der Pacific Time Zone endet die Sommerzeit um 2:00 Uhr am 4. November 2007. Im folgenden Beispiel wird die Zeit in einminütigen Intervallen von 12:59 Uhr überschritten. am 4. November 2007, bis 2:01 Uhr am 4. November 2007 auf die <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> -Methode <xref:System.TimeZoneInfo> eines-Objekts, das die Pacific Time Zone darstellt. Die Konsolenausgabe gibt an, dass alle Zeiten von 1:00 Uhr am 4. November 2007, bis 1:59 Uhr am 4. November 2007 sind mehrdeutig.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Werts ist <see cref="F:System.DateTimeKind.Local" /> und <paramref name="dateTime" /> ist eine ungültige Zeit.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datum und eine Uhrzeit.</param>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
        <returns><see langword="true" />, wenn der <paramref name="dateTimeOffset" />-Parameter in der aktuellen Zeitzone mehrdeutig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine mehrdeutige Zeit liegt innerhalb eines Bereichs von Zeiten für die aktuelle Zeitzone. Dies bedeutet, dass es sich entweder um eine Standardzeit oder eine Zeit handelt, die sich aus der Anwendung einer Anpassungs Regel ergibt. In der Regel ist das Ergebnis mehrdeutiger Zeiten, wenn die Uhr so eingestellt ist, dass Sie von der Sommerzeit zur Standardzeit zurückkehrt Koordinierte Weltzeit (UTC) hat keine mehrdeutigen Zeiten; keines der Zeitzonen unterstützt die Sommerzeit.  
  
 Das genaue Verhalten der-Methode hängt von der Beziehung zwischen der <xref:System.DateTimeOffset.Offset%2A> -Eigenschaft `dateTimeOffset` des-Parameters und der aktuellen Zeitzone ab. Wenn der Wert der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft eine mögliche Abweichung von der UTC-Zeit der aktuellen Zeitzone ist, bestimmt die Methode, ob dieses Datum und die Uhrzeit mehrdeutig sind. Andernfalls konvertiert `dateTimeOffset` Sie in die Uhrzeit in der aktuellen Zeitzone und bestimmt dann, ob dieses Datum und die Uhrzeit mehrdeutig sind.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="dateTime" />-Parameter eine Sommerzeit darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert von <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> wird von der Beziehung zwischen der durch das <xref:System.TimeZoneInfo> `dateTime` -Objekt dargestellten Zeitzone und der <xref:System.DateTime.Kind%2A> -Eigenschaft des-Parameters beeinflusst, wie in der folgenden Tabelle gezeigt.  
  
|TimeZoneInfo-Objekt|DateTime. Kind-Eigenschaft|Ergebnis|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Bestimmt, `dateTime` ob die Sommerzeit ist.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Konvertiert `dateTime` von der koordinierten Weltzeit (UTC) in die Ortszeit und bestimmt, ob es sich um Sommerzeit handelt.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Geht davon `dateTime` aus, dass die Ortszeit darstellt und bestimmt, ob es sich um Sommerzeit handelt.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`oder `DateTimeKind.Utc`|Gibt `false` zurück (UTC unterstützt keine Sommerzeit).|  
|Ein beliebiges anderes <xref:System.TimeZoneInfo> -Objekt.|`DateTimeKind.Local`|Konvertiert die lokale Zeit in die entsprechende Zeit des <xref:System.TimeZoneInfo> -Objekts und bestimmt dann, ob letztere die Sommerzeit ist.|  
|Ein beliebiges anderes <xref:System.TimeZoneInfo> -Objekt.|`DateTimeKind.Utc`|Konvertiert UTC in die entsprechende Zeit des <xref:System.TimeZoneInfo> -Objekts und bestimmt dann, ob letztere die Sommerzeit ist.|  
|Ein beliebiges anderes <xref:System.TimeZoneInfo> -Objekt.|`DateTimeKind.Unspecified`|Bestimmt, `dateTime` ob die Sommerzeit ist.|  
  
 Wenn die Zeitzone, die durch das <xref:System.TimeZoneInfo> -Objekt dargestellt wird, keine Sommerzeit unterstützt, gibt `false`die Methode immer zurück. Eine Reihe von Zeitzonen, einschließlich <xref:System.TimeZoneInfo.Utc%2A>, beobachten die Sommerzeit nicht.  Um zu ermitteln, ob eine Zeitzone die Sommerzeit unterstützt, rufen Sie den <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Wert der zugehörigen-Eigenschaft ab.  
  
 Wenn der `dateTime` -Parameter eine mehrdeutige Zeit in der Zeitzone des aktuellen-Objekts angibt <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> , interpretiert `dateTime` die Methode als Standardzeit `false` und gibt <xref:System.DateTime.Kind%2A> zurück, <xref:System.DateTimeKind.Local?displayProperty=nameWithType> wenn die-Eigenschaft oder  <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> ist. . Wenn die <xref:System.DateTime.Kind%2A> -Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>ist, wählt diese Methode die richtige mehrdeutige Zeit aus und gibt an, ob es sich um eine Sommerzeit handelt.  
  
 Da die <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> Methode für eine `false` mehrdeutige Datums-und uhrzeitanzeit (d. h. ein Datum und eine Uhrzeit, die entweder eine Standardzeit oder eine Sommerzeit in einer bestimmten Zeitzone darstellen kann) <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> zurückgeben kann, kann die Methode mit dem <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode, um zu bestimmen, ob eine Zeit eine Sommerzeit sein kann. Da eine mehrdeutige Zeit sowohl eine Sommerzeit als auch eine Standardzeit sein kann, kann die <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> -Methode zuerst aufgerufen werden, um zu bestimmen, ob ein Datum und eine Uhrzeit eine Sommerzeit sein können. Wenn die-Methode `false`zurückgibt <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> , kann die-Methode aufgerufen werden, <xref:System.DateTime> um zu bestimmen, ob der Wert eine Sommerzeit ist. Dieses Verfahren wird im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Wenn der `dateTime` -Parameter eine ungültige Zeit angibt, löst der Methoden <xref:System.ArgumentException> Aufruf eine aus, `dateTime` wenn der Wert <xref:System.DateTime.Kind%2A> der- <xref:System.DateTimeKind.Local?displayProperty=nameWithType>Eigenschaft des-Parameters ist `false`. andernfalls gibt die Methode zurück.  
  
 Ruft die <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> -Methode auf, um zu bestimmen, ob der <xref:System.TimeZoneInfo.StandardName%2A> Wert einer Zeitzone <xref:System.TimeZoneInfo.DaylightName%2A> oder deren Wert beim Anzeigen des Zeit Zonen namens verwendet werden soll. Eine Abbildung finden Sie im Beispiel Abschnitt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Methode mit `DisplayDateWithTimeZoneName` dem Namen definiert <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> , die die-Methode verwendet, um zu bestimmen, ob der Name der Standardzeit und der Sommerzeit einer Zeitzone angezeigt werden soll.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Werts ist <see cref="F:System.DateTimeKind.Local" /> und <paramref name="dateTime" /> ist eine ungültige Zeit.</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="dateTimeOffset" />-Parameter eine Sommerzeit darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert von <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> ist von der Beziehung zwischen der durch das <xref:System.TimeZoneInfo> `dateTimeOffset` -Objekt dargestellten Zeitzone und der <xref:System.DateTimeOffset.Offset%2A> -Eigenschaft des-Parameters betroffen. Wenn `dateTimeOffset` nicht dem Offset der aktuellen Zeitzone von der koordinierten Weltzeit (UTC) entspricht, konvertiert die-Methode diese Zeit in die Zeit in der aktuellen Zeitzone. Anschließend bestimmt er, ob dieses Datum und die Uhrzeit eine Sommerzeit sind.  
  
 Wenn die Zeitzone, die durch das <xref:System.TimeZoneInfo> -Objekt dargestellt wird, keine Sommerzeit unterstützt, gibt `false`die Methode immer zurück. Um zu ermitteln, ob eine Zeitzone die Sommerzeit unterstützt, rufen Sie den <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Wert der zugehörigen-Eigenschaft ab.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein bestimmtes Datum und eine Zeit ungültig sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="dateTime" /> ungültig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein ungültiger Zeitraum liegt innerhalb eines Zeitraums für die aktuelle Zeitzone, der aufgrund der Anwendung einer Anpassungs Regel nicht der koordinierten Weltzeit (UTC) zugeordnet werden kann. In der Regel treten ungültige Zeiten auf, wenn die Zeit für die Sommerzeit fortgesetzt wird. Eine Abbildung finden Sie im Beispiel Abschnitt.  
  
 Der Wert der <xref:System.DateTime.Kind%2A> -Eigenschaft `dateTime` des-Parameters wirkt `dateTime` sich darauf aus, ob eine ungültige Uhrzeit darstellt, wie in der folgenden Tabelle gezeigt.  
  
|DateTime. Kind-Eigenschaft|TimeZoneInfo-Objekt (falls zutreffend)|Verhalten|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Bestimmt, ob die Zeit ungültig ist.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>oder eine nicht lokale Zeitzone.|Konvertiert `dateTime` in die Uhrzeit <xref:System.TimeZoneInfo> des-Objekts und gibt `false`zurück.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Nicht zutreffend.|`dateTime` Geht <xref:System.TimeZoneInfo>  von der Zeit des-Objekts aus und bestimmt, ob es ungültig ist.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nicht zutreffend.|Gibt `false` zurück.|  
  
   
  
## Examples  
 In der Pacific Time Zone beginnt die Sommerzeit um 2:00 Uhr. am 2. April 2006. Der folgende Code übergibt die Zeit in einminütigen Intervallen von 1:59 Uhr. am 2. April 2006, bis 3:01 Uhr am 2. April 2006 an die <xref:System.TimeZoneInfo.IsInvalidTime%2A> -Methode <xref:System.TimeZoneInfo> eines-Objekts, das die Pacific Time Zone darstellt. Die Konsolenausgabe gibt an, dass alle Zeiten von 2:00 Uhr am 2. April 2006, bis 2:59 Uhr am 2. April 2006 sind ungültig.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.TimeZoneInfo" />-Objekt ab, das die lokale Zeitzone darstellt.</summary>
        <value>Ein Objekt, das die lokale Zeitzone darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die lokale Zeitzone ist die Zeitzone auf dem Computer, in dem der Code ausgeführt wird.  
  
> [!IMPORTANT]
>  Sie sollten stets über die <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> -Eigenschaft auf die lokale Zeitzone zugreifen, anstatt die lokale Zeitzone einer <xref:System.TimeZoneInfo> -Objektvariablen zuzuweisen. Dadurch wird verhindert <xref:System.TimeZoneInfo> , dass die Objekt Variable durch einen Aufrufder <xref:System.TimeZoneInfo.ClearCachedData%2A> -Methode ungültig gemacht wird.  
  
 Auf Windows-Systemen gibt <xref:System.TimeZoneInfo> das von der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> -Eigenschaft zurückgegebene-Objekt die Einstellung des Kontrollkästchens **automatisch an Sommerzeit anpassen** in der System Steuerungsanwendung für **Datum und Uhrzeit** an. Wenn das Kontrollkästchen deaktiviert ist, enthält die zwischengespeicherte Kopie der lokalen Zeitzone keine Sommerzeit Informationen. Dies bedeutet Folgendes:  
  
-   Die- <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode der lokalen Zeitzone gibt ein Array zurück, dessen Länge 0 (null) ist.  
  
-   Die- <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft der lokalen Zeitzone gibt `false`zurück.  
  
-   Die lokale Zeitzone weist keine mehrdeutigen oder ungültigen Zeiten auf (alle <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> Aufrufe <xref:System.TimeZoneInfo.IsInvalidTime%2A> von `false`oder geben zurück).  
  
-   Alle Aufrufe von <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> mit einzelnen lokalen Zeiten geben "false" zurück.  
  
 Dies ist jedoch nicht der Fall, wenn ein Verweis auf die lokale Zeitzone mithilfe der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode abgerufen wird.  
  
 Die <xref:System.TimeZoneInfo.Local%2A> -Eigenschaft entspricht der <xref:System.TimeZone.CurrentTimeZone%2A> -Eigenschaft der <xref:System.TimeZone> -Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.TimeZoneInfo> -Objekt abgerufen, das die lokale Zeitzone darstellt und den anzeigen Amen, den Standardzeit Namen und den Namen der Sommerzeit ausgibt.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/access-utc-and-local.md">Gewusst wie: Zugreifen auf die vordefinierte UTC und lokale Zeitzonenobjekte</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Anzeigenamen für die Standardzeit der Zeitzone ab.</summary>
        <value>Der Name der Normalzeit der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeige Name wird basierend auf der mit dem Windows-Betriebssystem installierten Kultur lokalisiert.  
  
 Die <xref:System.TimeZoneInfo.StandardName%2A> -Eigenschaft ist identisch mit <xref:System.TimeZone.StandardName%2A> der-Eigenschaft <xref:System.TimeZone> der-Klasse.  
  
 Wenn die Sprache des Betriebssystems Englisch ist, ist der Wert <xref:System.TimeZoneInfo.StandardName%2A> der Eigenschaft in der Regel, aber nicht immer, identisch mit dem <xref:System.TimeZoneInfo.Id%2A> Wert der Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Methode mit `DisplayDateWithTimeZoneName` dem Namen definiert <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> , die die-Methode verwendet, um zu bestimmen, ob der Name der Standardzeit und der Sommerzeit einer Zeitzone angezeigt werden soll.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Zeitzone über Sommerzeitregeln verfügt.</summary>
        <value><see langword="true" />, wenn die Zeitzone Sommerzeit unterstützt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert der <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> -Eigenschaft für die lokale Zeitzone, die von der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> -Eigenschaft zurückgegeben wird, gibt die Einstellung des Kontrollkästchens der Systemsteuerung für **Datum und Uhrzeit** an, das definiert, ob das System automatisch für Sommerzeit Zeit sparen. Wenn diese Option deaktiviert ist oder kein Kontrollkästchen für eine Zeitzone angezeigt wird, ist `false`der Wert dieser Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Auflistung aller Zeitzonen abgerufen, die auf einem lokalen System verfügbar sind, und die Namen der Benutzer angezeigt, die die Sommerzeit nicht unterstützen.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">Das Objekt, das den Rückruf initiiert hat. Die Funktionen für diesen Parameter sind derzeit nicht implementiert.</param>
        <summary>Wird ausgeführt, wenn die Deserialisierung eines Objekts abgeschlossen ist.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Das <see cref="T:System.TimeZoneInfo" />-Objekt enthält ungültige oder beschädigte Daten.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Das mit Daten aufzufüllende <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt.</param>
        <param name="context">Das Ziel dieser Serialisierung (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Füllt ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den für das Serialisieren des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts erforderlichen Daten.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="info" />-Parameter ist <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt in eine serialisierte Zeichenfolge.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen, die auf Zeitzonen basieren, die in der Regel nicht in der Registrierung von Windows-Systemen oder der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und macosdefiniert <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> sind, können die-Methode verwenden, um die <xref:System.TimeZoneInfo> notwendigen Zeitzonen als-Objekte zu instanziieren. Die Anwendung kann dann die <xref:System.TimeZoneInfo.ToSerializedString%2A> -Methode aufzurufen, um das Zeit Zonen Objekt in eine Zeichenfolge zu konvertieren.  
  
 Das <xref:System.TimeZoneInfo> Objekt sollte auch an einem Speicherort gespeichert werden, an dem die Anwendung es bei Bedarf abrufen kann. Folgende Standorte sind möglich:  
  
-   Die Registrierung auf Windows-Systemen.  
  
-   Eine Anwendungs Ressourcen Datei.  
  
-   Eine externe Datei, z. b. eine Textdatei.  
  
   
  
## Examples  
 Im folgenden Beispiel wird versucht, die Zeitzone "Antarktis/Süd-Pol" aus dem lokalen System abzurufen. Wenn er fehlschlägt, versucht der Code, Informationen über die Zeitzone aus einer Textdatei im Anwendungsverzeichnis abzurufen. Wenn dieser Versuch fehlschlägt, erstellt der Code die Zeitzone und schreibt Informationen darüber in die Textdatei.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="~/docs/standard/datetime/save-time-zones-to-an-embedded-resource.md">Gewusst wie: Speichern von Zeitzonen in einer eingebetteten Ressource</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Anzeigenamen des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts zurück.</summary>
        <returns>Der Wert der <see cref="P:System.TimeZoneInfo.DisplayName" />-Eigenschaft des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Zuweisen einer Auflistung, die <xref:System.TimeZoneInfo> -Objekte zu einem Listen Steuerelement wie <xref:System.Windows.Forms.ListBox> dem-Steuerelement enthält, ruft <xref:System.TimeZoneInfo.ToString%2A> das-Steuerelement automatisch die-Methode auf, um eine Zeichenfolge zu extrahieren, die jedes in der Liste darzugestellte Objekt beschreibt. Folglich ist es nicht erforderlich, eine aussagekräftige Beschreibung des Objekts als Zeichenfolge zu speichern, und der Benutzer muss diese Zeichenfolge nicht verwenden, um das Objekt aus der Auflistung zu extrahieren. Weitere Details finden Sie unter Gewusst [wie: Auflisten der auf einem Computer vorhandenen Zeitzonen](~/docs/standard/datetime/enumerate-time-zones.md) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.TimeZoneInfo" />-Objekt ab, das die UTC-Zone (Coordinated Universal Time) darstellt.</summary>
        <value>Ein Objekt, das die UTC (Coordinated Universal Time)-Zone darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist ein integriertes Objekt. Informationen zu diesem <xref:System.TimeZoneInfo> Objekt werden nicht aus der Registrierung auf Windows-Systemen und der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und macOS abgerufen.  
  
> [!IMPORTANT]
>  Sie sollten stets über die <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> -Eigenschaft auf die koordinierte Weltzeit (UTC)-Zone zugreifen, anstatt die UTC-Zeitzone einer <xref:System.TimeZoneInfo> -Objektvariablen zuzuweisen. Dadurch wird verhindert <xref:System.TimeZoneInfo> , dass die Objekt Variable durch einen Aufrufder <xref:System.TimeZoneInfo.ClearCachedData%2A> -Methode ungültig gemacht wird.  
  
 Koordinierte Weltzeit war früher als "Greenwich Mean Time" (GMT) bekannt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.TimeZoneInfo> -Objekt abgerufen, das die koordinierte Weltzeit (UTC) darstellt und den anzeigen Amen, den Standardzeit Namen und den Namen der Sommerzeit ausgibt.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/access-utc-and-local.md">Gewusst wie: Zugreifen auf die vordefinierte UTC und lokale Zeitzonenobjekte</related>
      </Docs>
    </Member>
  </Members>
</Type>
